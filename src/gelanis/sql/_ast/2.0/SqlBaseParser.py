# Generated from SqlBase.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00f1")
        buf.write("\u086e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\3\5")
        buf.write("\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00c5\n\6")
        buf.write("\3\6\3\6\3\6\5\6\u00ca\n\6\3\6\5\6\u00cd\n\6\3\6\3\6\3")
        buf.write("\6\5\6\u00d2\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u00df\n\6\3\6\3\6\5\6\u00e3\n\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\5\6\u00ea\n\6\3\6\3\6\3\6\5\6\u00ef\n\6\3\6\3")
        buf.write("\6\3\6\5\6\u00f4\n\6\3\6\5\6\u00f7\n\6\3\6\3\6\3\6\3\6")
        buf.write("\5\6\u00fd\n\6\3\6\3\6\3\6\5\6\u0102\n\6\3\6\5\6\u0105")
        buf.write("\n\6\3\6\5\6\u0108\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u0111\n\6\3\6\3\6\5\6\u0115\n\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\5\6\u011d\n\6\3\6\5\6\u0120\n\6\3\6\5\6\u0123\n\6\3")
        buf.write("\6\5\6\u0126\n\6\3\6\5\6\u0129\n\6\3\6\5\6\u012c\n\6\3")
        buf.write("\6\3\6\5\6\u0130\n\6\3\6\5\6\u0133\n\6\3\6\5\6\u0136\n")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u013d\n\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\5\6\u0147\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u014f\n\6\5\6\u0151\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\5\6\u0168\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0170\n\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0178\n\6\3\6\3\6\3\6\3\6")
        buf.write("\5\6\u017e\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u018b\n\6\3\6\6\6\u018e\n\6\r\6\16\6\u018f\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0199\n\6\3\6\6\6\u019c")
        buf.write("\n\6\r\6\16\6\u019d\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u01ae\n\6\3\6\3\6\3\6\7\6\u01b3")
        buf.write("\n\6\f\6\16\6\u01b6\13\6\3\6\5\6\u01b9\n\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u01c1\n\6\3\6\3\6\3\6\7\6\u01c6\n\6\f")
        buf.write("\6\16\6\u01c9\13\6\3\6\3\6\3\6\3\6\5\6\u01cf\n\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u01de")
        buf.write("\n\6\3\6\3\6\5\6\u01e2\n\6\3\6\3\6\3\6\3\6\5\6\u01e8\n")
        buf.write("\6\3\6\3\6\3\6\3\6\5\6\u01ee\n\6\3\6\5\6\u01f1\n\6\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u01f7\n\6\3\6\3\6\5\6\u01fb\n\6\3\6\3")
        buf.write("\6\5\6\u01ff\n\6\3\6\3\6\3\6\5\6\u0204\n\6\3\6\3\6\5\6")
        buf.write("\u0208\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0210\n\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u0219\n\6\3\6\3\6\3\6\5\6\u021e")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u0224\n\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u022a\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u0234\n")
        buf.write("\6\f\6\16\6\u0237\13\6\5\6\u0239\n\6\3\6\3\6\5\6\u023d")
        buf.write("\n\6\3\6\3\6\3\6\5\6\u0242\n\6\3\6\3\6\3\6\5\6\u0247\n")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u024e\n\6\3\6\5\6\u0251\n\6")
        buf.write("\3\6\5\6\u0254\n\6\3\6\3\6\3\6\3\6\5\6\u025a\n\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u0263\n\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u026b\n\6\3\6\3\6\3\6\3\6\5\6\u0271\n\6\3\6")
        buf.write("\3\6\5\6\u0275\n\6\3\6\3\6\5\6\u0279\n\6\3\6\3\6\5\6\u027d")
        buf.write("\n\6\5\6\u027f\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0288")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u028e\n\6\3\6\3\6\3\6\5\6\u0293")
        buf.write("\n\6\3\6\3\6\5\6\u0297\n\6\3\6\5\6\u029a\n\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\7\6\u02a1\n\6\f\6\16\6\u02a4\13\6\3\6\3\6\5")
        buf.write("\6\u02a8\n\6\3\6\3\6\3\6\5\6\u02ad\n\6\3\6\5\6\u02b0\n")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u02ba\n\6\3\6\3")
        buf.write("\6\3\6\5\6\u02bf\n\6\3\6\3\6\3\6\3\6\5\6\u02c5\n\6\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u02cb\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\7\6\u02d4\n\6\f\6\16\6\u02d7\13\6\3\6\3\6\3\6\7\6\u02dc")
        buf.write("\n\6\f\6\16\6\u02df\13\6\3\6\3\6\7\6\u02e3\n\6\f\6\16")
        buf.write("\6\u02e6\13\6\3\6\3\6\3\6\7\6\u02eb\n\6\f\6\16\6\u02ee")
        buf.write("\13\6\5\6\u02f0\n\6\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u02f8")
        buf.write("\n\7\3\7\3\7\5\7\u02fc\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0303")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0377\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u037f\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u0387\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0390\n\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0399\n\7\3\7\3\7\5\7\u039d")
        buf.write("\n\7\3\7\3\7\3\7\3\7\5\7\u03a3\n\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\5\7\u03af\n\7\3\b\3\b\5\b\u03b3\n")
        buf.write("\b\3\b\5\b\u03b6\n\b\3\b\3\b\3\b\3\b\5\b\u03bc\n\b\3\b")
        buf.write("\3\b\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u03c6\n\t\3\t\3\t\3\t")
        buf.write("\3\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u03d2\n\n\3\n\3\n\3\n")
        buf.write("\5\n\u03d7\n\n\3\13\3\13\3\13\3\f\5\f\u03dd\n\f\3\f\3")
        buf.write("\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u03e9\n\r\5\r\u03eb")
        buf.write("\n\r\3\r\3\r\3\r\5\r\u03f0\n\r\3\r\3\r\5\r\u03f4\n\r\5")
        buf.write("\r\u03f6\n\r\3\16\3\16\5\16\u03fa\n\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\7\17\u0401\n\17\f\17\16\17\u0404\13\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\5\20\u040b\n\20\3\21\3\21\3\21\3")
        buf.write("\21\3\21\5\21\u0412\n\21\3\22\3\22\3\22\3\22\5\22\u0418")
        buf.write("\n\22\7\22\u041a\n\22\f\22\16\22\u041d\13\22\3\23\3\23")
        buf.write("\3\23\3\23\7\23\u0423\n\23\f\23\16\23\u0426\13\23\3\24")
        buf.write("\3\24\5\24\u042a\n\24\3\24\3\24\3\24\3\24\3\25\3\25\3")
        buf.write("\25\3\26\3\26\3\26\3\26\7\26\u0437\n\26\f\26\16\26\u043a")
        buf.write("\13\26\3\26\3\26\3\27\3\27\5\27\u0440\n\27\3\27\5\27\u0443")
        buf.write("\n\27\3\30\3\30\3\30\7\30\u0448\n\30\f\30\16\30\u044b")
        buf.write("\13\30\3\30\5\30\u044e\n\30\3\31\3\31\3\31\3\31\7\31\u0454")
        buf.write("\n\31\f\31\16\31\u0457\13\31\3\31\3\31\3\32\3\32\3\32")
        buf.write("\3\32\7\32\u045f\n\32\f\32\16\32\u0462\13\32\3\32\3\32")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u046c\n\33\3\34\3")
        buf.write("\34\3\34\3\34\3\34\5\34\u0473\n\34\3\35\3\35\3\35\3\35")
        buf.write("\5\35\u0479\n\35\3\36\3\36\3\36\3\37\5\37\u047f\n\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\6\37\u0486\n\37\r\37\16\37\u0487")
        buf.write("\5\37\u048a\n\37\3 \3 \3 \3 \3 \7 \u0491\n \f \16 \u0494")
        buf.write("\13 \5 \u0496\n \3 \3 \3 \3 \3 \7 \u049d\n \f \16 \u04a0")
        buf.write("\13 \5 \u04a2\n \3 \3 \3 \3 \3 \7 \u04a9\n \f \16 \u04ac")
        buf.write("\13 \5 \u04ae\n \3 \3 \3 \3 \3 \7 \u04b5\n \f \16 \u04b8")
        buf.write("\13 \5 \u04ba\n \3 \5 \u04bd\n \3 \3 \5 \u04c1\n \3!\5")
        buf.write('!\u04c4\n!\3!\3!\3!\3"\3"\3"\3"\3"\3"\5"\u04cf')
        buf.write('\n"\3"\7"\u04d2\n"\f"\16"\u04d5\13"\3#\3#\3#\3')
        buf.write("#\3#\3#\3#\3#\5#\u04df\n#\3$\3$\5$\u04e3\n$\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\5%\u04ef\n%\3%\5%\u04f2\n%\3%\3%\5")
        buf.write("%\u04f6\n%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0500\n%\3%\3%\5")
        buf.write("%\u0504\n%\5%\u0506\n%\3%\5%\u0509\n%\3%\3%\5%\u050d\n")
        buf.write("%\3%\5%\u0510\n%\3%\3%\5%\u0514\n%\3%\3%\5%\u0518\n%\3")
        buf.write("%\3%\5%\u051c\n%\3%\3%\3%\5%\u0521\n%\3%\5%\u0524\n%\5")
        buf.write("%\u0526\n%\3%\7%\u0529\n%\f%\16%\u052c\13%\3%\3%\5%\u0530")
        buf.write("\n%\3%\5%\u0533\n%\3%\3%\5%\u0537\n%\3%\5%\u053a\n%\5")
        buf.write("%\u053c\n%\3&\3&\3&\3&\7&\u0542\n&\f&\16&\u0545\13&\3")
        buf.write("&\7&\u0548\n&\f&\16&\u054b\13&\3'\3'\3'\3'\3'\7'")
        buf.write("\u0552\n'\f'\16'\u0555\13'\3'\3'\3'\3'\3'\3'")
        buf.write("\3'\3'\3'\3'\7'\u0561\n'\f'\16'\u0564\13'\3'")
        buf.write("\3'\5'\u0568\n'\3(\3(\3(\3(\7(\u056e\n(\f(\16(\u0571")
        buf.write("\13(\5(\u0573\n(\3(\3(\5(\u0577\n(\3)\3)\3)\5)\u057c\n")
        buf.write(")\3)\3)\3)\3)\3)\7)\u0583\n)\f)\16)\u0586\13)\5)\u0588")
        buf.write("\n)\3)\3)\3)\5)\u058d\n)\3)\3)\3)\7)\u0592\n)\f)\16)\u0595")
        buf.write("\13)\5)\u0597\n)\3*\3*\3+\3+\7+\u059d\n+\f+\16+\u05a0")
        buf.write("\13+\3,\3,\5,\u05a4\n,\3,\3,\3,\5,\u05a9\n,\3,\3,\3,\3")
        buf.write(",\3,\5,\u05b0\n,\3-\5-\u05b3\n-\3-\3-\5-\u05b7\n-\3-\3")
        buf.write("-\3-\3-\5-\u05bd\n-\3-\3-\5-\u05c1\n-\3-\5-\u05c4\n-\3")
        buf.write("-\5-\u05c7\n-\3.\3.\3.\3.\3.\3.\3.\7.\u05d0\n.\f.\16.")
        buf.write("\u05d3\13.\3.\3.\5.\u05d7\n.\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u05ec\n/\5/\u05ee\n")
        buf.write("/\5/\u05f0\n/\3/\3/\3\60\3\60\3\60\3\60\3\61\3\61\3\61")
        buf.write("\7\61\u05fb\n\61\f\61\16\61\u05fe\13\61\3\62\3\62\3\62")
        buf.write("\3\62\7\62\u0604\n\62\f\62\16\62\u0607\13\62\3\62\3\62")
        buf.write("\3\63\3\63\5\63\u060d\n\63\3\64\3\64\3\64\3\64\7\64\u0613")
        buf.write("\n\64\f\64\16\64\u0616\13\64\3\64\3\64\3\65\3\65\3\65")
        buf.write("\5\65\u061d\n\65\3\66\3\66\5\66\u0621\n\66\3\66\5\66\u0624")
        buf.write("\n\66\3\66\5\66\u0627\n\66\3\66\3\66\3\66\3\66\5\66\u062d")
        buf.write("\n\66\3\66\5\66\u0630\n\66\3\66\5\66\u0633\n\66\3\66\3")
        buf.write("\66\3\66\3\66\5\66\u0639\n\66\3\66\5\66\u063c\n\66\3\66")
        buf.write("\5\66\u063f\n\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0647")
        buf.write("\n\66\f\66\16\66\u064a\13\66\5\66\u064c\n\66\3\66\3\66")
        buf.write("\5\66\u0650\n\66\3\67\3\67\3\67\3\67\7\67\u0656\n\67\f")
        buf.write("\67\16\67\u0659\13\67\3\67\5\67\u065c\n\67\3\67\3\67\5")
        buf.write("\67\u0660\n\67\5\67\u0662\n\67\38\38\38\38\38\38\38\5")
        buf.write("8\u066b\n8\38\38\38\38\38\38\38\38\38\38\58\u0677\n8\5")
        buf.write("8\u0679\n8\38\38\38\38\38\58\u0680\n8\38\38\38\38\38\5")
        buf.write("8\u0687\n8\38\38\38\38\58\u068d\n8\38\38\38\38\58\u0693")
        buf.write("\n8\58\u0695\n8\39\39\39\59\u069a\n9\39\39\3:\3:\5:\u06a0")
        buf.write("\n:\3:\3:\5:\u06a4\n:\5:\u06a6\n:\3;\3;\3;\7;\u06ab\n")
        buf.write(";\f;\16;\u06ae\13;\3<\3<\3=\3=\3=\3=\3=\3=\3=\3=\3=\5")
        buf.write("=\u06bb\n=\3=\3=\3=\3=\3=\3=\7=\u06c3\n=\f=\16=\u06c6")
        buf.write("\13=\3>\3>\5>\u06ca\n>\3?\5?\u06cd\n?\3?\3?\3?\3?\3?\3")
        buf.write("?\5?\u06d5\n?\3?\3?\3?\3?\3?\7?\u06dc\n?\f?\16?\u06df")
        buf.write("\13?\3?\3?\3?\5?\u06e4\n?\3?\3?\3?\3?\3?\3?\5?\u06ec\n")
        buf.write("?\3?\3?\3?\3?\5?\u06f2\n?\3?\5?\u06f5\n?\3@\3@\3@\3@\5")
        buf.write("@\u06fb\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\7@\u0710\n@\f@\16@\u0713\13@\3A\3A\3A\3")
        buf.write("A\6A\u0719\nA\rA\16A\u071a\3A\3A\5A\u071f\nA\3A\3A\3A")
        buf.write("\3A\3A\6A\u0726\nA\rA\16A\u0727\3A\3A\5A\u072c\nA\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\6")
        buf.write("A\u0741\nA\rA\16A\u0742\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A")
        buf.write("\u074e\nA\3A\3A\3A\7A\u0753\nA\fA\16A\u0756\13A\5A\u0758")
        buf.write("\nA\3A\3A\3A\5A\u075d\nA\3A\3A\3A\3A\3A\5A\u0764\nA\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\7A\u076e\nA\fA\16A\u0771\13A\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\6B\u077b\nB\rB\16B\u077c\5B\u077f")
        buf.write("\nB\3C\3C\3D\3D\3E\3E\3F\3F\3G\3G\7G\u078b\nG\fG\16G\u078e")
        buf.write("\13G\3H\3H\3H\3H\5H\u0794\nH\3I\5I\u0797\nI\3I\3I\5I\u079b")
        buf.write("\nI\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u07ac")
        buf.write("\nJ\3J\3J\5J\u07b0\nJ\3J\3J\3J\3J\3J\7J\u07b7\nJ\fJ\16")
        buf.write("J\u07ba\13J\3J\5J\u07bd\nJ\5J\u07bf\nJ\3K\3K\3K\7K\u07c4")
        buf.write("\nK\fK\16K\u07c7\13K\3L\3L\5L\u07cb\nL\3L\3L\3L\5L\u07d0")
        buf.write("\nL\3M\3M\3M\3M\3M\3N\3N\3N\3N\7N\u07db\nN\fN\16N\u07de")
        buf.write("\13N\3O\3O\3O\3O\3P\3P\3P\3P\3P\3P\3P\7P\u07eb\nP\fP\16")
        buf.write("P\u07ee\13P\3P\3P\3P\3P\3P\7P\u07f5\nP\fP\16P\u07f8\13")
        buf.write("P\5P\u07fa\nP\3P\3P\3P\3P\3P\7P\u0801\nP\fP\16P\u0804")
        buf.write("\13P\5P\u0806\nP\5P\u0808\nP\3P\5P\u080b\nP\3P\5P\u080e")
        buf.write("\nP\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5")
        buf.write("Q\u0820\nQ\3R\3R\3R\3R\3R\3R\3R\5R\u0829\nR\3S\3S\3S\7")
        buf.write("S\u082e\nS\fS\16S\u0831\13S\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\5T\u0841\nT\3U\3U\3U\5U\u0846\nU\3V\3")
        buf.write("V\3W\5W\u084b\nW\3W\3W\5W\u084f\nW\3W\3W\5W\u0853\nW\3")
        buf.write("W\3W\5W\u0857\nW\3W\3W\5W\u085b\nW\3W\3W\5W\u085f\nW\3")
        buf.write("W\3W\5W\u0863\nW\3W\3W\5W\u0867\nW\3W\5W\u086a\nW\3X\3")
        buf.write("X\3X\7\u02a2\u02d5\u02dd\u02e4\u02ec\6Bx~\u0080Y\2\4\6")
        buf.write('\b\n\f\16\20\22\24\26\30\32\34\36 "$&(*,.\60\62\64\66')
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\2\32\3\2\u00b7\u00b8\3\2JK\5\2ST\u009e")
        buf.write("\u009e\u00a4\u00a4\4\2\13\13\35\35\4\2**PP\4\2\u009e\u009e")
        buf.write("\u00a4\u00a4\4\2\f\f\u00c4\u00c4\3\2^`\3\2)*\3\2\16\17")
        buf.write('\3\2\u00e6\u00e7\3\2"#\4\2{|\u0081\u0081\3\2}\u0080\3')
        buf.write("\2{|\3\2\u00df\u00e0\3\2sz\3\2{\u0084\3\2\33\36\3\2&'")
        buf.write("\4\2??\u008b\u008b\4\2\27\27\u0089\u0089\3\2CD\t\2\n\61")
        buf.write("\64\64<]ar\u0080\u0080\u0085\u00db\u00dd\u00e0\2\u09e1")
        buf.write("\2\u00b0\3\2\2\2\4\u00b3\3\2\2\2\6\u00b6\3\2\2\2\b\u00b9")
        buf.write("\3\2\2\2\n\u02ef\3\2\2\2\f\u03ae\3\2\2\2\16\u03b0\3\2")
        buf.write("\2\2\20\u03bf\3\2\2\2\22\u03cb\3\2\2\2\24\u03d8\3\2\2")
        buf.write("\2\26\u03dc\3\2\2\2\30\u03f5\3\2\2\2\32\u03f7\3\2\2\2")
        buf.write('\34\u03fb\3\2\2\2\36\u0407\3\2\2\2 \u0411\3\2\2\2"\u0413')
        buf.write("\3\2\2\2$\u041e\3\2\2\2&\u0427\3\2\2\2(\u042f\3\2\2\2")
        buf.write("*\u0432\3\2\2\2,\u043d\3\2\2\2.\u044d\3\2\2\2\60\u044f")
        buf.write("\3\2\2\2\62\u045a\3\2\2\2\64\u046b\3\2\2\2\66\u0472\3")
        buf.write("\2\2\28\u0474\3\2\2\2:\u047a\3\2\2\2<\u0489\3\2\2\2>\u0495")
        buf.write("\3\2\2\2@\u04c3\3\2\2\2B\u04c8\3\2\2\2D\u04de\3\2\2\2")
        buf.write("F\u04e0\3\2\2\2H\u053b\3\2\2\2J\u053d\3\2\2\2L\u054c\3")
        buf.write("\2\2\2N\u0576\3\2\2\2P\u0578\3\2\2\2R\u0598\3\2\2\2T\u059a")
        buf.write("\3\2\2\2V\u05af\3\2\2\2X\u05c6\3\2\2\2Z\u05d6\3\2\2\2")
        buf.write("\\\u05d8\3\2\2\2^\u05f3\3\2\2\2`\u05f7\3\2\2\2b\u05ff")
        buf.write("\3\2\2\2d\u060a\3\2\2\2f\u060e\3\2\2\2h\u0619\3\2\2\2")
        buf.write("j\u064f\3\2\2\2l\u0651\3\2\2\2n\u0694\3\2\2\2p\u0699\3")
        buf.write("\2\2\2r\u069d\3\2\2\2t\u06a7\3\2\2\2v\u06af\3\2\2\2x\u06ba")
        buf.write("\3\2\2\2z\u06c7\3\2\2\2|\u06f4\3\2\2\2~\u06fa\3\2\2\2")
        buf.write("\u0080\u0763\3\2\2\2\u0082\u077e\3\2\2\2\u0084\u0780\3")
        buf.write("\2\2\2\u0086\u0782\3\2\2\2\u0088\u0784\3\2\2\2\u008a\u0786")
        buf.write("\3\2\2\2\u008c\u0788\3\2\2\2\u008e\u078f\3\2\2\2\u0090")
        buf.write("\u079a\3\2\2\2\u0092\u07be\3\2\2\2\u0094\u07c0\3\2\2\2")
        buf.write("\u0096\u07c8\3\2\2\2\u0098\u07d1\3\2\2\2\u009a\u07d6\3")
        buf.write("\2\2\2\u009c\u07df\3\2\2\2\u009e\u080d\3\2\2\2\u00a0\u081f")
        buf.write("\3\2\2\2\u00a2\u0828\3\2\2\2\u00a4\u082a\3\2\2\2\u00a6")
        buf.write("\u0840\3\2\2\2\u00a8\u0845\3\2\2\2\u00aa\u0847\3\2\2\2")
        buf.write("\u00ac\u0869\3\2\2\2\u00ae\u086b\3\2\2\2\u00b0\u00b1\5")
        buf.write("\n\6\2\u00b1\u00b2\7\2\2\3\u00b2\3\3\2\2\2\u00b3\u00b4")
        buf.write("\5r:\2\u00b4\u00b5\7\2\2\3\u00b5\5\3\2\2\2\u00b6\u00b7")
        buf.write("\5p9\2\u00b7\u00b8\7\2\2\3\u00b8\7\3\2\2\2\u00b9\u00ba")
        buf.write("\5\u0092J\2\u00ba\u00bb\7\2\2\3\u00bb\t\3\2\2\2\u00bc")
        buf.write("\u02f0\5\26\f\2\u00bd\u00be\7Z\2\2\u00be\u02f0\5\u00a6")
        buf.write("T\2\u00bf\u00c0\7I\2\2\u00c0\u00c4\7\u00be\2\2\u00c1\u00c2")
        buf.write("\7r\2\2\u00c2\u00c3\7\36\2\2\u00c3\u00c5\7 \2\2\u00c4")
        buf.write("\u00c1\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c6\3\2\2\2")
        buf.write("\u00c6\u00c9\5\u00a6T\2\u00c7\u00c8\7i\2\2\u00c8\u00ca")
        buf.write("\7\u00e1\2\2\u00c9\u00c7\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca")
        buf.write("\u00cc\3\2\2\2\u00cb\u00cd\5\24\13\2\u00cc\u00cb\3\2\2")
        buf.write("\2\u00cc\u00cd\3\2\2\2\u00cd\u00d1\3\2\2\2\u00ce\u00cf")
        buf.write("\7G\2\2\u00cf\u00d0\7\u00a9\2\2\u00d0\u00d2\5*\26\2\u00d1")
        buf.write("\u00ce\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u02f0\3\2\2\2")
        buf.write("\u00d3\u00d4\7d\2\2\u00d4\u00d5\7\u00be\2\2\u00d5\u00d6")
        buf.write("\5\u00a6T\2\u00d6\u00d7\7j\2\2\u00d7\u00d8\7\u00a9\2\2")
        buf.write("\u00d8\u00d9\5*\26\2\u00d9\u02f0\3\2\2\2\u00da\u00db\7")
        buf.write("]\2\2\u00db\u00de\7\u00be\2\2\u00dc\u00dd\7r\2\2\u00dd")
        buf.write("\u00df\7 \2\2\u00de\u00dc\3\2\2\2\u00de\u00df\3\2\2\2")
        buf.write("\u00df\u00e0\3\2\2\2\u00e0\u00e2\5\u00a6T\2\u00e1\u00e3")
        buf.write("\t\2\2\2\u00e2\u00e1\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3")
        buf.write("\u02f0\3\2\2\2\u00e4\u00e9\5\16\b\2\u00e5\u00e6\7\3\2")
        buf.write("\2\u00e6\u00e7\5\u0094K\2\u00e7\u00e8\7\4\2\2\u00e8\u00ea")
        buf.write("\3\2\2\2\u00e9\u00e5\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea")
        buf.write("\u00eb\3\2\2\2\u00eb\u00ee\5(\25\2\u00ec\u00ed\7\u00a6")
        buf.write("\2\2\u00ed\u00ef\5*\26\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef")
        buf.write("\3\2\2\2\u00ef\u00f3\3\2\2\2\u00f0\u00f1\7\u00c6\2\2\u00f1")
        buf.write("\u00f2\7\22\2\2\u00f2\u00f4\5^\60\2\u00f3\u00f0\3\2\2")
        buf.write("\2\u00f3\u00f4\3\2\2\2\u00f4\u00f6\3\2\2\2\u00f5\u00f7")
        buf.write("\5\20\t\2\u00f6\u00f5\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7")
        buf.write("\u02f0\3\2\2\2\u00f8\u00f9\5\16\b\2\u00f9\u00fc\5(\25")
        buf.write("\2\u00fa\u00fb\7\u00a6\2\2\u00fb\u00fd\5*\26\2\u00fc\u00fa")
        buf.write("\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u0101\3\2\2\2\u00fe")
        buf.write("\u00ff\7\u00c6\2\2\u00ff\u0100\7\22\2\2\u0100\u0102\5")
        buf.write("^\60\2\u0101\u00fe\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0104")
        buf.write("\3\2\2\2\u0103\u0105\5\20\t\2\u0104\u0103\3\2\2\2\u0104")
        buf.write("\u0105\3\2\2\2\u0105\u0107\3\2\2\2\u0106\u0108\7\r\2\2")
        buf.write("\u0107\u0106\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u0109\3")
        buf.write("\2\2\2\u0109\u010a\5\26\f\2\u010a\u02f0\3\2\2\2\u010b")
        buf.write("\u0110\5\16\b\2\u010c\u010d\7\3\2\2\u010d\u010e\5\u0094")
        buf.write("K\2\u010e\u010f\7\4\2\2\u010f\u0111\3\2\2\2\u0110\u010c")
        buf.write("\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0114\3\2\2\2\u0112")
        buf.write("\u0113\7i\2\2\u0113\u0115\7\u00e1\2\2\u0114\u0112\3\2")
        buf.write("\2\2\u0114\u0115\3\2\2\2\u0115\u011c\3\2\2\2\u0116\u0117")
        buf.write("\7\u00c6\2\2\u0117\u0118\7\22\2\2\u0118\u0119\7\3\2\2")
        buf.write("\u0119\u011a\5\u0094K\2\u011a\u011b\7\4\2\2\u011b\u011d")
        buf.write("\3\2\2\2\u011c\u0116\3\2\2\2\u011c\u011d\3\2\2\2\u011d")
        buf.write("\u011f\3\2\2\2\u011e\u0120\5\20\t\2\u011f\u011e\3\2\2")
        buf.write("\2\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2\u0121\u0123")
        buf.write("\5\22\n\2\u0122\u0121\3\2\2\2\u0122\u0123\3\2\2\2\u0123")
        buf.write("\u0125\3\2\2\2\u0124\u0126\5n8\2\u0125\u0124\3\2\2\2\u0125")
        buf.write("\u0126\3\2\2\2\u0126\u0128\3\2\2\2\u0127\u0129\5\64\33")
        buf.write("\2\u0128\u0127\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012b")
        buf.write("\3\2\2\2\u012a\u012c\5\24\13\2\u012b\u012a\3\2\2\2\u012b")
        buf.write("\u012c\3\2\2\2\u012c\u012f\3\2\2\2\u012d\u012e\7\u00a8")
        buf.write("\2\2\u012e\u0130\5*\26\2\u012f\u012d\3\2\2\2\u012f\u0130")
        buf.write("\3\2\2\2\u0130\u0135\3\2\2\2\u0131\u0133\7\r\2\2\u0132")
        buf.write("\u0131\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2")
        buf.write("\u0134\u0136\5\26\f\2\u0135\u0132\3\2\2\2\u0135\u0136")
        buf.write("\3\2\2\2\u0136\u02f0\3\2\2\2\u0137\u0138\7I\2\2\u0138")
        buf.write("\u013c\7J\2\2\u0139\u013a\7r\2\2\u013a\u013b\7\36\2\2")
        buf.write("\u013b\u013d\7 \2\2\u013c\u0139\3\2\2\2\u013c\u013d\3")
        buf.write("\2\2\2\u013d\u013e\3\2\2\2\u013e\u013f\5p9\2\u013f\u0140")
        buf.write('\7"\2\2\u0140\u0141\5p9\2\u0141\u02f0\3\2\2\2\u0142\u0143')
        buf.write("\7\u00c2\2\2\u0143\u0144\7J\2\2\u0144\u0146\5p9\2\u0145")
        buf.write("\u0147\5\34\17\2\u0146\u0145\3\2\2\2\u0146\u0147\3\2\2")
        buf.write("\2\u0147\u0148\3\2\2\2\u0148\u0149\7\u00c3\2\2\u0149\u0150")
        buf.write("\7\u00c5\2\2\u014a\u0151\5\u00a6T\2\u014b\u014c\7+\2\2")
        buf.write("\u014c\u014e\7X\2\2\u014d\u014f\5`\61\2\u014e\u014d\3")
        buf.write("\2\2\2\u014e\u014f\3\2\2\2\u014f\u0151\3\2\2\2\u0150\u014a")
        buf.write("\3\2\2\2\u0150\u014b\3\2\2\2\u0150\u0151\3\2\2\2\u0151")
        buf.write("\u02f0\3\2\2\2\u0152\u0153\7d\2\2\u0153\u0154\t\3\2\2")
        buf.write("\u0154\u0155\5p9\2\u0155\u0156\7e\2\2\u0156\u0157\7a\2")
        buf.write("\2\u0157\u0158\5p9\2\u0158\u02f0\3\2\2\2\u0159\u015a\7")
        buf.write("d\2\2\u015a\u015b\t\3\2\2\u015b\u015c\5p9\2\u015c\u015d")
        buf.write("\7j\2\2\u015d\u015e\7\u00a8\2\2\u015e\u015f\5*\26\2\u015f")
        buf.write("\u02f0\3\2\2\2\u0160\u0161\7d\2\2\u0161\u0162\t\3\2\2")
        buf.write("\u0162\u0163\5p9\2\u0163\u0164\7\u00a7\2\2\u0164\u0167")
        buf.write("\7\u00a8\2\2\u0165\u0166\7r\2\2\u0166\u0168\7 \2\2\u0167")
        buf.write("\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\u016a\5*\26\2\u016a\u02f0\3\2\2\2\u016b\u016c\7")
        buf.write("d\2\2\u016c\u016d\7J\2\2\u016d\u016f\5p9\2\u016e\u0170")
        buf.write("\5\34\17\2\u016f\u016e\3\2\2\2\u016f\u0170\3\2\2\2\u0170")
        buf.write("\u0171\3\2\2\2\u0171\u0172\7j\2\2\u0172\u0173\7\u0090")
        buf.write("\2\2\u0173\u0177\7\u00e1\2\2\u0174\u0175\7G\2\2\u0175")
        buf.write("\u0176\7\u0091\2\2\u0176\u0178\5*\26\2\u0177\u0174\3\2")
        buf.write("\2\2\u0177\u0178\3\2\2\2\u0178\u02f0\3\2\2\2\u0179\u017a")
        buf.write("\7d\2\2\u017a\u017b\7J\2\2\u017b\u017d\5p9\2\u017c\u017e")
        buf.write("\5\34\17\2\u017d\u017c\3\2\2\2\u017d\u017e\3\2\2\2\u017e")
        buf.write("\u017f\3\2\2\2\u017f\u0180\7j\2\2\u0180\u0181\7\u0091")
        buf.write("\2\2\u0181\u0182\5*\26\2\u0182\u02f0\3\2\2\2\u0183\u0184")
        buf.write("\7d\2\2\u0184\u0185\7J\2\2\u0185\u0186\5p9\2\u0186\u018a")
        buf.write("\7\f\2\2\u0187\u0188\7r\2\2\u0188\u0189\7\36\2\2\u0189")
        buf.write("\u018b\7 \2\2\u018a\u0187\3\2\2\2\u018a\u018b\3\2\2\2")
        buf.write("\u018b\u018d\3\2\2\2\u018c\u018e\5\32\16\2\u018d\u018c")
        buf.write("\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u018d\3\2\2\2\u018f")
        buf.write("\u0190\3\2\2\2\u0190\u02f0\3\2\2\2\u0191\u0192\7d\2\2")
        buf.write("\u0192\u0193\7K\2\2\u0193\u0194\5p9\2\u0194\u0198\7\f")
        buf.write("\2\2\u0195\u0196\7r\2\2\u0196\u0197\7\36\2\2\u0197\u0199")
        buf.write("\7 \2\2\u0198\u0195\3\2\2\2\u0198\u0199\3\2\2\2\u0199")
        buf.write("\u019b\3\2\2\2\u019a\u019c\5\34\17\2\u019b\u019a\3\2\2")
        buf.write("\2\u019c\u019d\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019e")
        buf.write("\3\2\2\2\u019e\u02f0\3\2\2\2\u019f\u01a0\7d\2\2\u01a0")
        buf.write("\u01a1\7J\2\2\u01a1\u01a2\5p9\2\u01a2\u01a3\5\34\17\2")
        buf.write("\u01a3\u01a4\7e\2\2\u01a4\u01a5\7a\2\2\u01a5\u01a6\5\34")
        buf.write("\17\2\u01a6\u02f0\3\2\2\2\u01a7\u01a8\7d\2\2\u01a8\u01a9")
        buf.write("\7J\2\2\u01a9\u01aa\5p9\2\u01aa\u01ad\7]\2\2\u01ab\u01ac")
        buf.write("\7r\2\2\u01ac\u01ae\7 \2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b4\5\34\17\2\u01b0")
        buf.write("\u01b1\7\5\2\2\u01b1\u01b3\5\34\17\2\u01b2\u01b0\3\2\2")
        buf.write("\2\u01b3\u01b6\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b5")
        buf.write("\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b7")
        buf.write("\u01b9\7\u00bb\2\2\u01b8\u01b7\3\2\2\2\u01b8\u01b9\3\2")
        buf.write("\2\2\u01b9\u02f0\3\2\2\2\u01ba\u01bb\7d\2\2\u01bb\u01bc")
        buf.write("\7K\2\2\u01bc\u01bd\5p9\2\u01bd\u01c0\7]\2\2\u01be\u01bf")
        buf.write("\7r\2\2\u01bf\u01c1\7 \2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1")
        buf.write("\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c7\5\34\17\2\u01c3")
        buf.write("\u01c4\7\5\2\2\u01c4\u01c6\5\34\17\2\u01c5\u01c3\3\2\2")
        buf.write("\2\u01c6\u01c9\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c8")
        buf.write("\3\2\2\2\u01c8\u02f0\3\2\2\2\u01c9\u01c7\3\2\2\2\u01ca")
        buf.write("\u01cb\7d\2\2\u01cb\u01cc\7J\2\2\u01cc\u01ce\5p9\2\u01cd")
        buf.write("\u01cf\5\34\17\2\u01ce\u01cd\3\2\2\2\u01ce\u01cf\3\2\2")
        buf.write("\2\u01cf\u01d0\3\2\2\2\u01d0\u01d1\7j\2\2\u01d1\u01d2")
        buf.write("\5\24\13\2\u01d2\u02f0\3\2\2\2\u01d3\u01d4\7d\2\2\u01d4")
        buf.write("\u01d5\7J\2\2\u01d5\u01d6\5p9\2\u01d6\u01d7\7\u00cf\2")
        buf.write("\2\u01d7\u01d8\7[\2\2\u01d8\u02f0\3\2\2\2\u01d9\u01da")
        buf.write("\7]\2\2\u01da\u01dd\7J\2\2\u01db\u01dc\7r\2\2\u01dc\u01de")
        buf.write("\7 \2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de")
        buf.write("\u01df\3\2\2\2\u01df\u01e1\5p9\2\u01e0\u01e2\7\u00bb\2")
        buf.write("\2\u01e1\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u02f0")
        buf.write("\3\2\2\2\u01e3\u01e4\7]\2\2\u01e4\u01e7\7K\2\2\u01e5\u01e6")
        buf.write("\7r\2\2\u01e6\u01e8\7 \2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8")
        buf.write("\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u02f0\5p9\2\u01ea\u01ed")
        buf.write("\7I\2\2\u01eb\u01ec\7\33\2\2\u01ec\u01ee\7L\2\2\u01ed")
        buf.write("\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3\2\2\2")
        buf.write("\u01ef\u01f1\7\u00a5\2\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1")
        buf.write("\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f6\7K\2\2\u01f3")
        buf.write("\u01f4\7r\2\2\u01f4\u01f5\7\36\2\2\u01f5\u01f7\7 \2\2")
        buf.write("\u01f6\u01f3\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f8\3")
        buf.write("\2\2\2\u01f8\u01fa\5p9\2\u01f9\u01fb\5f\64\2\u01fa\u01f9")
        buf.write("\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fe\3\2\2\2\u01fc")
        buf.write("\u01fd\7i\2\2\u01fd\u01ff\7\u00e1\2\2\u01fe\u01fc\3\2")
        buf.write("\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0203\3\2\2\2\u0200\u0201")
        buf.write("\7\u00c6\2\2\u0201\u0202\7;\2\2\u0202\u0204\5^\60\2\u0203")
        buf.write("\u0200\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0207\3\2\2\2")
        buf.write("\u0205\u0206\7\u00a8\2\2\u0206\u0208\5*\26\2\u0207\u0205")
        buf.write("\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209\3\2\2\2\u0209")
        buf.write("\u020a\7\r\2\2\u020a\u020b\5\26\f\2\u020b\u02f0\3\2\2")
        buf.write("\2\u020c\u020f\7I\2\2\u020d\u020e\7\33\2\2\u020e\u0210")
        buf.write("\7L\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210")
        buf.write("\u0211\3\2\2\2\u0211\u0212\7\u00a5\2\2\u0212\u0213\7K")
        buf.write("\2\2\u0213\u0218\5p9\2\u0214\u0215\7\3\2\2\u0215\u0216")
        buf.write("\5\u0094K\2\u0216\u0217\7\4\2\2\u0217\u0219\3\2\2\2\u0218")
        buf.write("\u0214\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021a\3\2\2\2")
        buf.write("\u021a\u021d\5(\25\2\u021b\u021c\7\u00a6\2\2\u021c\u021e")
        buf.write("\5*\26\2\u021d\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e")
        buf.write("\u02f0\3\2\2\2\u021f\u0220\7d\2\2\u0220\u0221\7K\2\2\u0221")
        buf.write("\u0223\5p9\2\u0222\u0224\7\r\2\2\u0223\u0222\3\2\2\2\u0223")
        buf.write("\u0224\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0226\5\26\f")
        buf.write("\2\u0226\u02f0\3\2\2\2\u0227\u0229\7I\2\2\u0228\u022a")
        buf.write("\7\u00a5\2\2\u0229\u0228\3\2\2\2\u0229\u022a\3\2\2\2\u022a")
        buf.write("\u022b\3\2\2\2\u022b\u022c\7\u009d\2\2\u022c\u022d\5\u00a4")
        buf.write("S\2\u022d\u022e\7\r\2\2\u022e\u0238\7\u00e1\2\2\u022f")
        buf.write("\u0230\7\u008f\2\2\u0230\u0235\5:\36\2\u0231\u0232\7\5")
        buf.write("\2\2\u0232\u0234\5:\36\2\u0233\u0231\3\2\2\2\u0234\u0237")
        buf.write("\3\2\2\2\u0235\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("\u0239\3\2\2\2\u0237\u0235\3\2\2\2\u0238\u022f\3\2\2\2")
        buf.write("\u0238\u0239\3\2\2\2\u0239\u02f0\3\2\2\2\u023a\u023c\7")
        buf.write("]\2\2\u023b\u023d\7\u00a5\2\2\u023c\u023b\3\2\2\2\u023c")
        buf.write("\u023d\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u0241\7\u009d")
        buf.write("\2\2\u023f\u0240\7r\2\2\u0240\u0242\7 \2\2\u0241\u023f")
        buf.write("\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0243\3\2\2\2\u0243")
        buf.write("\u02f0\5\u00a4S\2\u0244\u0246\7Q\2\2\u0245\u0247\t\4\2")
        buf.write("\2\u0246\u0245\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0248")
        buf.write("\3\2\2\2\u0248\u02f0\5\n\6\2\u0249\u024a\7V\2\2\u024a")
        buf.write("\u024d\7W\2\2\u024b\u024c\t\5\2\2\u024c\u024e\5\u00a6")
        buf.write("T\2\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0253")
        buf.write('\3\2\2\2\u024f\u0251\7"\2\2\u0250\u024f\3\2\2\2\u0250')
        buf.write("\u0251\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0254\7\u00e1")
        buf.write("\2\2\u0253\u0250\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u02f0")
        buf.write("\3\2\2\2\u0255\u0256\7V\2\2\u0256\u0259\7\u00bf\2\2\u0257")
        buf.write('\u0258\7"\2\2\u0258\u025a\7\u00e1\2\2\u0259\u0257\3\2')
        buf.write("\2\2\u0259\u025a\3\2\2\2\u025a\u02f0\3\2\2\2\u025b\u025c")
        buf.write("\7V\2\2\u025c\u025d\7\u00a8\2\2\u025d\u0262\5p9\2\u025e")
        buf.write("\u025f\7\3\2\2\u025f\u0260\5.\30\2\u0260\u0261\7\4\2\2")
        buf.write("\u0261\u0263\3\2\2\2\u0262\u025e\3\2\2\2\u0262\u0263\3")
        buf.write("\2\2\2\u0263\u02f0\3\2\2\2\u0264\u0265\7V\2\2\u0265\u0266")
        buf.write("\7X\2\2\u0266\u0267\t\5\2\2\u0267\u026a\5p9\2\u0268\u0269")
        buf.write("\t\5\2\2\u0269\u026b\5\u00a6T\2\u026a\u0268\3\2\2\2\u026a")
        buf.write("\u026b\3\2\2\2\u026b\u02f0\3\2\2\2\u026c\u026d\7V\2\2")
        buf.write("\u026d\u026e\7[\2\2\u026e\u0270\5p9\2\u026f\u0271\5\34")
        buf.write("\17\2\u0270\u026f\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u02f0")
        buf.write("\3\2\2\2\u0272\u0274\7V\2\2\u0273\u0275\5\u00a6T\2\u0274")
        buf.write("\u0273\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0276\3\2\2\2")
        buf.write('\u0276\u027e\7\\\2\2\u0277\u0279\7"\2\2\u0278\u0277\3')
        buf.write("\2\2\2\u0278\u0279\3\2\2\2\u0279\u027c\3\2\2\2\u027a\u027d")
        buf.write("\5\u00a4S\2\u027b\u027d\7\u00e1\2\2\u027c\u027a\3\2\2")
        buf.write("\2\u027c\u027b\3\2\2\2\u027d\u027f\3\2\2\2\u027e\u0278")
        buf.write("\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u02f0\3\2\2\2\u0280")
        buf.write("\u0281\7V\2\2\u0281\u0282\7I\2\2\u0282\u0283\7J\2\2\u0283")
        buf.write("\u02f0\5p9\2\u0284\u0285\t\6\2\2\u0285\u0287\7\u009d\2")
        buf.write("\2\u0286\u0288\7\u009e\2\2\u0287\u0286\3\2\2\2\u0287\u0288")
        buf.write("\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u02f0\5 \21\2\u028a")
        buf.write("\u028b\t\6\2\2\u028b\u028d\7\u00be\2\2\u028c\u028e\7\u009e")
        buf.write("\2\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u028f")
        buf.write("\3\2\2\2\u028f\u02f0\5\u00a6T\2\u0290\u0292\t\6\2\2\u0291")
        buf.write("\u0293\t\7\2\2\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2")
        buf.write("\u0293\u0294\3\2\2\2\u0294\u0296\5p9\2\u0295\u0297\5\34")
        buf.write("\17\2\u0296\u0295\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0299")
        buf.write('\3\2\2\2\u0298\u029a\5"\22\2\u0299\u0298\3\2\2\2\u0299')
        buf.write("\u029a\3\2\2\2\u029a\u02f0\3\2\2\2\u029b\u029c\7\u009f")
        buf.write("\2\2\u029c\u029d\7J\2\2\u029d\u02f0\5p9\2\u029e\u02a2")
        buf.write("\7\u009f\2\2\u029f\u02a1\13\2\2\2\u02a0\u029f\3\2\2\2")
        buf.write("\u02a1\u02a4\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a2\u02a0\3")
        buf.write("\2\2\2\u02a3\u02f0\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a5\u02a7")
        buf.write("\7\u00a1\2\2\u02a6\u02a8\7\u00a3\2\2\u02a7\u02a6\3\2\2")
        buf.write("\2\u02a7\u02a8\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02aa")
        buf.write("\7J\2\2\u02aa\u02af\5p9\2\u02ab\u02ad\7\r\2\2\u02ac\u02ab")
        buf.write("\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae")
        buf.write("\u02b0\5\26\f\2\u02af\u02ac\3\2\2\2\u02af\u02b0\3\2\2")
        buf.write("\2\u02b0\u02f0\3\2\2\2\u02b1\u02b2\7\u00a2\2\2\u02b2\u02b3")
        buf.write("\7J\2\2\u02b3\u02f0\5p9\2\u02b4\u02b5\7\u00a0\2\2\u02b5")
        buf.write("\u02f0\7\u00a1\2\2\u02b6\u02b7\7\u00d2\2\2\u02b7\u02b9")
        buf.write("\7l\2\2\u02b8\u02ba\7\u00dd\2\2\u02b9\u02b8\3\2\2\2\u02b9")
        buf.write("\u02ba\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\7\u00de")
        buf.write("\2\2\u02bc\u02be\7\u00e1\2\2\u02bd\u02bf\7\u008c\2\2\u02be")
        buf.write("\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c0\3\2\2\2")
        buf.write("\u02c0\u02c1\7O\2\2\u02c1\u02c2\7J\2\2\u02c2\u02c4\5p")
        buf.write("9\2\u02c3\u02c5\5\34\17\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5")
        buf.write("\3\2\2\2\u02c5\u02f0\3\2\2\2\u02c6\u02c7\7\u00c1\2\2\u02c7")
        buf.write("\u02c8\7J\2\2\u02c8\u02ca\5p9\2\u02c9\u02cb\5\34\17\2")
        buf.write("\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02f0\3")
        buf.write("\2\2\2\u02cc\u02cd\7\u00cd\2\2\u02cd\u02ce\7\u00ce\2\2")
        buf.write("\u02ce\u02cf\7J\2\2\u02cf\u02f0\5p9\2\u02d0\u02d1\t\b")
        buf.write("\2\2\u02d1\u02d5\5\u00a6T\2\u02d2\u02d4\13\2\2\2\u02d3")
        buf.write("\u02d2\3\2\2\2\u02d4\u02d7\3\2\2\2\u02d5\u02d6\3\2\2\2")
        buf.write("\u02d5\u02d3\3\2\2\2\u02d6\u02f0\3\2\2\2\u02d7\u02d5\3")
        buf.write("\2\2\2\u02d8\u02d9\7j\2\2\u02d9\u02dd\7\u00d3\2\2\u02da")
        buf.write("\u02dc\13\2\2\2\u02db\u02da\3\2\2\2\u02dc\u02df\3\2\2")
        buf.write("\2\u02dd\u02de\3\2\2\2\u02dd\u02db\3\2\2\2\u02de\u02f0")
        buf.write("\3\2\2\2\u02df\u02dd\3\2\2\2\u02e0\u02e4\7j\2\2\u02e1")
        buf.write("\u02e3\13\2\2\2\u02e2\u02e1\3\2\2\2\u02e3\u02e6\3\2\2")
        buf.write("\2\u02e4\u02e5\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e5\u02f0")
        buf.write("\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e7\u02f0\7k\2\2\u02e8")
        buf.write("\u02ec\5\f\7\2\u02e9\u02eb\13\2\2\2\u02ea\u02e9\3\2\2")
        buf.write("\2\u02eb\u02ee\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ec\u02ea")
        buf.write("\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ef")
        buf.write("\u00bc\3\2\2\2\u02ef\u00bd\3\2\2\2\u02ef\u00bf\3\2\2\2")
        buf.write("\u02ef\u00d3\3\2\2\2\u02ef\u00da\3\2\2\2\u02ef\u00e4\3")
        buf.write("\2\2\2\u02ef\u00f8\3\2\2\2\u02ef\u010b\3\2\2\2\u02ef\u0137")
        buf.write("\3\2\2\2\u02ef\u0142\3\2\2\2\u02ef\u0152\3\2\2\2\u02ef")
        buf.write("\u0159\3\2\2\2\u02ef\u0160\3\2\2\2\u02ef\u016b\3\2\2\2")
        buf.write("\u02ef\u0179\3\2\2\2\u02ef\u0183\3\2\2\2\u02ef\u0191\3")
        buf.write("\2\2\2\u02ef\u019f\3\2\2\2\u02ef\u01a7\3\2\2\2\u02ef\u01ba")
        buf.write("\3\2\2\2\u02ef\u01ca\3\2\2\2\u02ef\u01d3\3\2\2\2\u02ef")
        buf.write("\u01d9\3\2\2\2\u02ef\u01e3\3\2\2\2\u02ef\u01ea\3\2\2\2")
        buf.write("\u02ef\u020c\3\2\2\2\u02ef\u021f\3\2\2\2\u02ef\u0227\3")
        buf.write("\2\2\2\u02ef\u023a\3\2\2\2\u02ef\u0244\3\2\2\2\u02ef\u0249")
        buf.write("\3\2\2\2\u02ef\u0255\3\2\2\2\u02ef\u025b\3\2\2\2\u02ef")
        buf.write("\u0264\3\2\2\2\u02ef\u026c\3\2\2\2\u02ef\u0272\3\2\2\2")
        buf.write("\u02ef\u0280\3\2\2\2\u02ef\u0284\3\2\2\2\u02ef\u028a\3")
        buf.write("\2\2\2\u02ef\u0290\3\2\2\2\u02ef\u029b\3\2\2\2\u02ef\u029e")
        buf.write("\3\2\2\2\u02ef\u02a5\3\2\2\2\u02ef\u02b1\3\2\2\2\u02ef")
        buf.write("\u02b4\3\2\2\2\u02ef\u02b6\3\2\2\2\u02ef\u02c6\3\2\2\2")
        buf.write("\u02ef\u02cc\3\2\2\2\u02ef\u02d0\3\2\2\2\u02ef\u02d8\3")
        buf.write("\2\2\2\u02ef\u02e0\3\2\2\2\u02ef\u02e7\3\2\2\2\u02ef\u02e8")
        buf.write("\3\2\2\2\u02f0\13\3\2\2\2\u02f1\u02f2\7I\2\2\u02f2\u03af")
        buf.write("\7\u00d3\2\2\u02f3\u02f4\7]\2\2\u02f4\u03af\7\u00d3\2")
        buf.write("\2\u02f5\u02f7\7\u00ca\2\2\u02f6\u02f8\7\u00d3\2\2\u02f7")
        buf.write("\u02f6\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u03af\3\2\2\2")
        buf.write("\u02f9\u02fb\7\u00c9\2\2\u02fa\u02fc\7\u00d3\2\2\u02fb")
        buf.write("\u02fa\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u03af\3\2\2\2")
        buf.write("\u02fd\u02fe\7V\2\2\u02fe\u03af\7\u00ca\2\2\u02ff\u0300")
        buf.write("\7V\2\2\u0300\u0302\7\u00d3\2\2\u0301\u0303\7\u00ca\2")
        buf.write("\2\u0302\u0301\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u03af")
        buf.write("\3\2\2\2\u0304\u0305\7V\2\2\u0305\u03af\7\u00d6\2\2\u0306")
        buf.write("\u0307\7V\2\2\u0307\u03af\7\u00d4\2\2\u0308\u0309\7V\2")
        buf.write("\2\u0309\u030a\7E\2\2\u030a\u03af\7\u00d4\2\2\u030b\u030c")
        buf.write("\7\u00d0\2\2\u030c\u03af\7J\2\2\u030d\u030e\7\u00d1\2")
        buf.write("\2\u030e\u03af\7J\2\2\u030f\u0310\7V\2\2\u0310\u03af\7")
        buf.write("\u00d5\2\2\u0311\u0312\7V\2\2\u0312\u0313\7I\2\2\u0313")
        buf.write("\u03af\7J\2\2\u0314\u0315\7V\2\2\u0315\u03af\7\u00d7\2")
        buf.write("\2\u0316\u0317\7V\2\2\u0317\u03af\7\u00d9\2\2\u0318\u0319")
        buf.write("\7V\2\2\u0319\u03af\7\u00da\2\2\u031a\u031b\7I\2\2\u031b")
        buf.write("\u03af\7\u00d8\2\2\u031c\u031d\7]\2\2\u031d\u03af\7\u00d8")
        buf.write("\2\2\u031e\u031f\7d\2\2\u031f\u03af\7\u00d8\2\2\u0320")
        buf.write("\u0321\7\u00cb\2\2\u0321\u03af\7J\2\2\u0322\u0323\7\u00cb")
        buf.write("\2\2\u0323\u03af\7\u00be\2\2\u0324\u0325\7\u00cc\2\2\u0325")
        buf.write("\u03af\7J\2\2\u0326\u0327\7\u00cc\2\2\u0327\u03af\7\u00be")
        buf.write("\2\2\u0328\u0329\7I\2\2\u0329\u032a\7\u00a5\2\2\u032a")
        buf.write("\u03af\7q\2\2\u032b\u032c\7]\2\2\u032c\u032d\7\u00a5\2")
        buf.write("\2\u032d\u03af\7q\2\2\u032e\u032f\7d\2\2\u032f\u0330\7")
        buf.write("J\2\2\u0330\u0331\5p9\2\u0331\u0332\7\36\2\2\u0332\u0333")
        buf.write("\7\u00b9\2\2\u0333\u03af\3\2\2\2\u0334\u0335\7d\2\2\u0335")
        buf.write("\u0336\7J\2\2\u0336\u0337\5p9\2\u0337\u0338\7\u00b9\2")
        buf.write("\2\u0338\u0339\7\22\2\2\u0339\u03af\3\2\2\2\u033a\u033b")
        buf.write("\7d\2\2\u033b\u033c\7J\2\2\u033c\u033d\5p9\2\u033d\u033e")
        buf.write("\7\36\2\2\u033e\u033f\7\u00ba\2\2\u033f\u03af\3\2\2\2")
        buf.write("\u0340\u0341\7d\2\2\u0341\u0342\7J\2\2\u0342\u0343\5p")
        buf.write("9\2\u0343\u0344\7\u00ab\2\2\u0344\u0345\7\22\2\2\u0345")
        buf.write("\u03af\3\2\2\2\u0346\u0347\7d\2\2\u0347\u0348\7J\2\2\u0348")
        buf.write("\u0349\5p9\2\u0349\u034a\7\36\2\2\u034a\u034b\7\u00ab")
        buf.write("\2\2\u034b\u03af\3\2\2\2\u034c\u034d\7d\2\2\u034d\u034e")
        buf.write("\7J\2\2\u034e\u034f\5p9\2\u034f\u0350\7\36\2\2\u0350\u0351")
        buf.write("\7\u00ac\2\2\u0351\u0352\7\r\2\2\u0352\u0353\7\u00ad\2")
        buf.write("\2\u0353\u03af\3\2\2\2\u0354\u0355\7d\2\2\u0355\u0356")
        buf.write("\7J\2\2\u0356\u0357\5p9\2\u0357\u0358\7j\2\2\u0358\u0359")
        buf.write("\7\u00ab\2\2\u0359\u035a\7\u00ae\2\2\u035a\u03af\3\2\2")
        buf.write("\2\u035b\u035c\7d\2\2\u035c\u035d\7J\2\2\u035d\u035e\5")
        buf.write("p9\2\u035e\u035f\7\u00af\2\2\u035f\u0360\7?\2\2\u0360")
        buf.write("\u03af\3\2\2\2\u0361\u0362\7d\2\2\u0362\u0363\7J\2\2\u0363")
        buf.write("\u0364\5p9\2\u0364\u0365\7\u00b0\2\2\u0365\u0366\7?\2")
        buf.write("\2\u0366\u03af\3\2\2\2\u0367\u0368\7d\2\2\u0368\u0369")
        buf.write("\7J\2\2\u0369\u036a\5p9\2\u036a\u036b\7\u00b1\2\2\u036b")
        buf.write("\u036c\7?\2\2\u036c\u03af\3\2\2\2\u036d\u036e\7d\2\2\u036e")
        buf.write("\u036f\7J\2\2\u036f\u0370\5p9\2\u0370\u0371\7\u00b3\2")
        buf.write("\2\u0371\u03af\3\2\2\2\u0372\u0373\7d\2\2\u0373\u0374")
        buf.write("\7J\2\2\u0374\u0376\5p9\2\u0375\u0377\5\34\17\2\u0376")
        buf.write("\u0375\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0378\3\2\2\2")
        buf.write("\u0378\u0379\7\u00b4\2\2\u0379\u03af\3\2\2\2\u037a\u037b")
        buf.write("\7d\2\2\u037b\u037c\7J\2\2\u037c\u037e\5p9\2\u037d\u037f")
        buf.write("\5\34\17\2\u037e\u037d\3\2\2\2\u037e\u037f\3\2\2\2\u037f")
        buf.write("\u0380\3\2\2\2\u0380\u0381\7\u00b5\2\2\u0381\u03af\3\2")
        buf.write("\2\2\u0382\u0383\7d\2\2\u0383\u0384\7J\2\2\u0384\u0386")
        buf.write("\5p9\2\u0385\u0387\5\34\17\2\u0386\u0385\3\2\2\2\u0386")
        buf.write("\u0387\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\7j\2\2")
        buf.write("\u0389\u038a\7\u00b2\2\2\u038a\u03af\3\2\2\2\u038b\u038c")
        buf.write("\7d\2\2\u038c\u038d\7J\2\2\u038d\u038f\5p9\2\u038e\u0390")
        buf.write("\5\34\17\2\u038f\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390")
        buf.write("\u0391\3\2\2\2\u0391\u0392\7\f\2\2\u0392\u0393\7X\2\2")
        buf.write("\u0393\u03af\3\2\2\2\u0394\u0395\7d\2\2\u0395\u0396\7")
        buf.write("J\2\2\u0396\u0398\5p9\2\u0397\u0399\5\34\17\2\u0398\u0397")
        buf.write("\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039a\3\2\2\2\u039a")
        buf.write("\u039c\7\u00b6\2\2\u039b\u039d\7X\2\2\u039c\u039b\3\2")
        buf.write("\2\2\u039c\u039d\3\2\2\2\u039d\u03af\3\2\2\2\u039e\u039f")
        buf.write("\7d\2\2\u039f\u03a0\7J\2\2\u03a0\u03a2\5p9\2\u03a1\u03a3")
        buf.write("\5\34\17\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3")
        buf.write("\u03a4\3\2\2\2\u03a4\u03a5\7L\2\2\u03a5\u03a6\7X\2\2\u03a6")
        buf.write("\u03af\3\2\2\2\u03a7\u03a8\7m\2\2\u03a8\u03af\7n\2\2\u03a9")
        buf.write("\u03af\7o\2\2\u03aa\u03af\7p\2\2\u03ab\u03af\7\u00c0\2")
        buf.write("\2\u03ac\u03ad\7N\2\2\u03ad\u03af\7\13\2\2\u03ae\u02f1")
        buf.write("\3\2\2\2\u03ae\u02f3\3\2\2\2\u03ae\u02f5\3\2\2\2\u03ae")
        buf.write("\u02f9\3\2\2\2\u03ae\u02fd\3\2\2\2\u03ae\u02ff\3\2\2\2")
        buf.write("\u03ae\u0304\3\2\2\2\u03ae\u0306\3\2\2\2\u03ae\u0308\3")
        buf.write("\2\2\2\u03ae\u030b\3\2\2\2\u03ae\u030d\3\2\2\2\u03ae\u030f")
        buf.write("\3\2\2\2\u03ae\u0311\3\2\2\2\u03ae\u0314\3\2\2\2\u03ae")
        buf.write("\u0316\3\2\2\2\u03ae\u0318\3\2\2\2\u03ae\u031a\3\2\2\2")
        buf.write("\u03ae\u031c\3\2\2\2\u03ae\u031e\3\2\2\2\u03ae\u0320\3")
        buf.write("\2\2\2\u03ae\u0322\3\2\2\2\u03ae\u0324\3\2\2\2\u03ae\u0326")
        buf.write("\3\2\2\2\u03ae\u0328\3\2\2\2\u03ae\u032b\3\2\2\2\u03ae")
        buf.write("\u032e\3\2\2\2\u03ae\u0334\3\2\2\2\u03ae\u033a\3\2\2\2")
        buf.write("\u03ae\u0340\3\2\2\2\u03ae\u0346\3\2\2\2\u03ae\u034c\3")
        buf.write("\2\2\2\u03ae\u0354\3\2\2\2\u03ae\u035b\3\2\2\2\u03ae\u0361")
        buf.write("\3\2\2\2\u03ae\u0367\3\2\2\2\u03ae\u036d\3\2\2\2\u03ae")
        buf.write("\u0372\3\2\2\2\u03ae\u037a\3\2\2\2\u03ae\u0382\3\2\2\2")
        buf.write("\u03ae\u038b\3\2\2\2\u03ae\u0394\3\2\2\2\u03ae\u039e\3")
        buf.write("\2\2\2\u03ae\u03a7\3\2\2\2\u03ae\u03a9\3\2\2\2\u03ae\u03aa")
        buf.write("\3\2\2\2\u03ae\u03ab\3\2\2\2\u03ae\u03ac\3\2\2\2\u03af")
        buf.write("\r\3\2\2\2\u03b0\u03b2\7I\2\2\u03b1\u03b3\7\u00a5\2\2")
        buf.write("\u03b2\u03b1\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b5\3")
        buf.write("\2\2\2\u03b4\u03b6\7\u00c7\2\2\u03b5\u03b4\3\2\2\2\u03b5")
        buf.write("\u03b6\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03bb\7J\2\2")
        buf.write("\u03b8\u03b9\7r\2\2\u03b9\u03ba\7\36\2\2\u03ba\u03bc\7")
        buf.write(" \2\2\u03bb\u03b8\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd")
        buf.write("\3\2\2\2\u03bd\u03be\5p9\2\u03be\17\3\2\2\2\u03bf\u03c0")
        buf.write("\7\u00b9\2\2\u03c0\u03c1\7\22\2\2\u03c1\u03c5\5^\60\2")
        buf.write("\u03c2\u03c3\7\u00ba\2\2\u03c3\u03c4\7\22\2\2\u03c4\u03c6")
        buf.write("\5b\62\2\u03c5\u03c2\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6")
        buf.write("\u03c7\3\2\2\2\u03c7\u03c8\7O\2\2\u03c8\u03c9\7\u00e6")
        buf.write("\2\2\u03c9\u03ca\7\u00aa\2\2\u03ca\21\3\2\2\2\u03cb\u03cc")
        buf.write("\7\u00ab\2\2\u03cc\u03cd\7\22\2\2\u03cd\u03ce\5^\60\2")
        buf.write("\u03ce\u03d1\7;\2\2\u03cf\u03d2\5\60\31\2\u03d0\u03d2")
        buf.write("\5\62\32\2\u03d1\u03cf\3\2\2\2\u03d1\u03d0\3\2\2\2\u03d2")
        buf.write("\u03d6\3\2\2\2\u03d3\u03d4\7\u00ac\2\2\u03d4\u03d5\7\r")
        buf.write("\2\2\u03d5\u03d7\7\u00ad\2\2\u03d6\u03d3\3\2\2\2\u03d6")
        buf.write("\u03d7\3\2\2\2\u03d7\23\3\2\2\2\u03d8\u03d9\7\u00ae\2")
        buf.write("\2\u03d9\u03da\7\u00e1\2\2\u03da\25\3\2\2\2\u03db\u03dd")
        buf.write("\5$\23\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd")
        buf.write("\u03de\3\2\2\2\u03de\u03df\5<\37\2\u03df\27\3\2\2\2\u03e0")
        buf.write("\u03e1\7M\2\2\u03e1\u03e2\7\u008c\2\2\u03e2\u03e3\7J\2")
        buf.write("\2\u03e3\u03ea\5p9\2\u03e4\u03e8\5\34\17\2\u03e5\u03e6")
        buf.write("\7r\2\2\u03e6\u03e7\7\36\2\2\u03e7\u03e9\7 \2\2\u03e8")
        buf.write("\u03e5\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03eb\3\2\2\2")
        buf.write("\u03ea\u03e4\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03f6\3")
        buf.write("\2\2\2\u03ec\u03ed\7M\2\2\u03ed\u03ef\7O\2\2\u03ee\u03f0")
        buf.write("\7J\2\2\u03ef\u03ee\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0")
        buf.write("\u03f1\3\2\2\2\u03f1\u03f3\5p9\2\u03f2\u03f4\5\34\17\2")
        buf.write("\u03f3\u03f2\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3")
        buf.write("\2\2\2\u03f5\u03e0\3\2\2\2\u03f5\u03ec\3\2\2\2\u03f6\31")
        buf.write("\3\2\2\2\u03f7\u03f9\5\34\17\2\u03f8\u03fa\5\24\13\2\u03f9")
        buf.write("\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\33\3\2\2\2\u03fb")
        buf.write("\u03fc\7?\2\2\u03fc\u03fd\7\3\2\2\u03fd\u0402\5\36\20")
        buf.write("\2\u03fe\u03ff\7\5\2\2\u03ff\u0401\5\36\20\2\u0400\u03fe")
        buf.write("\3\2\2\2\u0401\u0404\3\2\2\2\u0402\u0400\3\2\2\2\u0402")
        buf.write("\u0403\3\2\2\2\u0403\u0405\3\2\2\2\u0404\u0402\3\2\2\2")
        buf.write("\u0405\u0406\7\4\2\2\u0406\35\3\2\2\2\u0407\u040a\5\u00a6")
        buf.write("T\2\u0408\u0409\7s\2\2\u0409\u040b\5\u0082B\2\u040a\u0408")
        buf.write("\3\2\2\2\u040a\u040b\3\2\2\2\u040b\37\3\2\2\2\u040c\u0412")
        buf.write("\5\u00a4S\2\u040d\u0412\7\u00e1\2\2\u040e\u0412\5\u0084")
        buf.write("C\2\u040f\u0412\5\u0086D\2\u0410\u0412\5\u0088E\2\u0411")
        buf.write("\u040c\3\2\2\2\u0411\u040d\3\2\2\2\u0411\u040e\3\2\2\2")
        buf.write("\u0411\u040f\3\2\2\2\u0411\u0410\3\2\2\2\u0412!\3\2\2")
        buf.write("\2\u0413\u041b\5\u00a6T\2\u0414\u0417\7\6\2\2\u0415\u0418")
        buf.write("\5\u00a6T\2\u0416\u0418\7\u00e1\2\2\u0417\u0415\3\2\2")
        buf.write("\2\u0417\u0416\3\2\2\2\u0418\u041a\3\2\2\2\u0419\u0414")
        buf.write("\3\2\2\2\u041a\u041d\3\2\2\2\u041b\u0419\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c#\3\2\2\2\u041d\u041b\3\2\2\2\u041e")
        buf.write("\u041f\7G\2\2\u041f\u0424\5&\24\2\u0420\u0421\7\5\2\2")
        buf.write("\u0421\u0423\5&\24\2\u0422\u0420\3\2\2\2\u0423\u0426\3")
        buf.write("\2\2\2\u0424\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425%")
        buf.write("\3\2\2\2\u0426\u0424\3\2\2\2\u0427\u0429\5\u00a6T\2\u0428")
        buf.write("\u042a\7\r\2\2\u0429\u0428\3\2\2\2\u0429\u042a\3\2\2\2")
        buf.write("\u042a\u042b\3\2\2\2\u042b\u042c\7\3\2\2\u042c\u042d\5")
        buf.write("<\37\2\u042d\u042e\7\4\2\2\u042e'\3\2\2\2\u042f\u0430")
        buf.write("\7\u008f\2\2\u0430\u0431\5\u00a4S\2\u0431)\3\2\2\2\u0432")
        buf.write("\u0433\7\3\2\2\u0433\u0438\5,\27\2\u0434\u0435\7\5\2\2")
        buf.write("\u0435\u0437\5,\27\2\u0436\u0434\3\2\2\2\u0437\u043a\3")
        buf.write("\2\2\2\u0438\u0436\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b")
        buf.write("\3\2\2\2\u043a\u0438\3\2\2\2\u043b\u043c\7\4\2\2\u043c")
        buf.write("+\3\2\2\2\u043d\u0442\5.\30\2\u043e\u0440\7s\2\2\u043f")
        buf.write("\u043e\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0441\3\2\2\2")
        buf.write("\u0441\u0443\7\u00e1\2\2\u0442\u043f\3\2\2\2\u0442\u0443")
        buf.write("\3\2\2\2\u0443-\3\2\2\2\u0444\u0449\5\u00a6T\2\u0445\u0446")
        buf.write("\7\6\2\2\u0446\u0448\5\u00a6T\2\u0447\u0445\3\2\2\2\u0448")
        buf.write("\u044b\3\2\2\2\u0449\u0447\3\2\2\2\u0449\u044a\3\2\2\2")
        buf.write("\u044a\u044e\3\2\2\2\u044b\u0449\3\2\2\2\u044c\u044e\7")
        buf.write("\u00e1\2\2\u044d\u0444\3\2\2\2\u044d\u044c\3\2\2\2\u044e")
        buf.write("/\3\2\2\2\u044f\u0450\7\3\2\2\u0450\u0455\5\u0082B\2\u0451")
        buf.write("\u0452\7\5\2\2\u0452\u0454\5\u0082B\2\u0453\u0451\3\2")
        buf.write("\2\2\u0454\u0457\3\2\2\2\u0455\u0453\3\2\2\2\u0455\u0456")
        buf.write("\3\2\2\2\u0456\u0458\3\2\2\2\u0457\u0455\3\2\2\2\u0458")
        buf.write("\u0459\7\4\2\2\u0459\61\3\2\2\2\u045a\u045b\7\3\2\2\u045b")
        buf.write("\u0460\5\60\31\2\u045c\u045d\7\5\2\2\u045d\u045f\5\60")
        buf.write("\31\2\u045e\u045c\3\2\2\2\u045f\u0462\3\2\2\2\u0460\u045e")
        buf.write("\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0463\3\2\2\2\u0462")
        buf.write("\u0460\3\2\2\2\u0463\u0464\7\4\2\2\u0464\63\3\2\2\2\u0465")
        buf.write("\u0466\7\u00ac\2\2\u0466\u0467\7\r\2\2\u0467\u046c\5\66")
        buf.write("\34\2\u0468\u0469\7\u00ac\2\2\u0469\u046a\7\22\2\2\u046a")
        buf.write("\u046c\58\35\2\u046b\u0465\3\2\2\2\u046b\u0468\3\2\2\2")
        buf.write("\u046c\65\3\2\2\2\u046d\u046e\7\u00bc\2\2\u046e\u046f")
        buf.write("\7\u00e1\2\2\u046f\u0470\7\u00bd\2\2\u0470\u0473\7\u00e1")
        buf.write("\2\2\u0471\u0473\5\u00a6T\2\u0472\u046d\3\2\2\2\u0472")
        buf.write("\u0471\3\2\2\2\u0473\67\3\2\2\2\u0474\u0478\7\u00e1\2")
        buf.write("\2\u0475\u0476\7G\2\2\u0476\u0477\7\u0091\2\2\u0477\u0479")
        buf.write("\5*\26\2\u0478\u0475\3\2\2\2\u0478\u0479\3\2\2\2\u0479")
        buf.write("9\3\2\2\2\u047a\u047b\5\u00a6T\2\u047b\u047c\7\u00e1\2")
        buf.write("\2\u047c;\3\2\2\2\u047d\u047f\5\30\r\2\u047e\u047d\3\2")
        buf.write("\2\2\u047e\u047f\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0481")
        buf.write('\5B"\2\u0481\u0482\5> \2\u0482\u048a\3\2\2\2\u0483\u0485')
        buf.write("\5J&\2\u0484\u0486\5@!\2\u0485\u0484\3\2\2\2\u0486\u0487")
        buf.write("\3\2\2\2\u0487\u0485\3\2\2\2\u0487\u0488\3\2\2\2\u0488")
        buf.write("\u048a\3\2\2\2\u0489\u047e\3\2\2\2\u0489\u0483\3\2\2\2")
        buf.write("\u048a=\3\2\2\2\u048b\u048c\7\27\2\2\u048c\u048d\7\22")
        buf.write("\2\2\u048d\u0492\5F$\2\u048e\u048f\7\5\2\2\u048f\u0491")
        buf.write("\5F$\2\u0490\u048e\3\2\2\2\u0491\u0494\3\2\2\2\u0492\u0490")
        buf.write("\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0496\3\2\2\2\u0494")
        buf.write("\u0492\3\2\2\2\u0495\u048b\3\2\2\2\u0495\u0496\3\2\2\2")
        buf.write("\u0496\u04a1\3\2\2\2\u0497\u0498\7\u008a\2\2\u0498\u0499")
        buf.write("\7\22\2\2\u0499\u049e\5v<\2\u049a\u049b\7\5\2\2\u049b")
        buf.write("\u049d\5v<\2\u049c\u049a\3\2\2\2\u049d\u04a0\3\2\2\2\u049e")
        buf.write("\u049c\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a2\3\2\2\2")
        buf.write("\u04a0\u049e\3\2\2\2\u04a1\u0497\3\2\2\2\u04a1\u04a2\3")
        buf.write("\2\2\2\u04a2\u04ad\3\2\2\2\u04a3\u04a4\7\u008b\2\2\u04a4")
        buf.write("\u04a5\7\22\2\2\u04a5\u04aa\5v<\2\u04a6\u04a7\7\5\2\2")
        buf.write("\u04a7\u04a9\5v<\2\u04a8\u04a6\3\2\2\2\u04a9\u04ac\3\2")
        buf.write("\2\2\u04aa\u04a8\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ae")
        buf.write("\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ad\u04a3\3\2\2\2\u04ad")
        buf.write("\u04ae\3\2\2\2\u04ae\u04b9\3\2\2\2\u04af\u04b0\7\u0089")
        buf.write("\2\2\u04b0\u04b1\7\22\2\2\u04b1\u04b6\5F$\2\u04b2\u04b3")
        buf.write("\7\5\2\2\u04b3\u04b5\5F$\2\u04b4\u04b2\3\2\2\2\u04b5\u04b8")
        buf.write("\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7")
        buf.write("\u04ba\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b9\u04af\3\2\2\2")
        buf.write("\u04b9\u04ba\3\2\2\2\u04ba\u04bc\3\2\2\2\u04bb\u04bd\5")
        buf.write("\u009aN\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd")
        buf.write("\u04c0\3\2\2\2\u04be\u04bf\7\31\2\2\u04bf\u04c1\5v<\2")
        buf.write("\u04c0\u04be\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1?\3\2\2")
        buf.write("\2\u04c2\u04c4\5\30\r\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4")
        buf.write("\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c6\5H%\2\u04c6\u04c7")
        buf.write('\5> \2\u04c7A\3\2\2\2\u04c8\u04c9\b"\1\2\u04c9\u04ca')
        buf.write("\5D#\2\u04ca\u04d3\3\2\2\2\u04cb\u04cc\f\3\2\2\u04cc\u04ce")
        buf.write("\t\t\2\2\u04cd\u04cf\5R*\2\u04ce\u04cd\3\2\2\2\u04ce\u04cf")
        buf.write('\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d2\5B"\4\u04d1')
        buf.write("\u04cb\3\2\2\2\u04d2\u04d5\3\2\2\2\u04d3\u04d1\3\2\2\2")
        buf.write("\u04d3\u04d4\3\2\2\2\u04d4C\3\2\2\2\u04d5\u04d3\3\2\2")
        buf.write("\2\u04d6\u04df\5H%\2\u04d7\u04d8\7J\2\2\u04d8\u04df\5")
        buf.write("p9\2\u04d9\u04df\5l\67\2\u04da\u04db\7\3\2\2\u04db\u04dc")
        buf.write("\5<\37\2\u04dc\u04dd\7\4\2\2\u04dd\u04df\3\2\2\2\u04de")
        buf.write("\u04d6\3\2\2\2\u04de\u04d7\3\2\2\2\u04de\u04d9\3\2\2\2")
        buf.write("\u04de\u04da\3\2\2\2\u04dfE\3\2\2\2\u04e0\u04e2\5v<\2")
        buf.write("\u04e1\u04e3\t\n\2\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3")
        buf.write("\2\2\2\u04e3G\3\2\2\2\u04e4\u04e5\7\n\2\2\u04e5\u04e6")
        buf.write("\7\u008d\2\2\u04e6\u04e7\7\3\2\2\u04e7\u04e8\5t;\2\u04e8")
        buf.write("\u04e9\7\4\2\2\u04e9\u04ef\3\2\2\2\u04ea\u04eb\7g\2\2")
        buf.write("\u04eb\u04ef\5t;\2\u04ec\u04ed\7\u008e\2\2\u04ed\u04ef")
        buf.write("\5t;\2\u04ee\u04e4\3\2\2\2\u04ee\u04ea\3\2\2\2\u04ee\u04ec")
        buf.write("\3\2\2\2\u04ef\u04f1\3\2\2\2\u04f0\u04f2\5n8\2\u04f1\u04f0")
        buf.write("\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f5\3\2\2\2\u04f3")
        buf.write("\u04f4\7\u0093\2\2\u04f4\u04f6\7\u00e1\2\2\u04f5\u04f3")
        buf.write("\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7")
        buf.write("\u04f8\7\u008f\2\2\u04f8\u0505\7\u00e1\2\2\u04f9\u0503")
        buf.write("\7\r\2\2\u04fa\u0504\5`\61\2\u04fb\u0504\5\u0094K\2\u04fc")
        buf.write("\u04ff\7\3\2\2\u04fd\u0500\5`\61\2\u04fe\u0500\5\u0094")
        buf.write("K\2\u04ff\u04fd\3\2\2\2\u04ff\u04fe\3\2\2\2\u0500\u0501")
        buf.write("\3\2\2\2\u0501\u0502\7\4\2\2\u0502\u0504\3\2\2\2\u0503")
        buf.write("\u04fa\3\2\2\2\u0503\u04fb\3\2\2\2\u0503\u04fc\3\2\2\2")
        buf.write("\u0504\u0506\3\2\2\2\u0505\u04f9\3\2\2\2\u0505\u0506\3")
        buf.write("\2\2\2\u0506\u0508\3\2\2\2\u0507\u0509\5n8\2\u0508\u0507")
        buf.write("\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050c\3\2\2\2\u050a")
        buf.write("\u050b\7\u0092\2\2\u050b\u050d\7\u00e1\2\2\u050c\u050a")
        buf.write("\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u050f\3\2\2\2\u050e")
        buf.write("\u0510\5J&\2\u050f\u050e\3\2\2\2\u050f\u0510\3\2\2\2\u0510")
        buf.write("\u0513\3\2\2\2\u0511\u0512\7\20\2\2\u0512\u0514\5x=\2")
        buf.write("\u0513\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u053c\3")
        buf.write("\2\2\2\u0515\u0517\7\n\2\2\u0516\u0518\5R*\2\u0517\u0516")
        buf.write("\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2\u0519")
        buf.write("\u051b\5t;\2\u051a\u051c\5J&\2\u051b\u051a\3\2\2\2\u051b")
        buf.write("\u051c\3\2\2\2\u051c\u0526\3\2\2\2\u051d\u0523\5J&\2\u051e")
        buf.write("\u0520\7\n\2\2\u051f\u0521\5R*\2\u0520\u051f\3\2\2\2\u0520")
        buf.write("\u0521\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0524\5t;\2\u0523")
        buf.write("\u051e\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0526\3\2\2\2")
        buf.write("\u0525\u0515\3\2\2\2\u0525\u051d\3\2\2\2\u0526\u052a\3")
        buf.write("\2\2\2\u0527\u0529\5P)\2\u0528\u0527\3\2\2\2\u0529\u052c")
        buf.write("\3\2\2\2\u052a\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b")
        buf.write("\u052f\3\2\2\2\u052c\u052a\3\2\2\2\u052d\u052e\7\20\2")
        buf.write("\2\u052e\u0530\5x=\2\u052f\u052d\3\2\2\2\u052f\u0530\3")
        buf.write("\2\2\2\u0530\u0532\3\2\2\2\u0531\u0533\5L'\2\u0532\u0531")
        buf.write("\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u0536\3\2\2\2\u0534")
        buf.write("\u0535\7\30\2\2\u0535\u0537\5x=\2\u0536\u0534\3\2\2\2")
        buf.write("\u0536\u0537\3\2\2\2\u0537\u0539\3\2\2\2\u0538\u053a\5")
        buf.write("\u009aN\2\u0539\u0538\3\2\2\2\u0539\u053a\3\2\2\2\u053a")
        buf.write("\u053c\3\2\2\2\u053b\u04ee\3\2\2\2\u053b\u0525\3\2\2\2")
        buf.write("\u053cI\3\2\2\2\u053d\u053e\7\13\2\2\u053e\u0543\5T+\2")
        buf.write("\u053f\u0540\7\5\2\2\u0540\u0542\5T+\2\u0541\u053f\3\2")
        buf.write("\2\2\u0542\u0545\3\2\2\2\u0543\u0541\3\2\2\2\u0543\u0544")
        buf.write("\3\2\2\2\u0544\u0549\3\2\2\2\u0545\u0543\3\2\2\2\u0546")
        buf.write("\u0548\5P)\2\u0547\u0546\3\2\2\2\u0548\u054b\3\2\2\2\u0549")
        buf.write("\u0547\3\2\2\2\u0549\u054a\3\2\2\2\u054aK\3\2\2\2\u054b")
        buf.write("\u0549\3\2\2\2\u054c\u054d\7\21\2\2\u054d\u054e\7\22\2")
        buf.write("\2\u054e\u0553\5v<\2\u054f\u0550\7\5\2\2\u0550\u0552\5")
        buf.write("v<\2\u0551\u054f\3\2\2\2\u0552\u0555\3\2\2\2\u0553\u0551")
        buf.write("\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0567\3\2\2\2\u0555")
        buf.write("\u0553\3\2\2\2\u0556\u0557\7G\2\2\u0557\u0568\7\26\2\2")
        buf.write("\u0558\u0559\7G\2\2\u0559\u0568\7\25\2\2\u055a\u055b\7")
        buf.write("\23\2\2\u055b\u055c\7\24\2\2\u055c\u055d\7\3\2\2\u055d")
        buf.write("\u0562\5N(\2\u055e\u055f\7\5\2\2\u055f\u0561\5N(\2\u0560")
        buf.write("\u055e\3\2\2\2\u0561\u0564\3\2\2\2\u0562\u0560\3\2\2\2")
        buf.write("\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2\u0564\u0562\3")
        buf.write("\2\2\2\u0565\u0566\7\4\2\2\u0566\u0568\3\2\2\2\u0567\u0556")
        buf.write("\3\2\2\2\u0567\u0558\3\2\2\2\u0567\u055a\3\2\2\2\u0567")
        buf.write("\u0568\3\2\2\2\u0568M\3\2\2\2\u0569\u0572\7\3\2\2\u056a")
        buf.write("\u056f\5v<\2\u056b\u056c\7\5\2\2\u056c\u056e\5v<\2\u056d")
        buf.write("\u056b\3\2\2\2\u056e\u0571\3\2\2\2\u056f\u056d\3\2\2\2")
        buf.write("\u056f\u0570\3\2\2\2\u0570\u0573\3\2\2\2\u0571\u056f\3")
        buf.write("\2\2\2\u0572\u056a\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574")
        buf.write("\3\2\2\2\u0574\u0577\7\4\2\2\u0575\u0577\5v<\2\u0576\u0569")
        buf.write("\3\2\2\2\u0576\u0575\3\2\2\2\u0577O\3\2\2\2\u0578\u0579")
        buf.write("\7<\2\2\u0579\u057b\7K\2\2\u057a\u057c\7\64\2\2\u057b")
        buf.write("\u057a\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057d\3\2\2\2")
        buf.write("\u057d\u057e\5\u00a4S\2\u057e\u0587\7\3\2\2\u057f\u0584")
        buf.write("\5v<\2\u0580\u0581\7\5\2\2\u0581\u0583\5v<\2\u0582\u0580")
        buf.write("\3\2\2\2\u0583\u0586\3\2\2\2\u0584\u0582\3\2\2\2\u0584")
        buf.write("\u0585\3\2\2\2\u0585\u0588\3\2\2\2\u0586\u0584\3\2\2\2")
        buf.write("\u0587\u057f\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u0589\3")
        buf.write("\2\2\2\u0589\u058a\7\4\2\2\u058a\u0596\5\u00a6T\2\u058b")
        buf.write("\u058d\7\r\2\2\u058c\u058b\3\2\2\2\u058c\u058d\3\2\2\2")
        buf.write("\u058d\u058e\3\2\2\2\u058e\u0593\5\u00a6T\2\u058f\u0590")
        buf.write("\7\5\2\2\u0590\u0592\5\u00a6T\2\u0591\u058f\3\2\2\2\u0592")
        buf.write("\u0595\3\2\2\2\u0593\u0591\3\2\2\2\u0593\u0594\3\2\2\2")
        buf.write("\u0594\u0597\3\2\2\2\u0595\u0593\3\2\2\2\u0596\u058c\3")
        buf.write("\2\2\2\u0596\u0597\3\2\2\2\u0597Q\3\2\2\2\u0598\u0599")
        buf.write("\t\13\2\2\u0599S\3\2\2\2\u059a\u059e\5j\66\2\u059b\u059d")
        buf.write("\5V,\2\u059c\u059b\3\2\2\2\u059d\u05a0\3\2\2\2\u059e\u059c")
        buf.write("\3\2\2\2\u059e\u059f\3\2\2\2\u059fU\3\2\2\2\u05a0\u059e")
        buf.write("\3\2\2\2\u05a1\u05a4\7\63\2\2\u05a2\u05a4\5X-\2\u05a3")
        buf.write("\u05a1\3\2\2\2\u05a3\u05a2\3\2\2\2\u05a4\u05a5\3\2\2\2")
        buf.write("\u05a5\u05a6\7\62\2\2\u05a6\u05a8\5j\66\2\u05a7\u05a9")
        buf.write("\5Z.\2\u05a8\u05a7\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05b0")
        buf.write("\3\2\2\2\u05aa\u05ab\7:\2\2\u05ab\u05ac\5X-\2\u05ac\u05ad")
        buf.write("\7\62\2\2\u05ad\u05ae\5j\66\2\u05ae\u05b0\3\2\2\2\u05af")
        buf.write("\u05a3\3\2\2\2\u05af\u05aa\3\2\2\2\u05b0W\3\2\2\2\u05b1")
        buf.write("\u05b3\7\65\2\2\u05b2\u05b1\3\2\2\2\u05b2\u05b3\3\2\2")
        buf.write("\2\u05b3\u05c7\3\2\2\2\u05b4\u05b6\7\66\2\2\u05b5\u05b7")
        buf.write("\7\64\2\2\u05b6\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7")
        buf.write("\u05c7\3\2\2\2\u05b8\u05b9\7\66\2\2\u05b9\u05c7\7\67\2")
        buf.write("\2\u05ba\u05bc\78\2\2\u05bb\u05bd\7\64\2\2\u05bc\u05bb")
        buf.write("\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05c7\3\2\2\2\u05be")
        buf.write("\u05c0\79\2\2\u05bf\u05c1\7\64\2\2\u05c0\u05bf\3\2\2\2")
        buf.write("\u05c0\u05c1\3\2\2\2\u05c1\u05c7\3\2\2\2\u05c2\u05c4\7")
        buf.write("\66\2\2\u05c3\u05c2\3\2\2\2\u05c3\u05c4\3\2\2\2\u05c4")
        buf.write("\u05c5\3\2\2\2\u05c5\u05c7\7\u00dc\2\2\u05c6\u05b2\3\2")
        buf.write("\2\2\u05c6\u05b4\3\2\2\2\u05c6\u05b8\3\2\2\2\u05c6\u05ba")
        buf.write("\3\2\2\2\u05c6\u05be\3\2\2\2\u05c6\u05c3\3\2\2\2\u05c7")
        buf.write("Y\3\2\2\2\u05c8\u05c9\7;\2\2\u05c9\u05d7\5x=\2\u05ca\u05cb")
        buf.write("\7\u008f\2\2\u05cb\u05cc\7\3\2\2\u05cc\u05d1\5\u00a6T")
        buf.write("\2\u05cd\u05ce\7\5\2\2\u05ce\u05d0\5\u00a6T\2\u05cf\u05cd")
        buf.write("\3\2\2\2\u05d0\u05d3\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d1")
        buf.write("\u05d2\3\2\2\2\u05d2\u05d4\3\2\2\2\u05d3\u05d1\3\2\2\2")
        buf.write("\u05d4\u05d5\7\4\2\2\u05d5\u05d7\3\2\2\2\u05d6\u05c8\3")
        buf.write("\2\2\2\u05d6\u05ca\3\2\2\2\u05d7[\3\2\2\2\u05d8\u05d9")
        buf.write("\7b\2\2\u05d9\u05ef\7\3\2\2\u05da\u05db\t\f\2\2\u05db")
        buf.write("\u05f0\7\u0085\2\2\u05dc\u05dd\5v<\2\u05dd\u05de\7A\2")
        buf.write("\2\u05de\u05f0\3\2\2\2\u05df\u05f0\7\u00e5\2\2\u05e0\u05e1")
        buf.write("\7\u0086\2\2\u05e1\u05e2\7\u00e6\2\2\u05e2\u05e3\7\u0087")
        buf.write("\2\2\u05e3\u05e4\7\u0088\2\2\u05e4\u05ed\7\u00e6\2\2\u05e5")
        buf.write("\u05eb\7;\2\2\u05e6\u05ec\5\u00a6T\2\u05e7\u05e8\5\u00a4")
        buf.write("S\2\u05e8\u05e9\7\3\2\2\u05e9\u05ea\7\4\2\2\u05ea\u05ec")
        buf.write("\3\2\2\2\u05eb\u05e6\3\2\2\2\u05eb\u05e7\3\2\2\2\u05ec")
        buf.write("\u05ee\3\2\2\2\u05ed\u05e5\3\2\2\2\u05ed\u05ee\3\2\2\2")
        buf.write("\u05ee\u05f0\3\2\2\2\u05ef\u05da\3\2\2\2\u05ef\u05dc\3")
        buf.write("\2\2\2\u05ef\u05df\3\2\2\2\u05ef\u05e0\3\2\2\2\u05f0\u05f1")
        buf.write("\3\2\2\2\u05f1\u05f2\7\4\2\2\u05f2]\3\2\2\2\u05f3\u05f4")
        buf.write("\7\3\2\2\u05f4\u05f5\5`\61\2\u05f5\u05f6\7\4\2\2\u05f6")
        buf.write("_\3\2\2\2\u05f7\u05fc\5\u00a6T\2\u05f8\u05f9\7\5\2\2\u05f9")
        buf.write("\u05fb\5\u00a6T\2\u05fa\u05f8\3\2\2\2\u05fb\u05fe\3\2")
        buf.write("\2\2\u05fc\u05fa\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fda\3")
        buf.write("\2\2\2\u05fe\u05fc\3\2\2\2\u05ff\u0600\7\3\2\2\u0600\u0605")
        buf.write("\5d\63\2\u0601\u0602\7\5\2\2\u0602\u0604\5d\63\2\u0603")
        buf.write("\u0601\3\2\2\2\u0604\u0607\3\2\2\2\u0605\u0603\3\2\2\2")
        buf.write("\u0605\u0606\3\2\2\2\u0606\u0608\3\2\2\2\u0607\u0605\3")
        buf.write("\2\2\2\u0608\u0609\7\4\2\2\u0609c\3\2\2\2\u060a\u060c")
        buf.write("\5\u00a6T\2\u060b\u060d\t\n\2\2\u060c\u060b\3\2\2\2\u060c")
        buf.write("\u060d\3\2\2\2\u060de\3\2\2\2\u060e\u060f\7\3\2\2\u060f")
        buf.write("\u0614\5h\65\2\u0610\u0611\7\5\2\2\u0611\u0613\5h\65\2")
        buf.write("\u0612\u0610\3\2\2\2\u0613\u0616\3\2\2\2\u0614\u0612\3")
        buf.write("\2\2\2\u0614\u0615\3\2\2\2\u0615\u0617\3\2\2\2\u0616\u0614")
        buf.write("\3\2\2\2\u0617\u0618\7\4\2\2\u0618g\3\2\2\2\u0619\u061c")
        buf.write("\5\u00a6T\2\u061a\u061b\7i\2\2\u061b\u061d\7\u00e1\2\2")
        buf.write("\u061c\u061a\3\2\2\2\u061c\u061d\3\2\2\2\u061di\3\2\2")
        buf.write("\2\u061e\u0620\5p9\2\u061f\u0621\5\\/\2\u0620\u061f\3")
        buf.write("\2\2\2\u0620\u0621\3\2\2\2\u0621\u0626\3\2\2\2\u0622\u0624")
        buf.write("\7\r\2\2\u0623\u0622\3\2\2\2\u0623\u0624\3\2\2\2\u0624")
        buf.write("\u0625\3\2\2\2\u0625\u0627\5\u00a8U\2\u0626\u0623\3\2")
        buf.write("\2\2\u0626\u0627\3\2\2\2\u0627\u0650\3\2\2\2\u0628\u0629")
        buf.write("\7\3\2\2\u0629\u062a\5<\37\2\u062a\u062c\7\4\2\2\u062b")
        buf.write("\u062d\5\\/\2\u062c\u062b\3\2\2\2\u062c\u062d\3\2\2\2")
        buf.write("\u062d\u0632\3\2\2\2\u062e\u0630\7\r\2\2\u062f\u062e\3")
        buf.write("\2\2\2\u062f\u0630\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0633")
        buf.write("\5\u00a8U\2\u0632\u062f\3\2\2\2\u0632\u0633\3\2\2\2\u0633")
        buf.write("\u0650\3\2\2\2\u0634\u0635\7\3\2\2\u0635\u0636\5T+\2\u0636")
        buf.write("\u0638\7\4\2\2\u0637\u0639\5\\/\2\u0638\u0637\3\2\2\2")
        buf.write("\u0638\u0639\3\2\2\2\u0639\u063e\3\2\2\2\u063a\u063c\7")
        buf.write("\r\2\2\u063b\u063a\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063d")
        buf.write("\3\2\2\2\u063d\u063f\5\u00a8U\2\u063e\u063b\3\2\2\2\u063e")
        buf.write("\u063f\3\2\2\2\u063f\u0650\3\2\2\2\u0640\u0650\5l\67\2")
        buf.write("\u0641\u0642\5\u00a6T\2\u0642\u064b\7\3\2\2\u0643\u0648")
        buf.write("\5v<\2\u0644\u0645\7\5\2\2\u0645\u0647\5v<\2\u0646\u0644")
        buf.write("\3\2\2\2\u0647\u064a\3\2\2\2\u0648\u0646\3\2\2\2\u0648")
        buf.write("\u0649\3\2\2\2\u0649\u064c\3\2\2\2\u064a\u0648\3\2\2\2")
        buf.write("\u064b\u0643\3\2\2\2\u064b\u064c\3\2\2\2\u064c\u064d\3")
        buf.write("\2\2\2\u064d\u064e\7\4\2\2\u064e\u0650\3\2\2\2\u064f\u061e")
        buf.write("\3\2\2\2\u064f\u0628\3\2\2\2\u064f\u0634\3\2\2\2\u064f")
        buf.write("\u0640\3\2\2\2\u064f\u0641\3\2\2\2\u0650k\3\2\2\2\u0651")
        buf.write("\u0652\7H\2\2\u0652\u0657\5v<\2\u0653\u0654\7\5\2\2\u0654")
        buf.write("\u0656\5v<\2\u0655\u0653\3\2\2\2\u0656\u0659\3\2\2\2\u0657")
        buf.write("\u0655\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u0661\3\2\2\2")
        buf.write("\u0659\u0657\3\2\2\2\u065a\u065c\7\r\2\2\u065b\u065a\3")
        buf.write("\2\2\2\u065b\u065c\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u065f")
        buf.write("\5\u00a6T\2\u065e\u0660\5^\60\2\u065f\u065e\3\2\2\2\u065f")
        buf.write("\u0660\3\2\2\2\u0660\u0662\3\2\2\2\u0661\u065b\3\2\2\2")
        buf.write("\u0661\u0662\3\2\2\2\u0662m\3\2\2\2\u0663\u0664\7F\2\2")
        buf.write("\u0664\u0665\7R\2\2\u0665\u0666\7\u0090\2\2\u0666\u066a")
        buf.write("\7\u00e1\2\2\u0667\u0668\7G\2\2\u0668\u0669\7\u0091\2")
        buf.write("\2\u0669\u066b\5*\26\2\u066a\u0667\3\2\2\2\u066a\u066b")
        buf.write("\3\2\2\2\u066b\u0695\3\2\2\2\u066c\u066d\7F\2\2\u066d")
        buf.write("\u066e\7R\2\2\u066e\u0678\7\u0094\2\2\u066f\u0670\7\u0095")
        buf.write("\2\2\u0670\u0671\7\u0096\2\2\u0671\u0672\7\22\2\2\u0672")
        buf.write("\u0676\7\u00e1\2\2\u0673\u0674\7\u009a\2\2\u0674\u0675")
        buf.write("\7\22\2\2\u0675\u0677\7\u00e1\2\2\u0676\u0673\3\2\2\2")
        buf.write("\u0676\u0677\3\2\2\2\u0677\u0679\3\2\2\2\u0678\u066f\3")
        buf.write("\2\2\2\u0678\u0679\3\2\2\2\u0679\u067f\3\2\2\2\u067a\u067b")
        buf.write("\7\u0097\2\2\u067b\u067c\7\u0098\2\2\u067c\u067d\7\u0096")
        buf.write("\2\2\u067d\u067e\7\22\2\2\u067e\u0680\7\u00e1\2\2\u067f")
        buf.write("\u067a\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0686\3\2\2\2")
        buf.write("\u0681\u0682\7g\2\2\u0682\u0683\7\u0099\2\2\u0683\u0684")
        buf.write("\7\u0096\2\2\u0684\u0685\7\22\2\2\u0685\u0687\7\u00e1")
        buf.write("\2\2\u0686\u0681\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u068c")
        buf.write("\3\2\2\2\u0688\u0689\7\u009b\2\2\u0689\u068a\7\u0096\2")
        buf.write("\2\u068a\u068b\7\22\2\2\u068b\u068d\7\u00e1\2\2\u068c")
        buf.write("\u0688\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u0692\3\2\2\2")
        buf.write("\u068e\u068f\7%\2\2\u068f\u0690\7\u00c8\2\2\u0690\u0691")
        buf.write("\7\r\2\2\u0691\u0693\7\u00e1\2\2\u0692\u068e\3\2\2\2\u0692")
        buf.write("\u0693\3\2\2\2\u0693\u0695\3\2\2\2\u0694\u0663\3\2\2\2")
        buf.write("\u0694\u066c\3\2\2\2\u0695o\3\2\2\2\u0696\u0697\5\u00a6")
        buf.write("T\2\u0697\u0698\7\6\2\2\u0698\u069a\3\2\2\2\u0699\u0696")
        buf.write("\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u069b\3\2\2\2\u069b")
        buf.write("\u069c\5\u00a6T\2\u069cq\3\2\2\2\u069d\u06a5\5v<\2\u069e")
        buf.write("\u06a0\7\r\2\2\u069f\u069e\3\2\2\2\u069f\u06a0\3\2\2\2")
        buf.write("\u06a0\u06a3\3\2\2\2\u06a1\u06a4\5\u00a6T\2\u06a2\u06a4")
        buf.write("\5^\60\2\u06a3\u06a1\3\2\2\2\u06a3\u06a2\3\2\2\2\u06a4")
        buf.write("\u06a6\3\2\2\2\u06a5\u069f\3\2\2\2\u06a5\u06a6\3\2\2\2")
        buf.write("\u06a6s\3\2\2\2\u06a7\u06ac\5r:\2\u06a8\u06a9\7\5\2\2")
        buf.write("\u06a9\u06ab\5r:\2\u06aa\u06a8\3\2\2\2\u06ab\u06ae\3\2")
        buf.write("\2\2\u06ac\u06aa\3\2\2\2\u06ac\u06ad\3\2\2\2\u06adu\3")
        buf.write("\2\2\2\u06ae\u06ac\3\2\2\2\u06af\u06b0\5x=\2\u06b0w\3")
        buf.write("\2\2\2\u06b1\u06b2\b=\1\2\u06b2\u06b3\7\36\2\2\u06b3\u06bb")
        buf.write("\5x=\7\u06b4\u06bb\5z>\2\u06b5\u06b6\7 \2\2\u06b6\u06b7")
        buf.write("\7\3\2\2\u06b7\u06b8\5\26\f\2\u06b8\u06b9\7\4\2\2\u06b9")
        buf.write("\u06bb\3\2\2\2\u06ba\u06b1\3\2\2\2\u06ba\u06b4\3\2\2\2")
        buf.write("\u06ba\u06b5\3\2\2\2\u06bb\u06c4\3\2\2\2\u06bc\u06bd\f")
        buf.write("\5\2\2\u06bd\u06be\7\34\2\2\u06be\u06c3\5x=\6\u06bf\u06c0")
        buf.write("\f\4\2\2\u06c0\u06c1\7\33\2\2\u06c1\u06c3\5x=\5\u06c2")
        buf.write("\u06bc\3\2\2\2\u06c2\u06bf\3\2\2\2\u06c3\u06c6\3\2\2\2")
        buf.write("\u06c4\u06c2\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5y\3\2\2")
        buf.write("\2\u06c6\u06c4\3\2\2\2\u06c7\u06c9\5~@\2\u06c8\u06ca\5")
        buf.write("|?\2\u06c9\u06c8\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca{\3")
        buf.write("\2\2\2\u06cb\u06cd\7\36\2\2\u06cc\u06cb\3\2\2\2\u06cc")
        buf.write("\u06cd\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf\7!\2\2")
        buf.write("\u06cf\u06d0\5~@\2\u06d0\u06d1\7\34\2\2\u06d1\u06d2\5")
        buf.write("~@\2\u06d2\u06f5\3\2\2\2\u06d3\u06d5\7\36\2\2\u06d4\u06d3")
        buf.write("\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6")
        buf.write("\u06d7\7\35\2\2\u06d7\u06d8\7\3\2\2\u06d8\u06dd\5v<\2")
        buf.write("\u06d9\u06da\7\5\2\2\u06da\u06dc\5v<\2\u06db\u06d9\3\2")
        buf.write("\2\2\u06dc\u06df\3\2\2\2\u06dd\u06db\3\2\2\2\u06dd\u06de")
        buf.write("\3\2\2\2\u06de\u06e0\3\2\2\2\u06df\u06dd\3\2\2\2\u06e0")
        buf.write("\u06e1\7\4\2\2\u06e1\u06f5\3\2\2\2\u06e2\u06e4\7\36\2")
        buf.write("\2\u06e3\u06e2\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5")
        buf.write("\3\2\2\2\u06e5\u06e6\7\35\2\2\u06e6\u06e7\7\3\2\2\u06e7")
        buf.write("\u06e8\5\26\f\2\u06e8\u06e9\7\4\2\2\u06e9\u06f5\3\2\2")
        buf.write("\2\u06ea\u06ec\7\36\2\2\u06eb\u06ea\3\2\2\2\u06eb\u06ec")
        buf.write("\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ee\t\r\2\2\u06ee")
        buf.write("\u06f5\5~@\2\u06ef\u06f1\7$\2\2\u06f0\u06f2\7\36\2\2\u06f1")
        buf.write("\u06f0\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f3\3\2\2\2")
        buf.write("\u06f3\u06f5\7%\2\2\u06f4\u06cc\3\2\2\2\u06f4\u06d4\3")
        buf.write("\2\2\2\u06f4\u06e3\3\2\2\2\u06f4\u06eb\3\2\2\2\u06f4\u06ef")
        buf.write("\3\2\2\2\u06f5}\3\2\2\2\u06f6\u06f7\b@\1\2\u06f7\u06fb")
        buf.write("\5\u0080A\2\u06f8\u06f9\t\16\2\2\u06f9\u06fb\5~@\t\u06fa")
        buf.write("\u06f6\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fb\u0711\3\2\2\2")
        buf.write("\u06fc\u06fd\f\b\2\2\u06fd\u06fe\t\17\2\2\u06fe\u0710")
        buf.write("\5~@\t\u06ff\u0700\f\7\2\2\u0700\u0701\t\20\2\2\u0701")
        buf.write("\u0710\5~@\b\u0702\u0703\f\6\2\2\u0703\u0704\7\u0082\2")
        buf.write("\2\u0704\u0710\5~@\7\u0705\u0706\f\5\2\2\u0706\u0707\7")
        buf.write("\u0084\2\2\u0707\u0710\5~@\6\u0708\u0709\f\4\2\2\u0709")
        buf.write("\u070a\7\u0083\2\2\u070a\u0710\5~@\5\u070b\u070c\f\3\2")
        buf.write("\2\u070c\u070d\5\u0084C\2\u070d\u070e\5~@\4\u070e\u0710")
        buf.write("\3\2\2\2\u070f\u06fc\3\2\2\2\u070f\u06ff\3\2\2\2\u070f")
        buf.write("\u0702\3\2\2\2\u070f\u0705\3\2\2\2\u070f\u0708\3\2\2\2")
        buf.write("\u070f\u070b\3\2\2\2\u0710\u0713\3\2\2\2\u0711\u070f\3")
        buf.write("\2\2\2\u0711\u0712\3\2\2\2\u0712\177\3\2\2\2\u0713\u0711")
        buf.write("\3\2\2\2\u0714\u0715\bA\1\2\u0715\u0764\t\21\2\2\u0716")
        buf.write("\u0718\7-\2\2\u0717\u0719\5\u0098M\2\u0718\u0717\3\2\2")
        buf.write("\2\u0719\u071a\3\2\2\2\u071a\u0718\3\2\2\2\u071a\u071b")
        buf.write("\3\2\2\2\u071b\u071e\3\2\2\2\u071c\u071d\7\60\2\2\u071d")
        buf.write("\u071f\5v<\2\u071e\u071c\3\2\2\2\u071e\u071f\3\2\2\2\u071f")
        buf.write("\u0720\3\2\2\2\u0720\u0721\7\61\2\2\u0721\u0764\3\2\2")
        buf.write("\2\u0722\u0723\7-\2\2\u0723\u0725\5v<\2\u0724\u0726\5")
        buf.write("\u0098M\2\u0725\u0724\3\2\2\2\u0726\u0727\3\2\2\2\u0727")
        buf.write("\u0725\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u072b\3\2\2\2")
        buf.write("\u0729\u072a\7\60\2\2\u072a\u072c\5v<\2\u072b\u0729\3")
        buf.write("\2\2\2\u072b\u072c\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u072e")
        buf.write("\7\61\2\2\u072e\u0764\3\2\2\2\u072f\u0730\7U\2\2\u0730")
        buf.write("\u0731\7\3\2\2\u0731\u0732\5v<\2\u0732\u0733\7\r\2\2\u0733")
        buf.write("\u0734\5\u0092J\2\u0734\u0735\7\4\2\2\u0735\u0764\3\2")
        buf.write("\2\2\u0736\u0764\5\u0082B\2\u0737\u0764\7}\2\2\u0738\u0739")
        buf.write("\5\u00a4S\2\u0739\u073a\7\6\2\2\u073a\u073b\7}\2\2\u073b")
        buf.write("\u0764\3\2\2\2\u073c\u073d\7\3\2\2\u073d\u0740\5v<\2\u073e")
        buf.write("\u073f\7\5\2\2\u073f\u0741\5v<\2\u0740\u073e\3\2\2\2\u0741")
        buf.write("\u0742\3\2\2\2\u0742\u0740\3\2\2\2\u0742\u0743\3\2\2\2")
        buf.write("\u0743\u0744\3\2\2\2\u0744\u0745\7\4\2\2\u0745\u0764\3")
        buf.write("\2\2\2\u0746\u0747\7\3\2\2\u0747\u0748\5\26\f\2\u0748")
        buf.write("\u0749\7\4\2\2\u0749\u0764\3\2\2\2\u074a\u074b\5\u00a4")
        buf.write("S\2\u074b\u0757\7\3\2\2\u074c\u074e\5R*\2\u074d\u074c")
        buf.write("\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u074f\3\2\2\2\u074f")
        buf.write("\u0754\5v<\2\u0750\u0751\7\5\2\2\u0751\u0753\5v<\2\u0752")
        buf.write("\u0750\3\2\2\2\u0753\u0756\3\2\2\2\u0754\u0752\3\2\2\2")
        buf.write("\u0754\u0755\3\2\2\2\u0755\u0758\3\2\2\2\u0756\u0754\3")
        buf.write("\2\2\2\u0757\u074d\3\2\2\2\u0757\u0758\3\2\2\2\u0758\u0759")
        buf.write("\3\2\2\2\u0759\u075c\7\4\2\2\u075a\u075b\7>\2\2\u075b")
        buf.write("\u075d\5\u009eP\2\u075c\u075a\3\2\2\2\u075c\u075d\3\2")
        buf.write("\2\2\u075d\u0764\3\2\2\2\u075e\u0764\5\u00a6T\2\u075f")
        buf.write("\u0760\7\3\2\2\u0760\u0761\5v<\2\u0761\u0762\7\4\2\2\u0762")
        buf.write("\u0764\3\2\2\2\u0763\u0714\3\2\2\2\u0763\u0716\3\2\2\2")
        buf.write("\u0763\u0722\3\2\2\2\u0763\u072f\3\2\2\2\u0763\u0736\3")
        buf.write("\2\2\2\u0763\u0737\3\2\2\2\u0763\u0738\3\2\2\2\u0763\u073c")
        buf.write("\3\2\2\2\u0763\u0746\3\2\2\2\u0763\u074a\3\2\2\2\u0763")
        buf.write("\u075e\3\2\2\2\u0763\u075f\3\2\2\2\u0764\u076f\3\2\2\2")
        buf.write("\u0765\u0766\f\6\2\2\u0766\u0767\7\7\2\2\u0767\u0768\5")
        buf.write("~@\2\u0768\u0769\7\b\2\2\u0769\u076e\3\2\2\2\u076a\u076b")
        buf.write("\f\4\2\2\u076b\u076c\7\6\2\2\u076c\u076e\5\u00a6T\2\u076d")
        buf.write("\u0765\3\2\2\2\u076d\u076a\3\2\2\2\u076e\u0771\3\2\2\2")
        buf.write("\u076f\u076d\3\2\2\2\u076f\u0770\3\2\2\2\u0770\u0081\3")
        buf.write("\2\2\2\u0771\u076f\3\2\2\2\u0772\u077f\7%\2\2\u0773\u077f")
        buf.write("\5\u008cG\2\u0774\u0775\5\u00a6T\2\u0775\u0776\7\u00e1")
        buf.write("\2\2\u0776\u077f\3\2\2\2\u0777\u077f\5\u00acW\2\u0778")
        buf.write("\u077f\5\u008aF\2\u0779\u077b\7\u00e1\2\2\u077a\u0779")
        buf.write("\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u077a\3\2\2\2\u077c")
        buf.write("\u077d\3\2\2\2\u077d\u077f\3\2\2\2\u077e\u0772\3\2\2\2")
        buf.write("\u077e\u0773\3\2\2\2\u077e\u0774\3\2\2\2\u077e\u0777\3")
        buf.write("\2\2\2\u077e\u0778\3\2\2\2\u077e\u077a\3\2\2\2\u077f\u0083")
        buf.write("\3\2\2\2\u0780\u0781\t\22\2\2\u0781\u0085\3\2\2\2\u0782")
        buf.write("\u0783\t\23\2\2\u0783\u0087\3\2\2\2\u0784\u0785\t\24\2")
        buf.write("\2\u0785\u0089\3\2\2\2\u0786\u0787\t\25\2\2\u0787\u008b")
        buf.write("\3\2\2\2\u0788\u078c\7,\2\2\u0789\u078b\5\u008eH\2\u078a")
        buf.write("\u0789\3\2\2\2\u078b\u078e\3\2\2\2\u078c\u078a\3\2\2\2")
        buf.write("\u078c\u078d\3\2\2\2\u078d\u008d\3\2\2\2\u078e\u078c\3")
        buf.write("\2\2\2\u078f\u0790\5\u0090I\2\u0790\u0793\5\u00a6T\2\u0791")
        buf.write("\u0792\7a\2\2\u0792\u0794\5\u00a6T\2\u0793\u0791\3\2\2")
        buf.write("\2\u0793\u0794\3\2\2\2\u0794\u008f\3\2\2\2\u0795\u0797")
        buf.write("\t\20\2\2\u0796\u0795\3\2\2\2\u0796\u0797\3\2\2\2\u0797")
        buf.write("\u0798\3\2\2\2\u0798\u079b\t\f\2\2\u0799\u079b\7\u00e1")
        buf.write("\2\2\u079a\u0796\3\2\2\2\u079a\u0799\3\2\2\2\u079b\u0091")
        buf.write("\3\2\2\2\u079c\u079d\7f\2\2\u079d\u079e\7w\2\2\u079e\u079f")
        buf.write("\5\u0092J\2\u079f\u07a0\7y\2\2\u07a0\u07bf\3\2\2\2\u07a1")
        buf.write("\u07a2\7g\2\2\u07a2\u07a3\7w\2\2\u07a3\u07a4\5\u0092J")
        buf.write("\2\u07a4\u07a5\7\5\2\2\u07a5\u07a6\5\u0092J\2\u07a6\u07a7")
        buf.write("\7y\2\2\u07a7\u07bf\3\2\2\2\u07a8\u07af\7h\2\2\u07a9\u07ab")
        buf.write("\7w\2\2\u07aa\u07ac\5\u0094K\2\u07ab\u07aa\3\2\2\2\u07ab")
        buf.write("\u07ac\3\2\2\2\u07ac\u07ad\3\2\2\2\u07ad\u07b0\7y\2\2")
        buf.write("\u07ae\u07b0\7u\2\2\u07af\u07a9\3\2\2\2\u07af\u07ae\3")
        buf.write("\2\2\2\u07b0\u07bf\3\2\2\2\u07b1\u07bc\5\u00a6T\2\u07b2")
        buf.write("\u07b3\7\3\2\2\u07b3\u07b8\7\u00e6\2\2\u07b4\u07b5\7\5")
        buf.write("\2\2\u07b5\u07b7\7\u00e6\2\2\u07b6\u07b4\3\2\2\2\u07b7")
        buf.write("\u07ba\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9\3\2\2\2")
        buf.write("\u07b9\u07bb\3\2\2\2\u07ba\u07b8\3\2\2\2\u07bb\u07bd\7")
        buf.write("\4\2\2\u07bc\u07b2\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bf")
        buf.write("\3\2\2\2\u07be\u079c\3\2\2\2\u07be\u07a1\3\2\2\2\u07be")
        buf.write("\u07a8\3\2\2\2\u07be\u07b1\3\2\2\2\u07bf\u0093\3\2\2\2")
        buf.write("\u07c0\u07c5\5\u0096L\2\u07c1\u07c2\7\5\2\2\u07c2\u07c4")
        buf.write("\5\u0096L\2\u07c3\u07c1\3\2\2\2\u07c4\u07c7\3\2\2\2\u07c5")
        buf.write("\u07c3\3\2\2\2\u07c5\u07c6\3\2\2\2\u07c6\u0095\3\2\2\2")
        buf.write("\u07c7\u07c5\3\2\2\2\u07c8\u07ca\5\u00a6T\2\u07c9\u07cb")
        buf.write("\7\t\2\2\u07ca\u07c9\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb")
        buf.write("\u07cc\3\2\2\2\u07cc\u07cf\5\u0092J\2\u07cd\u07ce\7i\2")
        buf.write("\2\u07ce\u07d0\7\u00e1\2\2\u07cf\u07cd\3\2\2\2\u07cf\u07d0")
        buf.write("\3\2\2\2\u07d0\u0097\3\2\2\2\u07d1\u07d2\7.\2\2\u07d2")
        buf.write("\u07d3\5v<\2\u07d3\u07d4\7/\2\2\u07d4\u07d5\5v<\2\u07d5")
        buf.write("\u0099\3\2\2\2\u07d6\u07d7\7=\2\2\u07d7\u07dc\5\u009c")
        buf.write("O\2\u07d8\u07d9\7\5\2\2\u07d9\u07db\5\u009cO\2\u07da\u07d8")
        buf.write("\3\2\2\2\u07db\u07de\3\2\2\2\u07dc\u07da\3\2\2\2\u07dc")
        buf.write("\u07dd\3\2\2\2\u07dd\u009b\3\2\2\2\u07de\u07dc\3\2\2\2")
        buf.write("\u07df\u07e0\5\u00a6T\2\u07e0\u07e1\7\r\2\2\u07e1\u07e2")
        buf.write("\5\u009eP\2\u07e2\u009d\3\2\2\2\u07e3\u080e\5\u00a6T\2")
        buf.write("\u07e4\u0807\7\3\2\2\u07e5\u07e6\7\u008a\2\2\u07e6\u07e7")
        buf.write("\7\22\2\2\u07e7\u07ec\5v<\2\u07e8\u07e9\7\5\2\2\u07e9")
        buf.write("\u07eb\5v<\2\u07ea\u07e8\3\2\2\2\u07eb\u07ee\3\2\2\2\u07ec")
        buf.write("\u07ea\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u0808\3\2\2\2")
        buf.write("\u07ee\u07ec\3\2\2\2\u07ef\u07f0\t\26\2\2\u07f0\u07f1")
        buf.write("\7\22\2\2\u07f1\u07f6\5v<\2\u07f2\u07f3\7\5\2\2\u07f3")
        buf.write("\u07f5\5v<\2\u07f4\u07f2\3\2\2\2\u07f5\u07f8\3\2\2\2\u07f6")
        buf.write("\u07f4\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07fa\3\2\2\2")
        buf.write("\u07f8\u07f6\3\2\2\2\u07f9\u07ef\3\2\2\2\u07f9\u07fa\3")
        buf.write("\2\2\2\u07fa\u0805\3\2\2\2\u07fb\u07fc\t\27\2\2\u07fc")
        buf.write("\u07fd\7\22\2\2\u07fd\u0802\5F$\2\u07fe\u07ff\7\5\2\2")
        buf.write("\u07ff\u0801\5F$\2\u0800\u07fe\3\2\2\2\u0801\u0804\3\2")
        buf.write("\2\2\u0802\u0800\3\2\2\2\u0802\u0803\3\2\2\2\u0803\u0806")
        buf.write("\3\2\2\2\u0804\u0802\3\2\2\2\u0805\u07fb\3\2\2\2\u0805")
        buf.write("\u0806\3\2\2\2\u0806\u0808\3\2\2\2\u0807\u07e5\3\2\2\2")
        buf.write("\u0807\u07f9\3\2\2\2\u0808\u080a\3\2\2\2\u0809\u080b\5")
        buf.write("\u00a0Q\2\u080a\u0809\3\2\2\2\u080a\u080b\3\2\2\2\u080b")
        buf.write("\u080c\3\2\2\2\u080c\u080e\7\4\2\2\u080d\u07e3\3\2\2\2")
        buf.write("\u080d\u07e4\3\2\2\2\u080e\u009f\3\2\2\2\u080f\u0810\7")
        buf.write("@\2\2\u0810\u0820\5\u00a2R\2\u0811\u0812\7A\2\2\u0812")
        buf.write("\u0820\5\u00a2R\2\u0813\u0814\7@\2\2\u0814\u0815\7!\2")
        buf.write("\2\u0815\u0816\5\u00a2R\2\u0816\u0817\7\34\2\2\u0817\u0818")
        buf.write("\5\u00a2R\2\u0818\u0820\3\2\2\2\u0819\u081a\7A\2\2\u081a")
        buf.write("\u081b\7!\2\2\u081b\u081c\5\u00a2R\2\u081c\u081d\7\34")
        buf.write("\2\2\u081d\u081e\5\u00a2R\2\u081e\u0820\3\2\2\2\u081f")
        buf.write("\u080f\3\2\2\2\u081f\u0811\3\2\2\2\u081f\u0813\3\2\2\2")
        buf.write("\u081f\u0819\3\2\2\2\u0820\u00a1\3\2\2\2\u0821\u0822\7")
        buf.write("B\2\2\u0822\u0829\t\30\2\2\u0823\u0824\7E\2\2\u0824\u0829")
        buf.write("\7F\2\2\u0825\u0826\5v<\2\u0826\u0827\t\30\2\2\u0827\u0829")
        buf.write("\3\2\2\2\u0828\u0821\3\2\2\2\u0828\u0823\3\2\2\2\u0828")
        buf.write("\u0825\3\2\2\2\u0829\u00a3\3\2\2\2\u082a\u082f\5\u00a6")
        buf.write("T\2\u082b\u082c\7\6\2\2\u082c\u082e\5\u00a6T\2\u082d\u082b")
        buf.write("\3\2\2\2\u082e\u0831\3\2\2\2\u082f\u082d\3\2\2\2\u082f")
        buf.write("\u0830\3\2\2\2\u0830\u00a5\3\2\2\2\u0831\u082f\3\2\2\2")
        buf.write("\u0832\u0841\5\u00a8U\2\u0833\u0841\7\u00dc\2\2\u0834")
        buf.write("\u0841\79\2\2\u0835\u0841\7\65\2\2\u0836\u0841\7\66\2")
        buf.write("\2\u0837\u0841\7\67\2\2\u0838\u0841\78\2\2\u0839\u0841")
        buf.write("\7:\2\2\u083a\u0841\7\62\2\2\u083b\u0841\7\63\2\2\u083c")
        buf.write("\u0841\7;\2\2\u083d\u0841\7^\2\2\u083e\u0841\7`\2\2\u083f")
        buf.write("\u0841\7_\2\2\u0840\u0832\3\2\2\2\u0840\u0833\3\2\2\2")
        buf.write("\u0840\u0834\3\2\2\2\u0840\u0835\3\2\2\2\u0840\u0836\3")
        buf.write("\2\2\2\u0840\u0837\3\2\2\2\u0840\u0838\3\2\2\2\u0840\u0839")
        buf.write("\3\2\2\2\u0840\u083a\3\2\2\2\u0840\u083b\3\2\2\2\u0840")
        buf.write("\u083c\3\2\2\2\u0840\u083d\3\2\2\2\u0840\u083e\3\2\2\2")
        buf.write("\u0840\u083f\3\2\2\2\u0841\u00a7\3\2\2\2\u0842\u0846\7")
        buf.write("\u00eb\2\2\u0843\u0846\5\u00aaV\2\u0844\u0846\5\u00ae")
        buf.write("X\2\u0845\u0842\3\2\2\2\u0845\u0843\3\2\2\2\u0845\u0844")
        buf.write("\3\2\2\2\u0846\u00a9\3\2\2\2\u0847\u0848\7\u00ec\2\2\u0848")
        buf.write("\u00ab\3\2\2\2\u0849\u084b\7|\2\2\u084a\u0849\3\2\2\2")
        buf.write("\u084a\u084b\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u086a\7")
        buf.write("\u00e7\2\2\u084d\u084f\7|\2\2\u084e\u084d\3\2\2\2\u084e")
        buf.write("\u084f\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u086a\7\u00e8")
        buf.write("\2\2\u0851\u0853\7|\2\2\u0852\u0851\3\2\2\2\u0852\u0853")
        buf.write("\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u086a\7\u00e6\2\2\u0855")
        buf.write("\u0857\7|\2\2\u0856\u0855\3\2\2\2\u0856\u0857\3\2\2\2")
        buf.write("\u0857\u0858\3\2\2\2\u0858\u086a\7\u00e2\2\2\u0859\u085b")
        buf.write("\7|\2\2\u085a\u0859\3\2\2\2\u085a\u085b\3\2\2\2\u085b")
        buf.write("\u085c\3\2\2\2\u085c\u086a\7\u00e3\2\2\u085d\u085f\7|")
        buf.write("\2\2\u085e\u085d\3\2\2\2\u085e\u085f\3\2\2\2\u085f\u0860")
        buf.write("\3\2\2\2\u0860\u086a\7\u00e4\2\2\u0861\u0863\7|\2\2\u0862")
        buf.write("\u0861\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0864\3\2\2\2")
        buf.write("\u0864\u086a\7\u00e9\2\2\u0865\u0867\7|\2\2\u0866\u0865")
        buf.write("\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0868\3\2\2\2\u0868")
        buf.write("\u086a\7\u00ea\2\2\u0869\u084a\3\2\2\2\u0869\u084e\3\2")
        buf.write("\2\2\u0869\u0852\3\2\2\2\u0869\u0856\3\2\2\2\u0869\u085a")
        buf.write("\3\2\2\2\u0869\u085e\3\2\2\2\u0869\u0862\3\2\2\2\u0869")
        buf.write("\u0866\3\2\2\2\u086a\u00ad\3\2\2\2\u086b\u086c\t\31\2")
        buf.write("\2\u086c\u00af\3\2\2\2\u012c\u00c4\u00c9\u00cc\u00d1\u00de")
        buf.write("\u00e2\u00e9\u00ee\u00f3\u00f6\u00fc\u0101\u0104\u0107")
        buf.write("\u0110\u0114\u011c\u011f\u0122\u0125\u0128\u012b\u012f")
        buf.write("\u0132\u0135\u013c\u0146\u014e\u0150\u0167\u016f\u0177")
        buf.write("\u017d\u018a\u018f\u0198\u019d\u01ad\u01b4\u01b8\u01c0")
        buf.write("\u01c7\u01ce\u01dd\u01e1\u01e7\u01ed\u01f0\u01f6\u01fa")
        buf.write("\u01fe\u0203\u0207\u020f\u0218\u021d\u0223\u0229\u0235")
        buf.write("\u0238\u023c\u0241\u0246\u024d\u0250\u0253\u0259\u0262")
        buf.write("\u026a\u0270\u0274\u0278\u027c\u027e\u0287\u028d\u0292")
        buf.write("\u0296\u0299\u02a2\u02a7\u02ac\u02af\u02b9\u02be\u02c4")
        buf.write("\u02ca\u02d5\u02dd\u02e4\u02ec\u02ef\u02f7\u02fb\u0302")
        buf.write("\u0376\u037e\u0386\u038f\u0398\u039c\u03a2\u03ae\u03b2")
        buf.write("\u03b5\u03bb\u03c5\u03d1\u03d6\u03dc\u03e8\u03ea\u03ef")
        buf.write("\u03f3\u03f5\u03f9\u0402\u040a\u0411\u0417\u041b\u0424")
        buf.write("\u0429\u0438\u043f\u0442\u0449\u044d\u0455\u0460\u046b")
        buf.write("\u0472\u0478\u047e\u0487\u0489\u0492\u0495\u049e\u04a1")
        buf.write("\u04aa\u04ad\u04b6\u04b9\u04bc\u04c0\u04c3\u04ce\u04d3")
        buf.write("\u04de\u04e2\u04ee\u04f1\u04f5\u04ff\u0503\u0505\u0508")
        buf.write("\u050c\u050f\u0513\u0517\u051b\u0520\u0523\u0525\u052a")
        buf.write("\u052f\u0532\u0536\u0539\u053b\u0543\u0549\u0553\u0562")
        buf.write("\u0567\u056f\u0572\u0576\u057b\u0584\u0587\u058c\u0593")
        buf.write("\u0596\u059e\u05a3\u05a8\u05af\u05b2\u05b6\u05bc\u05c0")
        buf.write("\u05c3\u05c6\u05d1\u05d6\u05eb\u05ed\u05ef\u05fc\u0605")
        buf.write("\u060c\u0614\u061c\u0620\u0623\u0626\u062c\u062f\u0632")
        buf.write("\u0638\u063b\u063e\u0648\u064b\u064f\u0657\u065b\u065f")
        buf.write("\u0661\u066a\u0676\u0678\u067f\u0686\u068c\u0692\u0694")
        buf.write("\u0699\u069f\u06a3\u06a5\u06ac\u06ba\u06c2\u06c4\u06c9")
        buf.write("\u06cc\u06d4\u06dd\u06e3\u06eb\u06f1\u06f4\u06fa\u070f")
        buf.write("\u0711\u071a\u071e\u0727\u072b\u0742\u074d\u0754\u0757")
        buf.write("\u075c\u0763\u076d\u076f\u077c\u077e\u078c\u0793\u0796")
        buf.write("\u079a\u07ab\u07af\u07b8\u07bc\u07be\u07c5\u07ca\u07cf")
        buf.write("\u07dc\u07ec\u07f6\u07f9\u0802\u0805\u0807\u080a\u080d")
        buf.write("\u081f\u0828\u082f\u0840\u0845\u084a\u084e\u0852\u0856")
        buf.write("\u085a\u085e\u0862\u0866\u0869")
        return buf.getvalue()


class SqlBaseParser(Parser):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'('",
        "')'",
        "','",
        "'.'",
        "'['",
        "']'",
        "':'",
        "'SELECT'",
        "'FROM'",
        "'ADD'",
        "'AS'",
        "'ALL'",
        "'DISTINCT'",
        "'WHERE'",
        "'GROUP'",
        "'BY'",
        "'GROUPING'",
        "'SETS'",
        "'CUBE'",
        "'ROLLUP'",
        "'ORDER'",
        "'HAVING'",
        "'LIMIT'",
        "'AT'",
        "'OR'",
        "'AND'",
        "'IN'",
        "<INVALID>",
        "'NO'",
        "'EXISTS'",
        "'BETWEEN'",
        "'LIKE'",
        "<INVALID>",
        "'IS'",
        "'NULL'",
        "'TRUE'",
        "'FALSE'",
        "'NULLS'",
        "'ASC'",
        "'DESC'",
        "'FOR'",
        "'INTERVAL'",
        "'CASE'",
        "'WHEN'",
        "'THEN'",
        "'ELSE'",
        "'END'",
        "'JOIN'",
        "'CROSS'",
        "'OUTER'",
        "'INNER'",
        "'LEFT'",
        "'SEMI'",
        "'RIGHT'",
        "'FULL'",
        "'NATURAL'",
        "'ON'",
        "'LATERAL'",
        "'WINDOW'",
        "'OVER'",
        "'PARTITION'",
        "'RANGE'",
        "'ROWS'",
        "'UNBOUNDED'",
        "'PRECEDING'",
        "'FOLLOWING'",
        "'CURRENT'",
        "'ROW'",
        "'WITH'",
        "'VALUES'",
        "'CREATE'",
        "'TABLE'",
        "'VIEW'",
        "'REPLACE'",
        "'INSERT'",
        "'DELETE'",
        "'INTO'",
        "'DESCRIBE'",
        "'EXPLAIN'",
        "'FORMAT'",
        "'LOGICAL'",
        "'CODEGEN'",
        "'CAST'",
        "'SHOW'",
        "'TABLES'",
        "'COLUMNS'",
        "'COLUMN'",
        "'USE'",
        "'PARTITIONS'",
        "'FUNCTIONS'",
        "'DROP'",
        "'UNION'",
        "'EXCEPT'",
        "'INTERSECT'",
        "'TO'",
        "'TABLESAMPLE'",
        "'STRATIFY'",
        "'ALTER'",
        "'RENAME'",
        "'ARRAY'",
        "'MAP'",
        "'STRUCT'",
        "'COMMENT'",
        "'SET'",
        "'RESET'",
        "'DATA'",
        "'START'",
        "'TRANSACTION'",
        "'COMMIT'",
        "'ROLLBACK'",
        "'MACRO'",
        "'IF'",
        "<INVALID>",
        "'<=>'",
        "'<>'",
        "'!='",
        "'<'",
        "<INVALID>",
        "'>'",
        "<INVALID>",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'DIV'",
        "'~'",
        "'&'",
        "'|'",
        "'^'",
        "'PERCENT'",
        "'BUCKET'",
        "'OUT'",
        "'OF'",
        "'SORT'",
        "'CLUSTER'",
        "'DISTRIBUTE'",
        "'OVERWRITE'",
        "'TRANSFORM'",
        "'REDUCE'",
        "'USING'",
        "'SERDE'",
        "'SERDEPROPERTIES'",
        "'RECORDREADER'",
        "'RECORDWRITER'",
        "'DELIMITED'",
        "'FIELDS'",
        "'TERMINATED'",
        "'COLLECTION'",
        "'ITEMS'",
        "'KEYS'",
        "'ESCAPED'",
        "'LINES'",
        "'SEPARATED'",
        "'FUNCTION'",
        "'EXTENDED'",
        "'REFRESH'",
        "'CLEAR'",
        "'CACHE'",
        "'UNCACHE'",
        "'LAZY'",
        "'FORMATTED'",
        "<INVALID>",
        "'OPTIONS'",
        "'UNSET'",
        "'TBLPROPERTIES'",
        "'DBPROPERTIES'",
        "'BUCKETS'",
        "'SKEWED'",
        "'STORED'",
        "'DIRECTORIES'",
        "'LOCATION'",
        "'EXCHANGE'",
        "'ARCHIVE'",
        "'UNARCHIVE'",
        "'FILEFORMAT'",
        "'TOUCH'",
        "'COMPACT'",
        "'CONCATENATE'",
        "'CHANGE'",
        "'CASCADE'",
        "'RESTRICT'",
        "'CLUSTERED'",
        "'SORTED'",
        "'PURGE'",
        "'INPUTFORMAT'",
        "'OUTPUTFORMAT'",
        "<INVALID>",
        "<INVALID>",
        "'DFS'",
        "'TRUNCATE'",
        "'ANALYZE'",
        "'COMPUTE'",
        "'LIST'",
        "'STATISTICS'",
        "'PARTITIONED'",
        "'EXTERNAL'",
        "'DEFINED'",
        "'REVOKE'",
        "'GRANT'",
        "'LOCK'",
        "'UNLOCK'",
        "'MSCK'",
        "'REPAIR'",
        "'RECOVER'",
        "'EXPORT'",
        "'IMPORT'",
        "'LOAD'",
        "'ROLE'",
        "'ROLES'",
        "'COMPACTIONS'",
        "'PRINCIPALS'",
        "'TRANSACTIONS'",
        "'INDEX'",
        "'INDEXES'",
        "'LOCKS'",
        "'OPTION'",
        "'ANTI'",
        "'LOCAL'",
        "'INPATH'",
        "'CURRENT_DATE'",
        "'CURRENT_TIMESTAMP'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "SELECT",
        "FROM",
        "ADD",
        "AS",
        "ALL",
        "DISTINCT",
        "WHERE",
        "GROUP",
        "BY",
        "GROUPING",
        "SETS",
        "CUBE",
        "ROLLUP",
        "ORDER",
        "HAVING",
        "LIMIT",
        "AT",
        "OR",
        "AND",
        "IN",
        "NOT",
        "NO",
        "EXISTS",
        "BETWEEN",
        "LIKE",
        "RLIKE",
        "IS",
        "NULL",
        "TRUE",
        "FALSE",
        "NULLS",
        "ASC",
        "DESC",
        "FOR",
        "INTERVAL",
        "CASE",
        "WHEN",
        "THEN",
        "ELSE",
        "END",
        "JOIN",
        "CROSS",
        "OUTER",
        "INNER",
        "LEFT",
        "SEMI",
        "RIGHT",
        "FULL",
        "NATURAL",
        "ON",
        "LATERAL",
        "WINDOW",
        "OVER",
        "PARTITION",
        "RANGE",
        "ROWS",
        "UNBOUNDED",
        "PRECEDING",
        "FOLLOWING",
        "CURRENT",
        "ROW",
        "WITH",
        "VALUES",
        "CREATE",
        "TABLE",
        "VIEW",
        "REPLACE",
        "INSERT",
        "DELETE",
        "INTO",
        "DESCRIBE",
        "EXPLAIN",
        "FORMAT",
        "LOGICAL",
        "CODEGEN",
        "CAST",
        "SHOW",
        "TABLES",
        "COLUMNS",
        "COLUMN",
        "USE",
        "PARTITIONS",
        "FUNCTIONS",
        "DROP",
        "UNION",
        "EXCEPT",
        "INTERSECT",
        "TO",
        "TABLESAMPLE",
        "STRATIFY",
        "ALTER",
        "RENAME",
        "ARRAY",
        "MAP",
        "STRUCT",
        "COMMENT",
        "SET",
        "RESET",
        "DATA",
        "START",
        "TRANSACTION",
        "COMMIT",
        "ROLLBACK",
        "MACRO",
        "IF",
        "EQ",
        "NSEQ",
        "NEQ",
        "NEQJ",
        "LT",
        "LTE",
        "GT",
        "GTE",
        "PLUS",
        "MINUS",
        "ASTERISK",
        "SLASH",
        "PERCENT",
        "DIV",
        "TILDE",
        "AMPERSAND",
        "PIPE",
        "HAT",
        "PERCENTLIT",
        "BUCKET",
        "OUT",
        "OF",
        "SORT",
        "CLUSTER",
        "DISTRIBUTE",
        "OVERWRITE",
        "TRANSFORM",
        "REDUCE",
        "USING",
        "SERDE",
        "SERDEPROPERTIES",
        "RECORDREADER",
        "RECORDWRITER",
        "DELIMITED",
        "FIELDS",
        "TERMINATED",
        "COLLECTION",
        "ITEMS",
        "KEYS",
        "ESCAPED",
        "LINES",
        "SEPARATED",
        "FUNCTION",
        "EXTENDED",
        "REFRESH",
        "CLEAR",
        "CACHE",
        "UNCACHE",
        "LAZY",
        "FORMATTED",
        "TEMPORARY",
        "OPTIONS",
        "UNSET",
        "TBLPROPERTIES",
        "DBPROPERTIES",
        "BUCKETS",
        "SKEWED",
        "STORED",
        "DIRECTORIES",
        "LOCATION",
        "EXCHANGE",
        "ARCHIVE",
        "UNARCHIVE",
        "FILEFORMAT",
        "TOUCH",
        "COMPACT",
        "CONCATENATE",
        "CHANGE",
        "CASCADE",
        "RESTRICT",
        "CLUSTERED",
        "SORTED",
        "PURGE",
        "INPUTFORMAT",
        "OUTPUTFORMAT",
        "DATABASE",
        "DATABASES",
        "DFS",
        "TRUNCATE",
        "ANALYZE",
        "COMPUTE",
        "LIST",
        "STATISTICS",
        "PARTITIONED",
        "EXTERNAL",
        "DEFINED",
        "REVOKE",
        "GRANT",
        "LOCK",
        "UNLOCK",
        "MSCK",
        "REPAIR",
        "RECOVER",
        "EXPORT",
        "IMPORT",
        "LOAD",
        "ROLE",
        "ROLES",
        "COMPACTIONS",
        "PRINCIPALS",
        "TRANSACTIONS",
        "INDEX",
        "INDEXES",
        "LOCKS",
        "OPTION",
        "ANTI",
        "LOCAL",
        "INPATH",
        "CURRENT_DATE",
        "CURRENT_TIMESTAMP",
        "STRING",
        "BIGINT_LITERAL",
        "SMALLINT_LITERAL",
        "TINYINT_LITERAL",
        "BYTELENGTH_LITERAL",
        "INTEGER_VALUE",
        "DECIMAL_VALUE",
        "SCIENTIFIC_DECIMAL_VALUE",
        "DOUBLE_LITERAL",
        "BIGDECIMAL_LITERAL",
        "IDENTIFIER",
        "BACKQUOTED_IDENTIFIER",
        "SIMPLE_COMMENT",
        "BRACKETED_COMMENT",
        "WS",
        "UNRECOGNIZED",
        "DELIMITER",
    ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleDataType = 3
    RULE_statement = 4
    RULE_unsupportedHiveNativeCommands = 5
    RULE_createTableHeader = 6
    RULE_bucketSpec = 7
    RULE_skewSpec = 8
    RULE_locationSpec = 9
    RULE_query = 10
    RULE_insertInto = 11
    RULE_partitionSpecLocation = 12
    RULE_partitionSpec = 13
    RULE_partitionVal = 14
    RULE_describeFuncName = 15
    RULE_describeColName = 16
    RULE_ctes = 17
    RULE_namedQuery = 18
    RULE_tableProvider = 19
    RULE_tablePropertyList = 20
    RULE_tableProperty = 21
    RULE_tablePropertyKey = 22
    RULE_constantList = 23
    RULE_nestedConstantList = 24
    RULE_createFileFormat = 25
    RULE_fileFormat = 26
    RULE_storageHandler = 27
    RULE_resource = 28
    RULE_queryNoWith = 29
    RULE_queryOrganization = 30
    RULE_multiInsertQueryBody = 31
    RULE_queryTerm = 32
    RULE_queryPrimary = 33
    RULE_sortItem = 34
    RULE_querySpecification = 35
    RULE_fromClause = 36
    RULE_aggregation = 37
    RULE_groupingSet = 38
    RULE_lateralView = 39
    RULE_setQuantifier = 40
    RULE_relation = 41
    RULE_joinRelation = 42
    RULE_joinType = 43
    RULE_joinCriteria = 44
    RULE_sample = 45
    RULE_identifierList = 46
    RULE_identifierSeq = 47
    RULE_orderedIdentifierList = 48
    RULE_orderedIdentifier = 49
    RULE_identifierCommentList = 50
    RULE_identifierComment = 51
    RULE_relationPrimary = 52
    RULE_inlineTable = 53
    RULE_rowFormat = 54
    RULE_tableIdentifier = 55
    RULE_namedExpression = 56
    RULE_namedExpressionSeq = 57
    RULE_expression = 58
    RULE_booleanExpression = 59
    RULE_predicated = 60
    RULE_predicate = 61
    RULE_valueExpression = 62
    RULE_primaryExpression = 63
    RULE_constant = 64
    RULE_comparisonOperator = 65
    RULE_arithmeticOperator = 66
    RULE_predicateOperator = 67
    RULE_booleanValue = 68
    RULE_interval = 69
    RULE_intervalField = 70
    RULE_intervalValue = 71
    RULE_dataType = 72
    RULE_colTypeList = 73
    RULE_colType = 74
    RULE_whenClause = 75
    RULE_windows = 76
    RULE_namedWindow = 77
    RULE_windowSpec = 78
    RULE_windowFrame = 79
    RULE_frameBound = 80
    RULE_qualifiedName = 81
    RULE_identifier = 82
    RULE_strictIdentifier = 83
    RULE_quotedIdentifier = 84
    RULE_number = 85
    RULE_nonReserved = 86

    ruleNames = [
        "singleStatement",
        "singleExpression",
        "singleTableIdentifier",
        "singleDataType",
        "statement",
        "unsupportedHiveNativeCommands",
        "createTableHeader",
        "bucketSpec",
        "skewSpec",
        "locationSpec",
        "query",
        "insertInto",
        "partitionSpecLocation",
        "partitionSpec",
        "partitionVal",
        "describeFuncName",
        "describeColName",
        "ctes",
        "namedQuery",
        "tableProvider",
        "tablePropertyList",
        "tableProperty",
        "tablePropertyKey",
        "constantList",
        "nestedConstantList",
        "createFileFormat",
        "fileFormat",
        "storageHandler",
        "resource",
        "queryNoWith",
        "queryOrganization",
        "multiInsertQueryBody",
        "queryTerm",
        "queryPrimary",
        "sortItem",
        "querySpecification",
        "fromClause",
        "aggregation",
        "groupingSet",
        "lateralView",
        "setQuantifier",
        "relation",
        "joinRelation",
        "joinType",
        "joinCriteria",
        "sample",
        "identifierList",
        "identifierSeq",
        "orderedIdentifierList",
        "orderedIdentifier",
        "identifierCommentList",
        "identifierComment",
        "relationPrimary",
        "inlineTable",
        "rowFormat",
        "tableIdentifier",
        "namedExpression",
        "namedExpressionSeq",
        "expression",
        "booleanExpression",
        "predicated",
        "predicate",
        "valueExpression",
        "primaryExpression",
        "constant",
        "comparisonOperator",
        "arithmeticOperator",
        "predicateOperator",
        "booleanValue",
        "interval",
        "intervalField",
        "intervalValue",
        "dataType",
        "colTypeList",
        "colType",
        "whenClause",
        "windows",
        "namedWindow",
        "windowSpec",
        "windowFrame",
        "frameBound",
        "qualifiedName",
        "identifier",
        "strictIdentifier",
        "quotedIdentifier",
        "number",
        "nonReserved",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    SELECT = 8
    FROM = 9
    ADD = 10
    AS = 11
    ALL = 12
    DISTINCT = 13
    WHERE = 14
    GROUP = 15
    BY = 16
    GROUPING = 17
    SETS = 18
    CUBE = 19
    ROLLUP = 20
    ORDER = 21
    HAVING = 22
    LIMIT = 23
    AT = 24
    OR = 25
    AND = 26
    IN = 27
    NOT = 28
    NO = 29
    EXISTS = 30
    BETWEEN = 31
    LIKE = 32
    RLIKE = 33
    IS = 34
    NULL = 35
    TRUE = 36
    FALSE = 37
    NULLS = 38
    ASC = 39
    DESC = 40
    FOR = 41
    INTERVAL = 42
    CASE = 43
    WHEN = 44
    THEN = 45
    ELSE = 46
    END = 47
    JOIN = 48
    CROSS = 49
    OUTER = 50
    INNER = 51
    LEFT = 52
    SEMI = 53
    RIGHT = 54
    FULL = 55
    NATURAL = 56
    ON = 57
    LATERAL = 58
    WINDOW = 59
    OVER = 60
    PARTITION = 61
    RANGE = 62
    ROWS = 63
    UNBOUNDED = 64
    PRECEDING = 65
    FOLLOWING = 66
    CURRENT = 67
    ROW = 68
    WITH = 69
    VALUES = 70
    CREATE = 71
    TABLE = 72
    VIEW = 73
    REPLACE = 74
    INSERT = 75
    DELETE = 76
    INTO = 77
    DESCRIBE = 78
    EXPLAIN = 79
    FORMAT = 80
    LOGICAL = 81
    CODEGEN = 82
    CAST = 83
    SHOW = 84
    TABLES = 85
    COLUMNS = 86
    COLUMN = 87
    USE = 88
    PARTITIONS = 89
    FUNCTIONS = 90
    DROP = 91
    UNION = 92
    EXCEPT = 93
    INTERSECT = 94
    TO = 95
    TABLESAMPLE = 96
    STRATIFY = 97
    ALTER = 98
    RENAME = 99
    ARRAY = 100
    MAP = 101
    STRUCT = 102
    COMMENT = 103
    SET = 104
    RESET = 105
    DATA = 106
    START = 107
    TRANSACTION = 108
    COMMIT = 109
    ROLLBACK = 110
    MACRO = 111
    IF = 112
    EQ = 113
    NSEQ = 114
    NEQ = 115
    NEQJ = 116
    LT = 117
    LTE = 118
    GT = 119
    GTE = 120
    PLUS = 121
    MINUS = 122
    ASTERISK = 123
    SLASH = 124
    PERCENT = 125
    DIV = 126
    TILDE = 127
    AMPERSAND = 128
    PIPE = 129
    HAT = 130
    PERCENTLIT = 131
    BUCKET = 132
    OUT = 133
    OF = 134
    SORT = 135
    CLUSTER = 136
    DISTRIBUTE = 137
    OVERWRITE = 138
    TRANSFORM = 139
    REDUCE = 140
    USING = 141
    SERDE = 142
    SERDEPROPERTIES = 143
    RECORDREADER = 144
    RECORDWRITER = 145
    DELIMITED = 146
    FIELDS = 147
    TERMINATED = 148
    COLLECTION = 149
    ITEMS = 150
    KEYS = 151
    ESCAPED = 152
    LINES = 153
    SEPARATED = 154
    FUNCTION = 155
    EXTENDED = 156
    REFRESH = 157
    CLEAR = 158
    CACHE = 159
    UNCACHE = 160
    LAZY = 161
    FORMATTED = 162
    TEMPORARY = 163
    OPTIONS = 164
    UNSET = 165
    TBLPROPERTIES = 166
    DBPROPERTIES = 167
    BUCKETS = 168
    SKEWED = 169
    STORED = 170
    DIRECTORIES = 171
    LOCATION = 172
    EXCHANGE = 173
    ARCHIVE = 174
    UNARCHIVE = 175
    FILEFORMAT = 176
    TOUCH = 177
    COMPACT = 178
    CONCATENATE = 179
    CHANGE = 180
    CASCADE = 181
    RESTRICT = 182
    CLUSTERED = 183
    SORTED = 184
    PURGE = 185
    INPUTFORMAT = 186
    OUTPUTFORMAT = 187
    DATABASE = 188
    DATABASES = 189
    DFS = 190
    TRUNCATE = 191
    ANALYZE = 192
    COMPUTE = 193
    LIST = 194
    STATISTICS = 195
    PARTITIONED = 196
    EXTERNAL = 197
    DEFINED = 198
    REVOKE = 199
    GRANT = 200
    LOCK = 201
    UNLOCK = 202
    MSCK = 203
    REPAIR = 204
    RECOVER = 205
    EXPORT = 206
    IMPORT = 207
    LOAD = 208
    ROLE = 209
    ROLES = 210
    COMPACTIONS = 211
    PRINCIPALS = 212
    TRANSACTIONS = 213
    INDEX = 214
    INDEXES = 215
    LOCKS = 216
    OPTION = 217
    ANTI = 218
    LOCAL = 219
    INPATH = 220
    CURRENT_DATE = 221
    CURRENT_TIMESTAMP = 222
    STRING = 223
    BIGINT_LITERAL = 224
    SMALLINT_LITERAL = 225
    TINYINT_LITERAL = 226
    BYTELENGTH_LITERAL = 227
    INTEGER_VALUE = 228
    DECIMAL_VALUE = 229
    SCIENTIFIC_DECIMAL_VALUE = 230
    DOUBLE_LITERAL = 231
    BIGDECIMAL_LITERAL = 232
    IDENTIFIER = 233
    BACKQUOTED_IDENTIFIER = 234
    SIMPLE_COMMENT = 235
    BRACKETED_COMMENT = 236
    WS = 237
    UNRECOGNIZED = 238
    DELIMITER = 239

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    """
    Verify whether current token is a valid decimal token (which contains dot).
    Returns true if the character that follows the token is not a digit or letter or underscore.

    For example:
    For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
    For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
    For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
    For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is folllowed
    by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
    which is not a digit or letter or underscore.
    """

    def isValidDecimal(self):
        nextChar = self._input.LA(1)
        return not ("A" <= nextChar <= "Z" or "0" <= nextChar <= "9" or nextChar == "_")

    class SingleStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleStatement"):
                listener.enterSingleStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleStatement"):
                listener.exitSingleStatement(self)

    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.statement()
            self.state = 175
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleExpression"):
                listener.enterSingleExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleExpression"):
                listener.exitSingleExpression(self)

    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self.namedExpression()
            self.state = 178
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleTableIdentifier"):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleTableIdentifier"):
                listener.exitSingleTableIdentifier(self)

    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.tableIdentifier()
            self.state = 181
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleDataType"):
                listener.enterSingleDataType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleDataType"):
                listener.exitSingleDataType(self)

    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self.dataType()
            self.state = 184
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ExplainContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplain"):
                listener.enterExplain(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplain"):
                listener.exitExplain(self)

    class SetDatabasePropertiesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetDatabaseProperties"):
                listener.enterSetDatabaseProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetDatabaseProperties"):
                listener.exitSetDatabaseProperties(self)

    class DropDatabaseContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropDatabase"):
                listener.enterDropDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropDatabase"):
                listener.exitDropDatabase(self)

    class CreateTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None  # ColTypeListContext
            self.partitionColumns = None  # ColTypeListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def bucketSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext, 0)

        def skewSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext, 0)

        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext, 0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext, 0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def colTypeList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTable"):
                listener.enterCreateTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTable"):
                listener.exitCreateTable(self)

    class ResetConfigurationContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResetConfiguration"):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResetConfiguration"):
                listener.exitResetConfiguration(self)

    class DescribeDatabaseContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeDatabase"):
                listener.enterDescribeDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeDatabase"):
                listener.exitDescribeDatabase(self)

    class AlterViewQueryContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlterViewQuery"):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlterViewQuery"):
                listener.exitAlterViewQuery(self)

    class DescribeTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None  # Token
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeTable"):
                listener.enterDescribeTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeTable"):
                listener.exitDescribeTable(self)

    class UseContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None  # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUse"):
                listener.enterUse(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUse"):
                listener.exitUse(self)

    class CreateTempViewUsingContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTempViewUsing"):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTempViewUsing"):
                listener.exitCreateTempViewUsing(self)

    class CreateTableLikeContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None  # TableIdentifierContext
            self.source = None  # TableIdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def tableIdentifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTableLike"):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTableLike"):
                listener.exitCreateTableLike(self)

    class RenameTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None  # TableIdentifierContext
            self.to = None  # TableIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def tableIdentifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRenameTable"):
                listener.enterRenameTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRenameTable"):
                listener.exitRenameTable(self)

    class UncacheTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUncacheTable"):
                listener.enterUncacheTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUncacheTable"):
                listener.exitUncacheTable(self)

    class DropFunctionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropFunction"):
                listener.enterDropFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropFunction"):
                listener.exitDropFunction(self)

    class FailNativeCommandContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(
                SqlBaseParser.UnsupportedHiveNativeCommandsContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFailNativeCommand"):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFailNativeCommand"):
                listener.exitFailNativeCommand(self)

    class LoadDataContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None  # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLoadData"):
                listener.enterLoadData(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLoadData"):
                listener.exitLoadData(self)

    class ShowPartitionsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowPartitions"):
                listener.enterShowPartitions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowPartitions"):
                listener.exitShowPartitions(self)

    class DescribeFunctionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeFunction"):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeFunction"):
                listener.exitDescribeFunction(self)

    class ClearCacheContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClearCache"):
                listener.enterClearCache(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClearCache"):
                listener.exitClearCache(self)

    class ShowTablesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None  # IdentifierContext
            self.pattern = None  # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowTables"):
                listener.enterShowTables(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowTables"):
                listener.exitShowTables(self)

    class RecoverPartitionsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecoverPartitions"):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecoverPartitions"):
                listener.exitRecoverPartitions(self)

    class StatementDefaultContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementDefault"):
                listener.enterStatementDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementDefault"):
                listener.exitStatementDefault(self)

    class RenameTablePartitionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None  # PartitionSpecContext
            self.to = None  # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def partitionSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRenameTablePartition"):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRenameTablePartition"):
                listener.exitRenameTablePartition(self)

    class RepairTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRepairTable"):
                listener.enterRepairTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRepairTable"):
                listener.exitRepairTable(self)

    class RefreshResourceContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRefreshResource"):
                listener.enterRefreshResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRefreshResource"):
                listener.exitRefreshResource(self)

    class TruncateTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTruncateTable"):
                listener.enterTruncateTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTruncateTable"):
                listener.exitTruncateTable(self)

    class SetTableSerDeContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetTableSerDe"):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetTableSerDe"):
                listener.exitSetTableSerDe(self)

    class CreateViewContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def identifierCommentList(self):
            return self.getTypedRuleContext(
                SqlBaseParser.IdentifierCommentListContext, 0
            )

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateView"):
                listener.enterCreateView(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateView"):
                listener.exitCreateView(self)

    class DropTablePartitionsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def partitionSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropTablePartitions"):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropTablePartitions"):
                listener.exitDropTablePartitions(self)

    class ShowCreateTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowCreateTable"):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowCreateTable"):
                listener.exitShowCreateTable(self)

    class SetConfigurationContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetConfiguration"):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetConfiguration"):
                listener.exitSetConfiguration(self)

    class DropTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropTable"):
                listener.enterDropTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropTable"):
                listener.exitDropTable(self)

    class ShowColumnsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None  # IdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def FROM(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)

        def IN(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowColumns"):
                listener.enterShowColumns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowColumns"):
                listener.exitShowColumns(self)

    class CreateTableUsingContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.partitionColumnNames = None  # IdentifierListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext, 0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def bucketSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTableUsing"):
                listener.enterCreateTableUsing(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTableUsing"):
                listener.exitCreateTableUsing(self)

    class ShowDatabasesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None  # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowDatabases"):
                listener.enterShowDatabases(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowDatabases"):
                listener.exitShowDatabases(self)

    class AddTablePartitionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def partitionSpecLocation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SqlBaseParser.PartitionSpecLocationContext
                )
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.PartitionSpecLocationContext, i
                )

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def partitionSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAddTablePartition"):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAddTablePartition"):
                listener.exitAddTablePartition(self)

    class RefreshTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRefreshTable"):
                listener.enterRefreshTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRefreshTable"):
                listener.exitRefreshTable(self)

    class ManageResourceContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterManageResource"):
                listener.enterManageResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitManageResource"):
                listener.exitManageResource(self)

    class CreateDatabaseContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.comment = None  # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateDatabase"):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateDatabase"):
                listener.exitCreateDatabase(self)

    class ShowTblPropertiesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None  # TableIdentifierContext
            self.key = None  # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowTblProperties"):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowTblProperties"):
                listener.exitShowTblProperties(self)

    class AnalyzeContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnalyze"):
                listener.enterAnalyze(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnalyze"):
                listener.exitAnalyze(self)

    class UnsetTablePropertiesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsetTableProperties"):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsetTableProperties"):
                listener.exitUnsetTableProperties(self)

    class SetTableLocationContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetTableLocation"):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetTableLocation"):
                listener.exitSetTableLocation(self)

    class CreateFunctionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None  # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def resource(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateFunction"):
                listener.enterCreateFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateFunction"):
                listener.exitCreateFunction(self)

    class ShowFunctionsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None  # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowFunctions"):
                listener.enterShowFunctions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowFunctions"):
                listener.exitShowFunctions(self)

    class CacheTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCacheTable"):
                listener.enterCacheTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCacheTable"):
                listener.exitCacheTable(self)

    class SetTablePropertiesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetTableProperties"):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetTableProperties"):
                listener.exitSetTableProperties(self)

    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 91, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 186
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 187
                self.match(SqlBaseParser.USE)
                self.state = 188
                localctx.db = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CreateDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 189
                self.match(SqlBaseParser.CREATE)
                self.state = 190
                self.match(SqlBaseParser.DATABASE)
                self.state = 194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
                if la_ == 1:
                    self.state = 191
                    self.match(SqlBaseParser.IF)
                    self.state = 192
                    self.match(SqlBaseParser.NOT)
                    self.state = 193
                    self.match(SqlBaseParser.EXISTS)

                self.state = 196
                self.identifier()
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.COMMENT:
                    self.state = 197
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 198
                    localctx.comment = self.match(SqlBaseParser.STRING)

                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LOCATION:
                    self.state = 201
                    self.locationSpec()

                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.WITH:
                    self.state = 204
                    self.match(SqlBaseParser.WITH)
                    self.state = 205
                    self.match(SqlBaseParser.DBPROPERTIES)
                    self.state = 206
                    self.tablePropertyList()

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SetDatabasePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 209
                self.match(SqlBaseParser.ALTER)
                self.state = 210
                self.match(SqlBaseParser.DATABASE)
                self.state = 211
                self.identifier()
                self.state = 212
                self.match(SqlBaseParser.SET)
                self.state = 213
                self.match(SqlBaseParser.DBPROPERTIES)
                self.state = 214
                self.tablePropertyList()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 216
                self.match(SqlBaseParser.DROP)
                self.state = 217
                self.match(SqlBaseParser.DATABASE)
                self.state = 220
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
                if la_ == 1:
                    self.state = 218
                    self.match(SqlBaseParser.IF)
                    self.state = 219
                    self.match(SqlBaseParser.EXISTS)

                self.state = 222
                self.identifier()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.CASCADE or _la == SqlBaseParser.RESTRICT:
                    self.state = 223
                    _la = self._input.LA(1)
                    if not (
                        _la == SqlBaseParser.CASCADE or _la == SqlBaseParser.RESTRICT
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateTableUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 226
                self.createTableHeader()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__0:
                    self.state = 227
                    self.match(SqlBaseParser.T__0)
                    self.state = 228
                    self.colTypeList()
                    self.state = 229
                    self.match(SqlBaseParser.T__1)

                self.state = 233
                self.tableProvider()
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OPTIONS:
                    self.state = 234
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 235
                    self.tablePropertyList()

                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITIONED:
                    self.state = 238
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 239
                    self.match(SqlBaseParser.BY)
                    self.state = 240
                    localctx.partitionColumnNames = self.identifierList()

                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.CLUSTERED:
                    self.state = 243
                    self.bucketSpec()

                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateTableUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 246
                self.createTableHeader()
                self.state = 247
                self.tableProvider()
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OPTIONS:
                    self.state = 248
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 249
                    self.tablePropertyList()

                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITIONED:
                    self.state = 252
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 253
                    self.match(SqlBaseParser.BY)
                    self.state = 254
                    localctx.partitionColumnNames = self.identifierList()

                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.CLUSTERED:
                    self.state = 257
                    self.bucketSpec()

                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.AS:
                    self.state = 260
                    self.match(SqlBaseParser.AS)

                self.state = 263
                self.query()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 265
                self.createTableHeader()
                self.state = 270
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
                if la_ == 1:
                    self.state = 266
                    self.match(SqlBaseParser.T__0)
                    self.state = 267
                    localctx.columns = self.colTypeList()
                    self.state = 268
                    self.match(SqlBaseParser.T__1)

                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.COMMENT:
                    self.state = 272
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 273
                    self.match(SqlBaseParser.STRING)

                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITIONED:
                    self.state = 276
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 277
                    self.match(SqlBaseParser.BY)
                    self.state = 278
                    self.match(SqlBaseParser.T__0)
                    self.state = 279
                    localctx.partitionColumns = self.colTypeList()
                    self.state = 280
                    self.match(SqlBaseParser.T__1)

                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.CLUSTERED:
                    self.state = 284
                    self.bucketSpec()

                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.SKEWED:
                    self.state = 287
                    self.skewSpec()

                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ROW:
                    self.state = 290
                    self.rowFormat()

                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.STORED:
                    self.state = 293
                    self.createFileFormat()

                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LOCATION:
                    self.state = 296
                    self.locationSpec()

                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.TBLPROPERTIES:
                    self.state = 299
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 300
                    self.tablePropertyList()

                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.AS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 69)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 69))
                            & (
                                (1 << (SqlBaseParser.WITH - 69))
                                | (1 << (SqlBaseParser.VALUES - 69))
                                | (1 << (SqlBaseParser.TABLE - 69))
                                | (1 << (SqlBaseParser.INSERT - 69))
                                | (1 << (SqlBaseParser.MAP - 69))
                            )
                        )
                        != 0
                    )
                    or _la == SqlBaseParser.REDUCE
                ):
                    self.state = 304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.AS:
                        self.state = 303
                        self.match(SqlBaseParser.AS)

                    self.state = 306
                    self.query()

                pass

            elif la_ == 9:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 309
                self.match(SqlBaseParser.CREATE)
                self.state = 310
                self.match(SqlBaseParser.TABLE)
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
                if la_ == 1:
                    self.state = 311
                    self.match(SqlBaseParser.IF)
                    self.state = 312
                    self.match(SqlBaseParser.NOT)
                    self.state = 313
                    self.match(SqlBaseParser.EXISTS)

                self.state = 316
                localctx.target = self.tableIdentifier()
                self.state = 317
                self.match(SqlBaseParser.LIKE)
                self.state = 318
                localctx.source = self.tableIdentifier()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 320
                self.match(SqlBaseParser.ANALYZE)
                self.state = 321
                self.match(SqlBaseParser.TABLE)
                self.state = 322
                self.tableIdentifier()
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 323
                    self.partitionSpec()

                self.state = 326
                self.match(SqlBaseParser.COMPUTE)
                self.state = 327
                self.match(SqlBaseParser.STATISTICS)
                self.state = 334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
                if la_ == 1:
                    self.state = 328
                    self.identifier()

                elif la_ == 2:
                    self.state = 329
                    self.match(SqlBaseParser.FOR)
                    self.state = 330
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        (
                            ((_la) & ~0x3F) == 0
                            and (
                                (1 << _la)
                                & (
                                    (1 << SqlBaseParser.SELECT)
                                    | (1 << SqlBaseParser.FROM)
                                    | (1 << SqlBaseParser.ADD)
                                    | (1 << SqlBaseParser.AS)
                                    | (1 << SqlBaseParser.ALL)
                                    | (1 << SqlBaseParser.DISTINCT)
                                    | (1 << SqlBaseParser.WHERE)
                                    | (1 << SqlBaseParser.GROUP)
                                    | (1 << SqlBaseParser.BY)
                                    | (1 << SqlBaseParser.GROUPING)
                                    | (1 << SqlBaseParser.SETS)
                                    | (1 << SqlBaseParser.CUBE)
                                    | (1 << SqlBaseParser.ROLLUP)
                                    | (1 << SqlBaseParser.ORDER)
                                    | (1 << SqlBaseParser.HAVING)
                                    | (1 << SqlBaseParser.LIMIT)
                                    | (1 << SqlBaseParser.AT)
                                    | (1 << SqlBaseParser.OR)
                                    | (1 << SqlBaseParser.AND)
                                    | (1 << SqlBaseParser.IN)
                                    | (1 << SqlBaseParser.NOT)
                                    | (1 << SqlBaseParser.NO)
                                    | (1 << SqlBaseParser.EXISTS)
                                    | (1 << SqlBaseParser.BETWEEN)
                                    | (1 << SqlBaseParser.LIKE)
                                    | (1 << SqlBaseParser.RLIKE)
                                    | (1 << SqlBaseParser.IS)
                                    | (1 << SqlBaseParser.NULL)
                                    | (1 << SqlBaseParser.TRUE)
                                    | (1 << SqlBaseParser.FALSE)
                                    | (1 << SqlBaseParser.NULLS)
                                    | (1 << SqlBaseParser.ASC)
                                    | (1 << SqlBaseParser.DESC)
                                    | (1 << SqlBaseParser.FOR)
                                    | (1 << SqlBaseParser.INTERVAL)
                                    | (1 << SqlBaseParser.CASE)
                                    | (1 << SqlBaseParser.WHEN)
                                    | (1 << SqlBaseParser.THEN)
                                    | (1 << SqlBaseParser.ELSE)
                                    | (1 << SqlBaseParser.END)
                                    | (1 << SqlBaseParser.JOIN)
                                    | (1 << SqlBaseParser.CROSS)
                                    | (1 << SqlBaseParser.OUTER)
                                    | (1 << SqlBaseParser.INNER)
                                    | (1 << SqlBaseParser.LEFT)
                                    | (1 << SqlBaseParser.SEMI)
                                    | (1 << SqlBaseParser.RIGHT)
                                    | (1 << SqlBaseParser.FULL)
                                    | (1 << SqlBaseParser.NATURAL)
                                    | (1 << SqlBaseParser.ON)
                                    | (1 << SqlBaseParser.LATERAL)
                                    | (1 << SqlBaseParser.WINDOW)
                                    | (1 << SqlBaseParser.OVER)
                                    | (1 << SqlBaseParser.PARTITION)
                                    | (1 << SqlBaseParser.RANGE)
                                    | (1 << SqlBaseParser.ROWS)
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 64)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 64))
                                & (
                                    (1 << (SqlBaseParser.UNBOUNDED - 64))
                                    | (1 << (SqlBaseParser.PRECEDING - 64))
                                    | (1 << (SqlBaseParser.FOLLOWING - 64))
                                    | (1 << (SqlBaseParser.CURRENT - 64))
                                    | (1 << (SqlBaseParser.ROW - 64))
                                    | (1 << (SqlBaseParser.WITH - 64))
                                    | (1 << (SqlBaseParser.VALUES - 64))
                                    | (1 << (SqlBaseParser.CREATE - 64))
                                    | (1 << (SqlBaseParser.TABLE - 64))
                                    | (1 << (SqlBaseParser.VIEW - 64))
                                    | (1 << (SqlBaseParser.REPLACE - 64))
                                    | (1 << (SqlBaseParser.INSERT - 64))
                                    | (1 << (SqlBaseParser.DELETE - 64))
                                    | (1 << (SqlBaseParser.INTO - 64))
                                    | (1 << (SqlBaseParser.DESCRIBE - 64))
                                    | (1 << (SqlBaseParser.EXPLAIN - 64))
                                    | (1 << (SqlBaseParser.FORMAT - 64))
                                    | (1 << (SqlBaseParser.LOGICAL - 64))
                                    | (1 << (SqlBaseParser.CODEGEN - 64))
                                    | (1 << (SqlBaseParser.CAST - 64))
                                    | (1 << (SqlBaseParser.SHOW - 64))
                                    | (1 << (SqlBaseParser.TABLES - 64))
                                    | (1 << (SqlBaseParser.COLUMNS - 64))
                                    | (1 << (SqlBaseParser.COLUMN - 64))
                                    | (1 << (SqlBaseParser.USE - 64))
                                    | (1 << (SqlBaseParser.PARTITIONS - 64))
                                    | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                    | (1 << (SqlBaseParser.DROP - 64))
                                    | (1 << (SqlBaseParser.UNION - 64))
                                    | (1 << (SqlBaseParser.EXCEPT - 64))
                                    | (1 << (SqlBaseParser.INTERSECT - 64))
                                    | (1 << (SqlBaseParser.TO - 64))
                                    | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                    | (1 << (SqlBaseParser.STRATIFY - 64))
                                    | (1 << (SqlBaseParser.ALTER - 64))
                                    | (1 << (SqlBaseParser.RENAME - 64))
                                    | (1 << (SqlBaseParser.ARRAY - 64))
                                    | (1 << (SqlBaseParser.MAP - 64))
                                    | (1 << (SqlBaseParser.STRUCT - 64))
                                    | (1 << (SqlBaseParser.COMMENT - 64))
                                    | (1 << (SqlBaseParser.SET - 64))
                                    | (1 << (SqlBaseParser.RESET - 64))
                                    | (1 << (SqlBaseParser.DATA - 64))
                                    | (1 << (SqlBaseParser.START - 64))
                                    | (1 << (SqlBaseParser.TRANSACTION - 64))
                                    | (1 << (SqlBaseParser.COMMIT - 64))
                                    | (1 << (SqlBaseParser.ROLLBACK - 64))
                                    | (1 << (SqlBaseParser.MACRO - 64))
                                    | (1 << (SqlBaseParser.IF - 64))
                                    | (1 << (SqlBaseParser.DIV - 64))
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 131)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 131))
                                & (
                                    (1 << (SqlBaseParser.PERCENTLIT - 131))
                                    | (1 << (SqlBaseParser.BUCKET - 131))
                                    | (1 << (SqlBaseParser.OUT - 131))
                                    | (1 << (SqlBaseParser.OF - 131))
                                    | (1 << (SqlBaseParser.SORT - 131))
                                    | (1 << (SqlBaseParser.CLUSTER - 131))
                                    | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                                    | (1 << (SqlBaseParser.OVERWRITE - 131))
                                    | (1 << (SqlBaseParser.TRANSFORM - 131))
                                    | (1 << (SqlBaseParser.REDUCE - 131))
                                    | (1 << (SqlBaseParser.USING - 131))
                                    | (1 << (SqlBaseParser.SERDE - 131))
                                    | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                                    | (1 << (SqlBaseParser.RECORDREADER - 131))
                                    | (1 << (SqlBaseParser.RECORDWRITER - 131))
                                    | (1 << (SqlBaseParser.DELIMITED - 131))
                                    | (1 << (SqlBaseParser.FIELDS - 131))
                                    | (1 << (SqlBaseParser.TERMINATED - 131))
                                    | (1 << (SqlBaseParser.COLLECTION - 131))
                                    | (1 << (SqlBaseParser.ITEMS - 131))
                                    | (1 << (SqlBaseParser.KEYS - 131))
                                    | (1 << (SqlBaseParser.ESCAPED - 131))
                                    | (1 << (SqlBaseParser.LINES - 131))
                                    | (1 << (SqlBaseParser.SEPARATED - 131))
                                    | (1 << (SqlBaseParser.FUNCTION - 131))
                                    | (1 << (SqlBaseParser.EXTENDED - 131))
                                    | (1 << (SqlBaseParser.REFRESH - 131))
                                    | (1 << (SqlBaseParser.CLEAR - 131))
                                    | (1 << (SqlBaseParser.CACHE - 131))
                                    | (1 << (SqlBaseParser.UNCACHE - 131))
                                    | (1 << (SqlBaseParser.LAZY - 131))
                                    | (1 << (SqlBaseParser.FORMATTED - 131))
                                    | (1 << (SqlBaseParser.TEMPORARY - 131))
                                    | (1 << (SqlBaseParser.OPTIONS - 131))
                                    | (1 << (SqlBaseParser.UNSET - 131))
                                    | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                                    | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                                    | (1 << (SqlBaseParser.BUCKETS - 131))
                                    | (1 << (SqlBaseParser.SKEWED - 131))
                                    | (1 << (SqlBaseParser.STORED - 131))
                                    | (1 << (SqlBaseParser.DIRECTORIES - 131))
                                    | (1 << (SqlBaseParser.LOCATION - 131))
                                    | (1 << (SqlBaseParser.EXCHANGE - 131))
                                    | (1 << (SqlBaseParser.ARCHIVE - 131))
                                    | (1 << (SqlBaseParser.UNARCHIVE - 131))
                                    | (1 << (SqlBaseParser.FILEFORMAT - 131))
                                    | (1 << (SqlBaseParser.TOUCH - 131))
                                    | (1 << (SqlBaseParser.COMPACT - 131))
                                    | (1 << (SqlBaseParser.CONCATENATE - 131))
                                    | (1 << (SqlBaseParser.CHANGE - 131))
                                    | (1 << (SqlBaseParser.CASCADE - 131))
                                    | (1 << (SqlBaseParser.RESTRICT - 131))
                                    | (1 << (SqlBaseParser.CLUSTERED - 131))
                                    | (1 << (SqlBaseParser.SORTED - 131))
                                    | (1 << (SqlBaseParser.PURGE - 131))
                                    | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                                    | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                                    | (1 << (SqlBaseParser.DATABASE - 131))
                                    | (1 << (SqlBaseParser.DATABASES - 131))
                                    | (1 << (SqlBaseParser.DFS - 131))
                                    | (1 << (SqlBaseParser.TRUNCATE - 131))
                                    | (1 << (SqlBaseParser.ANALYZE - 131))
                                    | (1 << (SqlBaseParser.COMPUTE - 131))
                                    | (1 << (SqlBaseParser.LIST - 131))
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 195)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 195))
                                & (
                                    (1 << (SqlBaseParser.STATISTICS - 195))
                                    | (1 << (SqlBaseParser.PARTITIONED - 195))
                                    | (1 << (SqlBaseParser.EXTERNAL - 195))
                                    | (1 << (SqlBaseParser.DEFINED - 195))
                                    | (1 << (SqlBaseParser.REVOKE - 195))
                                    | (1 << (SqlBaseParser.GRANT - 195))
                                    | (1 << (SqlBaseParser.LOCK - 195))
                                    | (1 << (SqlBaseParser.UNLOCK - 195))
                                    | (1 << (SqlBaseParser.MSCK - 195))
                                    | (1 << (SqlBaseParser.REPAIR - 195))
                                    | (1 << (SqlBaseParser.RECOVER - 195))
                                    | (1 << (SqlBaseParser.EXPORT - 195))
                                    | (1 << (SqlBaseParser.IMPORT - 195))
                                    | (1 << (SqlBaseParser.LOAD - 195))
                                    | (1 << (SqlBaseParser.ROLE - 195))
                                    | (1 << (SqlBaseParser.ROLES - 195))
                                    | (1 << (SqlBaseParser.COMPACTIONS - 195))
                                    | (1 << (SqlBaseParser.PRINCIPALS - 195))
                                    | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                                    | (1 << (SqlBaseParser.INDEX - 195))
                                    | (1 << (SqlBaseParser.INDEXES - 195))
                                    | (1 << (SqlBaseParser.LOCKS - 195))
                                    | (1 << (SqlBaseParser.OPTION - 195))
                                    | (1 << (SqlBaseParser.ANTI - 195))
                                    | (1 << (SqlBaseParser.LOCAL - 195))
                                    | (1 << (SqlBaseParser.INPATH - 195))
                                    | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                                    | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                                    | (1 << (SqlBaseParser.IDENTIFIER - 195))
                                    | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 195))
                                )
                            )
                            != 0
                        )
                    ):
                        self.state = 331
                        self.identifierSeq()

                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 336
                self.match(SqlBaseParser.ALTER)
                self.state = 337
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.TABLE or _la == SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 338
                localctx.from_ = self.tableIdentifier()
                self.state = 339
                self.match(SqlBaseParser.RENAME)
                self.state = 340
                self.match(SqlBaseParser.TO)
                self.state = 341
                localctx.to = self.tableIdentifier()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 343
                self.match(SqlBaseParser.ALTER)
                self.state = 344
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.TABLE or _la == SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 345
                self.tableIdentifier()
                self.state = 346
                self.match(SqlBaseParser.SET)
                self.state = 347
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 348
                self.tablePropertyList()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 350
                self.match(SqlBaseParser.ALTER)
                self.state = 351
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.TABLE or _la == SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 352
                self.tableIdentifier()
                self.state = 353
                self.match(SqlBaseParser.UNSET)
                self.state = 354
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 355
                    self.match(SqlBaseParser.IF)
                    self.state = 356
                    self.match(SqlBaseParser.EXISTS)

                self.state = 359
                self.tablePropertyList()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 361
                self.match(SqlBaseParser.ALTER)
                self.state = 362
                self.match(SqlBaseParser.TABLE)
                self.state = 363
                self.tableIdentifier()
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 364
                    self.partitionSpec()

                self.state = 367
                self.match(SqlBaseParser.SET)
                self.state = 368
                self.match(SqlBaseParser.SERDE)
                self.state = 369
                self.match(SqlBaseParser.STRING)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.WITH:
                    self.state = 370
                    self.match(SqlBaseParser.WITH)
                    self.state = 371
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 372
                    self.tablePropertyList()

                pass

            elif la_ == 15:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 375
                self.match(SqlBaseParser.ALTER)
                self.state = 376
                self.match(SqlBaseParser.TABLE)
                self.state = 377
                self.tableIdentifier()
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 378
                    self.partitionSpec()

                self.state = 381
                self.match(SqlBaseParser.SET)
                self.state = 382
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 383
                self.tablePropertyList()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 385
                self.match(SqlBaseParser.ALTER)
                self.state = 386
                self.match(SqlBaseParser.TABLE)
                self.state = 387
                self.tableIdentifier()
                self.state = 388
                self.match(SqlBaseParser.ADD)
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 389
                    self.match(SqlBaseParser.IF)
                    self.state = 390
                    self.match(SqlBaseParser.NOT)
                    self.state = 391
                    self.match(SqlBaseParser.EXISTS)

                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 394
                    self.partitionSpecLocation()
                    self.state = 397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 399
                self.match(SqlBaseParser.ALTER)
                self.state = 400
                self.match(SqlBaseParser.VIEW)
                self.state = 401
                self.tableIdentifier()
                self.state = 402
                self.match(SqlBaseParser.ADD)
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 403
                    self.match(SqlBaseParser.IF)
                    self.state = 404
                    self.match(SqlBaseParser.NOT)
                    self.state = 405
                    self.match(SqlBaseParser.EXISTS)

                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 408
                    self.partitionSpec()
                    self.state = 411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 18:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 413
                self.match(SqlBaseParser.ALTER)
                self.state = 414
                self.match(SqlBaseParser.TABLE)
                self.state = 415
                self.tableIdentifier()
                self.state = 416
                localctx.from_ = self.partitionSpec()
                self.state = 417
                self.match(SqlBaseParser.RENAME)
                self.state = 418
                self.match(SqlBaseParser.TO)
                self.state = 419
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 421
                self.match(SqlBaseParser.ALTER)
                self.state = 422
                self.match(SqlBaseParser.TABLE)
                self.state = 423
                self.tableIdentifier()
                self.state = 424
                self.match(SqlBaseParser.DROP)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 425
                    self.match(SqlBaseParser.IF)
                    self.state = 426
                    self.match(SqlBaseParser.EXISTS)

                self.state = 429
                self.partitionSpec()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 430
                    self.match(SqlBaseParser.T__2)
                    self.state = 431
                    self.partitionSpec()
                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PURGE:
                    self.state = 437
                    self.match(SqlBaseParser.PURGE)

                pass

            elif la_ == 20:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 440
                self.match(SqlBaseParser.ALTER)
                self.state = 441
                self.match(SqlBaseParser.VIEW)
                self.state = 442
                self.tableIdentifier()
                self.state = 443
                self.match(SqlBaseParser.DROP)
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 444
                    self.match(SqlBaseParser.IF)
                    self.state = 445
                    self.match(SqlBaseParser.EXISTS)

                self.state = 448
                self.partitionSpec()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 449
                    self.match(SqlBaseParser.T__2)
                    self.state = 450
                    self.partitionSpec()
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 21:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 456
                self.match(SqlBaseParser.ALTER)
                self.state = 457
                self.match(SqlBaseParser.TABLE)
                self.state = 458
                self.tableIdentifier()
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 459
                    self.partitionSpec()

                self.state = 462
                self.match(SqlBaseParser.SET)
                self.state = 463
                self.locationSpec()
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 465
                self.match(SqlBaseParser.ALTER)
                self.state = 466
                self.match(SqlBaseParser.TABLE)
                self.state = 467
                self.tableIdentifier()
                self.state = 468
                self.match(SqlBaseParser.RECOVER)
                self.state = 469
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 471
                self.match(SqlBaseParser.DROP)
                self.state = 472
                self.match(SqlBaseParser.TABLE)
                self.state = 475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
                if la_ == 1:
                    self.state = 473
                    self.match(SqlBaseParser.IF)
                    self.state = 474
                    self.match(SqlBaseParser.EXISTS)

                self.state = 477
                self.tableIdentifier()
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PURGE:
                    self.state = 478
                    self.match(SqlBaseParser.PURGE)

                pass

            elif la_ == 24:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 481
                self.match(SqlBaseParser.DROP)
                self.state = 482
                self.match(SqlBaseParser.VIEW)
                self.state = 485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
                if la_ == 1:
                    self.state = 483
                    self.match(SqlBaseParser.IF)
                    self.state = 484
                    self.match(SqlBaseParser.EXISTS)

                self.state = 487
                self.tableIdentifier()
                pass

            elif la_ == 25:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 488
                self.match(SqlBaseParser.CREATE)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OR:
                    self.state = 489
                    self.match(SqlBaseParser.OR)
                    self.state = 490
                    self.match(SqlBaseParser.REPLACE)

                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.TEMPORARY:
                    self.state = 493
                    self.match(SqlBaseParser.TEMPORARY)

                self.state = 496
                self.match(SqlBaseParser.VIEW)
                self.state = 500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 48, self._ctx)
                if la_ == 1:
                    self.state = 497
                    self.match(SqlBaseParser.IF)
                    self.state = 498
                    self.match(SqlBaseParser.NOT)
                    self.state = 499
                    self.match(SqlBaseParser.EXISTS)

                self.state = 502
                self.tableIdentifier()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__0:
                    self.state = 503
                    self.identifierCommentList()

                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.COMMENT:
                    self.state = 506
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 507
                    self.match(SqlBaseParser.STRING)

                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITIONED:
                    self.state = 510
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 511
                    self.match(SqlBaseParser.ON)
                    self.state = 512
                    self.identifierList()

                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.TBLPROPERTIES:
                    self.state = 515
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 516
                    self.tablePropertyList()

                self.state = 519
                self.match(SqlBaseParser.AS)
                self.state = 520
                self.query()
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 522
                self.match(SqlBaseParser.CREATE)
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OR:
                    self.state = 523
                    self.match(SqlBaseParser.OR)
                    self.state = 524
                    self.match(SqlBaseParser.REPLACE)

                self.state = 527
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 528
                self.match(SqlBaseParser.VIEW)
                self.state = 529
                self.tableIdentifier()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__0:
                    self.state = 530
                    self.match(SqlBaseParser.T__0)
                    self.state = 531
                    self.colTypeList()
                    self.state = 532
                    self.match(SqlBaseParser.T__1)

                self.state = 536
                self.tableProvider()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OPTIONS:
                    self.state = 537
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 538
                    self.tablePropertyList()

                pass

            elif la_ == 27:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 541
                self.match(SqlBaseParser.ALTER)
                self.state = 542
                self.match(SqlBaseParser.VIEW)
                self.state = 543
                self.tableIdentifier()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.AS:
                    self.state = 544
                    self.match(SqlBaseParser.AS)

                self.state = 547
                self.query()
                pass

            elif la_ == 28:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 549
                self.match(SqlBaseParser.CREATE)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.TEMPORARY:
                    self.state = 550
                    self.match(SqlBaseParser.TEMPORARY)

                self.state = 553
                self.match(SqlBaseParser.FUNCTION)
                self.state = 554
                self.qualifiedName()
                self.state = 555
                self.match(SqlBaseParser.AS)
                self.state = 556
                localctx.className = self.match(SqlBaseParser.STRING)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.USING:
                    self.state = 557
                    self.match(SqlBaseParser.USING)
                    self.state = 558
                    self.resource()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 559
                        self.match(SqlBaseParser.T__2)
                        self.state = 560
                        self.resource()
                        self.state = 565
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                pass

            elif la_ == 29:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 568
                self.match(SqlBaseParser.DROP)
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.TEMPORARY:
                    self.state = 569
                    self.match(SqlBaseParser.TEMPORARY)

                self.state = 572
                self.match(SqlBaseParser.FUNCTION)
                self.state = 575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 61, self._ctx)
                if la_ == 1:
                    self.state = 573
                    self.match(SqlBaseParser.IF)
                    self.state = 574
                    self.match(SqlBaseParser.EXISTS)

                self.state = 577
                self.qualifiedName()
                pass

            elif la_ == 30:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 578
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    _la == SqlBaseParser.LOGICAL
                    or _la == SqlBaseParser.CODEGEN
                    or _la == SqlBaseParser.EXTENDED
                    or _la == SqlBaseParser.FORMATTED
                ):
                    self.state = 579
                    _la = self._input.LA(1)
                    if not (
                        _la == SqlBaseParser.LOGICAL
                        or _la == SqlBaseParser.CODEGEN
                        or _la == SqlBaseParser.EXTENDED
                        or _la == SqlBaseParser.FORMATTED
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 582
                self.statement()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 583
                self.match(SqlBaseParser.SHOW)
                self.state = 584
                self.match(SqlBaseParser.TABLES)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.FROM or _la == SqlBaseParser.IN:
                    self.state = 585
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.FROM or _la == SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 586
                    localctx.db = self.identifier()

                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LIKE or _la == SqlBaseParser.STRING:
                    self.state = 590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.LIKE:
                        self.state = 589
                        self.match(SqlBaseParser.LIKE)

                    self.state = 592
                    localctx.pattern = self.match(SqlBaseParser.STRING)

                pass

            elif la_ == 32:
                localctx = SqlBaseParser.ShowDatabasesContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 595
                self.match(SqlBaseParser.SHOW)
                self.state = 596
                self.match(SqlBaseParser.DATABASES)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LIKE:
                    self.state = 597
                    self.match(SqlBaseParser.LIKE)
                    self.state = 598
                    localctx.pattern = self.match(SqlBaseParser.STRING)

                pass

            elif la_ == 33:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 601
                self.match(SqlBaseParser.SHOW)
                self.state = 602
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 603
                localctx.table = self.tableIdentifier()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__0:
                    self.state = 604
                    self.match(SqlBaseParser.T__0)
                    self.state = 605
                    localctx.key = self.tablePropertyKey()
                    self.state = 606
                    self.match(SqlBaseParser.T__1)

                pass

            elif la_ == 34:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 610
                self.match(SqlBaseParser.SHOW)
                self.state = 611
                self.match(SqlBaseParser.COLUMNS)
                self.state = 612
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.FROM or _la == SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 613
                self.tableIdentifier()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.FROM or _la == SqlBaseParser.IN:
                    self.state = 614
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.FROM or _la == SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 615
                    localctx.db = self.identifier()

                pass

            elif la_ == 35:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 618
                self.match(SqlBaseParser.SHOW)
                self.state = 619
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 620
                self.tableIdentifier()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 621
                    self.partitionSpec()

                pass

            elif la_ == 36:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 624
                self.match(SqlBaseParser.SHOW)
                self.state = 626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
                if la_ == 1:
                    self.state = 625
                    self.identifier()

                self.state = 628
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                                | (1 << SqlBaseParser.RANGE)
                                | (1 << SqlBaseParser.ROWS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.DIV - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 131)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 131))
                            & (
                                (1 << (SqlBaseParser.PERCENTLIT - 131))
                                | (1 << (SqlBaseParser.BUCKET - 131))
                                | (1 << (SqlBaseParser.OUT - 131))
                                | (1 << (SqlBaseParser.OF - 131))
                                | (1 << (SqlBaseParser.SORT - 131))
                                | (1 << (SqlBaseParser.CLUSTER - 131))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                                | (1 << (SqlBaseParser.OVERWRITE - 131))
                                | (1 << (SqlBaseParser.TRANSFORM - 131))
                                | (1 << (SqlBaseParser.REDUCE - 131))
                                | (1 << (SqlBaseParser.USING - 131))
                                | (1 << (SqlBaseParser.SERDE - 131))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                                | (1 << (SqlBaseParser.RECORDREADER - 131))
                                | (1 << (SqlBaseParser.RECORDWRITER - 131))
                                | (1 << (SqlBaseParser.DELIMITED - 131))
                                | (1 << (SqlBaseParser.FIELDS - 131))
                                | (1 << (SqlBaseParser.TERMINATED - 131))
                                | (1 << (SqlBaseParser.COLLECTION - 131))
                                | (1 << (SqlBaseParser.ITEMS - 131))
                                | (1 << (SqlBaseParser.KEYS - 131))
                                | (1 << (SqlBaseParser.ESCAPED - 131))
                                | (1 << (SqlBaseParser.LINES - 131))
                                | (1 << (SqlBaseParser.SEPARATED - 131))
                                | (1 << (SqlBaseParser.FUNCTION - 131))
                                | (1 << (SqlBaseParser.EXTENDED - 131))
                                | (1 << (SqlBaseParser.REFRESH - 131))
                                | (1 << (SqlBaseParser.CLEAR - 131))
                                | (1 << (SqlBaseParser.CACHE - 131))
                                | (1 << (SqlBaseParser.UNCACHE - 131))
                                | (1 << (SqlBaseParser.LAZY - 131))
                                | (1 << (SqlBaseParser.FORMATTED - 131))
                                | (1 << (SqlBaseParser.TEMPORARY - 131))
                                | (1 << (SqlBaseParser.OPTIONS - 131))
                                | (1 << (SqlBaseParser.UNSET - 131))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                                | (1 << (SqlBaseParser.BUCKETS - 131))
                                | (1 << (SqlBaseParser.SKEWED - 131))
                                | (1 << (SqlBaseParser.STORED - 131))
                                | (1 << (SqlBaseParser.DIRECTORIES - 131))
                                | (1 << (SqlBaseParser.LOCATION - 131))
                                | (1 << (SqlBaseParser.EXCHANGE - 131))
                                | (1 << (SqlBaseParser.ARCHIVE - 131))
                                | (1 << (SqlBaseParser.UNARCHIVE - 131))
                                | (1 << (SqlBaseParser.FILEFORMAT - 131))
                                | (1 << (SqlBaseParser.TOUCH - 131))
                                | (1 << (SqlBaseParser.COMPACT - 131))
                                | (1 << (SqlBaseParser.CONCATENATE - 131))
                                | (1 << (SqlBaseParser.CHANGE - 131))
                                | (1 << (SqlBaseParser.CASCADE - 131))
                                | (1 << (SqlBaseParser.RESTRICT - 131))
                                | (1 << (SqlBaseParser.CLUSTERED - 131))
                                | (1 << (SqlBaseParser.SORTED - 131))
                                | (1 << (SqlBaseParser.PURGE - 131))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.DATABASE - 131))
                                | (1 << (SqlBaseParser.DATABASES - 131))
                                | (1 << (SqlBaseParser.DFS - 131))
                                | (1 << (SqlBaseParser.TRUNCATE - 131))
                                | (1 << (SqlBaseParser.ANALYZE - 131))
                                | (1 << (SqlBaseParser.COMPUTE - 131))
                                | (1 << (SqlBaseParser.LIST - 131))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 195)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 195))
                            & (
                                (1 << (SqlBaseParser.STATISTICS - 195))
                                | (1 << (SqlBaseParser.PARTITIONED - 195))
                                | (1 << (SqlBaseParser.EXTERNAL - 195))
                                | (1 << (SqlBaseParser.DEFINED - 195))
                                | (1 << (SqlBaseParser.REVOKE - 195))
                                | (1 << (SqlBaseParser.GRANT - 195))
                                | (1 << (SqlBaseParser.LOCK - 195))
                                | (1 << (SqlBaseParser.UNLOCK - 195))
                                | (1 << (SqlBaseParser.MSCK - 195))
                                | (1 << (SqlBaseParser.REPAIR - 195))
                                | (1 << (SqlBaseParser.RECOVER - 195))
                                | (1 << (SqlBaseParser.EXPORT - 195))
                                | (1 << (SqlBaseParser.IMPORT - 195))
                                | (1 << (SqlBaseParser.LOAD - 195))
                                | (1 << (SqlBaseParser.ROLE - 195))
                                | (1 << (SqlBaseParser.ROLES - 195))
                                | (1 << (SqlBaseParser.COMPACTIONS - 195))
                                | (1 << (SqlBaseParser.PRINCIPALS - 195))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                                | (1 << (SqlBaseParser.INDEX - 195))
                                | (1 << (SqlBaseParser.INDEXES - 195))
                                | (1 << (SqlBaseParser.LOCKS - 195))
                                | (1 << (SqlBaseParser.OPTION - 195))
                                | (1 << (SqlBaseParser.ANTI - 195))
                                | (1 << (SqlBaseParser.LOCAL - 195))
                                | (1 << (SqlBaseParser.INPATH - 195))
                                | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                                | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                                | (1 << (SqlBaseParser.STRING - 195))
                                | (1 << (SqlBaseParser.IDENTIFIER - 195))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 195))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 630
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
                    if la_ == 1:
                        self.state = 629
                        self.match(SqlBaseParser.LIKE)

                    self.state = 634
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        SqlBaseParser.SELECT,
                        SqlBaseParser.FROM,
                        SqlBaseParser.ADD,
                        SqlBaseParser.AS,
                        SqlBaseParser.ALL,
                        SqlBaseParser.DISTINCT,
                        SqlBaseParser.WHERE,
                        SqlBaseParser.GROUP,
                        SqlBaseParser.BY,
                        SqlBaseParser.GROUPING,
                        SqlBaseParser.SETS,
                        SqlBaseParser.CUBE,
                        SqlBaseParser.ROLLUP,
                        SqlBaseParser.ORDER,
                        SqlBaseParser.HAVING,
                        SqlBaseParser.LIMIT,
                        SqlBaseParser.AT,
                        SqlBaseParser.OR,
                        SqlBaseParser.AND,
                        SqlBaseParser.IN,
                        SqlBaseParser.NOT,
                        SqlBaseParser.NO,
                        SqlBaseParser.EXISTS,
                        SqlBaseParser.BETWEEN,
                        SqlBaseParser.LIKE,
                        SqlBaseParser.RLIKE,
                        SqlBaseParser.IS,
                        SqlBaseParser.NULL,
                        SqlBaseParser.TRUE,
                        SqlBaseParser.FALSE,
                        SqlBaseParser.NULLS,
                        SqlBaseParser.ASC,
                        SqlBaseParser.DESC,
                        SqlBaseParser.FOR,
                        SqlBaseParser.INTERVAL,
                        SqlBaseParser.CASE,
                        SqlBaseParser.WHEN,
                        SqlBaseParser.THEN,
                        SqlBaseParser.ELSE,
                        SqlBaseParser.END,
                        SqlBaseParser.JOIN,
                        SqlBaseParser.CROSS,
                        SqlBaseParser.OUTER,
                        SqlBaseParser.INNER,
                        SqlBaseParser.LEFT,
                        SqlBaseParser.SEMI,
                        SqlBaseParser.RIGHT,
                        SqlBaseParser.FULL,
                        SqlBaseParser.NATURAL,
                        SqlBaseParser.ON,
                        SqlBaseParser.LATERAL,
                        SqlBaseParser.WINDOW,
                        SqlBaseParser.OVER,
                        SqlBaseParser.PARTITION,
                        SqlBaseParser.RANGE,
                        SqlBaseParser.ROWS,
                        SqlBaseParser.UNBOUNDED,
                        SqlBaseParser.PRECEDING,
                        SqlBaseParser.FOLLOWING,
                        SqlBaseParser.CURRENT,
                        SqlBaseParser.ROW,
                        SqlBaseParser.WITH,
                        SqlBaseParser.VALUES,
                        SqlBaseParser.CREATE,
                        SqlBaseParser.TABLE,
                        SqlBaseParser.VIEW,
                        SqlBaseParser.REPLACE,
                        SqlBaseParser.INSERT,
                        SqlBaseParser.DELETE,
                        SqlBaseParser.INTO,
                        SqlBaseParser.DESCRIBE,
                        SqlBaseParser.EXPLAIN,
                        SqlBaseParser.FORMAT,
                        SqlBaseParser.LOGICAL,
                        SqlBaseParser.CODEGEN,
                        SqlBaseParser.CAST,
                        SqlBaseParser.SHOW,
                        SqlBaseParser.TABLES,
                        SqlBaseParser.COLUMNS,
                        SqlBaseParser.COLUMN,
                        SqlBaseParser.USE,
                        SqlBaseParser.PARTITIONS,
                        SqlBaseParser.FUNCTIONS,
                        SqlBaseParser.DROP,
                        SqlBaseParser.UNION,
                        SqlBaseParser.EXCEPT,
                        SqlBaseParser.INTERSECT,
                        SqlBaseParser.TO,
                        SqlBaseParser.TABLESAMPLE,
                        SqlBaseParser.STRATIFY,
                        SqlBaseParser.ALTER,
                        SqlBaseParser.RENAME,
                        SqlBaseParser.ARRAY,
                        SqlBaseParser.MAP,
                        SqlBaseParser.STRUCT,
                        SqlBaseParser.COMMENT,
                        SqlBaseParser.SET,
                        SqlBaseParser.RESET,
                        SqlBaseParser.DATA,
                        SqlBaseParser.START,
                        SqlBaseParser.TRANSACTION,
                        SqlBaseParser.COMMIT,
                        SqlBaseParser.ROLLBACK,
                        SqlBaseParser.MACRO,
                        SqlBaseParser.IF,
                        SqlBaseParser.DIV,
                        SqlBaseParser.PERCENTLIT,
                        SqlBaseParser.BUCKET,
                        SqlBaseParser.OUT,
                        SqlBaseParser.OF,
                        SqlBaseParser.SORT,
                        SqlBaseParser.CLUSTER,
                        SqlBaseParser.DISTRIBUTE,
                        SqlBaseParser.OVERWRITE,
                        SqlBaseParser.TRANSFORM,
                        SqlBaseParser.REDUCE,
                        SqlBaseParser.USING,
                        SqlBaseParser.SERDE,
                        SqlBaseParser.SERDEPROPERTIES,
                        SqlBaseParser.RECORDREADER,
                        SqlBaseParser.RECORDWRITER,
                        SqlBaseParser.DELIMITED,
                        SqlBaseParser.FIELDS,
                        SqlBaseParser.TERMINATED,
                        SqlBaseParser.COLLECTION,
                        SqlBaseParser.ITEMS,
                        SqlBaseParser.KEYS,
                        SqlBaseParser.ESCAPED,
                        SqlBaseParser.LINES,
                        SqlBaseParser.SEPARATED,
                        SqlBaseParser.FUNCTION,
                        SqlBaseParser.EXTENDED,
                        SqlBaseParser.REFRESH,
                        SqlBaseParser.CLEAR,
                        SqlBaseParser.CACHE,
                        SqlBaseParser.UNCACHE,
                        SqlBaseParser.LAZY,
                        SqlBaseParser.FORMATTED,
                        SqlBaseParser.TEMPORARY,
                        SqlBaseParser.OPTIONS,
                        SqlBaseParser.UNSET,
                        SqlBaseParser.TBLPROPERTIES,
                        SqlBaseParser.DBPROPERTIES,
                        SqlBaseParser.BUCKETS,
                        SqlBaseParser.SKEWED,
                        SqlBaseParser.STORED,
                        SqlBaseParser.DIRECTORIES,
                        SqlBaseParser.LOCATION,
                        SqlBaseParser.EXCHANGE,
                        SqlBaseParser.ARCHIVE,
                        SqlBaseParser.UNARCHIVE,
                        SqlBaseParser.FILEFORMAT,
                        SqlBaseParser.TOUCH,
                        SqlBaseParser.COMPACT,
                        SqlBaseParser.CONCATENATE,
                        SqlBaseParser.CHANGE,
                        SqlBaseParser.CASCADE,
                        SqlBaseParser.RESTRICT,
                        SqlBaseParser.CLUSTERED,
                        SqlBaseParser.SORTED,
                        SqlBaseParser.PURGE,
                        SqlBaseParser.INPUTFORMAT,
                        SqlBaseParser.OUTPUTFORMAT,
                        SqlBaseParser.DATABASE,
                        SqlBaseParser.DATABASES,
                        SqlBaseParser.DFS,
                        SqlBaseParser.TRUNCATE,
                        SqlBaseParser.ANALYZE,
                        SqlBaseParser.COMPUTE,
                        SqlBaseParser.LIST,
                        SqlBaseParser.STATISTICS,
                        SqlBaseParser.PARTITIONED,
                        SqlBaseParser.EXTERNAL,
                        SqlBaseParser.DEFINED,
                        SqlBaseParser.REVOKE,
                        SqlBaseParser.GRANT,
                        SqlBaseParser.LOCK,
                        SqlBaseParser.UNLOCK,
                        SqlBaseParser.MSCK,
                        SqlBaseParser.REPAIR,
                        SqlBaseParser.RECOVER,
                        SqlBaseParser.EXPORT,
                        SqlBaseParser.IMPORT,
                        SqlBaseParser.LOAD,
                        SqlBaseParser.ROLE,
                        SqlBaseParser.ROLES,
                        SqlBaseParser.COMPACTIONS,
                        SqlBaseParser.PRINCIPALS,
                        SqlBaseParser.TRANSACTIONS,
                        SqlBaseParser.INDEX,
                        SqlBaseParser.INDEXES,
                        SqlBaseParser.LOCKS,
                        SqlBaseParser.OPTION,
                        SqlBaseParser.ANTI,
                        SqlBaseParser.LOCAL,
                        SqlBaseParser.INPATH,
                        SqlBaseParser.CURRENT_DATE,
                        SqlBaseParser.CURRENT_TIMESTAMP,
                        SqlBaseParser.IDENTIFIER,
                        SqlBaseParser.BACKQUOTED_IDENTIFIER,
                    ]:
                        self.state = 632
                        self.qualifiedName()
                        pass
                    elif token in [SqlBaseParser.STRING]:
                        self.state = 633
                        localctx.pattern = self.match(SqlBaseParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)

                pass

            elif la_ == 37:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 638
                self.match(SqlBaseParser.SHOW)
                self.state = 639
                self.match(SqlBaseParser.CREATE)
                self.state = 640
                self.match(SqlBaseParser.TABLE)
                self.state = 641
                self.tableIdentifier()
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 642
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.DESC or _la == SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 643
                self.match(SqlBaseParser.FUNCTION)
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 74, self._ctx)
                if la_ == 1:
                    self.state = 644
                    self.match(SqlBaseParser.EXTENDED)

                self.state = 647
                self.describeFuncName()
                pass

            elif la_ == 39:
                localctx = SqlBaseParser.DescribeDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 648
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.DESC or _la == SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 649
                self.match(SqlBaseParser.DATABASE)
                self.state = 651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
                if la_ == 1:
                    self.state = 650
                    self.match(SqlBaseParser.EXTENDED)

                self.state = 653
                self.identifier()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.DescribeTableContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 654
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.DESC or _la == SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                if la_ == 1:
                    self.state = 655
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (
                        _la == SqlBaseParser.EXTENDED or _la == SqlBaseParser.FORMATTED
                    ):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 658
                self.tableIdentifier()
                self.state = 660
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
                if la_ == 1:
                    self.state = 659
                    self.partitionSpec()

                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                                | (1 << SqlBaseParser.RANGE)
                                | (1 << SqlBaseParser.ROWS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.DIV - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 131)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 131))
                            & (
                                (1 << (SqlBaseParser.PERCENTLIT - 131))
                                | (1 << (SqlBaseParser.BUCKET - 131))
                                | (1 << (SqlBaseParser.OUT - 131))
                                | (1 << (SqlBaseParser.OF - 131))
                                | (1 << (SqlBaseParser.SORT - 131))
                                | (1 << (SqlBaseParser.CLUSTER - 131))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                                | (1 << (SqlBaseParser.OVERWRITE - 131))
                                | (1 << (SqlBaseParser.TRANSFORM - 131))
                                | (1 << (SqlBaseParser.REDUCE - 131))
                                | (1 << (SqlBaseParser.USING - 131))
                                | (1 << (SqlBaseParser.SERDE - 131))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                                | (1 << (SqlBaseParser.RECORDREADER - 131))
                                | (1 << (SqlBaseParser.RECORDWRITER - 131))
                                | (1 << (SqlBaseParser.DELIMITED - 131))
                                | (1 << (SqlBaseParser.FIELDS - 131))
                                | (1 << (SqlBaseParser.TERMINATED - 131))
                                | (1 << (SqlBaseParser.COLLECTION - 131))
                                | (1 << (SqlBaseParser.ITEMS - 131))
                                | (1 << (SqlBaseParser.KEYS - 131))
                                | (1 << (SqlBaseParser.ESCAPED - 131))
                                | (1 << (SqlBaseParser.LINES - 131))
                                | (1 << (SqlBaseParser.SEPARATED - 131))
                                | (1 << (SqlBaseParser.FUNCTION - 131))
                                | (1 << (SqlBaseParser.EXTENDED - 131))
                                | (1 << (SqlBaseParser.REFRESH - 131))
                                | (1 << (SqlBaseParser.CLEAR - 131))
                                | (1 << (SqlBaseParser.CACHE - 131))
                                | (1 << (SqlBaseParser.UNCACHE - 131))
                                | (1 << (SqlBaseParser.LAZY - 131))
                                | (1 << (SqlBaseParser.FORMATTED - 131))
                                | (1 << (SqlBaseParser.TEMPORARY - 131))
                                | (1 << (SqlBaseParser.OPTIONS - 131))
                                | (1 << (SqlBaseParser.UNSET - 131))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                                | (1 << (SqlBaseParser.BUCKETS - 131))
                                | (1 << (SqlBaseParser.SKEWED - 131))
                                | (1 << (SqlBaseParser.STORED - 131))
                                | (1 << (SqlBaseParser.DIRECTORIES - 131))
                                | (1 << (SqlBaseParser.LOCATION - 131))
                                | (1 << (SqlBaseParser.EXCHANGE - 131))
                                | (1 << (SqlBaseParser.ARCHIVE - 131))
                                | (1 << (SqlBaseParser.UNARCHIVE - 131))
                                | (1 << (SqlBaseParser.FILEFORMAT - 131))
                                | (1 << (SqlBaseParser.TOUCH - 131))
                                | (1 << (SqlBaseParser.COMPACT - 131))
                                | (1 << (SqlBaseParser.CONCATENATE - 131))
                                | (1 << (SqlBaseParser.CHANGE - 131))
                                | (1 << (SqlBaseParser.CASCADE - 131))
                                | (1 << (SqlBaseParser.RESTRICT - 131))
                                | (1 << (SqlBaseParser.CLUSTERED - 131))
                                | (1 << (SqlBaseParser.SORTED - 131))
                                | (1 << (SqlBaseParser.PURGE - 131))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.DATABASE - 131))
                                | (1 << (SqlBaseParser.DATABASES - 131))
                                | (1 << (SqlBaseParser.DFS - 131))
                                | (1 << (SqlBaseParser.TRUNCATE - 131))
                                | (1 << (SqlBaseParser.ANALYZE - 131))
                                | (1 << (SqlBaseParser.COMPUTE - 131))
                                | (1 << (SqlBaseParser.LIST - 131))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 195)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 195))
                            & (
                                (1 << (SqlBaseParser.STATISTICS - 195))
                                | (1 << (SqlBaseParser.PARTITIONED - 195))
                                | (1 << (SqlBaseParser.EXTERNAL - 195))
                                | (1 << (SqlBaseParser.DEFINED - 195))
                                | (1 << (SqlBaseParser.REVOKE - 195))
                                | (1 << (SqlBaseParser.GRANT - 195))
                                | (1 << (SqlBaseParser.LOCK - 195))
                                | (1 << (SqlBaseParser.UNLOCK - 195))
                                | (1 << (SqlBaseParser.MSCK - 195))
                                | (1 << (SqlBaseParser.REPAIR - 195))
                                | (1 << (SqlBaseParser.RECOVER - 195))
                                | (1 << (SqlBaseParser.EXPORT - 195))
                                | (1 << (SqlBaseParser.IMPORT - 195))
                                | (1 << (SqlBaseParser.LOAD - 195))
                                | (1 << (SqlBaseParser.ROLE - 195))
                                | (1 << (SqlBaseParser.ROLES - 195))
                                | (1 << (SqlBaseParser.COMPACTIONS - 195))
                                | (1 << (SqlBaseParser.PRINCIPALS - 195))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                                | (1 << (SqlBaseParser.INDEX - 195))
                                | (1 << (SqlBaseParser.INDEXES - 195))
                                | (1 << (SqlBaseParser.LOCKS - 195))
                                | (1 << (SqlBaseParser.OPTION - 195))
                                | (1 << (SqlBaseParser.ANTI - 195))
                                | (1 << (SqlBaseParser.LOCAL - 195))
                                | (1 << (SqlBaseParser.INPATH - 195))
                                | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                                | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                                | (1 << (SqlBaseParser.IDENTIFIER - 195))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 195))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 662
                    self.describeColName()

                pass

            elif la_ == 41:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 665
                self.match(SqlBaseParser.REFRESH)
                self.state = 666
                self.match(SqlBaseParser.TABLE)
                self.state = 667
                self.tableIdentifier()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 668
                self.match(SqlBaseParser.REFRESH)
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 79, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 669
                        self.matchWildcard()
                    self.state = 674
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 79, self._ctx)

                pass

            elif la_ == 43:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 675
                self.match(SqlBaseParser.CACHE)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LAZY:
                    self.state = 676
                    self.match(SqlBaseParser.LAZY)

                self.state = 679
                self.match(SqlBaseParser.TABLE)
                self.state = 680
                self.tableIdentifier()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.AS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 69)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 69))
                            & (
                                (1 << (SqlBaseParser.WITH - 69))
                                | (1 << (SqlBaseParser.VALUES - 69))
                                | (1 << (SqlBaseParser.TABLE - 69))
                                | (1 << (SqlBaseParser.INSERT - 69))
                                | (1 << (SqlBaseParser.MAP - 69))
                            )
                        )
                        != 0
                    )
                    or _la == SqlBaseParser.REDUCE
                ):
                    self.state = 682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.AS:
                        self.state = 681
                        self.match(SqlBaseParser.AS)

                    self.state = 684
                    self.query()

                pass

            elif la_ == 44:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 687
                self.match(SqlBaseParser.UNCACHE)
                self.state = 688
                self.match(SqlBaseParser.TABLE)
                self.state = 689
                self.tableIdentifier()
                pass

            elif la_ == 45:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 690
                self.match(SqlBaseParser.CLEAR)
                self.state = 691
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 46:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 692
                self.match(SqlBaseParser.LOAD)
                self.state = 693
                self.match(SqlBaseParser.DATA)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LOCAL:
                    self.state = 694
                    self.match(SqlBaseParser.LOCAL)

                self.state = 697
                self.match(SqlBaseParser.INPATH)
                self.state = 698
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OVERWRITE:
                    self.state = 699
                    self.match(SqlBaseParser.OVERWRITE)

                self.state = 702
                self.match(SqlBaseParser.INTO)
                self.state = 703
                self.match(SqlBaseParser.TABLE)
                self.state = 704
                self.tableIdentifier()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 705
                    self.partitionSpec()

                pass

            elif la_ == 47:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 708
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 709
                self.match(SqlBaseParser.TABLE)
                self.state = 710
                self.tableIdentifier()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 711
                    self.partitionSpec()

                pass

            elif la_ == 48:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 714
                self.match(SqlBaseParser.MSCK)
                self.state = 715
                self.match(SqlBaseParser.REPAIR)
                self.state = 716
                self.match(SqlBaseParser.TABLE)
                self.state = 717
                self.tableIdentifier()
                pass

            elif la_ == 49:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 718
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.ADD or _la == SqlBaseParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 719
                self.identifier()
                self.state = 723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 720
                        self.matchWildcard()
                    self.state = 725
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 87, self._ctx)

                pass

            elif la_ == 50:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 726
                self.match(SqlBaseParser.SET)
                self.state = 727
                self.match(SqlBaseParser.ROLE)
                self.state = 731
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 728
                        self.matchWildcard()
                    self.state = 733
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)

                pass

            elif la_ == 51:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 734
                self.match(SqlBaseParser.SET)
                self.state = 738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 735
                        self.matchWildcard()
                    self.state = 740
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 89, self._ctx)

                pass

            elif la_ == 52:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 741
                self.match(SqlBaseParser.RESET)
                pass

            elif la_ == 53:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 742
                self.unsupportedHiveNativeCommands()
                self.state = 746
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 743
                        self.matchWildcard()
                    self.state = 748
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 90, self._ctx)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None  # Token
            self.kw2 = None  # Token
            self.kw3 = None  # Token
            self.kw4 = None  # Token
            self.kw5 = None  # Token
            self.kw6 = None  # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsupportedHiveNativeCommands"):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsupportedHiveNativeCommands"):
                listener.exitUnsupportedHiveNativeCommands(self)

    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 10, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0  # Token type
        try:
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 752
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 754
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 755
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 92, self._ctx)
                if la_ == 1:
                    self.state = 756
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 759
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
                if la_ == 1:
                    self.state = 760
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 763
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 764
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 765
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 766
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 94, self._ctx)
                if la_ == 1:
                    self.state = 767
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 770
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 771
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 772
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 773
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 774
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 775
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 776
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 777
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 778
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 779
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 780
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 781
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 782
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 783
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 784
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 785
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 786
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 787
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 788
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 789
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 790
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 791
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 792
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 793
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 794
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 795
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 796
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 797
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 798
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 799
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 800
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 801
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 802
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 803
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 804
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 805
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 806
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 807
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 808
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 809
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 810
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 811
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 812
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 813
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 814
                self.tableIdentifier()
                self.state = 815
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 816
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 818
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 819
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 820
                self.tableIdentifier()
                self.state = 821
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 822
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 824
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 825
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 826
                self.tableIdentifier()
                self.state = 827
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 828
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 830
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 831
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 832
                self.tableIdentifier()
                self.state = 833
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 834
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 836
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 837
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 838
                self.tableIdentifier()
                self.state = 839
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 840
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 842
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 843
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 844
                self.tableIdentifier()
                self.state = 845
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 846
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 847
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 848
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 850
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 851
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 852
                self.tableIdentifier()
                self.state = 853
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 854
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 855
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 857
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 858
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 859
                self.tableIdentifier()
                self.state = 860
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 861
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 863
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 864
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 865
                self.tableIdentifier()
                self.state = 866
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 867
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 869
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 870
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 871
                self.tableIdentifier()
                self.state = 872
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 873
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 875
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 876
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 877
                self.tableIdentifier()
                self.state = 878
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 880
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 881
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 882
                self.tableIdentifier()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 883
                    self.partitionSpec()

                self.state = 886
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 888
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 889
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 890
                self.tableIdentifier()
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 891
                    self.partitionSpec()

                self.state = 894
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 896
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 897
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 898
                self.tableIdentifier()
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 899
                    self.partitionSpec()

                self.state = 902
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 903
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 905
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 906
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 907
                self.tableIdentifier()
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 908
                    self.partitionSpec()

                self.state = 911
                localctx.kw3 = self.match(SqlBaseParser.ADD)
                self.state = 912
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 914
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 915
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 916
                self.tableIdentifier()
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 917
                    self.partitionSpec()

                self.state = 920
                localctx.kw3 = self.match(SqlBaseParser.CHANGE)
                self.state = 922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 100, self._ctx)
                if la_ == 1:
                    self.state = 921
                    localctx.kw4 = self.match(SqlBaseParser.COLUMNS)

                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 924
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 925
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 926
                self.tableIdentifier()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 927
                    self.partitionSpec()

                self.state = 930
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 931
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 933
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 934
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 935
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 936
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 937
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 938
                localctx.kw1 = self.match(SqlBaseParser.DELETE)
                self.state = 939
                localctx.kw2 = self.match(SqlBaseParser.FROM)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTableHeader"):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTableHeader"):
                listener.exitCreateTableHeader(self)

    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_createTableHeader)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(SqlBaseParser.CREATE)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.TEMPORARY:
                self.state = 943
                self.match(SqlBaseParser.TEMPORARY)

            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.EXTERNAL:
                self.state = 946
                self.match(SqlBaseParser.EXTERNAL)

            self.state = 949
            self.match(SqlBaseParser.TABLE)
            self.state = 953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
            if la_ == 1:
                self.state = 950
                self.match(SqlBaseParser.IF)
                self.state = 951
                self.match(SqlBaseParser.NOT)
                self.state = 952
                self.match(SqlBaseParser.EXISTS)

            self.state = 955
            self.tableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BucketSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(
                SqlBaseParser.OrderedIdentifierListContext, 0
            )

        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBucketSpec"):
                listener.enterBucketSpec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBucketSpec"):
                listener.exitBucketSpec(self)

    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_bucketSpec)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 958
            self.match(SqlBaseParser.BY)
            self.state = 959
            self.identifierList()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.SORTED:
                self.state = 960
                self.match(SqlBaseParser.SORTED)
                self.state = 961
                self.match(SqlBaseParser.BY)
                self.state = 962
                self.orderedIdentifierList()

            self.state = 965
            self.match(SqlBaseParser.INTO)
            self.state = 966
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 967
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SkewSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext, 0)

        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSkewSpec"):
                listener.enterSkewSpec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSkewSpec"):
                listener.exitSkewSpec(self)

    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(SqlBaseParser.SKEWED)
            self.state = 970
            self.match(SqlBaseParser.BY)
            self.state = 971
            self.identifierList()
            self.state = 972
            self.match(SqlBaseParser.ON)
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 107, self._ctx)
            if la_ == 1:
                self.state = 973
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 974
                self.nestedConstantList()
                pass

            self.state = 980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
            if la_ == 1:
                self.state = 977
                self.match(SqlBaseParser.STORED)
                self.state = 978
                self.match(SqlBaseParser.AS)
                self.state = 979
                self.match(SqlBaseParser.DIRECTORIES)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocationSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocationSpec"):
                listener.enterLocationSpec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocationSpec"):
                listener.exitLocationSpec(self)

    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(SqlBaseParser.LOCATION)
            self.state = 983
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext, 0)

        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuery"):
                listener.enterQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuery"):
                listener.exitQuery(self)

    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_query)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.WITH:
                self.state = 985
                self.ctes()

            self.state = 988
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertIntoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertInto"):
                listener.enterInsertInto(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertInto"):
                listener.exitInsertInto(self)

    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_insertInto)
        self._la = 0  # Token type
        try:
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.match(SqlBaseParser.INSERT)
                self.state = 991
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 992
                self.match(SqlBaseParser.TABLE)
                self.state = 993
                self.tableIdentifier()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 994
                    self.partitionSpec()
                    self.state = 998
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.IF:
                        self.state = 995
                        self.match(SqlBaseParser.IF)
                        self.state = 996
                        self.match(SqlBaseParser.NOT)
                        self.state = 997
                        self.match(SqlBaseParser.EXISTS)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.match(SqlBaseParser.INSERT)
                self.state = 1003
                self.match(SqlBaseParser.INTO)
                self.state = 1005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
                if la_ == 1:
                    self.state = 1004
                    self.match(SqlBaseParser.TABLE)

                self.state = 1007
                self.tableIdentifier()
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 1008
                    self.partitionSpec()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPartitionSpecLocation"):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPartitionSpecLocation"):
                listener.exitPartitionSpecLocation(self)

    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 24, self.RULE_partitionSpecLocation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.partitionSpec()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.LOCATION:
                self.state = 1014
                self.locationSpec()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def partitionVal(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPartitionSpec"):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPartitionSpec"):
                listener.exitPartitionSpec(self)

    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_partitionSpec)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(SqlBaseParser.PARTITION)
            self.state = 1018
            self.match(SqlBaseParser.T__0)
            self.state = 1019
            self.partitionVal()
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1020
                self.match(SqlBaseParser.T__2)
                self.state = 1021
                self.partitionVal()
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1027
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionValContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPartitionVal"):
                listener.enterPartitionVal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPartitionVal"):
                listener.exitPartitionVal(self)

    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_partitionVal)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.identifier()
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.EQ:
                self.state = 1030
                self.match(SqlBaseParser.EQ)
                self.state = 1031
                self.constant()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext, 0)

        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext, 0)

        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeFuncName"):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeFuncName"):
                listener.exitDescribeFuncName(self)

    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_describeFuncName)
        try:
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 118, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1036
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1037
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1038
                self.predicateOperator()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescribeColNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeColName"):
                listener.enterDescribeColName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeColName"):
                listener.exitDescribeColName(self)

    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_describeColName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.identifier()
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__3:
                self.state = 1042
                self.match(SqlBaseParser.T__3)
                self.state = 1045
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    SqlBaseParser.SELECT,
                    SqlBaseParser.FROM,
                    SqlBaseParser.ADD,
                    SqlBaseParser.AS,
                    SqlBaseParser.ALL,
                    SqlBaseParser.DISTINCT,
                    SqlBaseParser.WHERE,
                    SqlBaseParser.GROUP,
                    SqlBaseParser.BY,
                    SqlBaseParser.GROUPING,
                    SqlBaseParser.SETS,
                    SqlBaseParser.CUBE,
                    SqlBaseParser.ROLLUP,
                    SqlBaseParser.ORDER,
                    SqlBaseParser.HAVING,
                    SqlBaseParser.LIMIT,
                    SqlBaseParser.AT,
                    SqlBaseParser.OR,
                    SqlBaseParser.AND,
                    SqlBaseParser.IN,
                    SqlBaseParser.NOT,
                    SqlBaseParser.NO,
                    SqlBaseParser.EXISTS,
                    SqlBaseParser.BETWEEN,
                    SqlBaseParser.LIKE,
                    SqlBaseParser.RLIKE,
                    SqlBaseParser.IS,
                    SqlBaseParser.NULL,
                    SqlBaseParser.TRUE,
                    SqlBaseParser.FALSE,
                    SqlBaseParser.NULLS,
                    SqlBaseParser.ASC,
                    SqlBaseParser.DESC,
                    SqlBaseParser.FOR,
                    SqlBaseParser.INTERVAL,
                    SqlBaseParser.CASE,
                    SqlBaseParser.WHEN,
                    SqlBaseParser.THEN,
                    SqlBaseParser.ELSE,
                    SqlBaseParser.END,
                    SqlBaseParser.JOIN,
                    SqlBaseParser.CROSS,
                    SqlBaseParser.OUTER,
                    SqlBaseParser.INNER,
                    SqlBaseParser.LEFT,
                    SqlBaseParser.SEMI,
                    SqlBaseParser.RIGHT,
                    SqlBaseParser.FULL,
                    SqlBaseParser.NATURAL,
                    SqlBaseParser.ON,
                    SqlBaseParser.LATERAL,
                    SqlBaseParser.WINDOW,
                    SqlBaseParser.OVER,
                    SqlBaseParser.PARTITION,
                    SqlBaseParser.RANGE,
                    SqlBaseParser.ROWS,
                    SqlBaseParser.UNBOUNDED,
                    SqlBaseParser.PRECEDING,
                    SqlBaseParser.FOLLOWING,
                    SqlBaseParser.CURRENT,
                    SqlBaseParser.ROW,
                    SqlBaseParser.WITH,
                    SqlBaseParser.VALUES,
                    SqlBaseParser.CREATE,
                    SqlBaseParser.TABLE,
                    SqlBaseParser.VIEW,
                    SqlBaseParser.REPLACE,
                    SqlBaseParser.INSERT,
                    SqlBaseParser.DELETE,
                    SqlBaseParser.INTO,
                    SqlBaseParser.DESCRIBE,
                    SqlBaseParser.EXPLAIN,
                    SqlBaseParser.FORMAT,
                    SqlBaseParser.LOGICAL,
                    SqlBaseParser.CODEGEN,
                    SqlBaseParser.CAST,
                    SqlBaseParser.SHOW,
                    SqlBaseParser.TABLES,
                    SqlBaseParser.COLUMNS,
                    SqlBaseParser.COLUMN,
                    SqlBaseParser.USE,
                    SqlBaseParser.PARTITIONS,
                    SqlBaseParser.FUNCTIONS,
                    SqlBaseParser.DROP,
                    SqlBaseParser.UNION,
                    SqlBaseParser.EXCEPT,
                    SqlBaseParser.INTERSECT,
                    SqlBaseParser.TO,
                    SqlBaseParser.TABLESAMPLE,
                    SqlBaseParser.STRATIFY,
                    SqlBaseParser.ALTER,
                    SqlBaseParser.RENAME,
                    SqlBaseParser.ARRAY,
                    SqlBaseParser.MAP,
                    SqlBaseParser.STRUCT,
                    SqlBaseParser.COMMENT,
                    SqlBaseParser.SET,
                    SqlBaseParser.RESET,
                    SqlBaseParser.DATA,
                    SqlBaseParser.START,
                    SqlBaseParser.TRANSACTION,
                    SqlBaseParser.COMMIT,
                    SqlBaseParser.ROLLBACK,
                    SqlBaseParser.MACRO,
                    SqlBaseParser.IF,
                    SqlBaseParser.DIV,
                    SqlBaseParser.PERCENTLIT,
                    SqlBaseParser.BUCKET,
                    SqlBaseParser.OUT,
                    SqlBaseParser.OF,
                    SqlBaseParser.SORT,
                    SqlBaseParser.CLUSTER,
                    SqlBaseParser.DISTRIBUTE,
                    SqlBaseParser.OVERWRITE,
                    SqlBaseParser.TRANSFORM,
                    SqlBaseParser.REDUCE,
                    SqlBaseParser.USING,
                    SqlBaseParser.SERDE,
                    SqlBaseParser.SERDEPROPERTIES,
                    SqlBaseParser.RECORDREADER,
                    SqlBaseParser.RECORDWRITER,
                    SqlBaseParser.DELIMITED,
                    SqlBaseParser.FIELDS,
                    SqlBaseParser.TERMINATED,
                    SqlBaseParser.COLLECTION,
                    SqlBaseParser.ITEMS,
                    SqlBaseParser.KEYS,
                    SqlBaseParser.ESCAPED,
                    SqlBaseParser.LINES,
                    SqlBaseParser.SEPARATED,
                    SqlBaseParser.FUNCTION,
                    SqlBaseParser.EXTENDED,
                    SqlBaseParser.REFRESH,
                    SqlBaseParser.CLEAR,
                    SqlBaseParser.CACHE,
                    SqlBaseParser.UNCACHE,
                    SqlBaseParser.LAZY,
                    SqlBaseParser.FORMATTED,
                    SqlBaseParser.TEMPORARY,
                    SqlBaseParser.OPTIONS,
                    SqlBaseParser.UNSET,
                    SqlBaseParser.TBLPROPERTIES,
                    SqlBaseParser.DBPROPERTIES,
                    SqlBaseParser.BUCKETS,
                    SqlBaseParser.SKEWED,
                    SqlBaseParser.STORED,
                    SqlBaseParser.DIRECTORIES,
                    SqlBaseParser.LOCATION,
                    SqlBaseParser.EXCHANGE,
                    SqlBaseParser.ARCHIVE,
                    SqlBaseParser.UNARCHIVE,
                    SqlBaseParser.FILEFORMAT,
                    SqlBaseParser.TOUCH,
                    SqlBaseParser.COMPACT,
                    SqlBaseParser.CONCATENATE,
                    SqlBaseParser.CHANGE,
                    SqlBaseParser.CASCADE,
                    SqlBaseParser.RESTRICT,
                    SqlBaseParser.CLUSTERED,
                    SqlBaseParser.SORTED,
                    SqlBaseParser.PURGE,
                    SqlBaseParser.INPUTFORMAT,
                    SqlBaseParser.OUTPUTFORMAT,
                    SqlBaseParser.DATABASE,
                    SqlBaseParser.DATABASES,
                    SqlBaseParser.DFS,
                    SqlBaseParser.TRUNCATE,
                    SqlBaseParser.ANALYZE,
                    SqlBaseParser.COMPUTE,
                    SqlBaseParser.LIST,
                    SqlBaseParser.STATISTICS,
                    SqlBaseParser.PARTITIONED,
                    SqlBaseParser.EXTERNAL,
                    SqlBaseParser.DEFINED,
                    SqlBaseParser.REVOKE,
                    SqlBaseParser.GRANT,
                    SqlBaseParser.LOCK,
                    SqlBaseParser.UNLOCK,
                    SqlBaseParser.MSCK,
                    SqlBaseParser.REPAIR,
                    SqlBaseParser.RECOVER,
                    SqlBaseParser.EXPORT,
                    SqlBaseParser.IMPORT,
                    SqlBaseParser.LOAD,
                    SqlBaseParser.ROLE,
                    SqlBaseParser.ROLES,
                    SqlBaseParser.COMPACTIONS,
                    SqlBaseParser.PRINCIPALS,
                    SqlBaseParser.TRANSACTIONS,
                    SqlBaseParser.INDEX,
                    SqlBaseParser.INDEXES,
                    SqlBaseParser.LOCKS,
                    SqlBaseParser.OPTION,
                    SqlBaseParser.ANTI,
                    SqlBaseParser.LOCAL,
                    SqlBaseParser.INPATH,
                    SqlBaseParser.CURRENT_DATE,
                    SqlBaseParser.CURRENT_TIMESTAMP,
                    SqlBaseParser.IDENTIFIER,
                    SqlBaseParser.BACKQUOTED_IDENTIFIER,
                ]:
                    self.state = 1043
                    self.identifier()
                    pass
                elif token in [SqlBaseParser.STRING]:
                    self.state = 1044
                    self.match(SqlBaseParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CtesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtes"):
                listener.enterCtes(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtes"):
                listener.exitCtes(self)

    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_ctes)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(SqlBaseParser.WITH)
            self.state = 1053
            self.namedQuery()
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1054
                self.match(SqlBaseParser.T__2)
                self.state = 1055
                self.namedQuery()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedQueryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None  # IdentifierContext

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedQuery"):
                listener.enterNamedQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedQuery"):
                listener.exitNamedQuery(self)

    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_namedQuery)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            localctx.name = self.identifier()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.AS:
                self.state = 1062
                self.match(SqlBaseParser.AS)

            self.state = 1065
            self.match(SqlBaseParser.T__0)
            self.state = 1066
            self.queryNoWith()
            self.state = 1067
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableProviderContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableProvider"):
                listener.enterTableProvider(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableProvider"):
                listener.exitTableProvider(self)

    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(SqlBaseParser.USING)
            self.state = 1070
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablePropertyListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTablePropertyList"):
                listener.enterTablePropertyList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTablePropertyList"):
                listener.exitTablePropertyList(self)

    def tablePropertyList(self):

        localctx = SqlBaseParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_tablePropertyList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(SqlBaseParser.T__0)
            self.state = 1073
            self.tableProperty()
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1074
                self.match(SqlBaseParser.T__2)
                self.state = 1075
                self.tableProperty()
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1081
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablePropertyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None  # TablePropertyKeyContext
            self.value = None  # Token

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProperty

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableProperty"):
                listener.enterTableProperty(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableProperty"):
                listener.exitTableProperty(self)

    def tableProperty(self):

        localctx = SqlBaseParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_tableProperty)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            localctx.key = self.tablePropertyKey()
            self.state = 1088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.EQ or _la == SqlBaseParser.STRING:
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.EQ:
                    self.state = 1084
                    self.match(SqlBaseParser.EQ)

                self.state = 1087
                localctx.value = self.match(SqlBaseParser.STRING)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyKey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTablePropertyKey"):
                listener.enterTablePropertyKey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTablePropertyKey"):
                listener.exitTablePropertyKey(self)

    def tablePropertyKey(self):

        localctx = SqlBaseParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_tablePropertyKey)
        self._la = 0  # Token type
        try:
            self.state = 1099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.ADD,
                SqlBaseParser.AS,
                SqlBaseParser.ALL,
                SqlBaseParser.DISTINCT,
                SqlBaseParser.WHERE,
                SqlBaseParser.GROUP,
                SqlBaseParser.BY,
                SqlBaseParser.GROUPING,
                SqlBaseParser.SETS,
                SqlBaseParser.CUBE,
                SqlBaseParser.ROLLUP,
                SqlBaseParser.ORDER,
                SqlBaseParser.HAVING,
                SqlBaseParser.LIMIT,
                SqlBaseParser.AT,
                SqlBaseParser.OR,
                SqlBaseParser.AND,
                SqlBaseParser.IN,
                SqlBaseParser.NOT,
                SqlBaseParser.NO,
                SqlBaseParser.EXISTS,
                SqlBaseParser.BETWEEN,
                SqlBaseParser.LIKE,
                SqlBaseParser.RLIKE,
                SqlBaseParser.IS,
                SqlBaseParser.NULL,
                SqlBaseParser.TRUE,
                SqlBaseParser.FALSE,
                SqlBaseParser.NULLS,
                SqlBaseParser.ASC,
                SqlBaseParser.DESC,
                SqlBaseParser.FOR,
                SqlBaseParser.INTERVAL,
                SqlBaseParser.CASE,
                SqlBaseParser.WHEN,
                SqlBaseParser.THEN,
                SqlBaseParser.ELSE,
                SqlBaseParser.END,
                SqlBaseParser.JOIN,
                SqlBaseParser.CROSS,
                SqlBaseParser.OUTER,
                SqlBaseParser.INNER,
                SqlBaseParser.LEFT,
                SqlBaseParser.SEMI,
                SqlBaseParser.RIGHT,
                SqlBaseParser.FULL,
                SqlBaseParser.NATURAL,
                SqlBaseParser.ON,
                SqlBaseParser.LATERAL,
                SqlBaseParser.WINDOW,
                SqlBaseParser.OVER,
                SqlBaseParser.PARTITION,
                SqlBaseParser.RANGE,
                SqlBaseParser.ROWS,
                SqlBaseParser.UNBOUNDED,
                SqlBaseParser.PRECEDING,
                SqlBaseParser.FOLLOWING,
                SqlBaseParser.CURRENT,
                SqlBaseParser.ROW,
                SqlBaseParser.WITH,
                SqlBaseParser.VALUES,
                SqlBaseParser.CREATE,
                SqlBaseParser.TABLE,
                SqlBaseParser.VIEW,
                SqlBaseParser.REPLACE,
                SqlBaseParser.INSERT,
                SqlBaseParser.DELETE,
                SqlBaseParser.INTO,
                SqlBaseParser.DESCRIBE,
                SqlBaseParser.EXPLAIN,
                SqlBaseParser.FORMAT,
                SqlBaseParser.LOGICAL,
                SqlBaseParser.CODEGEN,
                SqlBaseParser.CAST,
                SqlBaseParser.SHOW,
                SqlBaseParser.TABLES,
                SqlBaseParser.COLUMNS,
                SqlBaseParser.COLUMN,
                SqlBaseParser.USE,
                SqlBaseParser.PARTITIONS,
                SqlBaseParser.FUNCTIONS,
                SqlBaseParser.DROP,
                SqlBaseParser.UNION,
                SqlBaseParser.EXCEPT,
                SqlBaseParser.INTERSECT,
                SqlBaseParser.TO,
                SqlBaseParser.TABLESAMPLE,
                SqlBaseParser.STRATIFY,
                SqlBaseParser.ALTER,
                SqlBaseParser.RENAME,
                SqlBaseParser.ARRAY,
                SqlBaseParser.MAP,
                SqlBaseParser.STRUCT,
                SqlBaseParser.COMMENT,
                SqlBaseParser.SET,
                SqlBaseParser.RESET,
                SqlBaseParser.DATA,
                SqlBaseParser.START,
                SqlBaseParser.TRANSACTION,
                SqlBaseParser.COMMIT,
                SqlBaseParser.ROLLBACK,
                SqlBaseParser.MACRO,
                SqlBaseParser.IF,
                SqlBaseParser.DIV,
                SqlBaseParser.PERCENTLIT,
                SqlBaseParser.BUCKET,
                SqlBaseParser.OUT,
                SqlBaseParser.OF,
                SqlBaseParser.SORT,
                SqlBaseParser.CLUSTER,
                SqlBaseParser.DISTRIBUTE,
                SqlBaseParser.OVERWRITE,
                SqlBaseParser.TRANSFORM,
                SqlBaseParser.REDUCE,
                SqlBaseParser.USING,
                SqlBaseParser.SERDE,
                SqlBaseParser.SERDEPROPERTIES,
                SqlBaseParser.RECORDREADER,
                SqlBaseParser.RECORDWRITER,
                SqlBaseParser.DELIMITED,
                SqlBaseParser.FIELDS,
                SqlBaseParser.TERMINATED,
                SqlBaseParser.COLLECTION,
                SqlBaseParser.ITEMS,
                SqlBaseParser.KEYS,
                SqlBaseParser.ESCAPED,
                SqlBaseParser.LINES,
                SqlBaseParser.SEPARATED,
                SqlBaseParser.FUNCTION,
                SqlBaseParser.EXTENDED,
                SqlBaseParser.REFRESH,
                SqlBaseParser.CLEAR,
                SqlBaseParser.CACHE,
                SqlBaseParser.UNCACHE,
                SqlBaseParser.LAZY,
                SqlBaseParser.FORMATTED,
                SqlBaseParser.TEMPORARY,
                SqlBaseParser.OPTIONS,
                SqlBaseParser.UNSET,
                SqlBaseParser.TBLPROPERTIES,
                SqlBaseParser.DBPROPERTIES,
                SqlBaseParser.BUCKETS,
                SqlBaseParser.SKEWED,
                SqlBaseParser.STORED,
                SqlBaseParser.DIRECTORIES,
                SqlBaseParser.LOCATION,
                SqlBaseParser.EXCHANGE,
                SqlBaseParser.ARCHIVE,
                SqlBaseParser.UNARCHIVE,
                SqlBaseParser.FILEFORMAT,
                SqlBaseParser.TOUCH,
                SqlBaseParser.COMPACT,
                SqlBaseParser.CONCATENATE,
                SqlBaseParser.CHANGE,
                SqlBaseParser.CASCADE,
                SqlBaseParser.RESTRICT,
                SqlBaseParser.CLUSTERED,
                SqlBaseParser.SORTED,
                SqlBaseParser.PURGE,
                SqlBaseParser.INPUTFORMAT,
                SqlBaseParser.OUTPUTFORMAT,
                SqlBaseParser.DATABASE,
                SqlBaseParser.DATABASES,
                SqlBaseParser.DFS,
                SqlBaseParser.TRUNCATE,
                SqlBaseParser.ANALYZE,
                SqlBaseParser.COMPUTE,
                SqlBaseParser.LIST,
                SqlBaseParser.STATISTICS,
                SqlBaseParser.PARTITIONED,
                SqlBaseParser.EXTERNAL,
                SqlBaseParser.DEFINED,
                SqlBaseParser.REVOKE,
                SqlBaseParser.GRANT,
                SqlBaseParser.LOCK,
                SqlBaseParser.UNLOCK,
                SqlBaseParser.MSCK,
                SqlBaseParser.REPAIR,
                SqlBaseParser.RECOVER,
                SqlBaseParser.EXPORT,
                SqlBaseParser.IMPORT,
                SqlBaseParser.LOAD,
                SqlBaseParser.ROLE,
                SqlBaseParser.ROLES,
                SqlBaseParser.COMPACTIONS,
                SqlBaseParser.PRINCIPALS,
                SqlBaseParser.TRANSACTIONS,
                SqlBaseParser.INDEX,
                SqlBaseParser.INDEXES,
                SqlBaseParser.LOCKS,
                SqlBaseParser.OPTION,
                SqlBaseParser.ANTI,
                SqlBaseParser.LOCAL,
                SqlBaseParser.INPATH,
                SqlBaseParser.CURRENT_DATE,
                SqlBaseParser.CURRENT_TIMESTAMP,
                SqlBaseParser.IDENTIFIER,
                SqlBaseParser.BACKQUOTED_IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self.identifier()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__3:
                    self.state = 1091
                    self.match(SqlBaseParser.T__3)
                    self.state = 1092
                    self.identifier()
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantList"):
                listener.enterConstantList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantList"):
                listener.exitConstantList(self)

    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_constantList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(SqlBaseParser.T__0)
            self.state = 1102
            self.constant()
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1103
                self.match(SqlBaseParser.T__2)
                self.state = 1104
                self.constant()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1110
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedConstantListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestedConstantList"):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestedConstantList"):
                listener.exitNestedConstantList(self)

    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_nestedConstantList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(SqlBaseParser.T__0)
            self.state = 1113
            self.constantList()
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1114
                self.match(SqlBaseParser.T__2)
                self.state = 1115
                self.constantList()
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1121
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateFileFormat"):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateFileFormat"):
                listener.exitCreateFileFormat(self)

    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_createFileFormat)
        try:
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 130, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1123
                self.match(SqlBaseParser.STORED)
                self.state = 1124
                self.match(SqlBaseParser.AS)
                self.state = 1125
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(SqlBaseParser.STORED)
                self.state = 1127
                self.match(SqlBaseParser.BY)
                self.state = 1128
                self.storageHandler()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileFormatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class TableFileFormatContext(FileFormatContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None  # Token
            self.outFmt = None  # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableFileFormat"):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableFileFormat"):
                listener.exitTableFileFormat(self)

    class GenericFileFormatContext(FileFormatContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGenericFileFormat"):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGenericFileFormat"):
                listener.exitGenericFileFormat(self)

    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fileFormat)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 131, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1132
                localctx.inFmt = self.match(SqlBaseParser.STRING)
                self.state = 1133
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1134
                localctx.outFmt = self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.identifier()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageHandlerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStorageHandler"):
                listener.enterStorageHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStorageHandler"):
                listener.exitStorageHandler(self)

    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(SqlBaseParser.STRING)
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 132, self._ctx)
            if la_ == 1:
                self.state = 1139
                self.match(SqlBaseParser.WITH)
                self.state = 1140
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1141
                self.tablePropertyList()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResource"):
                listener.enterResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResource"):
                listener.exitResource(self)

    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.identifier()
            self.state = 1145
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryNoWithContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SingleInsertQueryContext(QueryNoWithContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext, 0)

        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext, 0)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleInsertQuery"):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleInsertQuery"):
                listener.exitSingleInsertQuery(self)

    class MultiInsertQueryContext(QueryNoWithContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext, 0)

        def multiInsertQueryBody(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SqlBaseParser.MultiInsertQueryBodyContext
                )
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.MultiInsertQueryBodyContext, i
                )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiInsertQuery"):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiInsertQuery"):
                listener.exitMultiInsertQuery(self)

    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_queryNoWith)
        self._la = 0  # Token type
        try:
            self.state = 1159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 135, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.INSERT:
                    self.state = 1147
                    self.insertInto()

                self.state = 1150
                self.queryTerm(0)
                self.state = 1151
                self.queryOrganization()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1153
                self.fromClause()
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1154
                    self.multiInsertQueryBody()
                    self.state = 1157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (
                        _la == SqlBaseParser.SELECT
                        or _la == SqlBaseParser.FROM
                        or _la == SqlBaseParser.INSERT
                        or _la == SqlBaseParser.MAP
                        or _la == SqlBaseParser.REDUCE
                    ):
                        break

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None  # SortItemContext
            self.order = list()  # of SortItemContexts
            self._expression = None  # ExpressionContext
            self.clusterBy = list()  # of ExpressionContexts
            self.distributeBy = list()  # of ExpressionContexts
            self.sort = list()  # of SortItemContexts
            self.limit = None  # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def sortItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQueryOrganization"):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQueryOrganization"):
                listener.exitQueryOrganization(self)

    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_queryOrganization)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.ORDER:
                self.state = 1161
                self.match(SqlBaseParser.ORDER)
                self.state = 1162
                self.match(SqlBaseParser.BY)
                self.state = 1163
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1164
                    self.match(SqlBaseParser.T__2)
                    self.state = 1165
                    localctx._sortItem = self.sortItem()
                    localctx.order.append(localctx._sortItem)
                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.CLUSTER:
                self.state = 1173
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1174
                self.match(SqlBaseParser.BY)
                self.state = 1175
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1176
                    self.match(SqlBaseParser.T__2)
                    self.state = 1177
                    localctx._expression = self.expression()
                    localctx.clusterBy.append(localctx._expression)
                    self.state = 1182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.DISTRIBUTE:
                self.state = 1185
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1186
                self.match(SqlBaseParser.BY)
                self.state = 1187
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1188
                    self.match(SqlBaseParser.T__2)
                    self.state = 1189
                    localctx._expression = self.expression()
                    localctx.distributeBy.append(localctx._expression)
                    self.state = 1194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.SORT:
                self.state = 1197
                self.match(SqlBaseParser.SORT)
                self.state = 1198
                self.match(SqlBaseParser.BY)
                self.state = 1199
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1200
                    self.match(SqlBaseParser.T__2)
                    self.state = 1201
                    localctx._sortItem = self.sortItem()
                    localctx.sort.append(localctx._sortItem)
                    self.state = 1206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.WINDOW:
                self.state = 1209
                self.windows()

            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.LIMIT:
                self.state = 1212
                self.match(SqlBaseParser.LIMIT)
                self.state = 1213
                localctx.limit = self.expression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext, 0)

        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext, 0)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiInsertQueryBody"):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiInsertQueryBody"):
                listener.exitMultiInsertQueryBody(self)

    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 62, self.RULE_multiInsertQueryBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.INSERT:
                self.state = 1216
                self.insertInto()

            self.state = 1219
            self.querySpecification()
            self.state = 1220
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryTermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class QueryTermDefaultContext(QueryTermContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQueryTermDefault"):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQueryTermDefault"):
                listener.exitQueryTermDefault(self)

    class SetOperationContext(QueryTermContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None  # QueryTermContext
            self.operator = None  # Token
            self.right = None  # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext, i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetOperation"):
                listener.enterSetOperation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetOperation"):
                listener.exitSetOperation(self)

    def queryTerm(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_queryTerm, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1223
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1233
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 148, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.SetOperationContext(
                        self,
                        SqlBaseParser.QueryTermContext(self, _parentctx, _parentState),
                    )
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_queryTerm
                    )
                    self.state = 1225
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 1)"
                        )
                    self.state = 1226
                    localctx.operator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 92)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 92))
                                & (
                                    (1 << (SqlBaseParser.UNION - 92))
                                    | (1 << (SqlBaseParser.EXCEPT - 92))
                                    | (1 << (SqlBaseParser.INTERSECT - 92))
                                )
                            )
                            != 0
                        )
                    ):
                        localctx.operator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.ALL or _la == SqlBaseParser.DISTINCT:
                        self.state = 1227
                        self.setQuantifier()

                    self.state = 1230
                    localctx.right = self.queryTerm(2)
                self.state = 1235
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 148, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SubqueryContext(QueryPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubquery"):
                listener.enterSubquery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubquery"):
                listener.exitSubquery(self)

    class QueryPrimaryDefaultContext(QueryPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQueryPrimaryDefault"):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQueryPrimaryDefault"):
                listener.exitQueryPrimaryDefault(self)

    class InlineTableDefault1Context(QueryPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineTableDefault1"):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineTableDefault1"):
                listener.exitInlineTableDefault1(self)

    class TableContext(QueryPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable"):
                listener.enterTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable"):
                listener.exitTable(self)

    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_queryPrimary)
        try:
            self.state = 1244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.MAP,
                SqlBaseParser.REDUCE,
            ]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1236
                self.querySpecification()
                pass
            elif token in [SqlBaseParser.TABLE]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1237
                self.match(SqlBaseParser.TABLE)
                self.state = 1238
                self.tableIdentifier()
                pass
            elif token in [SqlBaseParser.VALUES]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1239
                self.inlineTable()
                pass
            elif token in [SqlBaseParser.T__0]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1240
                self.match(SqlBaseParser.T__0)
                self.state = 1241
                self.queryNoWith()
                self.state = 1242
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None  # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSortItem"):
                listener.enterSortItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSortItem"):
                listener.exitSortItem(self)

    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_sortItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.expression()
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.ASC or _la == SqlBaseParser.DESC:
                self.state = 1247
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.ASC or _la == SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None  # Token
            self.inRowFormat = None  # RowFormatContext
            self.recordWriter = None  # Token
            self.script = None  # Token
            self.outRowFormat = None  # RowFormatContext
            self.recordReader = None  # Token
            self.where = None  # BooleanExpressionContext
            self.having = None  # BooleanExpressionContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext, 0)

        def rowFormat(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext, i)

        def booleanExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.BooleanExpressionContext, i
                )

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def lateralView(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext, i)

        def aggregation(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationContext, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuerySpecification"):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuerySpecification"):
                listener.exitQuerySpecification(self)

    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_querySpecification)
        self._la = 0  # Token type
        try:
            self.state = 1337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1260
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT]:
                    self.state = 1250
                    self.match(SqlBaseParser.SELECT)
                    self.state = 1251
                    localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                    self.state = 1252
                    self.match(SqlBaseParser.T__0)
                    self.state = 1253
                    self.namedExpressionSeq()
                    self.state = 1254
                    self.match(SqlBaseParser.T__1)
                    pass
                elif token in [SqlBaseParser.MAP]:
                    self.state = 1256
                    localctx.kind = self.match(SqlBaseParser.MAP)
                    self.state = 1257
                    self.namedExpressionSeq()
                    pass
                elif token in [SqlBaseParser.REDUCE]:
                    self.state = 1258
                    localctx.kind = self.match(SqlBaseParser.REDUCE)
                    self.state = 1259
                    self.namedExpressionSeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ROW:
                    self.state = 1262
                    localctx.inRowFormat = self.rowFormat()

                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.RECORDWRITER:
                    self.state = 1265
                    self.match(SqlBaseParser.RECORDWRITER)
                    self.state = 1266
                    localctx.recordWriter = self.match(SqlBaseParser.STRING)

                self.state = 1269
                self.match(SqlBaseParser.USING)
                self.state = 1270
                localctx.script = self.match(SqlBaseParser.STRING)
                self.state = 1283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 156, self._ctx)
                if la_ == 1:
                    self.state = 1271
                    self.match(SqlBaseParser.AS)
                    self.state = 1281
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 155, self._ctx)
                    if la_ == 1:
                        self.state = 1272
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 1273
                        self.colTypeList()
                        pass

                    elif la_ == 3:
                        self.state = 1274
                        self.match(SqlBaseParser.T__0)
                        self.state = 1277
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 154, self._ctx)
                        if la_ == 1:
                            self.state = 1275
                            self.identifierSeq()
                            pass

                        elif la_ == 2:
                            self.state = 1276
                            self.colTypeList()
                            pass

                        self.state = 1279
                        self.match(SqlBaseParser.T__1)
                        pass

                self.state = 1286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 157, self._ctx)
                if la_ == 1:
                    self.state = 1285
                    localctx.outRowFormat = self.rowFormat()

                self.state = 1290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 158, self._ctx)
                if la_ == 1:
                    self.state = 1288
                    self.match(SqlBaseParser.RECORDREADER)
                    self.state = 1289
                    localctx.recordReader = self.match(SqlBaseParser.STRING)

                self.state = 1293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 159, self._ctx)
                if la_ == 1:
                    self.state = 1292
                    self.fromClause()

                self.state = 1297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 160, self._ctx)
                if la_ == 1:
                    self.state = 1295
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1296
                    localctx.where = self.booleanExpression(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT]:
                    self.state = 1299
                    localctx.kind = self.match(SqlBaseParser.SELECT)
                    self.state = 1301
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 161, self._ctx)
                    if la_ == 1:
                        self.state = 1300
                        self.setQuantifier()

                    self.state = 1303
                    self.namedExpressionSeq()
                    self.state = 1305
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 162, self._ctx)
                    if la_ == 1:
                        self.state = 1304
                        self.fromClause()

                    pass
                elif token in [SqlBaseParser.FROM]:
                    self.state = 1307
                    self.fromClause()
                    self.state = 1313
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 164, self._ctx)
                    if la_ == 1:
                        self.state = 1308
                        localctx.kind = self.match(SqlBaseParser.SELECT)
                        self.state = 1310
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 163, self._ctx)
                        if la_ == 1:
                            self.state = 1309
                            self.setQuantifier()

                        self.state = 1312
                        self.namedExpressionSeq()

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 166, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1317
                        self.lateralView()
                    self.state = 1322
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 166, self._ctx)

                self.state = 1325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
                if la_ == 1:
                    self.state = 1323
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1324
                    localctx.where = self.booleanExpression(0)

                self.state = 1328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
                if la_ == 1:
                    self.state = 1327
                    self.aggregation()

                self.state = 1332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 169, self._ctx)
                if la_ == 1:
                    self.state = 1330
                    self.match(SqlBaseParser.HAVING)
                    self.state = 1331
                    localctx.having = self.booleanExpression(0)

                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 170, self._ctx)
                if la_ == 1:
                    self.state = 1334
                    self.windows()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext, i)

        def lateralView(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFromClause"):
                listener.enterFromClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFromClause"):
                listener.exitFromClause(self)

    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.match(SqlBaseParser.FROM)
            self.state = 1340
            self.relation()
            self.state = 1345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 172, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1341
                    self.match(SqlBaseParser.T__2)
                    self.state = 1342
                    self.relation()
                self.state = 1347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 172, self._ctx)

            self.state = 1351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1348
                    self.lateralView()
                self.state = 1353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 173, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None  # ExpressionContext
            self.groupingExpressions = list()  # of ExpressionContexts
            self.kind = None  # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingSet(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext, i)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAggregation"):
                listener.enterAggregation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAggregation"):
                listener.exitAggregation(self)

    def aggregation(self):

        localctx = SqlBaseParser.AggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_aggregation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(SqlBaseParser.GROUP)
            self.state = 1355
            self.match(SqlBaseParser.BY)
            self.state = 1356
            localctx._expression = self.expression()
            localctx.groupingExpressions.append(localctx._expression)
            self.state = 1361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 174, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1357
                    self.match(SqlBaseParser.T__2)
                    self.state = 1358
                    localctx._expression = self.expression()
                    localctx.groupingExpressions.append(localctx._expression)
                self.state = 1363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 174, self._ctx)

            self.state = 1381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 176, self._ctx)
            if la_ == 1:
                self.state = 1364
                self.match(SqlBaseParser.WITH)
                self.state = 1365
                localctx.kind = self.match(SqlBaseParser.ROLLUP)

            elif la_ == 2:
                self.state = 1366
                self.match(SqlBaseParser.WITH)
                self.state = 1367
                localctx.kind = self.match(SqlBaseParser.CUBE)

            elif la_ == 3:
                self.state = 1368
                localctx.kind = self.match(SqlBaseParser.GROUPING)
                self.state = 1369
                self.match(SqlBaseParser.SETS)
                self.state = 1370
                self.match(SqlBaseParser.T__0)
                self.state = 1371
                self.groupingSet()
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1372
                    self.match(SqlBaseParser.T__2)
                    self.state = 1373
                    self.groupingSet()
                    self.state = 1378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1379
                self.match(SqlBaseParser.T__1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupingSetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupingSet"):
                listener.enterGroupingSet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupingSet"):
                listener.exitGroupingSet(self)

    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_groupingSet)
        self._la = 0  # Token type
        try:
            self.state = 1396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 179, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1383
                self.match(SqlBaseParser.T__0)
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                                | (1 << SqlBaseParser.RANGE)
                                | (1 << SqlBaseParser.ROWS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.PLUS - 64))
                                | (1 << (SqlBaseParser.MINUS - 64))
                                | (1 << (SqlBaseParser.ASTERISK - 64))
                                | (1 << (SqlBaseParser.DIV - 64))
                                | (1 << (SqlBaseParser.TILDE - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 131)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 131))
                            & (
                                (1 << (SqlBaseParser.PERCENTLIT - 131))
                                | (1 << (SqlBaseParser.BUCKET - 131))
                                | (1 << (SqlBaseParser.OUT - 131))
                                | (1 << (SqlBaseParser.OF - 131))
                                | (1 << (SqlBaseParser.SORT - 131))
                                | (1 << (SqlBaseParser.CLUSTER - 131))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                                | (1 << (SqlBaseParser.OVERWRITE - 131))
                                | (1 << (SqlBaseParser.TRANSFORM - 131))
                                | (1 << (SqlBaseParser.REDUCE - 131))
                                | (1 << (SqlBaseParser.USING - 131))
                                | (1 << (SqlBaseParser.SERDE - 131))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                                | (1 << (SqlBaseParser.RECORDREADER - 131))
                                | (1 << (SqlBaseParser.RECORDWRITER - 131))
                                | (1 << (SqlBaseParser.DELIMITED - 131))
                                | (1 << (SqlBaseParser.FIELDS - 131))
                                | (1 << (SqlBaseParser.TERMINATED - 131))
                                | (1 << (SqlBaseParser.COLLECTION - 131))
                                | (1 << (SqlBaseParser.ITEMS - 131))
                                | (1 << (SqlBaseParser.KEYS - 131))
                                | (1 << (SqlBaseParser.ESCAPED - 131))
                                | (1 << (SqlBaseParser.LINES - 131))
                                | (1 << (SqlBaseParser.SEPARATED - 131))
                                | (1 << (SqlBaseParser.FUNCTION - 131))
                                | (1 << (SqlBaseParser.EXTENDED - 131))
                                | (1 << (SqlBaseParser.REFRESH - 131))
                                | (1 << (SqlBaseParser.CLEAR - 131))
                                | (1 << (SqlBaseParser.CACHE - 131))
                                | (1 << (SqlBaseParser.UNCACHE - 131))
                                | (1 << (SqlBaseParser.LAZY - 131))
                                | (1 << (SqlBaseParser.FORMATTED - 131))
                                | (1 << (SqlBaseParser.TEMPORARY - 131))
                                | (1 << (SqlBaseParser.OPTIONS - 131))
                                | (1 << (SqlBaseParser.UNSET - 131))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                                | (1 << (SqlBaseParser.BUCKETS - 131))
                                | (1 << (SqlBaseParser.SKEWED - 131))
                                | (1 << (SqlBaseParser.STORED - 131))
                                | (1 << (SqlBaseParser.DIRECTORIES - 131))
                                | (1 << (SqlBaseParser.LOCATION - 131))
                                | (1 << (SqlBaseParser.EXCHANGE - 131))
                                | (1 << (SqlBaseParser.ARCHIVE - 131))
                                | (1 << (SqlBaseParser.UNARCHIVE - 131))
                                | (1 << (SqlBaseParser.FILEFORMAT - 131))
                                | (1 << (SqlBaseParser.TOUCH - 131))
                                | (1 << (SqlBaseParser.COMPACT - 131))
                                | (1 << (SqlBaseParser.CONCATENATE - 131))
                                | (1 << (SqlBaseParser.CHANGE - 131))
                                | (1 << (SqlBaseParser.CASCADE - 131))
                                | (1 << (SqlBaseParser.RESTRICT - 131))
                                | (1 << (SqlBaseParser.CLUSTERED - 131))
                                | (1 << (SqlBaseParser.SORTED - 131))
                                | (1 << (SqlBaseParser.PURGE - 131))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.DATABASE - 131))
                                | (1 << (SqlBaseParser.DATABASES - 131))
                                | (1 << (SqlBaseParser.DFS - 131))
                                | (1 << (SqlBaseParser.TRUNCATE - 131))
                                | (1 << (SqlBaseParser.ANALYZE - 131))
                                | (1 << (SqlBaseParser.COMPUTE - 131))
                                | (1 << (SqlBaseParser.LIST - 131))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 195)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 195))
                            & (
                                (1 << (SqlBaseParser.STATISTICS - 195))
                                | (1 << (SqlBaseParser.PARTITIONED - 195))
                                | (1 << (SqlBaseParser.EXTERNAL - 195))
                                | (1 << (SqlBaseParser.DEFINED - 195))
                                | (1 << (SqlBaseParser.REVOKE - 195))
                                | (1 << (SqlBaseParser.GRANT - 195))
                                | (1 << (SqlBaseParser.LOCK - 195))
                                | (1 << (SqlBaseParser.UNLOCK - 195))
                                | (1 << (SqlBaseParser.MSCK - 195))
                                | (1 << (SqlBaseParser.REPAIR - 195))
                                | (1 << (SqlBaseParser.RECOVER - 195))
                                | (1 << (SqlBaseParser.EXPORT - 195))
                                | (1 << (SqlBaseParser.IMPORT - 195))
                                | (1 << (SqlBaseParser.LOAD - 195))
                                | (1 << (SqlBaseParser.ROLE - 195))
                                | (1 << (SqlBaseParser.ROLES - 195))
                                | (1 << (SqlBaseParser.COMPACTIONS - 195))
                                | (1 << (SqlBaseParser.PRINCIPALS - 195))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                                | (1 << (SqlBaseParser.INDEX - 195))
                                | (1 << (SqlBaseParser.INDEXES - 195))
                                | (1 << (SqlBaseParser.LOCKS - 195))
                                | (1 << (SqlBaseParser.OPTION - 195))
                                | (1 << (SqlBaseParser.ANTI - 195))
                                | (1 << (SqlBaseParser.LOCAL - 195))
                                | (1 << (SqlBaseParser.INPATH - 195))
                                | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                                | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                                | (1 << (SqlBaseParser.STRING - 195))
                                | (1 << (SqlBaseParser.BIGINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.SMALLINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.TINYINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.INTEGER_VALUE - 195))
                                | (1 << (SqlBaseParser.DECIMAL_VALUE - 195))
                                | (1 << (SqlBaseParser.SCIENTIFIC_DECIMAL_VALUE - 195))
                                | (1 << (SqlBaseParser.DOUBLE_LITERAL - 195))
                                | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 195))
                                | (1 << (SqlBaseParser.IDENTIFIER - 195))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 195))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 1384
                    self.expression()
                    self.state = 1389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 1385
                        self.match(SqlBaseParser.T__2)
                        self.state = 1386
                        self.expression()
                        self.state = 1391
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1394
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LateralViewContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None  # IdentifierContext
            self._identifier = None  # IdentifierContext
            self.colName = list()  # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLateralView"):
                listener.enterLateralView(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLateralView"):
                listener.exitLateralView(self)

    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_lateralView)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(SqlBaseParser.LATERAL)
            self.state = 1399
            self.match(SqlBaseParser.VIEW)
            self.state = 1401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
            if la_ == 1:
                self.state = 1400
                self.match(SqlBaseParser.OUTER)

            self.state = 1403
            self.qualifiedName()
            self.state = 1404
            self.match(SqlBaseParser.T__0)
            self.state = 1413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.T__0)
                            | (1 << SqlBaseParser.SELECT)
                            | (1 << SqlBaseParser.FROM)
                            | (1 << SqlBaseParser.ADD)
                            | (1 << SqlBaseParser.AS)
                            | (1 << SqlBaseParser.ALL)
                            | (1 << SqlBaseParser.DISTINCT)
                            | (1 << SqlBaseParser.WHERE)
                            | (1 << SqlBaseParser.GROUP)
                            | (1 << SqlBaseParser.BY)
                            | (1 << SqlBaseParser.GROUPING)
                            | (1 << SqlBaseParser.SETS)
                            | (1 << SqlBaseParser.CUBE)
                            | (1 << SqlBaseParser.ROLLUP)
                            | (1 << SqlBaseParser.ORDER)
                            | (1 << SqlBaseParser.HAVING)
                            | (1 << SqlBaseParser.LIMIT)
                            | (1 << SqlBaseParser.AT)
                            | (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                            | (1 << SqlBaseParser.NO)
                            | (1 << SqlBaseParser.EXISTS)
                            | (1 << SqlBaseParser.BETWEEN)
                            | (1 << SqlBaseParser.LIKE)
                            | (1 << SqlBaseParser.RLIKE)
                            | (1 << SqlBaseParser.IS)
                            | (1 << SqlBaseParser.NULL)
                            | (1 << SqlBaseParser.TRUE)
                            | (1 << SqlBaseParser.FALSE)
                            | (1 << SqlBaseParser.NULLS)
                            | (1 << SqlBaseParser.ASC)
                            | (1 << SqlBaseParser.DESC)
                            | (1 << SqlBaseParser.FOR)
                            | (1 << SqlBaseParser.INTERVAL)
                            | (1 << SqlBaseParser.CASE)
                            | (1 << SqlBaseParser.WHEN)
                            | (1 << SqlBaseParser.THEN)
                            | (1 << SqlBaseParser.ELSE)
                            | (1 << SqlBaseParser.END)
                            | (1 << SqlBaseParser.JOIN)
                            | (1 << SqlBaseParser.CROSS)
                            | (1 << SqlBaseParser.OUTER)
                            | (1 << SqlBaseParser.INNER)
                            | (1 << SqlBaseParser.LEFT)
                            | (1 << SqlBaseParser.SEMI)
                            | (1 << SqlBaseParser.RIGHT)
                            | (1 << SqlBaseParser.FULL)
                            | (1 << SqlBaseParser.NATURAL)
                            | (1 << SqlBaseParser.ON)
                            | (1 << SqlBaseParser.LATERAL)
                            | (1 << SqlBaseParser.WINDOW)
                            | (1 << SqlBaseParser.OVER)
                            | (1 << SqlBaseParser.PARTITION)
                            | (1 << SqlBaseParser.RANGE)
                            | (1 << SqlBaseParser.ROWS)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (SqlBaseParser.UNBOUNDED - 64))
                            | (1 << (SqlBaseParser.PRECEDING - 64))
                            | (1 << (SqlBaseParser.FOLLOWING - 64))
                            | (1 << (SqlBaseParser.CURRENT - 64))
                            | (1 << (SqlBaseParser.ROW - 64))
                            | (1 << (SqlBaseParser.WITH - 64))
                            | (1 << (SqlBaseParser.VALUES - 64))
                            | (1 << (SqlBaseParser.CREATE - 64))
                            | (1 << (SqlBaseParser.TABLE - 64))
                            | (1 << (SqlBaseParser.VIEW - 64))
                            | (1 << (SqlBaseParser.REPLACE - 64))
                            | (1 << (SqlBaseParser.INSERT - 64))
                            | (1 << (SqlBaseParser.DELETE - 64))
                            | (1 << (SqlBaseParser.INTO - 64))
                            | (1 << (SqlBaseParser.DESCRIBE - 64))
                            | (1 << (SqlBaseParser.EXPLAIN - 64))
                            | (1 << (SqlBaseParser.FORMAT - 64))
                            | (1 << (SqlBaseParser.LOGICAL - 64))
                            | (1 << (SqlBaseParser.CODEGEN - 64))
                            | (1 << (SqlBaseParser.CAST - 64))
                            | (1 << (SqlBaseParser.SHOW - 64))
                            | (1 << (SqlBaseParser.TABLES - 64))
                            | (1 << (SqlBaseParser.COLUMNS - 64))
                            | (1 << (SqlBaseParser.COLUMN - 64))
                            | (1 << (SqlBaseParser.USE - 64))
                            | (1 << (SqlBaseParser.PARTITIONS - 64))
                            | (1 << (SqlBaseParser.FUNCTIONS - 64))
                            | (1 << (SqlBaseParser.DROP - 64))
                            | (1 << (SqlBaseParser.UNION - 64))
                            | (1 << (SqlBaseParser.EXCEPT - 64))
                            | (1 << (SqlBaseParser.INTERSECT - 64))
                            | (1 << (SqlBaseParser.TO - 64))
                            | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                            | (1 << (SqlBaseParser.STRATIFY - 64))
                            | (1 << (SqlBaseParser.ALTER - 64))
                            | (1 << (SqlBaseParser.RENAME - 64))
                            | (1 << (SqlBaseParser.ARRAY - 64))
                            | (1 << (SqlBaseParser.MAP - 64))
                            | (1 << (SqlBaseParser.STRUCT - 64))
                            | (1 << (SqlBaseParser.COMMENT - 64))
                            | (1 << (SqlBaseParser.SET - 64))
                            | (1 << (SqlBaseParser.RESET - 64))
                            | (1 << (SqlBaseParser.DATA - 64))
                            | (1 << (SqlBaseParser.START - 64))
                            | (1 << (SqlBaseParser.TRANSACTION - 64))
                            | (1 << (SqlBaseParser.COMMIT - 64))
                            | (1 << (SqlBaseParser.ROLLBACK - 64))
                            | (1 << (SqlBaseParser.MACRO - 64))
                            | (1 << (SqlBaseParser.IF - 64))
                            | (1 << (SqlBaseParser.PLUS - 64))
                            | (1 << (SqlBaseParser.MINUS - 64))
                            | (1 << (SqlBaseParser.ASTERISK - 64))
                            | (1 << (SqlBaseParser.DIV - 64))
                            | (1 << (SqlBaseParser.TILDE - 64))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 131)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 131))
                        & (
                            (1 << (SqlBaseParser.PERCENTLIT - 131))
                            | (1 << (SqlBaseParser.BUCKET - 131))
                            | (1 << (SqlBaseParser.OUT - 131))
                            | (1 << (SqlBaseParser.OF - 131))
                            | (1 << (SqlBaseParser.SORT - 131))
                            | (1 << (SqlBaseParser.CLUSTER - 131))
                            | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                            | (1 << (SqlBaseParser.OVERWRITE - 131))
                            | (1 << (SqlBaseParser.TRANSFORM - 131))
                            | (1 << (SqlBaseParser.REDUCE - 131))
                            | (1 << (SqlBaseParser.USING - 131))
                            | (1 << (SqlBaseParser.SERDE - 131))
                            | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                            | (1 << (SqlBaseParser.RECORDREADER - 131))
                            | (1 << (SqlBaseParser.RECORDWRITER - 131))
                            | (1 << (SqlBaseParser.DELIMITED - 131))
                            | (1 << (SqlBaseParser.FIELDS - 131))
                            | (1 << (SqlBaseParser.TERMINATED - 131))
                            | (1 << (SqlBaseParser.COLLECTION - 131))
                            | (1 << (SqlBaseParser.ITEMS - 131))
                            | (1 << (SqlBaseParser.KEYS - 131))
                            | (1 << (SqlBaseParser.ESCAPED - 131))
                            | (1 << (SqlBaseParser.LINES - 131))
                            | (1 << (SqlBaseParser.SEPARATED - 131))
                            | (1 << (SqlBaseParser.FUNCTION - 131))
                            | (1 << (SqlBaseParser.EXTENDED - 131))
                            | (1 << (SqlBaseParser.REFRESH - 131))
                            | (1 << (SqlBaseParser.CLEAR - 131))
                            | (1 << (SqlBaseParser.CACHE - 131))
                            | (1 << (SqlBaseParser.UNCACHE - 131))
                            | (1 << (SqlBaseParser.LAZY - 131))
                            | (1 << (SqlBaseParser.FORMATTED - 131))
                            | (1 << (SqlBaseParser.TEMPORARY - 131))
                            | (1 << (SqlBaseParser.OPTIONS - 131))
                            | (1 << (SqlBaseParser.UNSET - 131))
                            | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                            | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                            | (1 << (SqlBaseParser.BUCKETS - 131))
                            | (1 << (SqlBaseParser.SKEWED - 131))
                            | (1 << (SqlBaseParser.STORED - 131))
                            | (1 << (SqlBaseParser.DIRECTORIES - 131))
                            | (1 << (SqlBaseParser.LOCATION - 131))
                            | (1 << (SqlBaseParser.EXCHANGE - 131))
                            | (1 << (SqlBaseParser.ARCHIVE - 131))
                            | (1 << (SqlBaseParser.UNARCHIVE - 131))
                            | (1 << (SqlBaseParser.FILEFORMAT - 131))
                            | (1 << (SqlBaseParser.TOUCH - 131))
                            | (1 << (SqlBaseParser.COMPACT - 131))
                            | (1 << (SqlBaseParser.CONCATENATE - 131))
                            | (1 << (SqlBaseParser.CHANGE - 131))
                            | (1 << (SqlBaseParser.CASCADE - 131))
                            | (1 << (SqlBaseParser.RESTRICT - 131))
                            | (1 << (SqlBaseParser.CLUSTERED - 131))
                            | (1 << (SqlBaseParser.SORTED - 131))
                            | (1 << (SqlBaseParser.PURGE - 131))
                            | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                            | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                            | (1 << (SqlBaseParser.DATABASE - 131))
                            | (1 << (SqlBaseParser.DATABASES - 131))
                            | (1 << (SqlBaseParser.DFS - 131))
                            | (1 << (SqlBaseParser.TRUNCATE - 131))
                            | (1 << (SqlBaseParser.ANALYZE - 131))
                            | (1 << (SqlBaseParser.COMPUTE - 131))
                            | (1 << (SqlBaseParser.LIST - 131))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 195)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 195))
                        & (
                            (1 << (SqlBaseParser.STATISTICS - 195))
                            | (1 << (SqlBaseParser.PARTITIONED - 195))
                            | (1 << (SqlBaseParser.EXTERNAL - 195))
                            | (1 << (SqlBaseParser.DEFINED - 195))
                            | (1 << (SqlBaseParser.REVOKE - 195))
                            | (1 << (SqlBaseParser.GRANT - 195))
                            | (1 << (SqlBaseParser.LOCK - 195))
                            | (1 << (SqlBaseParser.UNLOCK - 195))
                            | (1 << (SqlBaseParser.MSCK - 195))
                            | (1 << (SqlBaseParser.REPAIR - 195))
                            | (1 << (SqlBaseParser.RECOVER - 195))
                            | (1 << (SqlBaseParser.EXPORT - 195))
                            | (1 << (SqlBaseParser.IMPORT - 195))
                            | (1 << (SqlBaseParser.LOAD - 195))
                            | (1 << (SqlBaseParser.ROLE - 195))
                            | (1 << (SqlBaseParser.ROLES - 195))
                            | (1 << (SqlBaseParser.COMPACTIONS - 195))
                            | (1 << (SqlBaseParser.PRINCIPALS - 195))
                            | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                            | (1 << (SqlBaseParser.INDEX - 195))
                            | (1 << (SqlBaseParser.INDEXES - 195))
                            | (1 << (SqlBaseParser.LOCKS - 195))
                            | (1 << (SqlBaseParser.OPTION - 195))
                            | (1 << (SqlBaseParser.ANTI - 195))
                            | (1 << (SqlBaseParser.LOCAL - 195))
                            | (1 << (SqlBaseParser.INPATH - 195))
                            | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                            | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                            | (1 << (SqlBaseParser.STRING - 195))
                            | (1 << (SqlBaseParser.BIGINT_LITERAL - 195))
                            | (1 << (SqlBaseParser.SMALLINT_LITERAL - 195))
                            | (1 << (SqlBaseParser.TINYINT_LITERAL - 195))
                            | (1 << (SqlBaseParser.INTEGER_VALUE - 195))
                            | (1 << (SqlBaseParser.DECIMAL_VALUE - 195))
                            | (1 << (SqlBaseParser.SCIENTIFIC_DECIMAL_VALUE - 195))
                            | (1 << (SqlBaseParser.DOUBLE_LITERAL - 195))
                            | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 195))
                            | (1 << (SqlBaseParser.IDENTIFIER - 195))
                            | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 195))
                        )
                    )
                    != 0
                )
            ):
                self.state = 1405
                self.expression()
                self.state = 1410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1406
                    self.match(SqlBaseParser.T__2)
                    self.state = 1407
                    self.expression()
                    self.state = 1412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1415
            self.match(SqlBaseParser.T__1)
            self.state = 1416
            localctx.tblName = self.identifier()
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
            if la_ == 1:
                self.state = 1418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 183, self._ctx)
                if la_ == 1:
                    self.state = 1417
                    self.match(SqlBaseParser.AS)

                self.state = 1420
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 1425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 184, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1421
                        self.match(SqlBaseParser.T__2)
                        self.state = 1422
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier)
                    self.state = 1427
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 184, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetQuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetQuantifier"):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetQuantifier"):
                listener.exitSetQuantifier(self)

    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_setQuantifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            _la = self._input.LA(1)
            if not (_la == SqlBaseParser.ALL or _la == SqlBaseParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext, 0)

        def joinRelation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelation"):
                listener.enterRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelation"):
                listener.exitRelation(self)

    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.relationPrimary()
            self.state = 1436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 186, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1433
                    self.joinRelation()
                self.state = 1438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 186, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinRelationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None  # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext, 0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinRelation"):
                listener.enterJoinRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinRelation"):
                listener.exitJoinRelation(self)

    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_joinRelation)
        try:
            self.state = 1453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.JOIN,
                SqlBaseParser.CROSS,
                SqlBaseParser.INNER,
                SqlBaseParser.LEFT,
                SqlBaseParser.RIGHT,
                SqlBaseParser.FULL,
                SqlBaseParser.ANTI,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CROSS]:
                    self.state = 1439
                    self.match(SqlBaseParser.CROSS)
                    pass
                elif token in [
                    SqlBaseParser.JOIN,
                    SqlBaseParser.INNER,
                    SqlBaseParser.LEFT,
                    SqlBaseParser.RIGHT,
                    SqlBaseParser.FULL,
                    SqlBaseParser.ANTI,
                ]:
                    self.state = 1440
                    self.joinType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1443
                self.match(SqlBaseParser.JOIN)
                self.state = 1444
                localctx.right = self.relationPrimary()
                self.state = 1446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 188, self._ctx)
                if la_ == 1:
                    self.state = 1445
                    self.joinCriteria()

                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1448
                self.match(SqlBaseParser.NATURAL)
                self.state = 1449
                self.joinType()
                self.state = 1450
                self.match(SqlBaseParser.JOIN)
                self.state = 1451
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinType"):
                listener.enterJoinType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinType"):
                listener.exitJoinType(self)

    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_joinType)
        self._la = 0  # Token type
        try:
            self.state = 1476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 195, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.INNER:
                    self.state = 1455
                    self.match(SqlBaseParser.INNER)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1458
                self.match(SqlBaseParser.LEFT)
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OUTER:
                    self.state = 1459
                    self.match(SqlBaseParser.OUTER)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1462
                self.match(SqlBaseParser.LEFT)
                self.state = 1463
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1464
                self.match(SqlBaseParser.RIGHT)
                self.state = 1466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OUTER:
                    self.state = 1465
                    self.match(SqlBaseParser.OUTER)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1468
                self.match(SqlBaseParser.FULL)
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OUTER:
                    self.state = 1469
                    self.match(SqlBaseParser.OUTER)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LEFT:
                    self.state = 1472
                    self.match(SqlBaseParser.LEFT)

                self.state = 1475
                self.match(SqlBaseParser.ANTI)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinCriteria"):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinCriteria"):
                listener.exitJoinCriteria(self)

    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_joinCriteria)
        self._la = 0  # Token type
        try:
            self.state = 1492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1478
                self.match(SqlBaseParser.ON)
                self.state = 1479
                self.booleanExpression(0)
                pass
            elif token in [SqlBaseParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1480
                self.match(SqlBaseParser.USING)
                self.state = 1481
                self.match(SqlBaseParser.T__0)
                self.state = 1482
                self.identifier()
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1483
                    self.match(SqlBaseParser.T__2)
                    self.state = 1484
                    self.identifier()
                    self.state = 1489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1490
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SampleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None  # Token
            self.sampleType = None  # Token
            self.numerator = None  # Token
            self.denominator = None  # Token

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def BYTELENGTH_LITERAL(self):
            return self.getToken(SqlBaseParser.BYTELENGTH_LITERAL, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def INTEGER_VALUE(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSample"):
                listener.enterSample(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSample"):
                listener.exitSample(self)

    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_sample)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 1495
            self.match(SqlBaseParser.T__0)
            self.state = 1517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 200, self._ctx)
            if la_ == 1:
                self.state = 1496
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.INTEGER_VALUE
                    or _la == SqlBaseParser.DECIMAL_VALUE
                ):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1497
                localctx.sampleType = self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                self.state = 1498
                self.expression()
                self.state = 1499
                localctx.sampleType = self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                self.state = 1501
                localctx.sampleType = self.match(SqlBaseParser.BYTELENGTH_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1502
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 1503
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1504
                self.match(SqlBaseParser.OUT)
                self.state = 1505
                self.match(SqlBaseParser.OF)
                self.state = 1506
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ON:
                    self.state = 1507
                    self.match(SqlBaseParser.ON)
                    self.state = 1513
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 198, self._ctx)
                    if la_ == 1:
                        self.state = 1508
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 1509
                        self.qualifiedName()
                        self.state = 1510
                        self.match(SqlBaseParser.T__0)
                        self.state = 1511
                        self.match(SqlBaseParser.T__1)
                        pass

                pass

            self.state = 1519
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierList"):
                listener.enterIdentifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierList"):
                listener.exitIdentifierList(self)

    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.match(SqlBaseParser.T__0)
            self.state = 1522
            self.identifierSeq()
            self.state = 1523
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierSeq"):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierSeq"):
                listener.exitIdentifierSeq(self)

    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.identifier()
            self.state = 1530
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 201, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1526
                    self.match(SqlBaseParser.T__2)
                    self.state = 1527
                    self.identifier()
                self.state = 1532
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 201, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.OrderedIdentifierContext, i
                )

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderedIdentifierList"):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderedIdentifierList"):
                listener.exitOrderedIdentifierList(self)

    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 96, self.RULE_orderedIdentifierList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(SqlBaseParser.T__0)
            self.state = 1534
            self.orderedIdentifier()
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1535
                self.match(SqlBaseParser.T__2)
                self.state = 1536
                self.orderedIdentifier()
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1542
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None  # Token

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderedIdentifier"):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderedIdentifier"):
                listener.exitOrderedIdentifier(self)

    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_orderedIdentifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            self.identifier()
            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.ASC or _la == SqlBaseParser.DESC:
                self.state = 1545
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.ASC or _la == SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.IdentifierCommentContext, i
                )

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierCommentList"):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierCommentList"):
                listener.exitIdentifierCommentList(self)

    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 100, self.RULE_identifierCommentList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(SqlBaseParser.T__0)
            self.state = 1549
            self.identifierComment()
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1550
                self.match(SqlBaseParser.T__2)
                self.state = 1551
                self.identifierComment()
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1557
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierComment"):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierComment"):
                listener.exitIdentifierComment(self)

    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_identifierComment)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self.identifier()
            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.COMMENT:
                self.state = 1560
                self.match(SqlBaseParser.COMMENT)
                self.state = 1561
                self.match(SqlBaseParser.STRING)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class TableValuedFunctionContext(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableValuedFunction"):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableValuedFunction"):
                listener.exitTableValuedFunction(self)

    class InlineTableDefault2Context(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineTableDefault2"):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineTableDefault2"):
                listener.exitInlineTableDefault2(self)

    class AliasedRelationContext(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext, 0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext, 0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAliasedRelation"):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAliasedRelation"):
                listener.exitAliasedRelation(self)

    class AliasedQueryContext(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext, 0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext, 0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAliasedQuery"):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAliasedQuery"):
                listener.exitAliasedQuery(self)

    class TableNameContext(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext, 0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableName"):
                listener.enterTableName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableName"):
                listener.exitTableName(self)

    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_relationPrimary)
        self._la = 0  # Token type
        try:
            self.state = 1613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 217, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1564
                self.tableIdentifier()
                self.state = 1566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 206, self._ctx)
                if la_ == 1:
                    self.state = 1565
                    self.sample()

                self.state = 1572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 208, self._ctx)
                if la_ == 1:
                    self.state = 1569
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 207, self._ctx)
                    if la_ == 1:
                        self.state = 1568
                        self.match(SqlBaseParser.AS)

                    self.state = 1571
                    self.strictIdentifier()

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1574
                self.match(SqlBaseParser.T__0)
                self.state = 1575
                self.queryNoWith()
                self.state = 1576
                self.match(SqlBaseParser.T__1)
                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 209, self._ctx)
                if la_ == 1:
                    self.state = 1577
                    self.sample()

                self.state = 1584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 211, self._ctx)
                if la_ == 1:
                    self.state = 1581
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 210, self._ctx)
                    if la_ == 1:
                        self.state = 1580
                        self.match(SqlBaseParser.AS)

                    self.state = 1583
                    self.strictIdentifier()

                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1586
                self.match(SqlBaseParser.T__0)
                self.state = 1587
                self.relation()
                self.state = 1588
                self.match(SqlBaseParser.T__1)
                self.state = 1590
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 212, self._ctx)
                if la_ == 1:
                    self.state = 1589
                    self.sample()

                self.state = 1596
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 214, self._ctx)
                if la_ == 1:
                    self.state = 1593
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 213, self._ctx)
                    if la_ == 1:
                        self.state = 1592
                        self.match(SqlBaseParser.AS)

                    self.state = 1595
                    self.strictIdentifier()

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1598
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1599
                self.identifier()
                self.state = 1600
                self.match(SqlBaseParser.T__0)
                self.state = 1609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                                | (1 << SqlBaseParser.RANGE)
                                | (1 << SqlBaseParser.ROWS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.PLUS - 64))
                                | (1 << (SqlBaseParser.MINUS - 64))
                                | (1 << (SqlBaseParser.ASTERISK - 64))
                                | (1 << (SqlBaseParser.DIV - 64))
                                | (1 << (SqlBaseParser.TILDE - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 131)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 131))
                            & (
                                (1 << (SqlBaseParser.PERCENTLIT - 131))
                                | (1 << (SqlBaseParser.BUCKET - 131))
                                | (1 << (SqlBaseParser.OUT - 131))
                                | (1 << (SqlBaseParser.OF - 131))
                                | (1 << (SqlBaseParser.SORT - 131))
                                | (1 << (SqlBaseParser.CLUSTER - 131))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                                | (1 << (SqlBaseParser.OVERWRITE - 131))
                                | (1 << (SqlBaseParser.TRANSFORM - 131))
                                | (1 << (SqlBaseParser.REDUCE - 131))
                                | (1 << (SqlBaseParser.USING - 131))
                                | (1 << (SqlBaseParser.SERDE - 131))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                                | (1 << (SqlBaseParser.RECORDREADER - 131))
                                | (1 << (SqlBaseParser.RECORDWRITER - 131))
                                | (1 << (SqlBaseParser.DELIMITED - 131))
                                | (1 << (SqlBaseParser.FIELDS - 131))
                                | (1 << (SqlBaseParser.TERMINATED - 131))
                                | (1 << (SqlBaseParser.COLLECTION - 131))
                                | (1 << (SqlBaseParser.ITEMS - 131))
                                | (1 << (SqlBaseParser.KEYS - 131))
                                | (1 << (SqlBaseParser.ESCAPED - 131))
                                | (1 << (SqlBaseParser.LINES - 131))
                                | (1 << (SqlBaseParser.SEPARATED - 131))
                                | (1 << (SqlBaseParser.FUNCTION - 131))
                                | (1 << (SqlBaseParser.EXTENDED - 131))
                                | (1 << (SqlBaseParser.REFRESH - 131))
                                | (1 << (SqlBaseParser.CLEAR - 131))
                                | (1 << (SqlBaseParser.CACHE - 131))
                                | (1 << (SqlBaseParser.UNCACHE - 131))
                                | (1 << (SqlBaseParser.LAZY - 131))
                                | (1 << (SqlBaseParser.FORMATTED - 131))
                                | (1 << (SqlBaseParser.TEMPORARY - 131))
                                | (1 << (SqlBaseParser.OPTIONS - 131))
                                | (1 << (SqlBaseParser.UNSET - 131))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                                | (1 << (SqlBaseParser.BUCKETS - 131))
                                | (1 << (SqlBaseParser.SKEWED - 131))
                                | (1 << (SqlBaseParser.STORED - 131))
                                | (1 << (SqlBaseParser.DIRECTORIES - 131))
                                | (1 << (SqlBaseParser.LOCATION - 131))
                                | (1 << (SqlBaseParser.EXCHANGE - 131))
                                | (1 << (SqlBaseParser.ARCHIVE - 131))
                                | (1 << (SqlBaseParser.UNARCHIVE - 131))
                                | (1 << (SqlBaseParser.FILEFORMAT - 131))
                                | (1 << (SqlBaseParser.TOUCH - 131))
                                | (1 << (SqlBaseParser.COMPACT - 131))
                                | (1 << (SqlBaseParser.CONCATENATE - 131))
                                | (1 << (SqlBaseParser.CHANGE - 131))
                                | (1 << (SqlBaseParser.CASCADE - 131))
                                | (1 << (SqlBaseParser.RESTRICT - 131))
                                | (1 << (SqlBaseParser.CLUSTERED - 131))
                                | (1 << (SqlBaseParser.SORTED - 131))
                                | (1 << (SqlBaseParser.PURGE - 131))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.DATABASE - 131))
                                | (1 << (SqlBaseParser.DATABASES - 131))
                                | (1 << (SqlBaseParser.DFS - 131))
                                | (1 << (SqlBaseParser.TRUNCATE - 131))
                                | (1 << (SqlBaseParser.ANALYZE - 131))
                                | (1 << (SqlBaseParser.COMPUTE - 131))
                                | (1 << (SqlBaseParser.LIST - 131))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 195)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 195))
                            & (
                                (1 << (SqlBaseParser.STATISTICS - 195))
                                | (1 << (SqlBaseParser.PARTITIONED - 195))
                                | (1 << (SqlBaseParser.EXTERNAL - 195))
                                | (1 << (SqlBaseParser.DEFINED - 195))
                                | (1 << (SqlBaseParser.REVOKE - 195))
                                | (1 << (SqlBaseParser.GRANT - 195))
                                | (1 << (SqlBaseParser.LOCK - 195))
                                | (1 << (SqlBaseParser.UNLOCK - 195))
                                | (1 << (SqlBaseParser.MSCK - 195))
                                | (1 << (SqlBaseParser.REPAIR - 195))
                                | (1 << (SqlBaseParser.RECOVER - 195))
                                | (1 << (SqlBaseParser.EXPORT - 195))
                                | (1 << (SqlBaseParser.IMPORT - 195))
                                | (1 << (SqlBaseParser.LOAD - 195))
                                | (1 << (SqlBaseParser.ROLE - 195))
                                | (1 << (SqlBaseParser.ROLES - 195))
                                | (1 << (SqlBaseParser.COMPACTIONS - 195))
                                | (1 << (SqlBaseParser.PRINCIPALS - 195))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                                | (1 << (SqlBaseParser.INDEX - 195))
                                | (1 << (SqlBaseParser.INDEXES - 195))
                                | (1 << (SqlBaseParser.LOCKS - 195))
                                | (1 << (SqlBaseParser.OPTION - 195))
                                | (1 << (SqlBaseParser.ANTI - 195))
                                | (1 << (SqlBaseParser.LOCAL - 195))
                                | (1 << (SqlBaseParser.INPATH - 195))
                                | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                                | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                                | (1 << (SqlBaseParser.STRING - 195))
                                | (1 << (SqlBaseParser.BIGINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.SMALLINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.TINYINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.INTEGER_VALUE - 195))
                                | (1 << (SqlBaseParser.DECIMAL_VALUE - 195))
                                | (1 << (SqlBaseParser.SCIENTIFIC_DECIMAL_VALUE - 195))
                                | (1 << (SqlBaseParser.DOUBLE_LITERAL - 195))
                                | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 195))
                                | (1 << (SqlBaseParser.IDENTIFIER - 195))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 195))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 1601
                    self.expression()
                    self.state = 1606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 1602
                        self.match(SqlBaseParser.T__2)
                        self.state = 1603
                        self.expression()
                        self.state = 1608
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1611
                self.match(SqlBaseParser.T__1)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineTableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineTable"):
                listener.enterInlineTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineTable"):
                listener.exitInlineTable(self)

    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self.match(SqlBaseParser.VALUES)
            self.state = 1616
            self.expression()
            self.state = 1621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 218, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1617
                    self.match(SqlBaseParser.T__2)
                    self.state = 1618
                    self.expression()
                self.state = 1623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 218, self._ctx)

            self.state = 1631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 221, self._ctx)
            if la_ == 1:
                self.state = 1625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 219, self._ctx)
                if la_ == 1:
                    self.state = 1624
                    self.match(SqlBaseParser.AS)

                self.state = 1627
                self.identifier()
                self.state = 1629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 220, self._ctx)
                if la_ == 1:
                    self.state = 1628
                    self.identifierList()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RowFormatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class RowFormatSerdeContext(RowFormatContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None  # Token
            self.props = None  # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRowFormatSerde"):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRowFormatSerde"):
                listener.exitRowFormatSerde(self)

    class RowFormatDelimitedContext(RowFormatContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None  # Token
            self.escapedBy = None  # Token
            self.collectionItemsTerminatedBy = None  # Token
            self.keysTerminatedBy = None  # Token
            self.linesSeparatedBy = None  # Token
            self.nullDefinedAs = None  # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def TERMINATED(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRowFormatDelimited"):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRowFormatDelimited"):
                listener.exitRowFormatDelimited(self)

    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_rowFormat)
        try:
            self.state = 1682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 229, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1633
                self.match(SqlBaseParser.ROW)
                self.state = 1634
                self.match(SqlBaseParser.FORMAT)
                self.state = 1635
                self.match(SqlBaseParser.SERDE)
                self.state = 1636
                localctx.name = self.match(SqlBaseParser.STRING)
                self.state = 1640
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 222, self._ctx)
                if la_ == 1:
                    self.state = 1637
                    self.match(SqlBaseParser.WITH)
                    self.state = 1638
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 1639
                    localctx.props = self.tablePropertyList()

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1642
                self.match(SqlBaseParser.ROW)
                self.state = 1643
                self.match(SqlBaseParser.FORMAT)
                self.state = 1644
                self.match(SqlBaseParser.DELIMITED)
                self.state = 1654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
                if la_ == 1:
                    self.state = 1645
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 1646
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1647
                    self.match(SqlBaseParser.BY)
                    self.state = 1648
                    localctx.fieldsTerminatedBy = self.match(SqlBaseParser.STRING)
                    self.state = 1652
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 223, self._ctx)
                    if la_ == 1:
                        self.state = 1649
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 1650
                        self.match(SqlBaseParser.BY)
                        self.state = 1651
                        localctx.escapedBy = self.match(SqlBaseParser.STRING)

                self.state = 1661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 225, self._ctx)
                if la_ == 1:
                    self.state = 1656
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 1657
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 1658
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1659
                    self.match(SqlBaseParser.BY)
                    self.state = 1660
                    localctx.collectionItemsTerminatedBy = self.match(
                        SqlBaseParser.STRING
                    )

                self.state = 1668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 226, self._ctx)
                if la_ == 1:
                    self.state = 1663
                    self.match(SqlBaseParser.MAP)
                    self.state = 1664
                    self.match(SqlBaseParser.KEYS)
                    self.state = 1665
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1666
                    self.match(SqlBaseParser.BY)
                    self.state = 1667
                    localctx.keysTerminatedBy = self.match(SqlBaseParser.STRING)

                self.state = 1674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 227, self._ctx)
                if la_ == 1:
                    self.state = 1670
                    self.match(SqlBaseParser.LINES)
                    self.state = 1671
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1672
                    self.match(SqlBaseParser.BY)
                    self.state = 1673
                    localctx.linesSeparatedBy = self.match(SqlBaseParser.STRING)

                self.state = 1680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 228, self._ctx)
                if la_ == 1:
                    self.state = 1676
                    self.match(SqlBaseParser.NULL)
                    self.state = 1677
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 1678
                    self.match(SqlBaseParser.AS)
                    self.state = 1679
                    localctx.nullDefinedAs = self.match(SqlBaseParser.STRING)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None  # IdentifierContext
            self.table = None  # IdentifierContext

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableIdentifier"):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableIdentifier"):
                listener.exitTableIdentifier(self)

    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
            if la_ == 1:
                self.state = 1684
                localctx.db = self.identifier()
                self.state = 1685
                self.match(SqlBaseParser.T__3)

            self.state = 1689
            localctx.table = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedExpression"):
                listener.enterNamedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedExpression"):
                listener.exitNamedExpression(self)

    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self.expression()
            self.state = 1699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
            if la_ == 1:
                self.state = 1693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                if la_ == 1:
                    self.state = 1692
                    self.match(SqlBaseParser.AS)

                self.state = 1697
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    SqlBaseParser.SELECT,
                    SqlBaseParser.FROM,
                    SqlBaseParser.ADD,
                    SqlBaseParser.AS,
                    SqlBaseParser.ALL,
                    SqlBaseParser.DISTINCT,
                    SqlBaseParser.WHERE,
                    SqlBaseParser.GROUP,
                    SqlBaseParser.BY,
                    SqlBaseParser.GROUPING,
                    SqlBaseParser.SETS,
                    SqlBaseParser.CUBE,
                    SqlBaseParser.ROLLUP,
                    SqlBaseParser.ORDER,
                    SqlBaseParser.HAVING,
                    SqlBaseParser.LIMIT,
                    SqlBaseParser.AT,
                    SqlBaseParser.OR,
                    SqlBaseParser.AND,
                    SqlBaseParser.IN,
                    SqlBaseParser.NOT,
                    SqlBaseParser.NO,
                    SqlBaseParser.EXISTS,
                    SqlBaseParser.BETWEEN,
                    SqlBaseParser.LIKE,
                    SqlBaseParser.RLIKE,
                    SqlBaseParser.IS,
                    SqlBaseParser.NULL,
                    SqlBaseParser.TRUE,
                    SqlBaseParser.FALSE,
                    SqlBaseParser.NULLS,
                    SqlBaseParser.ASC,
                    SqlBaseParser.DESC,
                    SqlBaseParser.FOR,
                    SqlBaseParser.INTERVAL,
                    SqlBaseParser.CASE,
                    SqlBaseParser.WHEN,
                    SqlBaseParser.THEN,
                    SqlBaseParser.ELSE,
                    SqlBaseParser.END,
                    SqlBaseParser.JOIN,
                    SqlBaseParser.CROSS,
                    SqlBaseParser.OUTER,
                    SqlBaseParser.INNER,
                    SqlBaseParser.LEFT,
                    SqlBaseParser.SEMI,
                    SqlBaseParser.RIGHT,
                    SqlBaseParser.FULL,
                    SqlBaseParser.NATURAL,
                    SqlBaseParser.ON,
                    SqlBaseParser.LATERAL,
                    SqlBaseParser.WINDOW,
                    SqlBaseParser.OVER,
                    SqlBaseParser.PARTITION,
                    SqlBaseParser.RANGE,
                    SqlBaseParser.ROWS,
                    SqlBaseParser.UNBOUNDED,
                    SqlBaseParser.PRECEDING,
                    SqlBaseParser.FOLLOWING,
                    SqlBaseParser.CURRENT,
                    SqlBaseParser.ROW,
                    SqlBaseParser.WITH,
                    SqlBaseParser.VALUES,
                    SqlBaseParser.CREATE,
                    SqlBaseParser.TABLE,
                    SqlBaseParser.VIEW,
                    SqlBaseParser.REPLACE,
                    SqlBaseParser.INSERT,
                    SqlBaseParser.DELETE,
                    SqlBaseParser.INTO,
                    SqlBaseParser.DESCRIBE,
                    SqlBaseParser.EXPLAIN,
                    SqlBaseParser.FORMAT,
                    SqlBaseParser.LOGICAL,
                    SqlBaseParser.CODEGEN,
                    SqlBaseParser.CAST,
                    SqlBaseParser.SHOW,
                    SqlBaseParser.TABLES,
                    SqlBaseParser.COLUMNS,
                    SqlBaseParser.COLUMN,
                    SqlBaseParser.USE,
                    SqlBaseParser.PARTITIONS,
                    SqlBaseParser.FUNCTIONS,
                    SqlBaseParser.DROP,
                    SqlBaseParser.UNION,
                    SqlBaseParser.EXCEPT,
                    SqlBaseParser.INTERSECT,
                    SqlBaseParser.TO,
                    SqlBaseParser.TABLESAMPLE,
                    SqlBaseParser.STRATIFY,
                    SqlBaseParser.ALTER,
                    SqlBaseParser.RENAME,
                    SqlBaseParser.ARRAY,
                    SqlBaseParser.MAP,
                    SqlBaseParser.STRUCT,
                    SqlBaseParser.COMMENT,
                    SqlBaseParser.SET,
                    SqlBaseParser.RESET,
                    SqlBaseParser.DATA,
                    SqlBaseParser.START,
                    SqlBaseParser.TRANSACTION,
                    SqlBaseParser.COMMIT,
                    SqlBaseParser.ROLLBACK,
                    SqlBaseParser.MACRO,
                    SqlBaseParser.IF,
                    SqlBaseParser.DIV,
                    SqlBaseParser.PERCENTLIT,
                    SqlBaseParser.BUCKET,
                    SqlBaseParser.OUT,
                    SqlBaseParser.OF,
                    SqlBaseParser.SORT,
                    SqlBaseParser.CLUSTER,
                    SqlBaseParser.DISTRIBUTE,
                    SqlBaseParser.OVERWRITE,
                    SqlBaseParser.TRANSFORM,
                    SqlBaseParser.REDUCE,
                    SqlBaseParser.USING,
                    SqlBaseParser.SERDE,
                    SqlBaseParser.SERDEPROPERTIES,
                    SqlBaseParser.RECORDREADER,
                    SqlBaseParser.RECORDWRITER,
                    SqlBaseParser.DELIMITED,
                    SqlBaseParser.FIELDS,
                    SqlBaseParser.TERMINATED,
                    SqlBaseParser.COLLECTION,
                    SqlBaseParser.ITEMS,
                    SqlBaseParser.KEYS,
                    SqlBaseParser.ESCAPED,
                    SqlBaseParser.LINES,
                    SqlBaseParser.SEPARATED,
                    SqlBaseParser.FUNCTION,
                    SqlBaseParser.EXTENDED,
                    SqlBaseParser.REFRESH,
                    SqlBaseParser.CLEAR,
                    SqlBaseParser.CACHE,
                    SqlBaseParser.UNCACHE,
                    SqlBaseParser.LAZY,
                    SqlBaseParser.FORMATTED,
                    SqlBaseParser.TEMPORARY,
                    SqlBaseParser.OPTIONS,
                    SqlBaseParser.UNSET,
                    SqlBaseParser.TBLPROPERTIES,
                    SqlBaseParser.DBPROPERTIES,
                    SqlBaseParser.BUCKETS,
                    SqlBaseParser.SKEWED,
                    SqlBaseParser.STORED,
                    SqlBaseParser.DIRECTORIES,
                    SqlBaseParser.LOCATION,
                    SqlBaseParser.EXCHANGE,
                    SqlBaseParser.ARCHIVE,
                    SqlBaseParser.UNARCHIVE,
                    SqlBaseParser.FILEFORMAT,
                    SqlBaseParser.TOUCH,
                    SqlBaseParser.COMPACT,
                    SqlBaseParser.CONCATENATE,
                    SqlBaseParser.CHANGE,
                    SqlBaseParser.CASCADE,
                    SqlBaseParser.RESTRICT,
                    SqlBaseParser.CLUSTERED,
                    SqlBaseParser.SORTED,
                    SqlBaseParser.PURGE,
                    SqlBaseParser.INPUTFORMAT,
                    SqlBaseParser.OUTPUTFORMAT,
                    SqlBaseParser.DATABASE,
                    SqlBaseParser.DATABASES,
                    SqlBaseParser.DFS,
                    SqlBaseParser.TRUNCATE,
                    SqlBaseParser.ANALYZE,
                    SqlBaseParser.COMPUTE,
                    SqlBaseParser.LIST,
                    SqlBaseParser.STATISTICS,
                    SqlBaseParser.PARTITIONED,
                    SqlBaseParser.EXTERNAL,
                    SqlBaseParser.DEFINED,
                    SqlBaseParser.REVOKE,
                    SqlBaseParser.GRANT,
                    SqlBaseParser.LOCK,
                    SqlBaseParser.UNLOCK,
                    SqlBaseParser.MSCK,
                    SqlBaseParser.REPAIR,
                    SqlBaseParser.RECOVER,
                    SqlBaseParser.EXPORT,
                    SqlBaseParser.IMPORT,
                    SqlBaseParser.LOAD,
                    SqlBaseParser.ROLE,
                    SqlBaseParser.ROLES,
                    SqlBaseParser.COMPACTIONS,
                    SqlBaseParser.PRINCIPALS,
                    SqlBaseParser.TRANSACTIONS,
                    SqlBaseParser.INDEX,
                    SqlBaseParser.INDEXES,
                    SqlBaseParser.LOCKS,
                    SqlBaseParser.OPTION,
                    SqlBaseParser.ANTI,
                    SqlBaseParser.LOCAL,
                    SqlBaseParser.INPATH,
                    SqlBaseParser.CURRENT_DATE,
                    SqlBaseParser.CURRENT_TIMESTAMP,
                    SqlBaseParser.IDENTIFIER,
                    SqlBaseParser.BACKQUOTED_IDENTIFIER,
                ]:
                    self.state = 1695
                    self.identifier()
                    pass
                elif token in [SqlBaseParser.T__0]:
                    self.state = 1696
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedExpressionSeq"):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedExpressionSeq"):
                listener.exitNamedExpressionSeq(self)

    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701
            self.namedExpression()
            self.state = 1706
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 234, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1702
                    self.match(SqlBaseParser.T__2)
                    self.state = 1703
                    self.namedExpression()
                self.state = 1708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 234, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class LogicalNotContext(BooleanExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalNot"):
                listener.enterLogicalNot(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalNot"):
                listener.exitLogicalNot(self)

    class BooleanDefaultContext(BooleanExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicated(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicatedContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanDefault"):
                listener.enterBooleanDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanDefault"):
                listener.exitBooleanDefault(self)

    class ExistsContext(BooleanExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExists"):
                listener.enterExists(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExists"):
                listener.exitExists(self)

    class LogicalBinaryContext(BooleanExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None  # BooleanExpressionContext
            self.operator = None  # Token
            self.right = None  # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.BooleanExpressionContext, i
                )

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalBinary"):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalBinary"):
                listener.exitLogicalBinary(self)

    def booleanExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1712
                self.match(SqlBaseParser.NOT)
                self.state = 1713
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.BooleanDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1714
                self.predicated()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1715
                self.match(SqlBaseParser.EXISTS)
                self.state = 1716
                self.match(SqlBaseParser.T__0)
                self.state = 1717
                self.query()
                self.state = 1718
                self.match(SqlBaseParser.T__1)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 237, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1728
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 236, self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(
                            self,
                            SqlBaseParser.BooleanExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_booleanExpression
                        )
                        self.state = 1722
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 1723
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 1724
                        localctx.right = self.booleanExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(
                            self,
                            SqlBaseParser.BooleanExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_booleanExpression
                        )
                        self.state = 1725
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 1726
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 1727
                        localctx.right = self.booleanExpression(3)
                        pass

                self.state = 1732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 237, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PredicatedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, 0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicated

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicated"):
                listener.enterPredicated(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicated"):
                listener.exitPredicated(self)

    def predicated(self):

        localctx = SqlBaseParser.PredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.valueExpression(0)
            self.state = 1735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 238, self._ctx)
            if la_ == 1:
                self.state = 1734
                self.predicate()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None  # Token
            self.lower = None  # ValueExpressionContext
            self.upper = None  # ValueExpressionContext
            self.pattern = None  # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicate"):
                listener.enterPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicate"):
                listener.exitPredicate(self)

    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_predicate)
        self._la = 0  # Token type
        try:
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 245, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1737
                    self.match(SqlBaseParser.NOT)

                self.state = 1740
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 1741
                localctx.lower = self.valueExpression(0)
                self.state = 1742
                self.match(SqlBaseParser.AND)
                self.state = 1743
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1745
                    self.match(SqlBaseParser.NOT)

                self.state = 1748
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1749
                self.match(SqlBaseParser.T__0)
                self.state = 1750
                self.expression()
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1751
                    self.match(SqlBaseParser.T__2)
                    self.state = 1752
                    self.expression()
                    self.state = 1757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1758
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1760
                    self.match(SqlBaseParser.NOT)

                self.state = 1763
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1764
                self.match(SqlBaseParser.T__0)
                self.state = 1765
                self.query()
                self.state = 1766
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1768
                    self.match(SqlBaseParser.NOT)

                self.state = 1771
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.LIKE or _la == SqlBaseParser.RLIKE):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1772
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1773
                self.match(SqlBaseParser.IS)
                self.state = 1775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1774
                    self.match(SqlBaseParser.NOT)

                self.state = 1777
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ValueExpressionDefaultContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueExpressionDefault"):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueExpressionDefault"):
                listener.exitValueExpressionDefault(self)

    class ComparisonContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None  # ValueExpressionContext
            self.right = None  # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext, 0)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparison"):
                listener.enterComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparison"):
                listener.exitComparison(self)

    class ArithmeticBinaryContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None  # ValueExpressionContext
            self.operator = None  # Token
            self.right = None  # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmeticBinary"):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmeticBinary"):
                listener.exitArithmeticBinary(self)

    class ArithmeticUnaryContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None  # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmeticUnary"):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmeticUnary"):
                listener.exitArithmeticUnary(self)

    def valueExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_valueExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 246, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1781
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1782
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 121)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 121))
                            & (
                                (1 << (SqlBaseParser.PLUS - 121))
                                | (1 << (SqlBaseParser.MINUS - 121))
                                | (1 << (SqlBaseParser.TILDE - 121))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1783
                self.valueExpression(7)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1807
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 248, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1805
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 247, self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1786
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 1787
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (
                            (
                                (((_la - 123)) & ~0x3F) == 0
                                and (
                                    (1 << (_la - 123))
                                    & (
                                        (1 << (SqlBaseParser.ASTERISK - 123))
                                        | (1 << (SqlBaseParser.SLASH - 123))
                                        | (1 << (SqlBaseParser.PERCENT - 123))
                                        | (1 << (SqlBaseParser.DIV - 123))
                                    )
                                )
                                != 0
                            )
                        ):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1788
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1789
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 1790
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (
                            _la == SqlBaseParser.PLUS or _la == SqlBaseParser.MINUS
                        ):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1791
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1792
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 1793
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 1794
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1795
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 1796
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 1797
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1798
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 1799
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 1800
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1801
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 1802
                        self.comparisonOperator()
                        self.state = 1803
                        localctx.right = self.valueExpression(2)
                        pass

                self.state = 1809
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 248, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DereferenceContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None  # PrimaryExpressionContext
            self.fieldName = None  # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDereference"):
                listener.enterDereference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDereference"):
                listener.exitDereference(self)

    class SimpleCaseContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None  # ExpressionContext
            self.elseExpression = None  # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def whenClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext, i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleCase"):
                listener.enterSimpleCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleCase"):
                listener.exitSimpleCase(self)

    class ColumnReferenceContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnReference"):
                listener.enterColumnReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnReference"):
                listener.exitColumnReference(self)

    class RowConstructorContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRowConstructor"):
                listener.enterRowConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRowConstructor"):
                listener.exitRowConstructor(self)

    class StarContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar"):
                listener.enterStar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar"):
                listener.exitStar(self)

    class SubscriptContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None  # PrimaryExpressionContext
            self.index = None  # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubscript"):
                listener.enterSubscript(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubscript"):
                listener.exitSubscript(self)

    class TimeFunctionCallContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None  # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeFunctionCall"):
                listener.enterTimeFunctionCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeFunctionCall"):
                listener.exitTimeFunctionCall(self)

    class SubqueryExpressionContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubqueryExpression"):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubqueryExpression"):
                listener.exitSubqueryExpression(self)

    class CastContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCast"):
                listener.enterCast(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCast"):
                listener.exitCast(self)

    class ConstantDefaultContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantDefault"):
                listener.enterConstantDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantDefault"):
                listener.exitConstantDefault(self)

    class ParenthesizedExpressionContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesizedExpression"):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesizedExpression"):
                listener.exitParenthesizedExpression(self)

    class FunctionCallContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionCall"):
                listener.enterFunctionCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionCall"):
                listener.exitFunctionCall(self)

    class SearchedCaseContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None  # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def whenClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext, i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSearchedCase"):
                listener.enterSearchedCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSearchedCase"):
                listener.exitSearchedCase(self)

    def primaryExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_primaryExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 258, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TimeFunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1811
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.CURRENT_DATE
                    or _la == SqlBaseParser.CURRENT_TIMESTAMP
                ):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1812
                self.match(SqlBaseParser.CASE)
                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1813
                    self.whenClause()
                    self.state = 1816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.WHEN):
                        break

                self.state = 1820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ELSE:
                    self.state = 1818
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1819
                    localctx.elseExpression = self.expression()

                self.state = 1822
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1824
                self.match(SqlBaseParser.CASE)
                self.state = 1825
                localctx.value = self.expression()
                self.state = 1827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1826
                    self.whenClause()
                    self.state = 1829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.WHEN):
                        break

                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ELSE:
                    self.state = 1831
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1832
                    localctx.elseExpression = self.expression()

                self.state = 1835
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1837
                self.match(SqlBaseParser.CAST)
                self.state = 1838
                self.match(SqlBaseParser.T__0)
                self.state = 1839
                self.expression()
                self.state = 1840
                self.match(SqlBaseParser.AS)
                self.state = 1841
                self.dataType()
                self.state = 1842
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1844
                self.constant()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1845
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1846
                self.qualifiedName()
                self.state = 1847
                self.match(SqlBaseParser.T__3)
                self.state = 1848
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1850
                self.match(SqlBaseParser.T__0)
                self.state = 1851
                self.expression()
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1852
                    self.match(SqlBaseParser.T__2)
                    self.state = 1853
                    self.expression()
                    self.state = 1856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.T__2):
                        break

                self.state = 1858
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1860
                self.match(SqlBaseParser.T__0)
                self.state = 1861
                self.query()
                self.state = 1862
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1864
                self.qualifiedName()
                self.state = 1865
                self.match(SqlBaseParser.T__0)
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                                | (1 << SqlBaseParser.RANGE)
                                | (1 << SqlBaseParser.ROWS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.PLUS - 64))
                                | (1 << (SqlBaseParser.MINUS - 64))
                                | (1 << (SqlBaseParser.ASTERISK - 64))
                                | (1 << (SqlBaseParser.DIV - 64))
                                | (1 << (SqlBaseParser.TILDE - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 131)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 131))
                            & (
                                (1 << (SqlBaseParser.PERCENTLIT - 131))
                                | (1 << (SqlBaseParser.BUCKET - 131))
                                | (1 << (SqlBaseParser.OUT - 131))
                                | (1 << (SqlBaseParser.OF - 131))
                                | (1 << (SqlBaseParser.SORT - 131))
                                | (1 << (SqlBaseParser.CLUSTER - 131))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                                | (1 << (SqlBaseParser.OVERWRITE - 131))
                                | (1 << (SqlBaseParser.TRANSFORM - 131))
                                | (1 << (SqlBaseParser.REDUCE - 131))
                                | (1 << (SqlBaseParser.USING - 131))
                                | (1 << (SqlBaseParser.SERDE - 131))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                                | (1 << (SqlBaseParser.RECORDREADER - 131))
                                | (1 << (SqlBaseParser.RECORDWRITER - 131))
                                | (1 << (SqlBaseParser.DELIMITED - 131))
                                | (1 << (SqlBaseParser.FIELDS - 131))
                                | (1 << (SqlBaseParser.TERMINATED - 131))
                                | (1 << (SqlBaseParser.COLLECTION - 131))
                                | (1 << (SqlBaseParser.ITEMS - 131))
                                | (1 << (SqlBaseParser.KEYS - 131))
                                | (1 << (SqlBaseParser.ESCAPED - 131))
                                | (1 << (SqlBaseParser.LINES - 131))
                                | (1 << (SqlBaseParser.SEPARATED - 131))
                                | (1 << (SqlBaseParser.FUNCTION - 131))
                                | (1 << (SqlBaseParser.EXTENDED - 131))
                                | (1 << (SqlBaseParser.REFRESH - 131))
                                | (1 << (SqlBaseParser.CLEAR - 131))
                                | (1 << (SqlBaseParser.CACHE - 131))
                                | (1 << (SqlBaseParser.UNCACHE - 131))
                                | (1 << (SqlBaseParser.LAZY - 131))
                                | (1 << (SqlBaseParser.FORMATTED - 131))
                                | (1 << (SqlBaseParser.TEMPORARY - 131))
                                | (1 << (SqlBaseParser.OPTIONS - 131))
                                | (1 << (SqlBaseParser.UNSET - 131))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                                | (1 << (SqlBaseParser.BUCKETS - 131))
                                | (1 << (SqlBaseParser.SKEWED - 131))
                                | (1 << (SqlBaseParser.STORED - 131))
                                | (1 << (SqlBaseParser.DIRECTORIES - 131))
                                | (1 << (SqlBaseParser.LOCATION - 131))
                                | (1 << (SqlBaseParser.EXCHANGE - 131))
                                | (1 << (SqlBaseParser.ARCHIVE - 131))
                                | (1 << (SqlBaseParser.UNARCHIVE - 131))
                                | (1 << (SqlBaseParser.FILEFORMAT - 131))
                                | (1 << (SqlBaseParser.TOUCH - 131))
                                | (1 << (SqlBaseParser.COMPACT - 131))
                                | (1 << (SqlBaseParser.CONCATENATE - 131))
                                | (1 << (SqlBaseParser.CHANGE - 131))
                                | (1 << (SqlBaseParser.CASCADE - 131))
                                | (1 << (SqlBaseParser.RESTRICT - 131))
                                | (1 << (SqlBaseParser.CLUSTERED - 131))
                                | (1 << (SqlBaseParser.SORTED - 131))
                                | (1 << (SqlBaseParser.PURGE - 131))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                                | (1 << (SqlBaseParser.DATABASE - 131))
                                | (1 << (SqlBaseParser.DATABASES - 131))
                                | (1 << (SqlBaseParser.DFS - 131))
                                | (1 << (SqlBaseParser.TRUNCATE - 131))
                                | (1 << (SqlBaseParser.ANALYZE - 131))
                                | (1 << (SqlBaseParser.COMPUTE - 131))
                                | (1 << (SqlBaseParser.LIST - 131))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 195)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 195))
                            & (
                                (1 << (SqlBaseParser.STATISTICS - 195))
                                | (1 << (SqlBaseParser.PARTITIONED - 195))
                                | (1 << (SqlBaseParser.EXTERNAL - 195))
                                | (1 << (SqlBaseParser.DEFINED - 195))
                                | (1 << (SqlBaseParser.REVOKE - 195))
                                | (1 << (SqlBaseParser.GRANT - 195))
                                | (1 << (SqlBaseParser.LOCK - 195))
                                | (1 << (SqlBaseParser.UNLOCK - 195))
                                | (1 << (SqlBaseParser.MSCK - 195))
                                | (1 << (SqlBaseParser.REPAIR - 195))
                                | (1 << (SqlBaseParser.RECOVER - 195))
                                | (1 << (SqlBaseParser.EXPORT - 195))
                                | (1 << (SqlBaseParser.IMPORT - 195))
                                | (1 << (SqlBaseParser.LOAD - 195))
                                | (1 << (SqlBaseParser.ROLE - 195))
                                | (1 << (SqlBaseParser.ROLES - 195))
                                | (1 << (SqlBaseParser.COMPACTIONS - 195))
                                | (1 << (SqlBaseParser.PRINCIPALS - 195))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                                | (1 << (SqlBaseParser.INDEX - 195))
                                | (1 << (SqlBaseParser.INDEXES - 195))
                                | (1 << (SqlBaseParser.LOCKS - 195))
                                | (1 << (SqlBaseParser.OPTION - 195))
                                | (1 << (SqlBaseParser.ANTI - 195))
                                | (1 << (SqlBaseParser.LOCAL - 195))
                                | (1 << (SqlBaseParser.INPATH - 195))
                                | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                                | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                                | (1 << (SqlBaseParser.STRING - 195))
                                | (1 << (SqlBaseParser.BIGINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.SMALLINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.TINYINT_LITERAL - 195))
                                | (1 << (SqlBaseParser.INTEGER_VALUE - 195))
                                | (1 << (SqlBaseParser.DECIMAL_VALUE - 195))
                                | (1 << (SqlBaseParser.SCIENTIFIC_DECIMAL_VALUE - 195))
                                | (1 << (SqlBaseParser.DOUBLE_LITERAL - 195))
                                | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 195))
                                | (1 << (SqlBaseParser.IDENTIFIER - 195))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 195))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 1867
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 254, self._ctx)
                    if la_ == 1:
                        self.state = 1866
                        self.setQuantifier()

                    self.state = 1869
                    self.expression()
                    self.state = 1874
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 1870
                        self.match(SqlBaseParser.T__2)
                        self.state = 1871
                        self.expression()
                        self.state = 1876
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1879
                self.match(SqlBaseParser.T__1)
                self.state = 1882
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 257, self._ctx)
                if la_ == 1:
                    self.state = 1880
                    self.match(SqlBaseParser.OVER)
                    self.state = 1881
                    self.windowSpec()

                pass

            elif la_ == 11:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1884
                self.identifier()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1885
                self.match(SqlBaseParser.T__0)
                self.state = 1886
                self.expression()
                self.state = 1887
                self.match(SqlBaseParser.T__1)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1901
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 260, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1899
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 259, self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(
                            self,
                            SqlBaseParser.PrimaryExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primaryExpression
                        )
                        self.state = 1891
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 1892
                        self.match(SqlBaseParser.T__4)
                        self.state = 1893
                        localctx.index = self.valueExpression(0)
                        self.state = 1894
                        self.match(SqlBaseParser.T__5)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(
                            self,
                            SqlBaseParser.PrimaryExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primaryExpression
                        )
                        self.state = 1896
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 1897
                        self.match(SqlBaseParser.T__3)
                        self.state = 1898
                        localctx.fieldName = self.identifier()
                        pass

                self.state = 1903
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 260, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class NullLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullLiteral"):
                listener.enterNullLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullLiteral"):
                listener.exitNullLiteral(self)

    class StringLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStringLiteral"):
                listener.enterStringLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStringLiteral"):
                listener.exitStringLiteral(self)

    class TypeConstructorContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeConstructor"):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeConstructor"):
                listener.exitTypeConstructor(self)

    class IntervalLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalLiteral"):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalLiteral"):
                listener.exitIntervalLiteral(self)

    class NumericLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteral"):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteral"):
                listener.exitNumericLiteral(self)

    class BooleanLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanLiteral"):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanLiteral"):
                listener.exitBooleanLiteral(self)

    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_constant)
        try:
            self.state = 1916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 262, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1904
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1905
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1906
                self.identifier()
                self.state = 1907
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1909
                self.number()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1910
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1912
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1911
                        self.match(SqlBaseParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1914
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 261, self._ctx)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparisonOperator"):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparisonOperator"):
                listener.exitComparisonOperator(self)

    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_comparisonOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 113)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 113))
                        & (
                            (1 << (SqlBaseParser.EQ - 113))
                            | (1 << (SqlBaseParser.NSEQ - 113))
                            | (1 << (SqlBaseParser.NEQ - 113))
                            | (1 << (SqlBaseParser.NEQJ - 113))
                            | (1 << (SqlBaseParser.LT - 113))
                            | (1 << (SqlBaseParser.LTE - 113))
                            | (1 << (SqlBaseParser.GT - 113))
                            | (1 << (SqlBaseParser.GTE - 113))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmeticOperator"):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmeticOperator"):
                listener.exitArithmeticOperator(self)

    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_arithmeticOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1920
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 121)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 121))
                        & (
                            (1 << (SqlBaseParser.PLUS - 121))
                            | (1 << (SqlBaseParser.MINUS - 121))
                            | (1 << (SqlBaseParser.ASTERISK - 121))
                            | (1 << (SqlBaseParser.SLASH - 121))
                            | (1 << (SqlBaseParser.PERCENT - 121))
                            | (1 << (SqlBaseParser.DIV - 121))
                            | (1 << (SqlBaseParser.TILDE - 121))
                            | (1 << (SqlBaseParser.AMPERSAND - 121))
                            | (1 << (SqlBaseParser.PIPE - 121))
                            | (1 << (SqlBaseParser.HAT - 121))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicateOperator"):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicateOperator"):
                listener.exitPredicateOperator(self)

    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_predicateOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1922
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanValue"):
                listener.enterBooleanValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanValue"):
                listener.exitBooleanValue(self)

    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_booleanValue)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            _la = self._input.LA(1)
            if not (_la == SqlBaseParser.TRUE or _la == SqlBaseParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def intervalField(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterval"):
                listener.enterInterval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterval"):
                listener.exitInterval(self)

    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1926
            self.match(SqlBaseParser.INTERVAL)
            self.state = 1930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 263, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1927
                    self.intervalField()
                self.state = 1932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 263, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalFieldContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None  # IntervalValueContext
            self.unit = None  # IdentifierContext
            self.to = None  # IdentifierContext

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalField"):
                listener.enterIntervalField(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalField"):
                listener.exitIntervalField(self)

    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_intervalField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            localctx.value = self.intervalValue()
            self.state = 1934
            localctx.unit = self.identifier()
            self.state = 1937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 264, self._ctx)
            if la_ == 1:
                self.state = 1935
                self.match(SqlBaseParser.TO)
                self.state = 1936
                localctx.to = self.identifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalValue"):
                listener.enterIntervalValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalValue"):
                listener.exitIntervalValue(self)

    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_intervalValue)
        self._la = 0  # Token type
        try:
            self.state = 1944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.PLUS,
                SqlBaseParser.MINUS,
                SqlBaseParser.INTEGER_VALUE,
                SqlBaseParser.DECIMAL_VALUE,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PLUS or _la == SqlBaseParser.MINUS:
                    self.state = 1939
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.PLUS or _la == SqlBaseParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 1942
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.INTEGER_VALUE
                    or _la == SqlBaseParser.DECIMAL_VALUE
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1943
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ComplexDataTypeContext(DataTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complex_ = None  # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def dataType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComplexDataType"):
                listener.enterComplexDataType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComplexDataType"):
                listener.exitComplexDataType(self)

    class PrimitiveDataTypeContext(DataTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def INTEGER_VALUE(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitiveDataType"):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitiveDataType"):
                listener.exitPrimitiveDataType(self)

    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dataType)
        self._la = 0  # Token type
        try:
            self.state = 1980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 271, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1946
                localctx.complex_ = self.match(SqlBaseParser.ARRAY)
                self.state = 1947
                self.match(SqlBaseParser.LT)
                self.state = 1948
                self.dataType()
                self.state = 1949
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1951
                localctx.complex_ = self.match(SqlBaseParser.MAP)
                self.state = 1952
                self.match(SqlBaseParser.LT)
                self.state = 1953
                self.dataType()
                self.state = 1954
                self.match(SqlBaseParser.T__2)
                self.state = 1955
                self.dataType()
                self.state = 1956
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1958
                localctx.complex_ = self.match(SqlBaseParser.STRUCT)
                self.state = 1965
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.LT]:
                    self.state = 1959
                    self.match(SqlBaseParser.LT)
                    self.state = 1961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        (
                            ((_la) & ~0x3F) == 0
                            and (
                                (1 << _la)
                                & (
                                    (1 << SqlBaseParser.SELECT)
                                    | (1 << SqlBaseParser.FROM)
                                    | (1 << SqlBaseParser.ADD)
                                    | (1 << SqlBaseParser.AS)
                                    | (1 << SqlBaseParser.ALL)
                                    | (1 << SqlBaseParser.DISTINCT)
                                    | (1 << SqlBaseParser.WHERE)
                                    | (1 << SqlBaseParser.GROUP)
                                    | (1 << SqlBaseParser.BY)
                                    | (1 << SqlBaseParser.GROUPING)
                                    | (1 << SqlBaseParser.SETS)
                                    | (1 << SqlBaseParser.CUBE)
                                    | (1 << SqlBaseParser.ROLLUP)
                                    | (1 << SqlBaseParser.ORDER)
                                    | (1 << SqlBaseParser.HAVING)
                                    | (1 << SqlBaseParser.LIMIT)
                                    | (1 << SqlBaseParser.AT)
                                    | (1 << SqlBaseParser.OR)
                                    | (1 << SqlBaseParser.AND)
                                    | (1 << SqlBaseParser.IN)
                                    | (1 << SqlBaseParser.NOT)
                                    | (1 << SqlBaseParser.NO)
                                    | (1 << SqlBaseParser.EXISTS)
                                    | (1 << SqlBaseParser.BETWEEN)
                                    | (1 << SqlBaseParser.LIKE)
                                    | (1 << SqlBaseParser.RLIKE)
                                    | (1 << SqlBaseParser.IS)
                                    | (1 << SqlBaseParser.NULL)
                                    | (1 << SqlBaseParser.TRUE)
                                    | (1 << SqlBaseParser.FALSE)
                                    | (1 << SqlBaseParser.NULLS)
                                    | (1 << SqlBaseParser.ASC)
                                    | (1 << SqlBaseParser.DESC)
                                    | (1 << SqlBaseParser.FOR)
                                    | (1 << SqlBaseParser.INTERVAL)
                                    | (1 << SqlBaseParser.CASE)
                                    | (1 << SqlBaseParser.WHEN)
                                    | (1 << SqlBaseParser.THEN)
                                    | (1 << SqlBaseParser.ELSE)
                                    | (1 << SqlBaseParser.END)
                                    | (1 << SqlBaseParser.JOIN)
                                    | (1 << SqlBaseParser.CROSS)
                                    | (1 << SqlBaseParser.OUTER)
                                    | (1 << SqlBaseParser.INNER)
                                    | (1 << SqlBaseParser.LEFT)
                                    | (1 << SqlBaseParser.SEMI)
                                    | (1 << SqlBaseParser.RIGHT)
                                    | (1 << SqlBaseParser.FULL)
                                    | (1 << SqlBaseParser.NATURAL)
                                    | (1 << SqlBaseParser.ON)
                                    | (1 << SqlBaseParser.LATERAL)
                                    | (1 << SqlBaseParser.WINDOW)
                                    | (1 << SqlBaseParser.OVER)
                                    | (1 << SqlBaseParser.PARTITION)
                                    | (1 << SqlBaseParser.RANGE)
                                    | (1 << SqlBaseParser.ROWS)
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 64)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 64))
                                & (
                                    (1 << (SqlBaseParser.UNBOUNDED - 64))
                                    | (1 << (SqlBaseParser.PRECEDING - 64))
                                    | (1 << (SqlBaseParser.FOLLOWING - 64))
                                    | (1 << (SqlBaseParser.CURRENT - 64))
                                    | (1 << (SqlBaseParser.ROW - 64))
                                    | (1 << (SqlBaseParser.WITH - 64))
                                    | (1 << (SqlBaseParser.VALUES - 64))
                                    | (1 << (SqlBaseParser.CREATE - 64))
                                    | (1 << (SqlBaseParser.TABLE - 64))
                                    | (1 << (SqlBaseParser.VIEW - 64))
                                    | (1 << (SqlBaseParser.REPLACE - 64))
                                    | (1 << (SqlBaseParser.INSERT - 64))
                                    | (1 << (SqlBaseParser.DELETE - 64))
                                    | (1 << (SqlBaseParser.INTO - 64))
                                    | (1 << (SqlBaseParser.DESCRIBE - 64))
                                    | (1 << (SqlBaseParser.EXPLAIN - 64))
                                    | (1 << (SqlBaseParser.FORMAT - 64))
                                    | (1 << (SqlBaseParser.LOGICAL - 64))
                                    | (1 << (SqlBaseParser.CODEGEN - 64))
                                    | (1 << (SqlBaseParser.CAST - 64))
                                    | (1 << (SqlBaseParser.SHOW - 64))
                                    | (1 << (SqlBaseParser.TABLES - 64))
                                    | (1 << (SqlBaseParser.COLUMNS - 64))
                                    | (1 << (SqlBaseParser.COLUMN - 64))
                                    | (1 << (SqlBaseParser.USE - 64))
                                    | (1 << (SqlBaseParser.PARTITIONS - 64))
                                    | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                    | (1 << (SqlBaseParser.DROP - 64))
                                    | (1 << (SqlBaseParser.UNION - 64))
                                    | (1 << (SqlBaseParser.EXCEPT - 64))
                                    | (1 << (SqlBaseParser.INTERSECT - 64))
                                    | (1 << (SqlBaseParser.TO - 64))
                                    | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                    | (1 << (SqlBaseParser.STRATIFY - 64))
                                    | (1 << (SqlBaseParser.ALTER - 64))
                                    | (1 << (SqlBaseParser.RENAME - 64))
                                    | (1 << (SqlBaseParser.ARRAY - 64))
                                    | (1 << (SqlBaseParser.MAP - 64))
                                    | (1 << (SqlBaseParser.STRUCT - 64))
                                    | (1 << (SqlBaseParser.COMMENT - 64))
                                    | (1 << (SqlBaseParser.SET - 64))
                                    | (1 << (SqlBaseParser.RESET - 64))
                                    | (1 << (SqlBaseParser.DATA - 64))
                                    | (1 << (SqlBaseParser.START - 64))
                                    | (1 << (SqlBaseParser.TRANSACTION - 64))
                                    | (1 << (SqlBaseParser.COMMIT - 64))
                                    | (1 << (SqlBaseParser.ROLLBACK - 64))
                                    | (1 << (SqlBaseParser.MACRO - 64))
                                    | (1 << (SqlBaseParser.IF - 64))
                                    | (1 << (SqlBaseParser.DIV - 64))
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 131)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 131))
                                & (
                                    (1 << (SqlBaseParser.PERCENTLIT - 131))
                                    | (1 << (SqlBaseParser.BUCKET - 131))
                                    | (1 << (SqlBaseParser.OUT - 131))
                                    | (1 << (SqlBaseParser.OF - 131))
                                    | (1 << (SqlBaseParser.SORT - 131))
                                    | (1 << (SqlBaseParser.CLUSTER - 131))
                                    | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                                    | (1 << (SqlBaseParser.OVERWRITE - 131))
                                    | (1 << (SqlBaseParser.TRANSFORM - 131))
                                    | (1 << (SqlBaseParser.REDUCE - 131))
                                    | (1 << (SqlBaseParser.USING - 131))
                                    | (1 << (SqlBaseParser.SERDE - 131))
                                    | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                                    | (1 << (SqlBaseParser.RECORDREADER - 131))
                                    | (1 << (SqlBaseParser.RECORDWRITER - 131))
                                    | (1 << (SqlBaseParser.DELIMITED - 131))
                                    | (1 << (SqlBaseParser.FIELDS - 131))
                                    | (1 << (SqlBaseParser.TERMINATED - 131))
                                    | (1 << (SqlBaseParser.COLLECTION - 131))
                                    | (1 << (SqlBaseParser.ITEMS - 131))
                                    | (1 << (SqlBaseParser.KEYS - 131))
                                    | (1 << (SqlBaseParser.ESCAPED - 131))
                                    | (1 << (SqlBaseParser.LINES - 131))
                                    | (1 << (SqlBaseParser.SEPARATED - 131))
                                    | (1 << (SqlBaseParser.FUNCTION - 131))
                                    | (1 << (SqlBaseParser.EXTENDED - 131))
                                    | (1 << (SqlBaseParser.REFRESH - 131))
                                    | (1 << (SqlBaseParser.CLEAR - 131))
                                    | (1 << (SqlBaseParser.CACHE - 131))
                                    | (1 << (SqlBaseParser.UNCACHE - 131))
                                    | (1 << (SqlBaseParser.LAZY - 131))
                                    | (1 << (SqlBaseParser.FORMATTED - 131))
                                    | (1 << (SqlBaseParser.TEMPORARY - 131))
                                    | (1 << (SqlBaseParser.OPTIONS - 131))
                                    | (1 << (SqlBaseParser.UNSET - 131))
                                    | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                                    | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                                    | (1 << (SqlBaseParser.BUCKETS - 131))
                                    | (1 << (SqlBaseParser.SKEWED - 131))
                                    | (1 << (SqlBaseParser.STORED - 131))
                                    | (1 << (SqlBaseParser.DIRECTORIES - 131))
                                    | (1 << (SqlBaseParser.LOCATION - 131))
                                    | (1 << (SqlBaseParser.EXCHANGE - 131))
                                    | (1 << (SqlBaseParser.ARCHIVE - 131))
                                    | (1 << (SqlBaseParser.UNARCHIVE - 131))
                                    | (1 << (SqlBaseParser.FILEFORMAT - 131))
                                    | (1 << (SqlBaseParser.TOUCH - 131))
                                    | (1 << (SqlBaseParser.COMPACT - 131))
                                    | (1 << (SqlBaseParser.CONCATENATE - 131))
                                    | (1 << (SqlBaseParser.CHANGE - 131))
                                    | (1 << (SqlBaseParser.CASCADE - 131))
                                    | (1 << (SqlBaseParser.RESTRICT - 131))
                                    | (1 << (SqlBaseParser.CLUSTERED - 131))
                                    | (1 << (SqlBaseParser.SORTED - 131))
                                    | (1 << (SqlBaseParser.PURGE - 131))
                                    | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                                    | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                                    | (1 << (SqlBaseParser.DATABASE - 131))
                                    | (1 << (SqlBaseParser.DATABASES - 131))
                                    | (1 << (SqlBaseParser.DFS - 131))
                                    | (1 << (SqlBaseParser.TRUNCATE - 131))
                                    | (1 << (SqlBaseParser.ANALYZE - 131))
                                    | (1 << (SqlBaseParser.COMPUTE - 131))
                                    | (1 << (SqlBaseParser.LIST - 131))
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 195)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 195))
                                & (
                                    (1 << (SqlBaseParser.STATISTICS - 195))
                                    | (1 << (SqlBaseParser.PARTITIONED - 195))
                                    | (1 << (SqlBaseParser.EXTERNAL - 195))
                                    | (1 << (SqlBaseParser.DEFINED - 195))
                                    | (1 << (SqlBaseParser.REVOKE - 195))
                                    | (1 << (SqlBaseParser.GRANT - 195))
                                    | (1 << (SqlBaseParser.LOCK - 195))
                                    | (1 << (SqlBaseParser.UNLOCK - 195))
                                    | (1 << (SqlBaseParser.MSCK - 195))
                                    | (1 << (SqlBaseParser.REPAIR - 195))
                                    | (1 << (SqlBaseParser.RECOVER - 195))
                                    | (1 << (SqlBaseParser.EXPORT - 195))
                                    | (1 << (SqlBaseParser.IMPORT - 195))
                                    | (1 << (SqlBaseParser.LOAD - 195))
                                    | (1 << (SqlBaseParser.ROLE - 195))
                                    | (1 << (SqlBaseParser.ROLES - 195))
                                    | (1 << (SqlBaseParser.COMPACTIONS - 195))
                                    | (1 << (SqlBaseParser.PRINCIPALS - 195))
                                    | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                                    | (1 << (SqlBaseParser.INDEX - 195))
                                    | (1 << (SqlBaseParser.INDEXES - 195))
                                    | (1 << (SqlBaseParser.LOCKS - 195))
                                    | (1 << (SqlBaseParser.OPTION - 195))
                                    | (1 << (SqlBaseParser.ANTI - 195))
                                    | (1 << (SqlBaseParser.LOCAL - 195))
                                    | (1 << (SqlBaseParser.INPATH - 195))
                                    | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                                    | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                                    | (1 << (SqlBaseParser.IDENTIFIER - 195))
                                    | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 195))
                                )
                            )
                            != 0
                        )
                    ):
                        self.state = 1960
                        self.colTypeList()

                    self.state = 1963
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [SqlBaseParser.NEQ]:
                    self.state = 1964
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1967
                self.identifier()
                self.state = 1978
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 270, self._ctx)
                if la_ == 1:
                    self.state = 1968
                    self.match(SqlBaseParser.T__0)
                    self.state = 1969
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 1974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 1970
                        self.match(SqlBaseParser.T__2)
                        self.state = 1971
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 1976
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1977
                    self.match(SqlBaseParser.T__1)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColTypeListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColTypeList"):
                listener.enterColTypeList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColTypeList"):
                listener.exitColTypeList(self)

    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.colType()
            self.state = 1987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 272, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1983
                    self.match(SqlBaseParser.T__2)
                    self.state = 1984
                    self.colType()
                self.state = 1989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 272, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColType"):
                listener.enterColType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColType"):
                listener.exitColType(self)

    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_colType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.identifier()
            self.state = 1992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.T__6:
                self.state = 1991
                self.match(SqlBaseParser.T__6)

            self.state = 1994
            self.dataType()
            self.state = 1997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
            if la_ == 1:
                self.state = 1995
                self.match(SqlBaseParser.COMMENT)
                self.state = 1996
                self.match(SqlBaseParser.STRING)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None  # ExpressionContext
            self.result = None  # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhenClause"):
                listener.enterWhenClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhenClause"):
                listener.exitWhenClause(self)

    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.match(SqlBaseParser.WHEN)
            self.state = 2000
            localctx.condition = self.expression()
            self.state = 2001
            self.match(SqlBaseParser.THEN)
            self.state = 2002
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windows

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindows"):
                listener.enterWindows(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindows"):
                listener.exitWindows(self)

    def windows(self):

        localctx = SqlBaseParser.WindowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_windows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.match(SqlBaseParser.WINDOW)
            self.state = 2005
            self.namedWindow()
            self.state = 2010
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 275, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2006
                    self.match(SqlBaseParser.T__2)
                    self.state = 2007
                    self.namedWindow()
                self.state = 2012
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 275, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedWindowContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedWindow"):
                listener.enterNamedWindow(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedWindow"):
                listener.exitNamedWindow(self)

    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            self.identifier()
            self.state = 2014
            self.match(SqlBaseParser.AS)
            self.state = 2015
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class WindowRefContext(WindowSpecContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None  # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindowRef"):
                listener.enterWindowRef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindowRef"):
                listener.exitWindowRef(self)

    class WindowDefContext(WindowSpecContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None  # ExpressionContext
            self.partition = list()  # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext, 0)

        def sortItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext, i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindowDef"):
                listener.enterWindowDef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindowDef"):
                listener.exitWindowDef(self)

    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_windowSpec)
        self._la = 0  # Token type
        try:
            self.state = 2059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.ADD,
                SqlBaseParser.AS,
                SqlBaseParser.ALL,
                SqlBaseParser.DISTINCT,
                SqlBaseParser.WHERE,
                SqlBaseParser.GROUP,
                SqlBaseParser.BY,
                SqlBaseParser.GROUPING,
                SqlBaseParser.SETS,
                SqlBaseParser.CUBE,
                SqlBaseParser.ROLLUP,
                SqlBaseParser.ORDER,
                SqlBaseParser.HAVING,
                SqlBaseParser.LIMIT,
                SqlBaseParser.AT,
                SqlBaseParser.OR,
                SqlBaseParser.AND,
                SqlBaseParser.IN,
                SqlBaseParser.NOT,
                SqlBaseParser.NO,
                SqlBaseParser.EXISTS,
                SqlBaseParser.BETWEEN,
                SqlBaseParser.LIKE,
                SqlBaseParser.RLIKE,
                SqlBaseParser.IS,
                SqlBaseParser.NULL,
                SqlBaseParser.TRUE,
                SqlBaseParser.FALSE,
                SqlBaseParser.NULLS,
                SqlBaseParser.ASC,
                SqlBaseParser.DESC,
                SqlBaseParser.FOR,
                SqlBaseParser.INTERVAL,
                SqlBaseParser.CASE,
                SqlBaseParser.WHEN,
                SqlBaseParser.THEN,
                SqlBaseParser.ELSE,
                SqlBaseParser.END,
                SqlBaseParser.JOIN,
                SqlBaseParser.CROSS,
                SqlBaseParser.OUTER,
                SqlBaseParser.INNER,
                SqlBaseParser.LEFT,
                SqlBaseParser.SEMI,
                SqlBaseParser.RIGHT,
                SqlBaseParser.FULL,
                SqlBaseParser.NATURAL,
                SqlBaseParser.ON,
                SqlBaseParser.LATERAL,
                SqlBaseParser.WINDOW,
                SqlBaseParser.OVER,
                SqlBaseParser.PARTITION,
                SqlBaseParser.RANGE,
                SqlBaseParser.ROWS,
                SqlBaseParser.UNBOUNDED,
                SqlBaseParser.PRECEDING,
                SqlBaseParser.FOLLOWING,
                SqlBaseParser.CURRENT,
                SqlBaseParser.ROW,
                SqlBaseParser.WITH,
                SqlBaseParser.VALUES,
                SqlBaseParser.CREATE,
                SqlBaseParser.TABLE,
                SqlBaseParser.VIEW,
                SqlBaseParser.REPLACE,
                SqlBaseParser.INSERT,
                SqlBaseParser.DELETE,
                SqlBaseParser.INTO,
                SqlBaseParser.DESCRIBE,
                SqlBaseParser.EXPLAIN,
                SqlBaseParser.FORMAT,
                SqlBaseParser.LOGICAL,
                SqlBaseParser.CODEGEN,
                SqlBaseParser.CAST,
                SqlBaseParser.SHOW,
                SqlBaseParser.TABLES,
                SqlBaseParser.COLUMNS,
                SqlBaseParser.COLUMN,
                SqlBaseParser.USE,
                SqlBaseParser.PARTITIONS,
                SqlBaseParser.FUNCTIONS,
                SqlBaseParser.DROP,
                SqlBaseParser.UNION,
                SqlBaseParser.EXCEPT,
                SqlBaseParser.INTERSECT,
                SqlBaseParser.TO,
                SqlBaseParser.TABLESAMPLE,
                SqlBaseParser.STRATIFY,
                SqlBaseParser.ALTER,
                SqlBaseParser.RENAME,
                SqlBaseParser.ARRAY,
                SqlBaseParser.MAP,
                SqlBaseParser.STRUCT,
                SqlBaseParser.COMMENT,
                SqlBaseParser.SET,
                SqlBaseParser.RESET,
                SqlBaseParser.DATA,
                SqlBaseParser.START,
                SqlBaseParser.TRANSACTION,
                SqlBaseParser.COMMIT,
                SqlBaseParser.ROLLBACK,
                SqlBaseParser.MACRO,
                SqlBaseParser.IF,
                SqlBaseParser.DIV,
                SqlBaseParser.PERCENTLIT,
                SqlBaseParser.BUCKET,
                SqlBaseParser.OUT,
                SqlBaseParser.OF,
                SqlBaseParser.SORT,
                SqlBaseParser.CLUSTER,
                SqlBaseParser.DISTRIBUTE,
                SqlBaseParser.OVERWRITE,
                SqlBaseParser.TRANSFORM,
                SqlBaseParser.REDUCE,
                SqlBaseParser.USING,
                SqlBaseParser.SERDE,
                SqlBaseParser.SERDEPROPERTIES,
                SqlBaseParser.RECORDREADER,
                SqlBaseParser.RECORDWRITER,
                SqlBaseParser.DELIMITED,
                SqlBaseParser.FIELDS,
                SqlBaseParser.TERMINATED,
                SqlBaseParser.COLLECTION,
                SqlBaseParser.ITEMS,
                SqlBaseParser.KEYS,
                SqlBaseParser.ESCAPED,
                SqlBaseParser.LINES,
                SqlBaseParser.SEPARATED,
                SqlBaseParser.FUNCTION,
                SqlBaseParser.EXTENDED,
                SqlBaseParser.REFRESH,
                SqlBaseParser.CLEAR,
                SqlBaseParser.CACHE,
                SqlBaseParser.UNCACHE,
                SqlBaseParser.LAZY,
                SqlBaseParser.FORMATTED,
                SqlBaseParser.TEMPORARY,
                SqlBaseParser.OPTIONS,
                SqlBaseParser.UNSET,
                SqlBaseParser.TBLPROPERTIES,
                SqlBaseParser.DBPROPERTIES,
                SqlBaseParser.BUCKETS,
                SqlBaseParser.SKEWED,
                SqlBaseParser.STORED,
                SqlBaseParser.DIRECTORIES,
                SqlBaseParser.LOCATION,
                SqlBaseParser.EXCHANGE,
                SqlBaseParser.ARCHIVE,
                SqlBaseParser.UNARCHIVE,
                SqlBaseParser.FILEFORMAT,
                SqlBaseParser.TOUCH,
                SqlBaseParser.COMPACT,
                SqlBaseParser.CONCATENATE,
                SqlBaseParser.CHANGE,
                SqlBaseParser.CASCADE,
                SqlBaseParser.RESTRICT,
                SqlBaseParser.CLUSTERED,
                SqlBaseParser.SORTED,
                SqlBaseParser.PURGE,
                SqlBaseParser.INPUTFORMAT,
                SqlBaseParser.OUTPUTFORMAT,
                SqlBaseParser.DATABASE,
                SqlBaseParser.DATABASES,
                SqlBaseParser.DFS,
                SqlBaseParser.TRUNCATE,
                SqlBaseParser.ANALYZE,
                SqlBaseParser.COMPUTE,
                SqlBaseParser.LIST,
                SqlBaseParser.STATISTICS,
                SqlBaseParser.PARTITIONED,
                SqlBaseParser.EXTERNAL,
                SqlBaseParser.DEFINED,
                SqlBaseParser.REVOKE,
                SqlBaseParser.GRANT,
                SqlBaseParser.LOCK,
                SqlBaseParser.UNLOCK,
                SqlBaseParser.MSCK,
                SqlBaseParser.REPAIR,
                SqlBaseParser.RECOVER,
                SqlBaseParser.EXPORT,
                SqlBaseParser.IMPORT,
                SqlBaseParser.LOAD,
                SqlBaseParser.ROLE,
                SqlBaseParser.ROLES,
                SqlBaseParser.COMPACTIONS,
                SqlBaseParser.PRINCIPALS,
                SqlBaseParser.TRANSACTIONS,
                SqlBaseParser.INDEX,
                SqlBaseParser.INDEXES,
                SqlBaseParser.LOCKS,
                SqlBaseParser.OPTION,
                SqlBaseParser.ANTI,
                SqlBaseParser.LOCAL,
                SqlBaseParser.INPATH,
                SqlBaseParser.CURRENT_DATE,
                SqlBaseParser.CURRENT_TIMESTAMP,
                SqlBaseParser.IDENTIFIER,
                SqlBaseParser.BACKQUOTED_IDENTIFIER,
            ]:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2017
                localctx.name = self.identifier()
                pass
            elif token in [SqlBaseParser.T__0]:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2018
                self.match(SqlBaseParser.T__0)
                self.state = 2053
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CLUSTER]:
                    self.state = 2019
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 2020
                    self.match(SqlBaseParser.BY)
                    self.state = 2021
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 2026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 2022
                        self.match(SqlBaseParser.T__2)
                        self.state = 2023
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2028
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [
                    SqlBaseParser.T__1,
                    SqlBaseParser.ORDER,
                    SqlBaseParser.PARTITION,
                    SqlBaseParser.RANGE,
                    SqlBaseParser.ROWS,
                    SqlBaseParser.SORT,
                    SqlBaseParser.DISTRIBUTE,
                ]:
                    self.state = 2039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        _la == SqlBaseParser.PARTITION
                        or _la == SqlBaseParser.DISTRIBUTE
                    ):
                        self.state = 2029
                        _la = self._input.LA(1)
                        if not (
                            _la == SqlBaseParser.PARTITION
                            or _la == SqlBaseParser.DISTRIBUTE
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2030
                        self.match(SqlBaseParser.BY)
                        self.state = 2031
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2036
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == SqlBaseParser.T__2:
                            self.state = 2032
                            self.match(SqlBaseParser.T__2)
                            self.state = 2033
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 2038
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 2051
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.ORDER or _la == SqlBaseParser.SORT:
                        self.state = 2041
                        _la = self._input.LA(1)
                        if not (
                            _la == SqlBaseParser.ORDER or _la == SqlBaseParser.SORT
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2042
                        self.match(SqlBaseParser.BY)
                        self.state = 2043
                        self.sortItem()
                        self.state = 2048
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == SqlBaseParser.T__2:
                            self.state = 2044
                            self.match(SqlBaseParser.T__2)
                            self.state = 2045
                            self.sortItem()
                            self.state = 2050
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.RANGE or _la == SqlBaseParser.ROWS:
                    self.state = 2055
                    self.windowFrame()

                self.state = 2058
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowFrameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None  # Token
            self.start = None  # FrameBoundContext
            self.end = None  # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext, i)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindowFrame"):
                listener.enterWindowFrame(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindowFrame"):
                listener.exitWindowFrame(self)

    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_windowFrame)
        try:
            self.state = 2077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 284, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2061
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2062
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2063
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2064
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2065
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2066
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2067
                localctx.start = self.frameBound()
                self.state = 2068
                self.match(SqlBaseParser.AND)
                self.state = 2069
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2071
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2072
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2073
                localctx.start = self.frameBound()
                self.state = 2074
                self.match(SqlBaseParser.AND)
                self.state = 2075
                localctx.end = self.frameBound()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FrameBoundContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None  # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFrameBound"):
                listener.enterFrameBound(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFrameBound"):
                listener.exitFrameBound(self)

    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_frameBound)
        self._la = 0  # Token type
        try:
            self.state = 2086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 285, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2079
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2080
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.PRECEDING or _la == SqlBaseParser.FOLLOWING
                ):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2081
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 2082
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2083
                self.expression()
                self.state = 2084
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.PRECEDING or _la == SqlBaseParser.FOLLOWING
                ):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiedName"):
                listener.enterQualifiedName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiedName"):
                listener.exitQualifiedName(self)

    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self.identifier()
            self.state = 2093
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 286, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2089
                    self.match(SqlBaseParser.T__3)
                    self.state = 2090
                    self.identifier()
                self.state = 2095
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 286, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)

    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_identifier)
        try:
            self.state = 2110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.ADD,
                SqlBaseParser.AS,
                SqlBaseParser.ALL,
                SqlBaseParser.DISTINCT,
                SqlBaseParser.WHERE,
                SqlBaseParser.GROUP,
                SqlBaseParser.BY,
                SqlBaseParser.GROUPING,
                SqlBaseParser.SETS,
                SqlBaseParser.CUBE,
                SqlBaseParser.ROLLUP,
                SqlBaseParser.ORDER,
                SqlBaseParser.HAVING,
                SqlBaseParser.LIMIT,
                SqlBaseParser.AT,
                SqlBaseParser.OR,
                SqlBaseParser.AND,
                SqlBaseParser.IN,
                SqlBaseParser.NOT,
                SqlBaseParser.NO,
                SqlBaseParser.EXISTS,
                SqlBaseParser.BETWEEN,
                SqlBaseParser.LIKE,
                SqlBaseParser.RLIKE,
                SqlBaseParser.IS,
                SqlBaseParser.NULL,
                SqlBaseParser.TRUE,
                SqlBaseParser.FALSE,
                SqlBaseParser.NULLS,
                SqlBaseParser.ASC,
                SqlBaseParser.DESC,
                SqlBaseParser.FOR,
                SqlBaseParser.INTERVAL,
                SqlBaseParser.CASE,
                SqlBaseParser.WHEN,
                SqlBaseParser.THEN,
                SqlBaseParser.ELSE,
                SqlBaseParser.END,
                SqlBaseParser.OUTER,
                SqlBaseParser.LATERAL,
                SqlBaseParser.WINDOW,
                SqlBaseParser.OVER,
                SqlBaseParser.PARTITION,
                SqlBaseParser.RANGE,
                SqlBaseParser.ROWS,
                SqlBaseParser.UNBOUNDED,
                SqlBaseParser.PRECEDING,
                SqlBaseParser.FOLLOWING,
                SqlBaseParser.CURRENT,
                SqlBaseParser.ROW,
                SqlBaseParser.WITH,
                SqlBaseParser.VALUES,
                SqlBaseParser.CREATE,
                SqlBaseParser.TABLE,
                SqlBaseParser.VIEW,
                SqlBaseParser.REPLACE,
                SqlBaseParser.INSERT,
                SqlBaseParser.DELETE,
                SqlBaseParser.INTO,
                SqlBaseParser.DESCRIBE,
                SqlBaseParser.EXPLAIN,
                SqlBaseParser.FORMAT,
                SqlBaseParser.LOGICAL,
                SqlBaseParser.CODEGEN,
                SqlBaseParser.CAST,
                SqlBaseParser.SHOW,
                SqlBaseParser.TABLES,
                SqlBaseParser.COLUMNS,
                SqlBaseParser.COLUMN,
                SqlBaseParser.USE,
                SqlBaseParser.PARTITIONS,
                SqlBaseParser.FUNCTIONS,
                SqlBaseParser.DROP,
                SqlBaseParser.TO,
                SqlBaseParser.TABLESAMPLE,
                SqlBaseParser.STRATIFY,
                SqlBaseParser.ALTER,
                SqlBaseParser.RENAME,
                SqlBaseParser.ARRAY,
                SqlBaseParser.MAP,
                SqlBaseParser.STRUCT,
                SqlBaseParser.COMMENT,
                SqlBaseParser.SET,
                SqlBaseParser.RESET,
                SqlBaseParser.DATA,
                SqlBaseParser.START,
                SqlBaseParser.TRANSACTION,
                SqlBaseParser.COMMIT,
                SqlBaseParser.ROLLBACK,
                SqlBaseParser.MACRO,
                SqlBaseParser.IF,
                SqlBaseParser.DIV,
                SqlBaseParser.PERCENTLIT,
                SqlBaseParser.BUCKET,
                SqlBaseParser.OUT,
                SqlBaseParser.OF,
                SqlBaseParser.SORT,
                SqlBaseParser.CLUSTER,
                SqlBaseParser.DISTRIBUTE,
                SqlBaseParser.OVERWRITE,
                SqlBaseParser.TRANSFORM,
                SqlBaseParser.REDUCE,
                SqlBaseParser.USING,
                SqlBaseParser.SERDE,
                SqlBaseParser.SERDEPROPERTIES,
                SqlBaseParser.RECORDREADER,
                SqlBaseParser.RECORDWRITER,
                SqlBaseParser.DELIMITED,
                SqlBaseParser.FIELDS,
                SqlBaseParser.TERMINATED,
                SqlBaseParser.COLLECTION,
                SqlBaseParser.ITEMS,
                SqlBaseParser.KEYS,
                SqlBaseParser.ESCAPED,
                SqlBaseParser.LINES,
                SqlBaseParser.SEPARATED,
                SqlBaseParser.FUNCTION,
                SqlBaseParser.EXTENDED,
                SqlBaseParser.REFRESH,
                SqlBaseParser.CLEAR,
                SqlBaseParser.CACHE,
                SqlBaseParser.UNCACHE,
                SqlBaseParser.LAZY,
                SqlBaseParser.FORMATTED,
                SqlBaseParser.TEMPORARY,
                SqlBaseParser.OPTIONS,
                SqlBaseParser.UNSET,
                SqlBaseParser.TBLPROPERTIES,
                SqlBaseParser.DBPROPERTIES,
                SqlBaseParser.BUCKETS,
                SqlBaseParser.SKEWED,
                SqlBaseParser.STORED,
                SqlBaseParser.DIRECTORIES,
                SqlBaseParser.LOCATION,
                SqlBaseParser.EXCHANGE,
                SqlBaseParser.ARCHIVE,
                SqlBaseParser.UNARCHIVE,
                SqlBaseParser.FILEFORMAT,
                SqlBaseParser.TOUCH,
                SqlBaseParser.COMPACT,
                SqlBaseParser.CONCATENATE,
                SqlBaseParser.CHANGE,
                SqlBaseParser.CASCADE,
                SqlBaseParser.RESTRICT,
                SqlBaseParser.CLUSTERED,
                SqlBaseParser.SORTED,
                SqlBaseParser.PURGE,
                SqlBaseParser.INPUTFORMAT,
                SqlBaseParser.OUTPUTFORMAT,
                SqlBaseParser.DATABASE,
                SqlBaseParser.DATABASES,
                SqlBaseParser.DFS,
                SqlBaseParser.TRUNCATE,
                SqlBaseParser.ANALYZE,
                SqlBaseParser.COMPUTE,
                SqlBaseParser.LIST,
                SqlBaseParser.STATISTICS,
                SqlBaseParser.PARTITIONED,
                SqlBaseParser.EXTERNAL,
                SqlBaseParser.DEFINED,
                SqlBaseParser.REVOKE,
                SqlBaseParser.GRANT,
                SqlBaseParser.LOCK,
                SqlBaseParser.UNLOCK,
                SqlBaseParser.MSCK,
                SqlBaseParser.REPAIR,
                SqlBaseParser.RECOVER,
                SqlBaseParser.EXPORT,
                SqlBaseParser.IMPORT,
                SqlBaseParser.LOAD,
                SqlBaseParser.ROLE,
                SqlBaseParser.ROLES,
                SqlBaseParser.COMPACTIONS,
                SqlBaseParser.PRINCIPALS,
                SqlBaseParser.TRANSACTIONS,
                SqlBaseParser.INDEX,
                SqlBaseParser.INDEXES,
                SqlBaseParser.LOCKS,
                SqlBaseParser.OPTION,
                SqlBaseParser.LOCAL,
                SqlBaseParser.INPATH,
                SqlBaseParser.CURRENT_DATE,
                SqlBaseParser.CURRENT_TIMESTAMP,
                SqlBaseParser.IDENTIFIER,
                SqlBaseParser.BACKQUOTED_IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2096
                self.strictIdentifier()
                pass
            elif token in [SqlBaseParser.ANTI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2097
                self.match(SqlBaseParser.ANTI)
                pass
            elif token in [SqlBaseParser.FULL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2098
                self.match(SqlBaseParser.FULL)
                pass
            elif token in [SqlBaseParser.INNER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2099
                self.match(SqlBaseParser.INNER)
                pass
            elif token in [SqlBaseParser.LEFT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2100
                self.match(SqlBaseParser.LEFT)
                pass
            elif token in [SqlBaseParser.SEMI]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2101
                self.match(SqlBaseParser.SEMI)
                pass
            elif token in [SqlBaseParser.RIGHT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2102
                self.match(SqlBaseParser.RIGHT)
                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2103
                self.match(SqlBaseParser.NATURAL)
                pass
            elif token in [SqlBaseParser.JOIN]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2104
                self.match(SqlBaseParser.JOIN)
                pass
            elif token in [SqlBaseParser.CROSS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2105
                self.match(SqlBaseParser.CROSS)
                pass
            elif token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2106
                self.match(SqlBaseParser.ON)
                pass
            elif token in [SqlBaseParser.UNION]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2107
                self.match(SqlBaseParser.UNION)
                pass
            elif token in [SqlBaseParser.INTERSECT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2108
                self.match(SqlBaseParser.INTERSECT)
                pass
            elif token in [SqlBaseParser.EXCEPT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2109
                self.match(SqlBaseParser.EXCEPT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuotedIdentifierAlternative"):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuotedIdentifierAlternative"):
                listener.exitQuotedIdentifierAlternative(self)

    class UnquotedIdentifierContext(StrictIdentifierContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)

        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnquotedIdentifier"):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnquotedIdentifier"):
                listener.exitUnquotedIdentifier(self)

    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_strictIdentifier)
        try:
            self.state = 2115
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IDENTIFIER]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2112
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 2113
                self.quotedIdentifier()
                pass
            elif token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.ADD,
                SqlBaseParser.AS,
                SqlBaseParser.ALL,
                SqlBaseParser.DISTINCT,
                SqlBaseParser.WHERE,
                SqlBaseParser.GROUP,
                SqlBaseParser.BY,
                SqlBaseParser.GROUPING,
                SqlBaseParser.SETS,
                SqlBaseParser.CUBE,
                SqlBaseParser.ROLLUP,
                SqlBaseParser.ORDER,
                SqlBaseParser.HAVING,
                SqlBaseParser.LIMIT,
                SqlBaseParser.AT,
                SqlBaseParser.OR,
                SqlBaseParser.AND,
                SqlBaseParser.IN,
                SqlBaseParser.NOT,
                SqlBaseParser.NO,
                SqlBaseParser.EXISTS,
                SqlBaseParser.BETWEEN,
                SqlBaseParser.LIKE,
                SqlBaseParser.RLIKE,
                SqlBaseParser.IS,
                SqlBaseParser.NULL,
                SqlBaseParser.TRUE,
                SqlBaseParser.FALSE,
                SqlBaseParser.NULLS,
                SqlBaseParser.ASC,
                SqlBaseParser.DESC,
                SqlBaseParser.FOR,
                SqlBaseParser.INTERVAL,
                SqlBaseParser.CASE,
                SqlBaseParser.WHEN,
                SqlBaseParser.THEN,
                SqlBaseParser.ELSE,
                SqlBaseParser.END,
                SqlBaseParser.OUTER,
                SqlBaseParser.LATERAL,
                SqlBaseParser.WINDOW,
                SqlBaseParser.OVER,
                SqlBaseParser.PARTITION,
                SqlBaseParser.RANGE,
                SqlBaseParser.ROWS,
                SqlBaseParser.UNBOUNDED,
                SqlBaseParser.PRECEDING,
                SqlBaseParser.FOLLOWING,
                SqlBaseParser.CURRENT,
                SqlBaseParser.ROW,
                SqlBaseParser.WITH,
                SqlBaseParser.VALUES,
                SqlBaseParser.CREATE,
                SqlBaseParser.TABLE,
                SqlBaseParser.VIEW,
                SqlBaseParser.REPLACE,
                SqlBaseParser.INSERT,
                SqlBaseParser.DELETE,
                SqlBaseParser.INTO,
                SqlBaseParser.DESCRIBE,
                SqlBaseParser.EXPLAIN,
                SqlBaseParser.FORMAT,
                SqlBaseParser.LOGICAL,
                SqlBaseParser.CODEGEN,
                SqlBaseParser.CAST,
                SqlBaseParser.SHOW,
                SqlBaseParser.TABLES,
                SqlBaseParser.COLUMNS,
                SqlBaseParser.COLUMN,
                SqlBaseParser.USE,
                SqlBaseParser.PARTITIONS,
                SqlBaseParser.FUNCTIONS,
                SqlBaseParser.DROP,
                SqlBaseParser.TO,
                SqlBaseParser.TABLESAMPLE,
                SqlBaseParser.STRATIFY,
                SqlBaseParser.ALTER,
                SqlBaseParser.RENAME,
                SqlBaseParser.ARRAY,
                SqlBaseParser.MAP,
                SqlBaseParser.STRUCT,
                SqlBaseParser.COMMENT,
                SqlBaseParser.SET,
                SqlBaseParser.RESET,
                SqlBaseParser.DATA,
                SqlBaseParser.START,
                SqlBaseParser.TRANSACTION,
                SqlBaseParser.COMMIT,
                SqlBaseParser.ROLLBACK,
                SqlBaseParser.MACRO,
                SqlBaseParser.IF,
                SqlBaseParser.DIV,
                SqlBaseParser.PERCENTLIT,
                SqlBaseParser.BUCKET,
                SqlBaseParser.OUT,
                SqlBaseParser.OF,
                SqlBaseParser.SORT,
                SqlBaseParser.CLUSTER,
                SqlBaseParser.DISTRIBUTE,
                SqlBaseParser.OVERWRITE,
                SqlBaseParser.TRANSFORM,
                SqlBaseParser.REDUCE,
                SqlBaseParser.USING,
                SqlBaseParser.SERDE,
                SqlBaseParser.SERDEPROPERTIES,
                SqlBaseParser.RECORDREADER,
                SqlBaseParser.RECORDWRITER,
                SqlBaseParser.DELIMITED,
                SqlBaseParser.FIELDS,
                SqlBaseParser.TERMINATED,
                SqlBaseParser.COLLECTION,
                SqlBaseParser.ITEMS,
                SqlBaseParser.KEYS,
                SqlBaseParser.ESCAPED,
                SqlBaseParser.LINES,
                SqlBaseParser.SEPARATED,
                SqlBaseParser.FUNCTION,
                SqlBaseParser.EXTENDED,
                SqlBaseParser.REFRESH,
                SqlBaseParser.CLEAR,
                SqlBaseParser.CACHE,
                SqlBaseParser.UNCACHE,
                SqlBaseParser.LAZY,
                SqlBaseParser.FORMATTED,
                SqlBaseParser.TEMPORARY,
                SqlBaseParser.OPTIONS,
                SqlBaseParser.UNSET,
                SqlBaseParser.TBLPROPERTIES,
                SqlBaseParser.DBPROPERTIES,
                SqlBaseParser.BUCKETS,
                SqlBaseParser.SKEWED,
                SqlBaseParser.STORED,
                SqlBaseParser.DIRECTORIES,
                SqlBaseParser.LOCATION,
                SqlBaseParser.EXCHANGE,
                SqlBaseParser.ARCHIVE,
                SqlBaseParser.UNARCHIVE,
                SqlBaseParser.FILEFORMAT,
                SqlBaseParser.TOUCH,
                SqlBaseParser.COMPACT,
                SqlBaseParser.CONCATENATE,
                SqlBaseParser.CHANGE,
                SqlBaseParser.CASCADE,
                SqlBaseParser.RESTRICT,
                SqlBaseParser.CLUSTERED,
                SqlBaseParser.SORTED,
                SqlBaseParser.PURGE,
                SqlBaseParser.INPUTFORMAT,
                SqlBaseParser.OUTPUTFORMAT,
                SqlBaseParser.DATABASE,
                SqlBaseParser.DATABASES,
                SqlBaseParser.DFS,
                SqlBaseParser.TRUNCATE,
                SqlBaseParser.ANALYZE,
                SqlBaseParser.COMPUTE,
                SqlBaseParser.LIST,
                SqlBaseParser.STATISTICS,
                SqlBaseParser.PARTITIONED,
                SqlBaseParser.EXTERNAL,
                SqlBaseParser.DEFINED,
                SqlBaseParser.REVOKE,
                SqlBaseParser.GRANT,
                SqlBaseParser.LOCK,
                SqlBaseParser.UNLOCK,
                SqlBaseParser.MSCK,
                SqlBaseParser.REPAIR,
                SqlBaseParser.RECOVER,
                SqlBaseParser.EXPORT,
                SqlBaseParser.IMPORT,
                SqlBaseParser.LOAD,
                SqlBaseParser.ROLE,
                SqlBaseParser.ROLES,
                SqlBaseParser.COMPACTIONS,
                SqlBaseParser.PRINCIPALS,
                SqlBaseParser.TRANSACTIONS,
                SqlBaseParser.INDEX,
                SqlBaseParser.INDEXES,
                SqlBaseParser.LOCKS,
                SqlBaseParser.OPTION,
                SqlBaseParser.LOCAL,
                SqlBaseParser.INPATH,
                SqlBaseParser.CURRENT_DATE,
                SqlBaseParser.CURRENT_TIMESTAMP,
            ]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2114
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuotedIdentifier"):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuotedIdentifier"):
                listener.exitQuotedIdentifier(self)

    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DecimalLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecimalLiteral"):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecimalLiteral"):
                listener.exitDecimalLiteral(self)

    class BigIntLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBigIntLiteral"):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBigIntLiteral"):
                listener.exitBigIntLiteral(self)

    class TinyIntLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTinyIntLiteral"):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTinyIntLiteral"):
                listener.exitTinyIntLiteral(self)

    class BigDecimalLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBigDecimalLiteral"):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBigDecimalLiteral"):
                listener.exitBigDecimalLiteral(self)

    class DoubleLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoubleLiteral"):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoubleLiteral"):
                listener.exitDoubleLiteral(self)

    class IntegerLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntegerLiteral"):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntegerLiteral"):
                listener.exitIntegerLiteral(self)

    class SmallIntLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSmallIntLiteral"):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSmallIntLiteral"):
                listener.exitSmallIntLiteral(self)

    class ScientificDecimalLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SCIENTIFIC_DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.SCIENTIFIC_DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterScientificDecimalLiteral"):
                listener.enterScientificDecimalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitScientificDecimalLiteral"):
                listener.exitScientificDecimalLiteral(self)

    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_number)
        self._la = 0  # Token type
        try:
            self.state = 2151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 297, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2119
                    self.match(SqlBaseParser.MINUS)

                self.state = 2122
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ScientificDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2123
                    self.match(SqlBaseParser.MINUS)

                self.state = 2126
                self.match(SqlBaseParser.SCIENTIFIC_DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2127
                    self.match(SqlBaseParser.MINUS)

                self.state = 2130
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2131
                    self.match(SqlBaseParser.MINUS)

                self.state = 2134
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2135
                    self.match(SqlBaseParser.MINUS)

                self.state = 2138
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2139
                    self.match(SqlBaseParser.MINUS)

                self.state = 2142
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2143
                    self.match(SqlBaseParser.MINUS)

                self.state = 2146
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2147
                    self.match(SqlBaseParser.MINUS)

                self.state = 2150
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonReservedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonReserved"):
                listener.enterNonReserved(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonReserved"):
                listener.exitNonReserved(self)

    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_nonReserved)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.SELECT)
                            | (1 << SqlBaseParser.FROM)
                            | (1 << SqlBaseParser.ADD)
                            | (1 << SqlBaseParser.AS)
                            | (1 << SqlBaseParser.ALL)
                            | (1 << SqlBaseParser.DISTINCT)
                            | (1 << SqlBaseParser.WHERE)
                            | (1 << SqlBaseParser.GROUP)
                            | (1 << SqlBaseParser.BY)
                            | (1 << SqlBaseParser.GROUPING)
                            | (1 << SqlBaseParser.SETS)
                            | (1 << SqlBaseParser.CUBE)
                            | (1 << SqlBaseParser.ROLLUP)
                            | (1 << SqlBaseParser.ORDER)
                            | (1 << SqlBaseParser.HAVING)
                            | (1 << SqlBaseParser.LIMIT)
                            | (1 << SqlBaseParser.AT)
                            | (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                            | (1 << SqlBaseParser.NO)
                            | (1 << SqlBaseParser.EXISTS)
                            | (1 << SqlBaseParser.BETWEEN)
                            | (1 << SqlBaseParser.LIKE)
                            | (1 << SqlBaseParser.RLIKE)
                            | (1 << SqlBaseParser.IS)
                            | (1 << SqlBaseParser.NULL)
                            | (1 << SqlBaseParser.TRUE)
                            | (1 << SqlBaseParser.FALSE)
                            | (1 << SqlBaseParser.NULLS)
                            | (1 << SqlBaseParser.ASC)
                            | (1 << SqlBaseParser.DESC)
                            | (1 << SqlBaseParser.FOR)
                            | (1 << SqlBaseParser.INTERVAL)
                            | (1 << SqlBaseParser.CASE)
                            | (1 << SqlBaseParser.WHEN)
                            | (1 << SqlBaseParser.THEN)
                            | (1 << SqlBaseParser.ELSE)
                            | (1 << SqlBaseParser.END)
                            | (1 << SqlBaseParser.OUTER)
                            | (1 << SqlBaseParser.LATERAL)
                            | (1 << SqlBaseParser.WINDOW)
                            | (1 << SqlBaseParser.OVER)
                            | (1 << SqlBaseParser.PARTITION)
                            | (1 << SqlBaseParser.RANGE)
                            | (1 << SqlBaseParser.ROWS)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (SqlBaseParser.UNBOUNDED - 64))
                            | (1 << (SqlBaseParser.PRECEDING - 64))
                            | (1 << (SqlBaseParser.FOLLOWING - 64))
                            | (1 << (SqlBaseParser.CURRENT - 64))
                            | (1 << (SqlBaseParser.ROW - 64))
                            | (1 << (SqlBaseParser.WITH - 64))
                            | (1 << (SqlBaseParser.VALUES - 64))
                            | (1 << (SqlBaseParser.CREATE - 64))
                            | (1 << (SqlBaseParser.TABLE - 64))
                            | (1 << (SqlBaseParser.VIEW - 64))
                            | (1 << (SqlBaseParser.REPLACE - 64))
                            | (1 << (SqlBaseParser.INSERT - 64))
                            | (1 << (SqlBaseParser.DELETE - 64))
                            | (1 << (SqlBaseParser.INTO - 64))
                            | (1 << (SqlBaseParser.DESCRIBE - 64))
                            | (1 << (SqlBaseParser.EXPLAIN - 64))
                            | (1 << (SqlBaseParser.FORMAT - 64))
                            | (1 << (SqlBaseParser.LOGICAL - 64))
                            | (1 << (SqlBaseParser.CODEGEN - 64))
                            | (1 << (SqlBaseParser.CAST - 64))
                            | (1 << (SqlBaseParser.SHOW - 64))
                            | (1 << (SqlBaseParser.TABLES - 64))
                            | (1 << (SqlBaseParser.COLUMNS - 64))
                            | (1 << (SqlBaseParser.COLUMN - 64))
                            | (1 << (SqlBaseParser.USE - 64))
                            | (1 << (SqlBaseParser.PARTITIONS - 64))
                            | (1 << (SqlBaseParser.FUNCTIONS - 64))
                            | (1 << (SqlBaseParser.DROP - 64))
                            | (1 << (SqlBaseParser.TO - 64))
                            | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                            | (1 << (SqlBaseParser.STRATIFY - 64))
                            | (1 << (SqlBaseParser.ALTER - 64))
                            | (1 << (SqlBaseParser.RENAME - 64))
                            | (1 << (SqlBaseParser.ARRAY - 64))
                            | (1 << (SqlBaseParser.MAP - 64))
                            | (1 << (SqlBaseParser.STRUCT - 64))
                            | (1 << (SqlBaseParser.COMMENT - 64))
                            | (1 << (SqlBaseParser.SET - 64))
                            | (1 << (SqlBaseParser.RESET - 64))
                            | (1 << (SqlBaseParser.DATA - 64))
                            | (1 << (SqlBaseParser.START - 64))
                            | (1 << (SqlBaseParser.TRANSACTION - 64))
                            | (1 << (SqlBaseParser.COMMIT - 64))
                            | (1 << (SqlBaseParser.ROLLBACK - 64))
                            | (1 << (SqlBaseParser.MACRO - 64))
                            | (1 << (SqlBaseParser.IF - 64))
                            | (1 << (SqlBaseParser.DIV - 64))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 131)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 131))
                        & (
                            (1 << (SqlBaseParser.PERCENTLIT - 131))
                            | (1 << (SqlBaseParser.BUCKET - 131))
                            | (1 << (SqlBaseParser.OUT - 131))
                            | (1 << (SqlBaseParser.OF - 131))
                            | (1 << (SqlBaseParser.SORT - 131))
                            | (1 << (SqlBaseParser.CLUSTER - 131))
                            | (1 << (SqlBaseParser.DISTRIBUTE - 131))
                            | (1 << (SqlBaseParser.OVERWRITE - 131))
                            | (1 << (SqlBaseParser.TRANSFORM - 131))
                            | (1 << (SqlBaseParser.REDUCE - 131))
                            | (1 << (SqlBaseParser.USING - 131))
                            | (1 << (SqlBaseParser.SERDE - 131))
                            | (1 << (SqlBaseParser.SERDEPROPERTIES - 131))
                            | (1 << (SqlBaseParser.RECORDREADER - 131))
                            | (1 << (SqlBaseParser.RECORDWRITER - 131))
                            | (1 << (SqlBaseParser.DELIMITED - 131))
                            | (1 << (SqlBaseParser.FIELDS - 131))
                            | (1 << (SqlBaseParser.TERMINATED - 131))
                            | (1 << (SqlBaseParser.COLLECTION - 131))
                            | (1 << (SqlBaseParser.ITEMS - 131))
                            | (1 << (SqlBaseParser.KEYS - 131))
                            | (1 << (SqlBaseParser.ESCAPED - 131))
                            | (1 << (SqlBaseParser.LINES - 131))
                            | (1 << (SqlBaseParser.SEPARATED - 131))
                            | (1 << (SqlBaseParser.FUNCTION - 131))
                            | (1 << (SqlBaseParser.EXTENDED - 131))
                            | (1 << (SqlBaseParser.REFRESH - 131))
                            | (1 << (SqlBaseParser.CLEAR - 131))
                            | (1 << (SqlBaseParser.CACHE - 131))
                            | (1 << (SqlBaseParser.UNCACHE - 131))
                            | (1 << (SqlBaseParser.LAZY - 131))
                            | (1 << (SqlBaseParser.FORMATTED - 131))
                            | (1 << (SqlBaseParser.TEMPORARY - 131))
                            | (1 << (SqlBaseParser.OPTIONS - 131))
                            | (1 << (SqlBaseParser.UNSET - 131))
                            | (1 << (SqlBaseParser.TBLPROPERTIES - 131))
                            | (1 << (SqlBaseParser.DBPROPERTIES - 131))
                            | (1 << (SqlBaseParser.BUCKETS - 131))
                            | (1 << (SqlBaseParser.SKEWED - 131))
                            | (1 << (SqlBaseParser.STORED - 131))
                            | (1 << (SqlBaseParser.DIRECTORIES - 131))
                            | (1 << (SqlBaseParser.LOCATION - 131))
                            | (1 << (SqlBaseParser.EXCHANGE - 131))
                            | (1 << (SqlBaseParser.ARCHIVE - 131))
                            | (1 << (SqlBaseParser.UNARCHIVE - 131))
                            | (1 << (SqlBaseParser.FILEFORMAT - 131))
                            | (1 << (SqlBaseParser.TOUCH - 131))
                            | (1 << (SqlBaseParser.COMPACT - 131))
                            | (1 << (SqlBaseParser.CONCATENATE - 131))
                            | (1 << (SqlBaseParser.CHANGE - 131))
                            | (1 << (SqlBaseParser.CASCADE - 131))
                            | (1 << (SqlBaseParser.RESTRICT - 131))
                            | (1 << (SqlBaseParser.CLUSTERED - 131))
                            | (1 << (SqlBaseParser.SORTED - 131))
                            | (1 << (SqlBaseParser.PURGE - 131))
                            | (1 << (SqlBaseParser.INPUTFORMAT - 131))
                            | (1 << (SqlBaseParser.OUTPUTFORMAT - 131))
                            | (1 << (SqlBaseParser.DATABASE - 131))
                            | (1 << (SqlBaseParser.DATABASES - 131))
                            | (1 << (SqlBaseParser.DFS - 131))
                            | (1 << (SqlBaseParser.TRUNCATE - 131))
                            | (1 << (SqlBaseParser.ANALYZE - 131))
                            | (1 << (SqlBaseParser.COMPUTE - 131))
                            | (1 << (SqlBaseParser.LIST - 131))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 195)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 195))
                        & (
                            (1 << (SqlBaseParser.STATISTICS - 195))
                            | (1 << (SqlBaseParser.PARTITIONED - 195))
                            | (1 << (SqlBaseParser.EXTERNAL - 195))
                            | (1 << (SqlBaseParser.DEFINED - 195))
                            | (1 << (SqlBaseParser.REVOKE - 195))
                            | (1 << (SqlBaseParser.GRANT - 195))
                            | (1 << (SqlBaseParser.LOCK - 195))
                            | (1 << (SqlBaseParser.UNLOCK - 195))
                            | (1 << (SqlBaseParser.MSCK - 195))
                            | (1 << (SqlBaseParser.REPAIR - 195))
                            | (1 << (SqlBaseParser.RECOVER - 195))
                            | (1 << (SqlBaseParser.EXPORT - 195))
                            | (1 << (SqlBaseParser.IMPORT - 195))
                            | (1 << (SqlBaseParser.LOAD - 195))
                            | (1 << (SqlBaseParser.ROLE - 195))
                            | (1 << (SqlBaseParser.ROLES - 195))
                            | (1 << (SqlBaseParser.COMPACTIONS - 195))
                            | (1 << (SqlBaseParser.PRINCIPALS - 195))
                            | (1 << (SqlBaseParser.TRANSACTIONS - 195))
                            | (1 << (SqlBaseParser.INDEX - 195))
                            | (1 << (SqlBaseParser.INDEXES - 195))
                            | (1 << (SqlBaseParser.LOCKS - 195))
                            | (1 << (SqlBaseParser.OPTION - 195))
                            | (1 << (SqlBaseParser.LOCAL - 195))
                            | (1 << (SqlBaseParser.INPATH - 195))
                            | (1 << (SqlBaseParser.CURRENT_DATE - 195))
                            | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 195))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.queryTerm_sempred
        self._predicates[59] = self.booleanExpression_sempred
        self._predicates[62] = self.valueExpression_sempred
        self._predicates[63] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx: QueryTermContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def booleanExpression_sempred(
        self, localctx: BooleanExpressionContext, predIndex: int
    ):
        if predIndex == 1:
            return self.precpred(self._ctx, 3)

        if predIndex == 2:
            return self.precpred(self._ctx, 2)

    def valueExpression_sempred(self, localctx: ValueExpressionContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 6)

        if predIndex == 4:
            return self.precpred(self._ctx, 5)

        if predIndex == 5:
            return self.precpred(self._ctx, 4)

        if predIndex == 6:
            return self.precpred(self._ctx, 3)

        if predIndex == 7:
            return self.precpred(self._ctx, 2)

        if predIndex == 8:
            return self.precpred(self._ctx, 1)

    def primaryExpression_sempred(
        self, localctx: PrimaryExpressionContext, predIndex: int
    ):
        if predIndex == 9:
            return self.precpred(self._ctx, 4)

        if predIndex == 10:
            return self.precpred(self._ctx, 2)
