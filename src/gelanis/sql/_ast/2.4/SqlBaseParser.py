# Generated from SqlBase.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0100")
        buf.write("\u0996\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\3\2\3\2")
        buf.write("\3\2\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3")
        buf.write("\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u00e7\n")
        buf.write("\b\3\b\3\b\3\b\5\b\u00ec\n\b\3\b\5\b\u00ef\n\b\3\b\3\b")
        buf.write("\3\b\5\b\u00f4\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u0101\n\b\3\b\3\b\5\b\u0105\n\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\5\b\u010c\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\7\b\u011a\n\b\f\b\16\b\u011d\13\b\3")
        buf.write("\b\5\b\u0120\n\b\3\b\5\b\u0123\n\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\5\b\u012a\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\7\b\u013b\n\b\f\b\16\b\u013e\13\b")
        buf.write("\3\b\5\b\u0141\n\b\3\b\5\b\u0144\n\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\5\b\u014b\n\b\3\b\3\b\3\b\3\b\5\b\u0151\n\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u0157\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u015f")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\5\b\u017f\n\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\5\b\u0187\n\b\3\b\3\b\5\b\u018b\n\b\3\b\3\b\3\b\5\b\u0190")
        buf.write("\n\b\3\b\3\b\3\b\3\b\5\b\u0196\n\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u019e\n\b\3\b\3\b\3\b\3\b\5\b\u01a4\n\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01b1\n\b\3")
        buf.write("\b\6\b\u01b4\n\b\r\b\16\b\u01b5\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\5\b\u01bf\n\b\3\b\6\b\u01c2\n\b\r\b\16\b\u01c3")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\5\b\u01d4\n\b\3\b\3\b\3\b\7\b\u01d9\n\b\f\b\16\b\u01dc")
        buf.write("\13\b\3\b\5\b\u01df\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01e7")
        buf.write("\n\b\3\b\3\b\3\b\7\b\u01ec\n\b\f\b\16\b\u01ef\13\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u01f5\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0204\n\b\3\b\3\b\5\b\u0208")
        buf.write("\n\b\3\b\3\b\3\b\3\b\5\b\u020e\n\b\3\b\3\b\3\b\3\b\5\b")
        buf.write("\u0214\n\b\3\b\5\b\u0217\n\b\3\b\5\b\u021a\n\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u0220\n\b\3\b\3\b\5\b\u0224\n\b\3\b\3\b\5")
        buf.write("\b\u0228\n\b\3\b\3\b\3\b\5\b\u022d\n\b\3\b\3\b\5\b\u0231")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0239\n\b\3\b\5\b\u023c")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0245\n\b\3\b\3\b")
        buf.write("\3\b\5\b\u024a\n\b\3\b\3\b\3\b\3\b\5\b\u0250\n\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\5\b\u0257\n\b\3\b\5\b\u025a\n\b\3\b\3\b")
        buf.write("\3\b\3\b\5\b\u0260\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b")
        buf.write("\u0269\n\b\f\b\16\b\u026c\13\b\5\b\u026e\n\b\3\b\3\b\5")
        buf.write("\b\u0272\n\b\3\b\3\b\3\b\5\b\u0277\n\b\3\b\3\b\3\b\5\b")
        buf.write("\u027c\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0283\n\b\3\b\5\b\u0286")
        buf.write("\n\b\3\b\5\b\u0289\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0290\n")
        buf.write("\b\3\b\3\b\3\b\5\b\u0295\n\b\3\b\3\b\3\b\5\b\u029a\n\b")
        buf.write("\3\b\5\b\u029d\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02a6")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02ae\n\b\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u02b4\n\b\3\b\3\b\5\b\u02b8\n\b\3\b\3\b\5\b\u02bc")
        buf.write("\n\b\3\b\3\b\5\b\u02c0\n\b\5\b\u02c2\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\5\b\u02cb\n\b\3\b\3\b\3\b\3\b\5\b\u02d1")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u02d6\n\b\3\b\5\b\u02d9\n\b\3\b\3")
        buf.write("\b\5\b\u02dd\n\b\3\b\5\b\u02e0\n\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\7\b\u02e8\n\b\f\b\16\b\u02eb\13\b\5\b\u02ed\n\b\3")
        buf.write("\b\3\b\5\b\u02f1\n\b\3\b\3\b\3\b\5\b\u02f6\n\b\3\b\5\b")
        buf.write("\u02f9\n\b\3\b\3\b\3\b\3\b\5\b\u02ff\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\5\b\u0307\n\b\3\b\3\b\3\b\5\b\u030c\n\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u0312\n\b\3\b\3\b\3\b\3\b\5\b\u0318\n")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0321\n\b\f\b\16\b")
        buf.write("\u0324\13\b\3\b\3\b\3\b\7\b\u0329\n\b\f\b\16\b\u032c\13")
        buf.write("\b\3\b\3\b\7\b\u0330\n\b\f\b\16\b\u0333\13\b\3\b\3\b\3")
        buf.write("\b\7\b\u0338\n\b\f\b\16\b\u033b\13\b\5\b\u033d\n\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\5\t\u0345\n\t\3\t\3\t\5\t\u0349\n")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\5\t\u0350\n\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\5\t\u03c4\n\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u03cc")
        buf.write("\n\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u03d4\n\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u03dd\n\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u03e9\n\t\3\n\3\n\5\n\u03ed\n\n\3")
        buf.write("\n\5\n\u03f0\n\n\3\n\3\n\3\n\3\n\5\n\u03f6\n\n\3\n\3\n")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0400\n\13\3\13\3")
        buf.write("\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u040c\n\f\3")
        buf.write("\f\3\f\3\f\5\f\u0411\n\f\3\r\3\r\3\r\3\16\5\16\u0417\n")
        buf.write("\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u0423\n\17\5\17\u0425\n\17\3\17\3\17\3\17\5\17\u042a")
        buf.write("\n\17\3\17\3\17\5\17\u042e\n\17\3\17\3\17\3\17\5\17\u0433")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u0438\n\17\3\17\5\17\u043b\n")
        buf.write("\17\3\17\3\17\3\17\5\17\u0440\n\17\3\17\3\17\5\17\u0444")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u0449\n\17\5\17\u044b\n\17\3")
        buf.write("\20\3\20\5\20\u044f\n\20\3\21\3\21\3\21\3\21\3\21\7\21")
        buf.write("\u0456\n\21\f\21\16\21\u0459\13\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\5\22\u0460\n\22\3\23\3\23\3\23\3\23\3\23\5\23\u0467")
        buf.write("\n\23\3\24\3\24\3\24\7\24\u046c\n\24\f\24\16\24\u046f")
        buf.write("\13\24\3\25\3\25\3\25\3\25\7\25\u0475\n\25\f\25\16\25")
        buf.write("\u0478\13\25\3\26\3\26\5\26\u047c\n\26\3\26\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\7\30\u0489\n")
        buf.write("\30\f\30\16\30\u048c\13\30\3\30\3\30\3\31\3\31\5\31\u0492")
        buf.write("\n\31\3\31\5\31\u0495\n\31\3\32\3\32\3\32\7\32\u049a\n")
        buf.write("\32\f\32\16\32\u049d\13\32\3\32\5\32\u04a0\n\32\3\33\3")
        buf.write("\33\3\33\3\33\5\33\u04a6\n\33\3\34\3\34\3\34\3\34\7\34")
        buf.write("\u04ac\n\34\f\34\16\34\u04af\13\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\7\35\u04b7\n\35\f\35\16\35\u04ba\13\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u04c4\n\36\3")
        buf.write("\37\3\37\3\37\3\37\3\37\5\37\u04cb\n\37\3 \3 \3 \3 \5")
        buf.write(" \u04d1\n \3!\3!\3!\3\"\5\"\u04d7\n\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\6\"\u04de\n\"\r\"\16\"\u04df\5\"\u04e2\n\"\3#\3#")
        buf.write("\3#\3#\3#\7#\u04e9\n#\f#\16#\u04ec\13#\5#\u04ee\n#\3#")
        buf.write("\3#\3#\3#\3#\7#\u04f5\n#\f#\16#\u04f8\13#\5#\u04fa\n#")
        buf.write("\3#\3#\3#\3#\3#\7#\u0501\n#\f#\16#\u0504\13#\5#\u0506")
        buf.write("\n#\3#\3#\3#\3#\3#\7#\u050d\n#\f#\16#\u0510\13#\5#\u0512")
        buf.write("\n#\3#\5#\u0515\n#\3#\3#\3#\5#\u051a\n#\5#\u051c\n#\3")
        buf.write("$\5$\u051f\n$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\5%\u052b\n")
        buf.write("%\3%\3%\3%\3%\3%\5%\u0532\n%\3%\3%\3%\3%\3%\5%\u0539\n")
        buf.write("%\3%\7%\u053c\n%\f%\16%\u053f\13%\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\5&\u0549\n&\3\'\3\'\5\'\u054d\n\'\3\'\3\'\5\'\u0551")
        buf.write("\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u055d\n(\3(\5(\u0560")
        buf.write("\n(\3(\3(\5(\u0564\n(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u056e")
        buf.write("\n(\3(\3(\5(\u0572\n(\5(\u0574\n(\3(\5(\u0577\n(\3(\3")
        buf.write("(\5(\u057b\n(\3(\5(\u057e\n(\3(\3(\5(\u0582\n(\3(\3(\7")
        buf.write("(\u0586\n(\f(\16(\u0589\13(\3(\5(\u058c\n(\3(\3(\5(\u0590")
        buf.write("\n(\3(\3(\3(\5(\u0595\n(\3(\5(\u0598\n(\5(\u059a\n(\3")
        buf.write("(\7(\u059d\n(\f(\16(\u05a0\13(\3(\3(\5(\u05a4\n(\3(\5")
        buf.write("(\u05a7\n(\3(\3(\5(\u05ab\n(\3(\5(\u05ae\n(\5(\u05b0\n")
        buf.write("(\3)\3)\3)\5)\u05b5\n)\3)\7)\u05b8\n)\f)\16)\u05bb\13")
        buf.write(")\3)\3)\3*\3*\3*\3*\3*\3*\7*\u05c5\n*\f*\16*\u05c8\13")
        buf.write("*\3*\3*\5*\u05cc\n*\3+\3+\3+\3+\7+\u05d2\n+\f+\16+\u05d5")
        buf.write("\13+\3+\7+\u05d8\n+\f+\16+\u05db\13+\3+\5+\u05de\n+\3")
        buf.write(",\3,\3,\3,\3,\7,\u05e5\n,\f,\16,\u05e8\13,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\7,\u05f4\n,\f,\16,\u05f7\13,\3,\3")
        buf.write(",\5,\u05fb\n,\3,\3,\3,\3,\3,\3,\3,\3,\7,\u0605\n,\f,\16")
        buf.write(",\u0608\13,\3,\3,\5,\u060c\n,\3-\3-\3-\3-\7-\u0612\n-")
        buf.write("\f-\16-\u0615\13-\5-\u0617\n-\3-\3-\5-\u061b\n-\3.\3.")
        buf.write("\3.\3.\3.\3.\3.\3.\3.\3.\7.\u0627\n.\f.\16.\u062a\13.")
        buf.write("\3.\3.\3.\3/\3/\3/\3/\3/\7/\u0634\n/\f/\16/\u0637\13/")
        buf.write("\3/\3/\5/\u063b\n/\3\60\3\60\5\60\u063f\n\60\3\60\5\60")
        buf.write("\u0642\n\60\3\61\3\61\3\61\5\61\u0647\n\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\7\61\u064e\n\61\f\61\16\61\u0651\13\61\5")
        buf.write("\61\u0653\n\61\3\61\3\61\3\61\5\61\u0658\n\61\3\61\3\61")
        buf.write("\3\61\7\61\u065d\n\61\f\61\16\61\u0660\13\61\5\61\u0662")
        buf.write("\n\61\3\62\3\62\3\63\3\63\7\63\u0668\n\63\f\63\16\63\u066b")
        buf.write("\13\63\3\64\3\64\3\64\3\64\5\64\u0671\n\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u0678\n\64\3\65\5\65\u067b\n\65\3\65")
        buf.write("\3\65\3\65\5\65\u0680\n\65\3\65\3\65\3\65\3\65\5\65\u0686")
        buf.write("\n\65\3\65\3\65\5\65\u068a\n\65\3\65\5\65\u068d\n\65\3")
        buf.write("\65\5\65\u0690\n\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\7\66\u0699\n\66\f\66\16\66\u069c\13\66\3\66\3\66\5\66")
        buf.write("\u06a0\n\66\3\67\3\67\3\67\5\67\u06a5\n\67\3\67\3\67\3")
        buf.write("8\58\u06aa\n8\38\38\38\38\38\38\38\38\38\38\38\38\38\3")
        buf.write("8\38\38\58\u06bc\n8\58\u06be\n8\38\58\u06c1\n8\39\39\3")
        buf.write("9\39\3:\3:\3:\7:\u06ca\n:\f:\16:\u06cd\13:\3;\3;\3;\3")
        buf.write(";\7;\u06d3\n;\f;\16;\u06d6\13;\3;\3;\3<\3<\5<\u06dc\n")
        buf.write("<\3=\3=\3=\3=\7=\u06e2\n=\f=\16=\u06e5\13=\3=\3=\3>\3")
        buf.write(">\3>\5>\u06ec\n>\3?\3?\5?\u06f0\n?\3?\3?\3?\3?\3?\3?\5")
        buf.write("?\u06f8\n?\3?\3?\3?\3?\3?\3?\5?\u0700\n?\3?\3?\3?\3?\5")
        buf.write("?\u0706\n?\3@\3@\3@\3@\7@\u070c\n@\f@\16@\u070f\13@\3")
        buf.write("@\3@\3A\3A\3A\3A\3A\7A\u0718\nA\fA\16A\u071b\13A\5A\u071d")
        buf.write("\nA\3A\3A\3A\3B\5B\u0723\nB\3B\3B\5B\u0727\nB\5B\u0729")
        buf.write("\nB\3C\3C\3C\3C\3C\3C\3C\5C\u0732\nC\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\5C\u073e\nC\5C\u0740\nC\3C\3C\3C\3C\3C\5")
        buf.write("C\u0747\nC\3C\3C\3C\3C\3C\5C\u074e\nC\3C\3C\3C\3C\5C\u0754")
        buf.write("\nC\3C\3C\3C\3C\5C\u075a\nC\5C\u075c\nC\3D\3D\3D\5D\u0761")
        buf.write("\nD\3D\3D\3E\3E\3E\5E\u0768\nE\3E\3E\3F\3F\5F\u076e\n")
        buf.write("F\3F\3F\5F\u0772\nF\5F\u0774\nF\3G\3G\3G\7G\u0779\nG\f")
        buf.write("G\16G\u077c\13G\3H\3H\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5")
        buf.write("I\u078a\nI\5I\u078c\nI\3I\3I\3I\3I\3I\3I\7I\u0794\nI\f")
        buf.write("I\16I\u0797\13I\3J\5J\u079a\nJ\3J\3J\3J\3J\3J\3J\5J\u07a2")
        buf.write("\nJ\3J\3J\3J\3J\3J\7J\u07a9\nJ\fJ\16J\u07ac\13J\3J\3J")
        buf.write("\3J\5J\u07b1\nJ\3J\3J\3J\3J\3J\3J\5J\u07b9\nJ\3J\3J\3")
        buf.write("J\3J\5J\u07bf\nJ\3J\3J\3J\5J\u07c4\nJ\3J\3J\3J\5J\u07c9")
        buf.write("\nJ\3K\3K\3K\3K\5K\u07cf\nK\3K\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\7K\u07e4\nK\fK\16K\u07e7")
        buf.write("\13K\3L\3L\3L\6L\u07ec\nL\rL\16L\u07ed\3L\3L\5L\u07f2")
        buf.write("\nL\3L\3L\3L\3L\3L\6L\u07f9\nL\rL\16L\u07fa\3L\3L\5L\u07ff")
        buf.write("\nL\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\7L\u080f")
        buf.write("\nL\fL\16L\u0812\13L\5L\u0814\nL\3L\3L\3L\3L\3L\3L\5L")
        buf.write("\u081c\nL\3L\3L\3L\3L\3L\3L\3L\5L\u0825\nL\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\6L\u083a")
        buf.write("\nL\rL\16L\u083b\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0847\n")
        buf.write("L\3L\3L\3L\7L\u084c\nL\fL\16L\u084f\13L\5L\u0851\nL\3")
        buf.write("L\3L\3L\5L\u0856\nL\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\6L\u0867\nL\rL\16L\u0868\3L\3L\3L\3L\3L\3L")
        buf.write("\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u087a\nL\3L\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\7L\u0884\nL\fL\16L\u0887\13L\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\6M\u0891\nM\rM\16M\u0892\5M\u0895\nM\3N\3N")
        buf.write("\3O\3O\3P\3P\3Q\3Q\3R\3R\7R\u08a1\nR\fR\16R\u08a4\13R")
        buf.write("\3S\3S\3S\3S\5S\u08aa\nS\3T\5T\u08ad\nT\3T\3T\5T\u08b1")
        buf.write("\nT\3U\3U\3U\5U\u08b6\nU\3V\3V\3V\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\5V\u08c7\nV\3V\3V\5V\u08cb\nV\3V\3V\3")
        buf.write("V\3V\3V\7V\u08d2\nV\fV\16V\u08d5\13V\3V\5V\u08d8\nV\5")
        buf.write("V\u08da\nV\3W\3W\3W\7W\u08df\nW\fW\16W\u08e2\13W\3X\3")
        buf.write("X\3X\3X\5X\u08e8\nX\3Y\3Y\3Y\7Y\u08ed\nY\fY\16Y\u08f0")
        buf.write("\13Y\3Z\3Z\3Z\3Z\3Z\5Z\u08f7\nZ\3[\3[\3[\3[\3[\3\\\3\\")
        buf.write("\3\\\3\\\7\\\u0902\n\\\f\\\16\\\u0905\13\\\3]\3]\3]\3")
        buf.write("]\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\7^\u0916\n^\f^\16^")
        buf.write("\u0919\13^\3^\3^\3^\3^\3^\7^\u0920\n^\f^\16^\u0923\13")
        buf.write("^\5^\u0925\n^\3^\3^\3^\3^\3^\7^\u092c\n^\f^\16^\u092f")
        buf.write("\13^\5^\u0931\n^\5^\u0933\n^\3^\5^\u0936\n^\3^\5^\u0939")
        buf.write("\n^\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\5")
        buf.write("_\u094b\n_\3`\3`\3`\3`\3`\3`\3`\5`\u0954\n`\3a\3a\3a\7")
        buf.write("a\u0959\na\fa\16a\u095c\13a\3b\3b\3b\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\5b\u096d\nb\3c\3c\3c\5c\u0972\nc\3")
        buf.write("d\3d\3e\5e\u0977\ne\3e\3e\5e\u097b\ne\3e\3e\5e\u097f\n")
        buf.write("e\3e\3e\5e\u0983\ne\3e\3e\5e\u0987\ne\3e\3e\5e\u098b\n")
        buf.write("e\3e\3e\5e\u098f\ne\3e\5e\u0992\ne\3f\3f\3f\7\u02e9\u0322")
        buf.write("\u032a\u0331\u0339\6H\u0090\u0094\u0096g\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\2\35\3\2\u00ca")
        buf.write("\u00cb\4\2RRTT\5\2\\^\u00b0\u00b0\u00b6\u00b6\4\2\16\16")
        buf.write("!!\4\2..YY\4\2\u00b0\u00b0\u00b6\u00b6\4\2\17\17\u00d7")
        buf.write("\u00d7\3\2hk\3\2hj\3\2-.\4\2KKMM\4\2\21\21\23\23\3\2\u00f6")
        buf.write("\u00f7\3\2&\'\4\2\u008c\u008d\u0092\u0092\3\2\u008e\u0091")
        buf.write("\4\2\u008c\u008d\u0095\u0095\3\2~\u0080\3\2\u0084\u008b")
        buf.write("\3\2\u008c\u0096\3\2\37\"\3\2*+\3\2\u008c\u008d\4\2DD")
        buf.write("\u009d\u009d\4\2\33\33\u009b\u009b\3\2HI\n\2\r\6588@g")
        buf.write("l\u0083\u0091\u0091\u0097\u00a0\u00a2\u00ee\u00f0\u00f1")
        buf.write("\2\u0b30\2\u00cc\3\2\2\2\4\u00cf\3\2\2\2\6\u00d2\3\2\2")
        buf.write("\2\b\u00d5\3\2\2\2\n\u00d8\3\2\2\2\f\u00db\3\2\2\2\16")
        buf.write("\u033c\3\2\2\2\20\u03e8\3\2\2\2\22\u03ea\3\2\2\2\24\u03f9")
        buf.write("\3\2\2\2\26\u0405\3\2\2\2\30\u0412\3\2\2\2\32\u0416\3")
        buf.write("\2\2\2\34\u044a\3\2\2\2\36\u044c\3\2\2\2 \u0450\3\2\2")
        buf.write("\2\"\u045c\3\2\2\2$\u0466\3\2\2\2&\u0468\3\2\2\2(\u0470")
        buf.write("\3\2\2\2*\u0479\3\2\2\2,\u0481\3\2\2\2.\u0484\3\2\2\2")
        buf.write("\60\u048f\3\2\2\2\62\u049f\3\2\2\2\64\u04a5\3\2\2\2\66")
        buf.write("\u04a7\3\2\2\28\u04b2\3\2\2\2:\u04c3\3\2\2\2<\u04ca\3")
        buf.write("\2\2\2>\u04cc\3\2\2\2@\u04d2\3\2\2\2B\u04e1\3\2\2\2D\u04ed")
        buf.write("\3\2\2\2F\u051e\3\2\2\2H\u0523\3\2\2\2J\u0548\3\2\2\2")
        buf.write("L\u054a\3\2\2\2N\u05af\3\2\2\2P\u05b1\3\2\2\2R\u05cb\3")
        buf.write("\2\2\2T\u05cd\3\2\2\2V\u060b\3\2\2\2X\u061a\3\2\2\2Z\u061c")
        buf.write("\3\2\2\2\\\u063a\3\2\2\2^\u063c\3\2\2\2`\u0643\3\2\2\2")
        buf.write("b\u0663\3\2\2\2d\u0665\3\2\2\2f\u0677\3\2\2\2h\u068f\3")
        buf.write("\2\2\2j\u069f\3\2\2\2l\u06a1\3\2\2\2n\u06c0\3\2\2\2p\u06c2")
        buf.write("\3\2\2\2r\u06c6\3\2\2\2t\u06ce\3\2\2\2v\u06d9\3\2\2\2")
        buf.write("x\u06dd\3\2\2\2z\u06e8\3\2\2\2|\u0705\3\2\2\2~\u0707\3")
        buf.write("\2\2\2\u0080\u0712\3\2\2\2\u0082\u0728\3\2\2\2\u0084\u075b")
        buf.write("\3\2\2\2\u0086\u0760\3\2\2\2\u0088\u0767\3\2\2\2\u008a")
        buf.write("\u076b\3\2\2\2\u008c\u0775\3\2\2\2\u008e\u077d\3\2\2\2")
        buf.write("\u0090\u078b\3\2\2\2\u0092\u07c8\3\2\2\2\u0094\u07ce\3")
        buf.write("\2\2\2\u0096\u0879\3\2\2\2\u0098\u0894\3\2\2\2\u009a\u0896")
        buf.write("\3\2\2\2\u009c\u0898\3\2\2\2\u009e\u089a\3\2\2\2\u00a0")
        buf.write("\u089c\3\2\2\2\u00a2\u089e\3\2\2\2\u00a4\u08a5\3\2\2\2")
        buf.write("\u00a6\u08b0\3\2\2\2\u00a8\u08b5\3\2\2\2\u00aa\u08d9\3")
        buf.write("\2\2\2\u00ac\u08db\3\2\2\2\u00ae\u08e3\3\2\2\2\u00b0\u08e9")
        buf.write("\3\2\2\2\u00b2\u08f1\3\2\2\2\u00b4\u08f8\3\2\2\2\u00b6")
        buf.write("\u08fd\3\2\2\2\u00b8\u0906\3\2\2\2\u00ba\u0938\3\2\2\2")
        buf.write("\u00bc\u094a\3\2\2\2\u00be\u0953\3\2\2\2\u00c0\u0955\3")
        buf.write("\2\2\2\u00c2\u096c\3\2\2\2\u00c4\u0971\3\2\2\2\u00c6\u0973")
        buf.write("\3\2\2\2\u00c8\u0991\3\2\2\2\u00ca\u0993\3\2\2\2\u00cc")
        buf.write("\u00cd\5\16\b\2\u00cd\u00ce\7\2\2\3\u00ce\3\3\2\2\2\u00cf")
        buf.write("\u00d0\5\u008aF\2\u00d0\u00d1\7\2\2\3\u00d1\5\3\2\2\2")
        buf.write("\u00d2\u00d3\5\u0086D\2\u00d3\u00d4\7\2\2\3\u00d4\7\3")
        buf.write("\2\2\2\u00d5\u00d6\5\u0088E\2\u00d6\u00d7\7\2\2\3\u00d7")
        buf.write("\t\3\2\2\2\u00d8\u00d9\5\u00aaV\2\u00d9\u00da\7\2\2\3")
        buf.write("\u00da\13\3\2\2\2\u00db\u00dc\5\u00acW\2\u00dc\u00dd\7")
        buf.write("\2\2\3\u00dd\r\3\2\2\2\u00de\u033d\5\32\16\2\u00df\u00e0")
        buf.write("\7d\2\2\u00e0\u033d\5\u00c2b\2\u00e1\u00e2\7Q\2\2\u00e2")
        buf.write("\u00e6\7\u00d1\2\2\u00e3\u00e4\7\u0081\2\2\u00e4\u00e5")
        buf.write("\7\"\2\2\u00e5\u00e7\7$\2\2\u00e6\u00e3\3\2\2\2\u00e6")
        buf.write("\u00e7\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00eb\5\u00c2")
        buf.write("b\2\u00e9\u00ea\7t\2\2\u00ea\u00ec\7\u00f2\2\2\u00eb\u00e9")
        buf.write("\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ee\3\2\2\2\u00ed")
        buf.write("\u00ef\5\30\r\2\u00ee\u00ed\3\2\2\2\u00ee\u00ef\3\2\2")
        buf.write("\2\u00ef\u00f3\3\2\2\2\u00f0\u00f1\7O\2\2\u00f1\u00f2")
        buf.write("\7\u00bc\2\2\u00f2\u00f4\5.\30\2\u00f3\u00f0\3\2\2\2\u00f3")
        buf.write("\u00f4\3\2\2\2\u00f4\u033d\3\2\2\2\u00f5\u00f6\7o\2\2")
        buf.write("\u00f6\u00f7\7\u00d1\2\2\u00f7\u00f8\5\u00c2b\2\u00f8")
        buf.write("\u00f9\7u\2\2\u00f9\u00fa\7\u00bc\2\2\u00fa\u00fb\5.\30")
        buf.write("\2\u00fb\u033d\3\2\2\2\u00fc\u00fd\7g\2\2\u00fd\u0100")
        buf.write("\7\u00d1\2\2\u00fe\u00ff\7\u0081\2\2\u00ff\u0101\7$\2")
        buf.write("\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102")
        buf.write("\3\2\2\2\u0102\u0104\5\u00c2b\2\u0103\u0105\t\2\2\2\u0104")
        buf.write("\u0103\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u033d\3\2\2\2")
        buf.write("\u0106\u010b\5\22\n\2\u0107\u0108\7\3\2\2\u0108\u0109")
        buf.write("\5\u00acW\2\u0109\u010a\7\4\2\2\u010a\u010c\3\2\2\2\u010b")
        buf.write("\u0107\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010d\3\2\2\2")
        buf.write("\u010d\u011b\5,\27\2\u010e\u010f\7\u00b9\2\2\u010f\u011a")
        buf.write("\5.\30\2\u0110\u0111\7\u00d9\2\2\u0111\u0112\7\26\2\2")
        buf.write("\u0112\u011a\5p9\2\u0113\u011a\5\24\13\2\u0114\u011a\5")
        buf.write("\30\r\2\u0115\u0116\7t\2\2\u0116\u011a\7\u00f2\2\2\u0117")
        buf.write("\u0118\7\u00bb\2\2\u0118\u011a\5.\30\2\u0119\u010e\3\2")
        buf.write("\2\2\u0119\u0110\3\2\2\2\u0119\u0113\3\2\2\2\u0119\u0114")
        buf.write("\3\2\2\2\u0119\u0115\3\2\2\2\u0119\u0117\3\2\2\2\u011a")
        buf.write("\u011d\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2")
        buf.write("\u011c\u0122\3\2\2\2\u011d\u011b\3\2\2\2\u011e\u0120\7")
        buf.write("\20\2\2\u011f\u011e\3\2\2\2\u011f\u0120\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121\u0123\5\32\16\2\u0122\u011f\3\2\2")
        buf.write("\2\u0122\u0123\3\2\2\2\u0123\u033d\3\2\2\2\u0124\u0129")
        buf.write("\5\22\n\2\u0125\u0126\7\3\2\2\u0126\u0127\5\u00acW\2\u0127")
        buf.write("\u0128\7\4\2\2\u0128\u012a\3\2\2\2\u0129\u0125\3\2\2\2")
        buf.write("\u0129\u012a\3\2\2\2\u012a\u013c\3\2\2\2\u012b\u012c\7")
        buf.write("t\2\2\u012c\u013b\7\u00f2\2\2\u012d\u012e\7\u00d9\2\2")
        buf.write("\u012e\u012f\7\26\2\2\u012f\u0130\7\3\2\2\u0130\u0131")
        buf.write("\5\u00acW\2\u0131\u0132\7\4\2\2\u0132\u013b\3\2\2\2\u0133")
        buf.write("\u013b\5\24\13\2\u0134\u013b\5\26\f\2\u0135\u013b\5\u0084")
        buf.write("C\2\u0136\u013b\5:\36\2\u0137\u013b\5\30\r\2\u0138\u0139")
        buf.write("\7\u00bb\2\2\u0139\u013b\5.\30\2\u013a\u012b\3\2\2\2\u013a")
        buf.write("\u012d\3\2\2\2\u013a\u0133\3\2\2\2\u013a\u0134\3\2\2\2")
        buf.write("\u013a\u0135\3\2\2\2\u013a\u0136\3\2\2\2\u013a\u0137\3")
        buf.write("\2\2\2\u013a\u0138\3\2\2\2\u013b\u013e\3\2\2\2\u013c\u013a")
        buf.write("\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u0143\3\2\2\2\u013e")
        buf.write("\u013c\3\2\2\2\u013f\u0141\7\20\2\2\u0140\u013f\3\2\2")
        buf.write("\2\u0140\u0141\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0144")
        buf.write("\5\32\16\2\u0143\u0140\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u033d\3\2\2\2\u0145\u0146\7Q\2\2\u0146\u014a\7R\2\2\u0147")
        buf.write("\u0148\7\u0081\2\2\u0148\u0149\7\"\2\2\u0149\u014b\7$")
        buf.write("\2\2\u014a\u0147\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c")
        buf.write("\3\2\2\2\u014c\u014d\5\u0086D\2\u014d\u014e\7&\2\2\u014e")
        buf.write("\u0150\5\u0086D\2\u014f\u0151\5\30\r\2\u0150\u014f\3\2")
        buf.write("\2\2\u0150\u0151\3\2\2\2\u0151\u033d\3\2\2\2\u0152\u0153")
        buf.write("\7\u00d5\2\2\u0153\u0154\7R\2\2\u0154\u0156\5\u0086D\2")
        buf.write("\u0155\u0157\5 \21\2\u0156\u0155\3\2\2\2\u0156\u0157\3")
        buf.write("\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159\7\u00d6\2\2\u0159")
        buf.write("\u015e\7\u00d8\2\2\u015a\u015f\5\u00c2b\2\u015b\u015c")
        buf.write("\7/\2\2\u015c\u015d\7b\2\2\u015d\u015f\5r:\2\u015e\u015a")
        buf.write("\3\2\2\2\u015e\u015b\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("\u033d\3\2\2\2\u0160\u0161\7o\2\2\u0161\u0162\7R\2\2\u0162")
        buf.write("\u0163\5\u0086D\2\u0163\u0164\7\17\2\2\u0164\u0165\7b")
        buf.write("\2\2\u0165\u0166\7\3\2\2\u0166\u0167\5\u00acW\2\u0167")
        buf.write("\u0168\7\4\2\2\u0168\u033d\3\2\2\2\u0169\u016a\7o\2\2")
        buf.write("\u016a\u016b\t\3\2\2\u016b\u016c\5\u0086D\2\u016c\u016d")
        buf.write("\7p\2\2\u016d\u016e\7l\2\2\u016e\u016f\5\u0086D\2\u016f")
        buf.write("\u033d\3\2\2\2\u0170\u0171\7o\2\2\u0171\u0172\t\3\2\2")
        buf.write("\u0172\u0173\5\u0086D\2\u0173\u0174\7u\2\2\u0174\u0175")
        buf.write("\7\u00bb\2\2\u0175\u0176\5.\30\2\u0176\u033d\3\2\2\2\u0177")
        buf.write("\u0178\7o\2\2\u0178\u0179\t\3\2\2\u0179\u017a\5\u0086")
        buf.write("D\2\u017a\u017b\7\u00ba\2\2\u017b\u017e\7\u00bb\2\2\u017c")
        buf.write("\u017d\7\u0081\2\2\u017d\u017f\7$\2\2\u017e\u017c\3\2")
        buf.write("\2\2\u017e\u017f\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181")
        buf.write("\5.\30\2\u0181\u033d\3\2\2\2\u0182\u0183\7o\2\2\u0183")
        buf.write("\u0184\7R\2\2\u0184\u0186\5\u0086D\2\u0185\u0187\5 \21")
        buf.write("\2\u0186\u0185\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u0188")
        buf.write("\3\2\2\2\u0188\u018a\7\u00c9\2\2\u0189\u018b\7c\2\2\u018a")
        buf.write("\u0189\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\3\2\2\2")
        buf.write("\u018c\u018d\5\u00c2b\2\u018d\u018f\5\u00aeX\2\u018e\u0190")
        buf.write("\5\u00a8U\2\u018f\u018e\3\2\2\2\u018f\u0190\3\2\2\2\u0190")
        buf.write("\u033d\3\2\2\2\u0191\u0192\7o\2\2\u0192\u0193\7R\2\2\u0193")
        buf.write("\u0195\5\u0086D\2\u0194\u0196\5 \21\2\u0195\u0194\3\2")
        buf.write("\2\2\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198")
        buf.write("\7u\2\2\u0198\u0199\7\u00a2\2\2\u0199\u019d\7\u00f2\2")
        buf.write("\2\u019a\u019b\7O\2\2\u019b\u019c\7\u00a3\2\2\u019c\u019e")
        buf.write("\5.\30\2\u019d\u019a\3\2\2\2\u019d\u019e\3\2\2\2\u019e")
        buf.write("\u033d\3\2\2\2\u019f\u01a0\7o\2\2\u01a0\u01a1\7R\2\2\u01a1")
        buf.write("\u01a3\5\u0086D\2\u01a2\u01a4\5 \21\2\u01a3\u01a2\3\2")
        buf.write("\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6")
        buf.write("\7u\2\2\u01a6\u01a7\7\u00a3\2\2\u01a7\u01a8\5.\30\2\u01a8")
        buf.write("\u033d\3\2\2\2\u01a9\u01aa\7o\2\2\u01aa\u01ab\7R\2\2\u01ab")
        buf.write("\u01ac\5\u0086D\2\u01ac\u01b0\7\17\2\2\u01ad\u01ae\7\u0081")
        buf.write("\2\2\u01ae\u01af\7\"\2\2\u01af\u01b1\7$\2\2\u01b0\u01ad")
        buf.write("\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2")
        buf.write("\u01b4\5\36\20\2\u01b3\u01b2\3\2\2\2\u01b4\u01b5\3\2\2")
        buf.write("\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u033d")
        buf.write("\3\2\2\2\u01b7\u01b8\7o\2\2\u01b8\u01b9\7T\2\2\u01b9\u01ba")
        buf.write("\5\u0086D\2\u01ba\u01be\7\17\2\2\u01bb\u01bc\7\u0081\2")
        buf.write("\2\u01bc\u01bd\7\"\2\2\u01bd\u01bf\7$\2\2\u01be\u01bb")
        buf.write("\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c1\3\2\2\2\u01c0")
        buf.write("\u01c2\5 \21\2\u01c1\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2")
        buf.write("\u01c3\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u033d\3")
        buf.write("\2\2\2\u01c5\u01c6\7o\2\2\u01c6\u01c7\7R\2\2\u01c7\u01c8")
        buf.write("\5\u0086D\2\u01c8\u01c9\5 \21\2\u01c9\u01ca\7p\2\2\u01ca")
        buf.write("\u01cb\7l\2\2\u01cb\u01cc\5 \21\2\u01cc\u033d\3\2\2\2")
        buf.write("\u01cd\u01ce\7o\2\2\u01ce\u01cf\7R\2\2\u01cf\u01d0\5\u0086")
        buf.write("D\2\u01d0\u01d3\7g\2\2\u01d1\u01d2\7\u0081\2\2\u01d2\u01d4")
        buf.write("\7$\2\2\u01d3\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4")
        buf.write("\u01d5\3\2\2\2\u01d5\u01da\5 \21\2\u01d6\u01d7\7\5\2\2")
        buf.write("\u01d7\u01d9\5 \21\2\u01d8\u01d6\3\2\2\2\u01d9\u01dc\3")
        buf.write("\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01de")
        buf.write("\3\2\2\2\u01dc\u01da\3\2\2\2\u01dd\u01df\7\u00ce\2\2\u01de")
        buf.write("\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u033d\3\2\2\2")
        buf.write("\u01e0\u01e1\7o\2\2\u01e1\u01e2\7T\2\2\u01e2\u01e3\5\u0086")
        buf.write("D\2\u01e3\u01e6\7g\2\2\u01e4\u01e5\7\u0081\2\2\u01e5\u01e7")
        buf.write("\7$\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write("\u01e8\3\2\2\2\u01e8\u01ed\5 \21\2\u01e9\u01ea\7\5\2\2")
        buf.write("\u01ea\u01ec\5 \21\2\u01eb\u01e9\3\2\2\2\u01ec\u01ef\3")
        buf.write("\2\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u033d")
        buf.write("\3\2\2\2\u01ef\u01ed\3\2\2\2\u01f0\u01f1\7o\2\2\u01f1")
        buf.write("\u01f2\7R\2\2\u01f2\u01f4\5\u0086D\2\u01f3\u01f5\5 \21")
        buf.write("\2\u01f4\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6")
        buf.write("\3\2\2\2\u01f6\u01f7\7u\2\2\u01f7\u01f8\5\30\r\2\u01f8")
        buf.write("\u033d\3\2\2\2\u01f9\u01fa\7o\2\2\u01fa\u01fb\7R\2\2\u01fb")
        buf.write("\u01fc\5\u0086D\2\u01fc\u01fd\7\u00e2\2\2\u01fd\u01fe")
        buf.write("\7e\2\2\u01fe\u033d\3\2\2\2\u01ff\u0200\7g\2\2\u0200\u0203")
        buf.write("\7R\2\2\u0201\u0202\7\u0081\2\2\u0202\u0204\7$\2\2\u0203")
        buf.write("\u0201\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0205\3\2\2\2")
        buf.write("\u0205\u0207\5\u0086D\2\u0206\u0208\7\u00ce\2\2\u0207")
        buf.write("\u0206\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u033d\3\2\2\2")
        buf.write("\u0209\u020a\7g\2\2\u020a\u020d\7T\2\2\u020b\u020c\7\u0081")
        buf.write("\2\2\u020c\u020e\7$\2\2\u020d\u020b\3\2\2\2\u020d\u020e")
        buf.write("\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u033d\5\u0086D\2\u0210")
        buf.write("\u0213\7Q\2\2\u0211\u0212\7\37\2\2\u0212\u0214\7U\2\2")
        buf.write("\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0219\3")
        buf.write("\2\2\2\u0215\u0217\7\u00b7\2\2\u0216\u0215\3\2\2\2\u0216")
        buf.write("\u0217\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u021a\7\u00b8")
        buf.write("\2\2\u0219\u0216\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b")
        buf.write("\3\2\2\2\u021b\u021f\7T\2\2\u021c\u021d\7\u0081\2\2\u021d")
        buf.write("\u021e\7\"\2\2\u021e\u0220\7$\2\2\u021f\u021c\3\2\2\2")
        buf.write("\u021f\u0220\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0223\5")
        buf.write("\u0086D\2\u0222\u0224\5x=\2\u0223\u0222\3\2\2\2\u0223")
        buf.write("\u0224\3\2\2\2\u0224\u0227\3\2\2\2\u0225\u0226\7t\2\2")
        buf.write("\u0226\u0228\7\u00f2\2\2\u0227\u0225\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\u022c\3\2\2\2\u0229\u022a\7\u00d9\2\2\u022a")
        buf.write("\u022b\7?\2\2\u022b\u022d\5p9\2\u022c\u0229\3\2\2\2\u022c")
        buf.write("\u022d\3\2\2\2\u022d\u0230\3\2\2\2\u022e\u022f\7\u00bb")
        buf.write("\2\2\u022f\u0231\5.\30\2\u0230\u022e\3\2\2\2\u0230\u0231")
        buf.write("\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233\7\20\2\2\u0233")
        buf.write("\u0234\5\32\16\2\u0234\u033d\3\2\2\2\u0235\u0238\7Q\2")
        buf.write("\2\u0236\u0237\7\37\2\2\u0237\u0239\7U\2\2\u0238\u0236")
        buf.write("\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023b\3\2\2\2\u023a")
        buf.write("\u023c\7\u00b7\2\2\u023b\u023a\3\2\2\2\u023b\u023c\3\2")
        buf.write("\2\2\u023c\u023d\3\2\2\2\u023d\u023e\7\u00b8\2\2\u023e")
        buf.write("\u023f\7T\2\2\u023f\u0244\5\u0086D\2\u0240\u0241\7\3\2")
        buf.write("\2\u0241\u0242\5\u00acW\2\u0242\u0243\7\4\2\2\u0243\u0245")
        buf.write("\3\2\2\2\u0244\u0240\3\2\2\2\u0244\u0245\3\2\2\2\u0245")
        buf.write("\u0246\3\2\2\2\u0246\u0249\5,\27\2\u0247\u0248\7\u00b9")
        buf.write("\2\2\u0248\u024a\5.\30\2\u0249\u0247\3\2\2\2\u0249\u024a")
        buf.write("\3\2\2\2\u024a\u033d\3\2\2\2\u024b\u024c\7o\2\2\u024c")
        buf.write("\u024d\7T\2\2\u024d\u024f\5\u0086D\2\u024e\u0250\7\20")
        buf.write("\2\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0251")
        buf.write("\3\2\2\2\u0251\u0252\5\32\16\2\u0252\u033d\3\2\2\2\u0253")
        buf.write("\u0256\7Q\2\2\u0254\u0255\7\37\2\2\u0255\u0257\7U\2\2")
        buf.write("\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0259\3")
        buf.write("\2\2\2\u0258\u025a\7\u00b8\2\2\u0259\u0258\3\2\2\2\u0259")
        buf.write("\u025a\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025f\7\u00af")
        buf.write("\2\2\u025c\u025d\7\u0081\2\2\u025d\u025e\7\"\2\2\u025e")
        buf.write("\u0260\7$\2\2\u025f\u025c\3\2\2\2\u025f\u0260\3\2\2\2")
        buf.write("\u0260\u0261\3\2\2\2\u0261\u0262\5\u00c0a\2\u0262\u0263")
        buf.write("\7\20\2\2\u0263\u026d\7\u00f2\2\2\u0264\u0265\7\u00a1")
        buf.write("\2\2\u0265\u026a\5@!\2\u0266\u0267\7\5\2\2\u0267\u0269")
        buf.write("\5@!\2\u0268\u0266\3\2\2\2\u0269\u026c\3\2\2\2\u026a\u0268")
        buf.write("\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026e\3\2\2\2\u026c")
        buf.write("\u026a\3\2\2\2\u026d\u0264\3\2\2\2\u026d\u026e\3\2\2\2")
        buf.write("\u026e\u033d\3\2\2\2\u026f\u0271\7g\2\2\u0270\u0272\7")
        buf.write("\u00b8\2\2\u0271\u0270\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write("\u0273\3\2\2\2\u0273\u0276\7\u00af\2\2\u0274\u0275\7\u0081")
        buf.write("\2\2\u0275\u0277\7$\2\2\u0276\u0274\3\2\2\2\u0276\u0277")
        buf.write("\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u033d\5\u00c0a\2\u0279")
        buf.write("\u027b\7Z\2\2\u027a\u027c\t\4\2\2\u027b\u027a\3\2\2\2")
        buf.write("\u027b\u027c\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u033d\5")
        buf.write("\16\b\2\u027e\u027f\7`\2\2\u027f\u0282\7a\2\2\u0280\u0281")
        buf.write("\t\5\2\2\u0281\u0283\5\u00c2b\2\u0282\u0280\3\2\2\2\u0282")
        buf.write("\u0283\3\2\2\2\u0283\u0288\3\2\2\2\u0284\u0286\7&\2\2")
        buf.write("\u0285\u0284\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0287\3")
        buf.write("\2\2\2\u0287\u0289\7\u00f2\2\2\u0288\u0285\3\2\2\2\u0288")
        buf.write("\u0289\3\2\2\2\u0289\u033d\3\2\2\2\u028a\u028b\7`\2\2")
        buf.write("\u028b\u028c\7R\2\2\u028c\u028f\7\u00b0\2\2\u028d\u028e")
        buf.write("\t\5\2\2\u028e\u0290\5\u00c2b\2\u028f\u028d\3\2\2\2\u028f")
        buf.write("\u0290\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\7&\2\2")
        buf.write("\u0292\u0294\7\u00f2\2\2\u0293\u0295\5 \21\2\u0294\u0293")
        buf.write("\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u033d\3\2\2\2\u0296")
        buf.write("\u0297\7`\2\2\u0297\u029c\7\u00d2\2\2\u0298\u029a\7&\2")
        buf.write("\2\u0299\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b")
        buf.write("\3\2\2\2\u029b\u029d\7\u00f2\2\2\u029c\u0299\3\2\2\2\u029c")
        buf.write("\u029d\3\2\2\2\u029d\u033d\3\2\2\2\u029e\u029f\7`\2\2")
        buf.write("\u029f\u02a0\7\u00bb\2\2\u02a0\u02a5\5\u0086D\2\u02a1")
        buf.write("\u02a2\7\3\2\2\u02a2\u02a3\5\62\32\2\u02a3\u02a4\7\4\2")
        buf.write("\2\u02a4\u02a6\3\2\2\2\u02a5\u02a1\3\2\2\2\u02a5\u02a6")
        buf.write("\3\2\2\2\u02a6\u033d\3\2\2\2\u02a7\u02a8\7`\2\2\u02a8")
        buf.write("\u02a9\7b\2\2\u02a9\u02aa\t\5\2\2\u02aa\u02ad\5\u0086")
        buf.write("D\2\u02ab\u02ac\t\5\2\2\u02ac\u02ae\5\u00c2b\2\u02ad\u02ab")
        buf.write("\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u033d\3\2\2\2\u02af")
        buf.write("\u02b0\7`\2\2\u02b0\u02b1\7e\2\2\u02b1\u02b3\5\u0086D")
        buf.write("\2\u02b2\u02b4\5 \21\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4")
        buf.write("\3\2\2\2\u02b4\u033d\3\2\2\2\u02b5\u02b7\7`\2\2\u02b6")
        buf.write("\u02b8\5\u00c2b\2\u02b7\u02b6\3\2\2\2\u02b7\u02b8\3\2")
        buf.write("\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02c1\7f\2\2\u02ba\u02bc")
        buf.write("\7&\2\2\u02bb\u02ba\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc")
        buf.write("\u02bf\3\2\2\2\u02bd\u02c0\5\u00c0a\2\u02be\u02c0\7\u00f2")
        buf.write("\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02be\3\2\2\2\u02c0\u02c2")
        buf.write("\3\2\2\2\u02c1\u02bb\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2")
        buf.write("\u033d\3\2\2\2\u02c3\u02c4\7`\2\2\u02c4\u02c5\7Q\2\2\u02c5")
        buf.write("\u02c6\7R\2\2\u02c6\u033d\5\u0086D\2\u02c7\u02c8\t\6\2")
        buf.write("\2\u02c8\u02ca\7\u00af\2\2\u02c9\u02cb\7\u00b0\2\2\u02ca")
        buf.write("\u02c9\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2")
        buf.write("\u02cc\u033d\5$\23\2\u02cd\u02ce\t\6\2\2\u02ce\u02d0\7")
        buf.write("\u00d1\2\2\u02cf\u02d1\7\u00b0\2\2\u02d0\u02cf\3\2\2\2")
        buf.write("\u02d0\u02d1\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u033d\5")
        buf.write("\u00c2b\2\u02d3\u02d5\t\6\2\2\u02d4\u02d6\7R\2\2\u02d5")
        buf.write("\u02d4\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8\3\2\2\2")
        buf.write("\u02d7\u02d9\t\7\2\2\u02d8\u02d7\3\2\2\2\u02d8\u02d9\3")
        buf.write("\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02dc\5\u0086D\2\u02db")
        buf.write("\u02dd\5 \21\2\u02dc\u02db\3\2\2\2\u02dc\u02dd\3\2\2\2")
        buf.write("\u02dd\u02df\3\2\2\2\u02de\u02e0\5&\24\2\u02df\u02de\3")
        buf.write("\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u033d\3\2\2\2\u02e1\u02e2")
        buf.write("\7\u00b1\2\2\u02e2\u02e3\7R\2\2\u02e3\u033d\5\u0086D\2")
        buf.write("\u02e4\u02ec\7\u00b1\2\2\u02e5\u02ed\7\u00f2\2\2\u02e6")
        buf.write("\u02e8\13\2\2\2\u02e7\u02e6\3\2\2\2\u02e8\u02eb\3\2\2")
        buf.write("\2\u02e9\u02ea\3\2\2\2\u02e9\u02e7\3\2\2\2\u02ea\u02ed")
        buf.write("\3\2\2\2\u02eb\u02e9\3\2\2\2\u02ec\u02e5\3\2\2\2\u02ec")
        buf.write("\u02e9\3\2\2\2\u02ed\u033d\3\2\2\2\u02ee\u02f0\7\u00b3")
        buf.write("\2\2\u02ef\u02f1\7\u00b5\2\2\u02f0\u02ef\3\2\2\2\u02f0")
        buf.write("\u02f1\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\7R\2\2")
        buf.write("\u02f3\u02f8\5\u0086D\2\u02f4\u02f6\7\20\2\2\u02f5\u02f4")
        buf.write("\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7")
        buf.write("\u02f9\5\32\16\2\u02f8\u02f5\3\2\2\2\u02f8\u02f9\3\2\2")
        buf.write("\2\u02f9\u033d\3\2\2\2\u02fa\u02fb\7\u00b4\2\2\u02fb\u02fe")
        buf.write("\7R\2\2\u02fc\u02fd\7\u0081\2\2\u02fd\u02ff\7$\2\2\u02fe")
        buf.write("\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0300\3\2\2\2")
        buf.write("\u0300\u033d\5\u0086D\2\u0301\u0302\7\u00b2\2\2\u0302")
        buf.write("\u033d\7\u00b3\2\2\u0303\u0304\7\u00e5\2\2\u0304\u0306")
        buf.write("\7w\2\2\u0305\u0307\7\u00f0\2\2\u0306\u0305\3\2\2\2\u0306")
        buf.write("\u0307\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0309\7\u00f1")
        buf.write("\2\2\u0309\u030b\7\u00f2\2\2\u030a\u030c\7\u009e\2\2\u030b")
        buf.write("\u030a\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030d\3\2\2\2")
        buf.write("\u030d\u030e\7X\2\2\u030e\u030f\7R\2\2\u030f\u0311\5\u0086")
        buf.write("D\2\u0310\u0312\5 \21\2\u0311\u0310\3\2\2\2\u0311\u0312")
        buf.write("\3\2\2\2\u0312\u033d\3\2\2\2\u0313\u0314\7\u00d4\2\2\u0314")
        buf.write("\u0315\7R\2\2\u0315\u0317\5\u0086D\2\u0316\u0318\5 \21")
        buf.write("\2\u0317\u0316\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u033d")
        buf.write("\3\2\2\2\u0319\u031a\7\u00e0\2\2\u031a\u031b\7\u00e1\2")
        buf.write("\2\u031b\u031c\7R\2\2\u031c\u033d\5\u0086D\2\u031d\u031e")
        buf.write("\t\b\2\2\u031e\u0322\5\u00c2b\2\u031f\u0321\13\2\2\2\u0320")
        buf.write("\u031f\3\2\2\2\u0321\u0324\3\2\2\2\u0322\u0323\3\2\2\2")
        buf.write("\u0322\u0320\3\2\2\2\u0323\u033d\3\2\2\2\u0324\u0322\3")
        buf.write("\2\2\2\u0325\u0326\7u\2\2\u0326\u032a\7\u00e6\2\2\u0327")
        buf.write("\u0329\13\2\2\2\u0328\u0327\3\2\2\2\u0329\u032c\3\2\2")
        buf.write("\2\u032a\u032b\3\2\2\2\u032a\u0328\3\2\2\2\u032b\u033d")
        buf.write("\3\2\2\2\u032c\u032a\3\2\2\2\u032d\u0331\7u\2\2\u032e")
        buf.write("\u0330\13\2\2\2\u032f\u032e\3\2\2\2\u0330\u0333\3\2\2")
        buf.write("\2\u0331\u0332\3\2\2\2\u0331\u032f\3\2\2\2\u0332\u033d")
        buf.write("\3\2\2\2\u0333\u0331\3\2\2\2\u0334\u033d\7v\2\2\u0335")
        buf.write("\u0339\5\20\t\2\u0336\u0338\13\2\2\2\u0337\u0336\3\2\2")
        buf.write("\2\u0338\u033b\3\2\2\2\u0339\u033a\3\2\2\2\u0339\u0337")
        buf.write("\3\2\2\2\u033a\u033d\3\2\2\2\u033b\u0339\3\2\2\2\u033c")
        buf.write("\u00de\3\2\2\2\u033c\u00df\3\2\2\2\u033c\u00e1\3\2\2\2")
        buf.write("\u033c\u00f5\3\2\2\2\u033c\u00fc\3\2\2\2\u033c\u0106\3")
        buf.write("\2\2\2\u033c\u0124\3\2\2\2\u033c\u0145\3\2\2\2\u033c\u0152")
        buf.write("\3\2\2\2\u033c\u0160\3\2\2\2\u033c\u0169\3\2\2\2\u033c")
        buf.write("\u0170\3\2\2\2\u033c\u0177\3\2\2\2\u033c\u0182\3\2\2\2")
        buf.write("\u033c\u0191\3\2\2\2\u033c\u019f\3\2\2\2\u033c\u01a9\3")
        buf.write("\2\2\2\u033c\u01b7\3\2\2\2\u033c\u01c5\3\2\2\2\u033c\u01cd")
        buf.write("\3\2\2\2\u033c\u01e0\3\2\2\2\u033c\u01f0\3\2\2\2\u033c")
        buf.write("\u01f9\3\2\2\2\u033c\u01ff\3\2\2\2\u033c\u0209\3\2\2\2")
        buf.write("\u033c\u0210\3\2\2\2\u033c\u0235\3\2\2\2\u033c\u024b\3")
        buf.write("\2\2\2\u033c\u0253\3\2\2\2\u033c\u026f\3\2\2\2\u033c\u0279")
        buf.write("\3\2\2\2\u033c\u027e\3\2\2\2\u033c\u028a\3\2\2\2\u033c")
        buf.write("\u0296\3\2\2\2\u033c\u029e\3\2\2\2\u033c\u02a7\3\2\2\2")
        buf.write("\u033c\u02af\3\2\2\2\u033c\u02b5\3\2\2\2\u033c\u02c3\3")
        buf.write("\2\2\2\u033c\u02c7\3\2\2\2\u033c\u02cd\3\2\2\2\u033c\u02d3")
        buf.write("\3\2\2\2\u033c\u02e1\3\2\2\2\u033c\u02e4\3\2\2\2\u033c")
        buf.write("\u02ee\3\2\2\2\u033c\u02fa\3\2\2\2\u033c\u0301\3\2\2\2")
        buf.write("\u033c\u0303\3\2\2\2\u033c\u0313\3\2\2\2\u033c\u0319\3")
        buf.write("\2\2\2\u033c\u031d\3\2\2\2\u033c\u0325\3\2\2\2\u033c\u032d")
        buf.write("\3\2\2\2\u033c\u0334\3\2\2\2\u033c\u0335\3\2\2\2\u033d")
        buf.write("\17\3\2\2\2\u033e\u033f\7Q\2\2\u033f\u03e9\7\u00e6\2\2")
        buf.write("\u0340\u0341\7g\2\2\u0341\u03e9\7\u00e6\2\2\u0342\u0344")
        buf.write("\7\u00dd\2\2\u0343\u0345\7\u00e6\2\2\u0344\u0343\3\2\2")
        buf.write("\2\u0344\u0345\3\2\2\2\u0345\u03e9\3\2\2\2\u0346\u0348")
        buf.write("\7\u00dc\2\2\u0347\u0349\7\u00e6\2\2\u0348\u0347\3\2\2")
        buf.write("\2\u0348\u0349\3\2\2\2\u0349\u03e9\3\2\2\2\u034a\u034b")
        buf.write("\7`\2\2\u034b\u03e9\7\u00dd\2\2\u034c\u034d\7`\2\2\u034d")
        buf.write("\u034f\7\u00e6\2\2\u034e\u0350\7\u00dd\2\2\u034f\u034e")
        buf.write("\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u03e9\3\2\2\2\u0351")
        buf.write("\u0352\7`\2\2\u0352\u03e9\7\u00e9\2\2\u0353\u0354\7`\2")
        buf.write("\2\u0354\u03e9\7\u00e7\2\2\u0355\u0356\7`\2\2\u0356\u0357")
        buf.write("\7J\2\2\u0357\u03e9\7\u00e7\2\2\u0358\u0359\7\u00e3\2")
        buf.write("\2\u0359\u03e9\7R\2\2\u035a\u035b\7\u00e4\2\2\u035b\u03e9")
        buf.write("\7R\2\2\u035c\u035d\7`\2\2\u035d\u03e9\7\u00e8\2\2\u035e")
        buf.write("\u035f\7`\2\2\u035f\u0360\7Q\2\2\u0360\u03e9\7R\2\2\u0361")
        buf.write("\u0362\7`\2\2\u0362\u03e9\7\u00ea\2\2\u0363\u0364\7`\2")
        buf.write("\2\u0364\u03e9\7\u00ec\2\2\u0365\u0366\7`\2\2\u0366\u03e9")
        buf.write("\7\u00ed\2\2\u0367\u0368\7Q\2\2\u0368\u03e9\7\u00eb\2")
        buf.write("\2\u0369\u036a\7g\2\2\u036a\u03e9\7\u00eb\2\2\u036b\u036c")
        buf.write("\7o\2\2\u036c\u03e9\7\u00eb\2\2\u036d\u036e\7\u00de\2")
        buf.write("\2\u036e\u03e9\7R\2\2\u036f\u0370\7\u00de\2\2\u0370\u03e9")
        buf.write("\7\u00d1\2\2\u0371\u0372\7\u00df\2\2\u0372\u03e9\7R\2")
        buf.write("\2\u0373\u0374\7\u00df\2\2\u0374\u03e9\7\u00d1\2\2\u0375")
        buf.write("\u0376\7Q\2\2\u0376\u0377\7\u00b8\2\2\u0377\u03e9\7|\2")
        buf.write("\2\u0378\u0379\7g\2\2\u0379\u037a\7\u00b8\2\2\u037a\u03e9")
        buf.write("\7|\2\2\u037b\u037c\7o\2\2\u037c\u037d\7R\2\2\u037d\u037e")
        buf.write("\5\u0086D\2\u037e\u037f\7\"\2\2\u037f\u0380\7\u00cc\2")
        buf.write("\2\u0380\u03e9\3\2\2\2\u0381\u0382\7o\2\2\u0382\u0383")
        buf.write("\7R\2\2\u0383\u0384\5\u0086D\2\u0384\u0385\7\u00cc\2\2")
        buf.write("\u0385\u0386\7\26\2\2\u0386\u03e9\3\2\2\2\u0387\u0388")
        buf.write("\7o\2\2\u0388\u0389\7R\2\2\u0389\u038a\5\u0086D\2\u038a")
        buf.write("\u038b\7\"\2\2\u038b\u038c\7\u00cd\2\2\u038c\u03e9\3\2")
        buf.write("\2\2\u038d\u038e\7o\2\2\u038e\u038f\7R\2\2\u038f\u0390")
        buf.write("\5\u0086D\2\u0390\u0391\7\u00be\2\2\u0391\u0392\7\26\2")
        buf.write("\2\u0392\u03e9\3\2\2\2\u0393\u0394\7o\2\2\u0394\u0395")
        buf.write("\7R\2\2\u0395\u0396\5\u0086D\2\u0396\u0397\7\"\2\2\u0397")
        buf.write("\u0398\7\u00be\2\2\u0398\u03e9\3\2\2\2\u0399\u039a\7o")
        buf.write("\2\2\u039a\u039b\7R\2\2\u039b\u039c\5\u0086D\2\u039c\u039d")
        buf.write("\7\"\2\2\u039d\u039e\7\u00bf\2\2\u039e\u039f\7\20\2\2")
        buf.write("\u039f\u03a0\7\u00c0\2\2\u03a0\u03e9\3\2\2\2\u03a1\u03a2")
        buf.write("\7o\2\2\u03a2\u03a3\7R\2\2\u03a3\u03a4\5\u0086D\2\u03a4")
        buf.write("\u03a5\7u\2\2\u03a5\u03a6\7\u00be\2\2\u03a6\u03a7\7\u00c1")
        buf.write("\2\2\u03a7\u03e9\3\2\2\2\u03a8\u03a9\7o\2\2\u03a9\u03aa")
        buf.write("\7R\2\2\u03aa\u03ab\5\u0086D\2\u03ab\u03ac\7\u00c2\2\2")
        buf.write("\u03ac\u03ad\7D\2\2\u03ad\u03e9\3\2\2\2\u03ae\u03af\7")
        buf.write("o\2\2\u03af\u03b0\7R\2\2\u03b0\u03b1\5\u0086D\2\u03b1")
        buf.write("\u03b2\7\u00c3\2\2\u03b2\u03b3\7D\2\2\u03b3\u03e9\3\2")
        buf.write("\2\2\u03b4\u03b5\7o\2\2\u03b5\u03b6\7R\2\2\u03b6\u03b7")
        buf.write("\5\u0086D\2\u03b7\u03b8\7\u00c4\2\2\u03b8\u03b9\7D\2\2")
        buf.write("\u03b9\u03e9\3\2\2\2\u03ba\u03bb\7o\2\2\u03bb\u03bc\7")
        buf.write("R\2\2\u03bc\u03bd\5\u0086D\2\u03bd\u03be\7\u00c6\2\2\u03be")
        buf.write("\u03e9\3\2\2\2\u03bf\u03c0\7o\2\2\u03c0\u03c1\7R\2\2\u03c1")
        buf.write("\u03c3\5\u0086D\2\u03c2\u03c4\5 \21\2\u03c3\u03c2\3\2")
        buf.write("\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6")
        buf.write("\7\u00c7\2\2\u03c6\u03e9\3\2\2\2\u03c7\u03c8\7o\2\2\u03c8")
        buf.write("\u03c9\7R\2\2\u03c9\u03cb\5\u0086D\2\u03ca\u03cc\5 \21")
        buf.write("\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd")
        buf.write("\3\2\2\2\u03cd\u03ce\7\u00c8\2\2\u03ce\u03e9\3\2\2\2\u03cf")
        buf.write("\u03d0\7o\2\2\u03d0\u03d1\7R\2\2\u03d1\u03d3\5\u0086D")
        buf.write("\2\u03d2\u03d4\5 \21\2\u03d3\u03d2\3\2\2\2\u03d3\u03d4")
        buf.write("\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\7u\2\2\u03d6")
        buf.write("\u03d7\7\u00c5\2\2\u03d7\u03e9\3\2\2\2\u03d8\u03d9\7o")
        buf.write("\2\2\u03d9\u03da\7R\2\2\u03da\u03dc\5\u0086D\2\u03db\u03dd")
        buf.write("\5 \21\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd")
        buf.write("\u03de\3\2\2\2\u03de\u03df\7U\2\2\u03df\u03e0\7b\2\2\u03e0")
        buf.write("\u03e9\3\2\2\2\u03e1\u03e2\7x\2\2\u03e2\u03e9\7y\2\2\u03e3")
        buf.write("\u03e9\7z\2\2\u03e4\u03e9\7{\2\2\u03e5\u03e9\7\u00d3\2")
        buf.write("\2\u03e6\u03e7\7W\2\2\u03e7\u03e9\7\16\2\2\u03e8\u033e")
        buf.write("\3\2\2\2\u03e8\u0340\3\2\2\2\u03e8\u0342\3\2\2\2\u03e8")
        buf.write("\u0346\3\2\2\2\u03e8\u034a\3\2\2\2\u03e8\u034c\3\2\2\2")
        buf.write("\u03e8\u0351\3\2\2\2\u03e8\u0353\3\2\2\2\u03e8\u0355\3")
        buf.write("\2\2\2\u03e8\u0358\3\2\2\2\u03e8\u035a\3\2\2\2\u03e8\u035c")
        buf.write("\3\2\2\2\u03e8\u035e\3\2\2\2\u03e8\u0361\3\2\2\2\u03e8")
        buf.write("\u0363\3\2\2\2\u03e8\u0365\3\2\2\2\u03e8\u0367\3\2\2\2")
        buf.write("\u03e8\u0369\3\2\2\2\u03e8\u036b\3\2\2\2\u03e8\u036d\3")
        buf.write("\2\2\2\u03e8\u036f\3\2\2\2\u03e8\u0371\3\2\2\2\u03e8\u0373")
        buf.write("\3\2\2\2\u03e8\u0375\3\2\2\2\u03e8\u0378\3\2\2\2\u03e8")
        buf.write("\u037b\3\2\2\2\u03e8\u0381\3\2\2\2\u03e8\u0387\3\2\2\2")
        buf.write("\u03e8\u038d\3\2\2\2\u03e8\u0393\3\2\2\2\u03e8\u0399\3")
        buf.write("\2\2\2\u03e8\u03a1\3\2\2\2\u03e8\u03a8\3\2\2\2\u03e8\u03ae")
        buf.write("\3\2\2\2\u03e8\u03b4\3\2\2\2\u03e8\u03ba\3\2\2\2\u03e8")
        buf.write("\u03bf\3\2\2\2\u03e8\u03c7\3\2\2\2\u03e8\u03cf\3\2\2\2")
        buf.write("\u03e8\u03d8\3\2\2\2\u03e8\u03e1\3\2\2\2\u03e8\u03e3\3")
        buf.write("\2\2\2\u03e8\u03e4\3\2\2\2\u03e8\u03e5\3\2\2\2\u03e8\u03e6")
        buf.write("\3\2\2\2\u03e9\21\3\2\2\2\u03ea\u03ec\7Q\2\2\u03eb\u03ed")
        buf.write("\7\u00b8\2\2\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed")
        buf.write("\u03ef\3\2\2\2\u03ee\u03f0\7\u00da\2\2\u03ef\u03ee\3\2")
        buf.write("\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f5")
        buf.write("\7R\2\2\u03f2\u03f3\7\u0081\2\2\u03f3\u03f4\7\"\2\2\u03f4")
        buf.write("\u03f6\7$\2\2\u03f5\u03f2\3\2\2\2\u03f5\u03f6\3\2\2\2")
        buf.write("\u03f6\u03f7\3\2\2\2\u03f7\u03f8\5\u0086D\2\u03f8\23\3")
        buf.write("\2\2\2\u03f9\u03fa\7\u00cc\2\2\u03fa\u03fb\7\26\2\2\u03fb")
        buf.write("\u03ff\5p9\2\u03fc\u03fd\7\u00cd\2\2\u03fd\u03fe\7\26")
        buf.write("\2\2\u03fe\u0400\5t;\2\u03ff\u03fc\3\2\2\2\u03ff\u0400")
        buf.write("\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402\7X\2\2\u0402")
        buf.write("\u0403\7\u00f6\2\2\u0403\u0404\7\u00bd\2\2\u0404\25\3")
        buf.write("\2\2\2\u0405\u0406\7\u00be\2\2\u0406\u0407\7\26\2\2\u0407")
        buf.write("\u0408\5p9\2\u0408\u040b\7?\2\2\u0409\u040c\5\66\34\2")
        buf.write("\u040a\u040c\58\35\2\u040b\u0409\3\2\2\2\u040b\u040a\3")
        buf.write("\2\2\2\u040c\u0410\3\2\2\2\u040d\u040e\7\u00bf\2\2\u040e")
        buf.write("\u040f\7\20\2\2\u040f\u0411\7\u00c0\2\2\u0410\u040d\3")
        buf.write("\2\2\2\u0410\u0411\3\2\2\2\u0411\27\3\2\2\2\u0412\u0413")
        buf.write("\7\u00c1\2\2\u0413\u0414\7\u00f2\2\2\u0414\31\3\2\2\2")
        buf.write("\u0415\u0417\5(\25\2\u0416\u0415\3\2\2\2\u0416\u0417\3")
        buf.write("\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419\5B\"\2\u0419\33")
        buf.write("\3\2\2\2\u041a\u041b\7V\2\2\u041b\u041c\7\u009e\2\2\u041c")
        buf.write("\u041d\7R\2\2\u041d\u0424\5\u0086D\2\u041e\u0422\5 \21")
        buf.write("\2\u041f\u0420\7\u0081\2\2\u0420\u0421\7\"\2\2\u0421\u0423")
        buf.write("\7$\2\2\u0422\u041f\3\2\2\2\u0422\u0423\3\2\2\2\u0423")
        buf.write("\u0425\3\2\2\2\u0424\u041e\3\2\2\2\u0424\u0425\3\2\2\2")
        buf.write("\u0425\u044b\3\2\2\2\u0426\u0427\7V\2\2\u0427\u0429\7")
        buf.write("X\2\2\u0428\u042a\7R\2\2\u0429\u0428\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042d\5\u0086D\2\u042c")
        buf.write("\u042e\5 \21\2\u042d\u042c\3\2\2\2\u042d\u042e\3\2\2\2")
        buf.write("\u042e\u044b\3\2\2\2\u042f\u0430\7V\2\2\u0430\u0432\7")
        buf.write("\u009e\2\2\u0431\u0433\7\u00f0\2\2\u0432\u0431\3\2\2\2")
        buf.write("\u0432\u0433\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0435\7")
        buf.write("S\2\2\u0435\u0437\7\u00f2\2\2\u0436\u0438\5\u0084C\2\u0437")
        buf.write("\u0436\3\2\2\2\u0437\u0438\3\2\2\2\u0438\u043a\3\2\2\2")
        buf.write("\u0439\u043b\5:\36\2\u043a\u0439\3\2\2\2\u043a\u043b\3")
        buf.write("\2\2\2\u043b\u044b\3\2\2\2\u043c\u043d\7V\2\2\u043d\u043f")
        buf.write("\7\u009e\2\2\u043e\u0440\7\u00f0\2\2\u043f\u043e\3\2\2")
        buf.write("\2\u043f\u0440\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0443")
        buf.write("\7S\2\2\u0442\u0444\7\u00f2\2\2\u0443\u0442\3\2\2\2\u0443")
        buf.write("\u0444\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0448\5,\27\2")
        buf.write("\u0446\u0447\7\u00b9\2\2\u0447\u0449\5.\30\2\u0448\u0446")
        buf.write("\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044b\3\2\2\2\u044a")
        buf.write("\u041a\3\2\2\2\u044a\u0426\3\2\2\2\u044a\u042f\3\2\2\2")
        buf.write("\u044a\u043c\3\2\2\2\u044b\35\3\2\2\2\u044c\u044e\5 \21")
        buf.write("\2\u044d\u044f\5\30\r\2\u044e\u044d\3\2\2\2\u044e\u044f")
        buf.write("\3\2\2\2\u044f\37\3\2\2\2\u0450\u0451\7D\2\2\u0451\u0452")
        buf.write("\7\3\2\2\u0452\u0457\5\"\22\2\u0453\u0454\7\5\2\2\u0454")
        buf.write("\u0456\5\"\22\2\u0455\u0453\3\2\2\2\u0456\u0459\3\2\2")
        buf.write("\2\u0457\u0455\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u045a")
        buf.write("\3\2\2\2\u0459\u0457\3\2\2\2\u045a\u045b\7\4\2\2\u045b")
        buf.write("!\3\2\2\2\u045c\u045f\5\u00c2b\2\u045d\u045e\7\u0084\2")
        buf.write("\2\u045e\u0460\5\u0098M\2\u045f\u045d\3\2\2\2\u045f\u0460")
        buf.write("\3\2\2\2\u0460#\3\2\2\2\u0461\u0467\5\u00c0a\2\u0462\u0467")
        buf.write("\7\u00f2\2\2\u0463\u0467\5\u009aN\2\u0464\u0467\5\u009c")
        buf.write("O\2\u0465\u0467\5\u009eP\2\u0466\u0461\3\2\2\2\u0466\u0462")
        buf.write("\3\2\2\2\u0466\u0463\3\2\2\2\u0466\u0464\3\2\2\2\u0466")
        buf.write("\u0465\3\2\2\2\u0467%\3\2\2\2\u0468\u046d\5\u00c2b\2\u0469")
        buf.write("\u046a\7\6\2\2\u046a\u046c\5\u00c2b\2\u046b\u0469\3\2")
        buf.write("\2\2\u046c\u046f\3\2\2\2\u046d\u046b\3\2\2\2\u046d\u046e")
        buf.write("\3\2\2\2\u046e\'\3\2\2\2\u046f\u046d\3\2\2\2\u0470\u0471")
        buf.write("\7O\2\2\u0471\u0476\5*\26\2\u0472\u0473\7\5\2\2\u0473")
        buf.write("\u0475\5*\26\2\u0474\u0472\3\2\2\2\u0475\u0478\3\2\2\2")
        buf.write("\u0476\u0474\3\2\2\2\u0476\u0477\3\2\2\2\u0477)\3\2\2")
        buf.write("\2\u0478\u0476\3\2\2\2\u0479\u047b\5\u00c2b\2\u047a\u047c")
        buf.write("\7\20\2\2\u047b\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c")
        buf.write("\u047d\3\2\2\2\u047d\u047e\7\3\2\2\u047e\u047f\5\32\16")
        buf.write("\2\u047f\u0480\7\4\2\2\u0480+\3\2\2\2\u0481\u0482\7\u00a1")
        buf.write("\2\2\u0482\u0483\5\u00c0a\2\u0483-\3\2\2\2\u0484\u0485")
        buf.write("\7\3\2\2\u0485\u048a\5\60\31\2\u0486\u0487\7\5\2\2\u0487")
        buf.write("\u0489\5\60\31\2\u0488\u0486\3\2\2\2\u0489\u048c\3\2\2")
        buf.write("\2\u048a\u0488\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048d")
        buf.write("\3\2\2\2\u048c\u048a\3\2\2\2\u048d\u048e\7\4\2\2\u048e")
        buf.write("/\3\2\2\2\u048f\u0494\5\62\32\2\u0490\u0492\7\u0084\2")
        buf.write("\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493")
        buf.write("\3\2\2\2\u0493\u0495\5\64\33\2\u0494\u0491\3\2\2\2\u0494")
        buf.write("\u0495\3\2\2\2\u0495\61\3\2\2\2\u0496\u049b\5\u00c2b\2")
        buf.write("\u0497\u0498\7\6\2\2\u0498\u049a\5\u00c2b\2\u0499\u0497")
        buf.write("\3\2\2\2\u049a\u049d\3\2\2\2\u049b\u0499\3\2\2\2\u049b")
        buf.write("\u049c\3\2\2\2\u049c\u04a0\3\2\2\2\u049d\u049b\3\2\2\2")
        buf.write("\u049e\u04a0\7\u00f2\2\2\u049f\u0496\3\2\2\2\u049f\u049e")
        buf.write("\3\2\2\2\u04a0\63\3\2\2\2\u04a1\u04a6\7\u00f6\2\2\u04a2")
        buf.write("\u04a6\7\u00f7\2\2\u04a3\u04a6\5\u00a0Q\2\u04a4\u04a6")
        buf.write("\7\u00f2\2\2\u04a5\u04a1\3\2\2\2\u04a5\u04a2\3\2\2\2\u04a5")
        buf.write("\u04a3\3\2\2\2\u04a5\u04a4\3\2\2\2\u04a6\65\3\2\2\2\u04a7")
        buf.write("\u04a8\7\3\2\2\u04a8\u04ad\5\u0098M\2\u04a9\u04aa\7\5")
        buf.write("\2\2\u04aa\u04ac\5\u0098M\2\u04ab\u04a9\3\2\2\2\u04ac")
        buf.write("\u04af\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ad\u04ae\3\2\2\2")
        buf.write("\u04ae\u04b0\3\2\2\2\u04af\u04ad\3\2\2\2\u04b0\u04b1\7")
        buf.write("\4\2\2\u04b1\67\3\2\2\2\u04b2\u04b3\7\3\2\2\u04b3\u04b8")
        buf.write("\5\66\34\2\u04b4\u04b5\7\5\2\2\u04b5\u04b7\5\66\34\2\u04b6")
        buf.write("\u04b4\3\2\2\2\u04b7\u04ba\3\2\2\2\u04b8\u04b6\3\2\2\2")
        buf.write("\u04b8\u04b9\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04b8\3")
        buf.write("\2\2\2\u04bb\u04bc\7\4\2\2\u04bc9\3\2\2\2\u04bd\u04be")
        buf.write("\7\u00bf\2\2\u04be\u04bf\7\20\2\2\u04bf\u04c4\5<\37\2")
        buf.write("\u04c0\u04c1\7\u00bf\2\2\u04c1\u04c2\7\26\2\2\u04c2\u04c4")
        buf.write("\5> \2\u04c3\u04bd\3\2\2\2\u04c3\u04c0\3\2\2\2\u04c4;")
        buf.write("\3\2\2\2\u04c5\u04c6\7\u00cf\2\2\u04c6\u04c7\7\u00f2\2")
        buf.write("\2\u04c7\u04c8\7\u00d0\2\2\u04c8\u04cb\7\u00f2\2\2\u04c9")
        buf.write("\u04cb\5\u00c2b\2\u04ca\u04c5\3\2\2\2\u04ca\u04c9\3\2")
        buf.write("\2\2\u04cb=\3\2\2\2\u04cc\u04d0\7\u00f2\2\2\u04cd\u04ce")
        buf.write("\7O\2\2\u04ce\u04cf\7\u00a3\2\2\u04cf\u04d1\5.\30\2\u04d0")
        buf.write("\u04cd\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1?\3\2\2\2\u04d2")
        buf.write("\u04d3\5\u00c2b\2\u04d3\u04d4\7\u00f2\2\2\u04d4A\3\2\2")
        buf.write("\2\u04d5\u04d7\5\34\17\2\u04d6\u04d5\3\2\2\2\u04d6\u04d7")
        buf.write("\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04d9\5H%\2\u04d9\u04da")
        buf.write("\5D#\2\u04da\u04e2\3\2\2\2\u04db\u04dd\5T+\2\u04dc\u04de")
        buf.write("\5F$\2\u04dd\u04dc\3\2\2\2\u04de\u04df\3\2\2\2\u04df\u04dd")
        buf.write("\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04e2\3\2\2\2\u04e1")
        buf.write("\u04d6\3\2\2\2\u04e1\u04db\3\2\2\2\u04e2C\3\2\2\2\u04e3")
        buf.write("\u04e4\7\33\2\2\u04e4\u04e5\7\26\2\2\u04e5\u04ea\5L\'")
        buf.write("\2\u04e6\u04e7\7\5\2\2\u04e7\u04e9\5L\'\2\u04e8\u04e6")
        buf.write("\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea\u04e8\3\2\2\2\u04ea")
        buf.write("\u04eb\3\2\2\2\u04eb\u04ee\3\2\2\2\u04ec\u04ea\3\2\2\2")
        buf.write("\u04ed\u04e3\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f9\3")
        buf.write("\2\2\2\u04ef\u04f0\7\u009c\2\2\u04f0\u04f1\7\26\2\2\u04f1")
        buf.write("\u04f6\5\u008eH\2\u04f2\u04f3\7\5\2\2\u04f3\u04f5\5\u008e")
        buf.write("H\2\u04f4\u04f2\3\2\2\2\u04f5\u04f8\3\2\2\2\u04f6\u04f4")
        buf.write("\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04fa\3\2\2\2\u04f8")
        buf.write("\u04f6\3\2\2\2\u04f9\u04ef\3\2\2\2\u04f9\u04fa\3\2\2\2")
        buf.write("\u04fa\u0505\3\2\2\2\u04fb\u04fc\7\u009d\2\2\u04fc\u04fd")
        buf.write("\7\26\2\2\u04fd\u0502\5\u008eH\2\u04fe\u04ff\7\5\2\2\u04ff")
        buf.write("\u0501\5\u008eH\2\u0500\u04fe\3\2\2\2\u0501\u0504\3\2")
        buf.write("\2\2\u0502\u0500\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0506")
        buf.write("\3\2\2\2\u0504\u0502\3\2\2\2\u0505\u04fb\3\2\2\2\u0505")
        buf.write("\u0506\3\2\2\2\u0506\u0511\3\2\2\2\u0507\u0508\7\u009b")
        buf.write("\2\2\u0508\u0509\7\26\2\2\u0509\u050e\5L\'\2\u050a\u050b")
        buf.write("\7\5\2\2\u050b\u050d\5L\'\2\u050c\u050a\3\2\2\2\u050d")
        buf.write("\u0510\3\2\2\2\u050e\u050c\3\2\2\2\u050e\u050f\3\2\2\2")
        buf.write("\u050f\u0512\3\2\2\2\u0510\u050e\3\2\2\2\u0511\u0507\3")
        buf.write("\2\2\2\u0511\u0512\3\2\2\2\u0512\u0514\3\2\2\2\u0513\u0515")
        buf.write("\5\u00b6\\\2\u0514\u0513\3\2\2\2\u0514\u0515\3\2\2\2\u0515")
        buf.write("\u051b\3\2\2\2\u0516\u0519\7\35\2\2\u0517\u051a\7\21\2")
        buf.write("\2\u0518\u051a\5\u008eH\2\u0519\u0517\3\2\2\2\u0519\u0518")
        buf.write("\3\2\2\2\u051a\u051c\3\2\2\2\u051b\u0516\3\2\2\2\u051b")
        buf.write("\u051c\3\2\2\2\u051cE\3\2\2\2\u051d\u051f\5\34\17\2\u051e")
        buf.write("\u051d\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0520\3\2\2\2")
        buf.write("\u0520\u0521\5N(\2\u0521\u0522\5D#\2\u0522G\3\2\2\2\u0523")
        buf.write("\u0524\b%\1\2\u0524\u0525\5J&\2\u0525\u053d\3\2\2\2\u0526")
        buf.write("\u0527\f\5\2\2\u0527\u0528\6%\3\2\u0528\u052a\t\t\2\2")
        buf.write("\u0529\u052b\5b\62\2\u052a\u0529\3\2\2\2\u052a\u052b\3")
        buf.write("\2\2\2\u052b\u052c\3\2\2\2\u052c\u053c\5H%\6\u052d\u052e")
        buf.write("\f\4\2\2\u052e\u052f\6%\5\2\u052f\u0531\7k\2\2\u0530\u0532")
        buf.write("\5b\62\2\u0531\u0530\3\2\2\2\u0531\u0532\3\2\2\2\u0532")
        buf.write("\u0533\3\2\2\2\u0533\u053c\5H%\5\u0534\u0535\f\3\2\2\u0535")
        buf.write("\u0536\6%\7\2\u0536\u0538\t\n\2\2\u0537\u0539\5b\62\2")
        buf.write("\u0538\u0537\3\2\2\2\u0538\u0539\3\2\2\2\u0539\u053a\3")
        buf.write("\2\2\2\u053a\u053c\5H%\4\u053b\u0526\3\2\2\2\u053b\u052d")
        buf.write("\3\2\2\2\u053b\u0534\3\2\2\2\u053c\u053f\3\2\2\2\u053d")
        buf.write("\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053eI\3\2\2\2\u053f")
        buf.write("\u053d\3\2\2\2\u0540\u0549\5N(\2\u0541\u0542\7R\2\2\u0542")
        buf.write("\u0549\5\u0086D\2\u0543\u0549\5~@\2\u0544\u0545\7\3\2")
        buf.write("\2\u0545\u0546\5B\"\2\u0546\u0547\7\4\2\2\u0547\u0549")
        buf.write("\3\2\2\2\u0548\u0540\3\2\2\2\u0548\u0541\3\2\2\2\u0548")
        buf.write("\u0543\3\2\2\2\u0548\u0544\3\2\2\2\u0549K\3\2\2\2\u054a")
        buf.write("\u054c\5\u008eH\2\u054b\u054d\t\13\2\2\u054c\u054b\3\2")
        buf.write("\2\2\u054c\u054d\3\2\2\2\u054d\u0550\3\2\2\2\u054e\u054f")
        buf.write("\7,\2\2\u054f\u0551\t\f\2\2\u0550\u054e\3\2\2\2\u0550")
        buf.write("\u0551\3\2\2\2\u0551M\3\2\2\2\u0552\u0553\7\r\2\2\u0553")
        buf.write("\u0554\7\u009f\2\2\u0554\u0555\7\3\2\2\u0555\u0556\5\u008c")
        buf.write("G\2\u0556\u0557\7\4\2\2\u0557\u055d\3\2\2\2\u0558\u0559")
        buf.write("\7r\2\2\u0559\u055d\5\u008cG\2\u055a\u055b\7\u00a0\2\2")
        buf.write("\u055b\u055d\5\u008cG\2\u055c\u0552\3\2\2\2\u055c\u0558")
        buf.write("\3\2\2\2\u055c\u055a\3\2\2\2\u055d\u055f\3\2\2\2\u055e")
        buf.write("\u0560\5\u0084C\2\u055f\u055e\3\2\2\2\u055f\u0560\3\2")
        buf.write("\2\2\u0560\u0563\3\2\2\2\u0561\u0562\7\u00a5\2\2\u0562")
        buf.write("\u0564\7\u00f2\2\2\u0563\u0561\3\2\2\2\u0563\u0564\3\2")
        buf.write("\2\2\u0564\u0565\3\2\2\2\u0565\u0566\7\u00a1\2\2\u0566")
        buf.write("\u0573\7\u00f2\2\2\u0567\u0571\7\20\2\2\u0568\u0572\5")
        buf.write("r:\2\u0569\u0572\5\u00acW\2\u056a\u056d\7\3\2\2\u056b")
        buf.write("\u056e\5r:\2\u056c\u056e\5\u00acW\2\u056d\u056b\3\2\2")
        buf.write("\2\u056d\u056c\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0570")
        buf.write("\7\4\2\2\u0570\u0572\3\2\2\2\u0571\u0568\3\2\2\2\u0571")
        buf.write("\u0569\3\2\2\2\u0571\u056a\3\2\2\2\u0572\u0574\3\2\2\2")
        buf.write("\u0573\u0567\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576\3")
        buf.write("\2\2\2\u0575\u0577\5\u0084C\2\u0576\u0575\3\2\2\2\u0576")
        buf.write("\u0577\3\2\2\2\u0577\u057a\3\2\2\2\u0578\u0579\7\u00a4")
        buf.write("\2\2\u0579\u057b\7\u00f2\2\2\u057a\u0578\3\2\2\2\u057a")
        buf.write("\u057b\3\2\2\2\u057b\u057d\3\2\2\2\u057c\u057e\5T+\2\u057d")
        buf.write("\u057c\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0581\3\2\2\2")
        buf.write("\u057f\u0580\7\24\2\2\u0580\u0582\5\u0090I\2\u0581\u057f")
        buf.write("\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u05b0\3\2\2\2\u0583")
        buf.write("\u0587\7\r\2\2\u0584\u0586\5P)\2\u0585\u0584\3\2\2\2\u0586")
        buf.write("\u0589\3\2\2\2\u0587\u0585\3\2\2\2\u0587\u0588\3\2\2\2")
        buf.write("\u0588\u058b\3\2\2\2\u0589\u0587\3\2\2\2\u058a\u058c\5")
        buf.write("b\62\2\u058b\u058a\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058d")
        buf.write("\3\2\2\2\u058d\u058f\5\u008cG\2\u058e\u0590\5T+\2\u058f")
        buf.write("\u058e\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u059a\3\2\2\2")
        buf.write("\u0591\u0597\5T+\2\u0592\u0594\7\r\2\2\u0593\u0595\5b")
        buf.write("\62\2\u0594\u0593\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0596")
        buf.write("\3\2\2\2\u0596\u0598\5\u008cG\2\u0597\u0592\3\2\2\2\u0597")
        buf.write("\u0598\3\2\2\2\u0598\u059a\3\2\2\2\u0599\u0583\3\2\2\2")
        buf.write("\u0599\u0591\3\2\2\2\u059a\u059e\3\2\2\2\u059b\u059d\5")
        buf.write("`\61\2\u059c\u059b\3\2\2\2\u059d\u05a0\3\2\2\2\u059e\u059c")
        buf.write("\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a3\3\2\2\2\u05a0")
        buf.write("\u059e\3\2\2\2\u05a1\u05a2\7\24\2\2\u05a2\u05a4\5\u0090")
        buf.write("I\2\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a6")
        buf.write("\3\2\2\2\u05a5\u05a7\5V,\2\u05a6\u05a5\3\2\2\2\u05a6\u05a7")
        buf.write("\3\2\2\2\u05a7\u05aa\3\2\2\2\u05a8\u05a9\7\34\2\2\u05a9")
        buf.write("\u05ab\5\u0090I\2\u05aa\u05a8\3\2\2\2\u05aa\u05ab\3\2")
        buf.write("\2\2\u05ab\u05ad\3\2\2\2\u05ac\u05ae\5\u00b6\\\2\u05ad")
        buf.write("\u05ac\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05b0\3\2\2\2")
        buf.write("\u05af\u055c\3\2\2\2\u05af\u0599\3\2\2\2\u05b0O\3\2\2")
        buf.write("\2\u05b1\u05b2\7\7\2\2\u05b2\u05b9\5R*\2\u05b3\u05b5\7")
        buf.write("\5\2\2\u05b4\u05b3\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b6")
        buf.write("\3\2\2\2\u05b6\u05b8\5R*\2\u05b7\u05b4\3\2\2\2\u05b8\u05bb")
        buf.write("\3\2\2\2\u05b9\u05b7\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba")
        buf.write("\u05bc\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bc\u05bd\7\b\2\2")
        buf.write("\u05bdQ\3\2\2\2\u05be\u05cc\5\u00c2b\2\u05bf\u05c0\5\u00c2")
        buf.write("b\2\u05c0\u05c1\7\3\2\2\u05c1\u05c6\5\u0096L\2\u05c2\u05c3")
        buf.write("\7\5\2\2\u05c3\u05c5\5\u0096L\2\u05c4\u05c2\3\2\2\2\u05c5")
        buf.write("\u05c8\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c6\u05c7\3\2\2\2")
        buf.write("\u05c7\u05c9\3\2\2\2\u05c8\u05c6\3\2\2\2\u05c9\u05ca\7")
        buf.write("\4\2\2\u05ca\u05cc\3\2\2\2\u05cb\u05be\3\2\2\2\u05cb\u05bf")
        buf.write("\3\2\2\2\u05ccS\3\2\2\2\u05cd\u05ce\7\16\2\2\u05ce\u05d3")
        buf.write("\5d\63\2\u05cf\u05d0\7\5\2\2\u05d0\u05d2\5d\63\2\u05d1")
        buf.write("\u05cf\3\2\2\2\u05d2\u05d5\3\2\2\2\u05d3\u05d1\3\2\2\2")
        buf.write("\u05d3\u05d4\3\2\2\2\u05d4\u05d9\3\2\2\2\u05d5\u05d3\3")
        buf.write("\2\2\2\u05d6\u05d8\5`\61\2\u05d7\u05d6\3\2\2\2\u05d8\u05db")
        buf.write("\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9\u05da\3\2\2\2\u05da")
        buf.write("\u05dd\3\2\2\2\u05db\u05d9\3\2\2\2\u05dc\u05de\5Z.\2\u05dd")
        buf.write("\u05dc\3\2\2\2\u05dd\u05de\3\2\2\2\u05deU\3\2\2\2\u05df")
        buf.write("\u05e0\7\25\2\2\u05e0\u05e1\7\26\2\2\u05e1\u05e6\5\u008e")
        buf.write("H\2\u05e2\u05e3\7\5\2\2\u05e3\u05e5\5\u008eH\2\u05e4\u05e2")
        buf.write("\3\2\2\2\u05e5\u05e8\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e6")
        buf.write("\u05e7\3\2\2\2\u05e7\u05fa\3\2\2\2\u05e8\u05e6\3\2\2\2")
        buf.write("\u05e9\u05ea\7O\2\2\u05ea\u05fb\7\32\2\2\u05eb\u05ec\7")
        buf.write("O\2\2\u05ec\u05fb\7\31\2\2\u05ed\u05ee\7\27\2\2\u05ee")
        buf.write("\u05ef\7\30\2\2\u05ef\u05f0\7\3\2\2\u05f0\u05f5\5X-\2")
        buf.write("\u05f1\u05f2\7\5\2\2\u05f2\u05f4\5X-\2\u05f3\u05f1\3\2")
        buf.write("\2\2\u05f4\u05f7\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f5\u05f6")
        buf.write("\3\2\2\2\u05f6\u05f8\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f8")
        buf.write("\u05f9\7\4\2\2\u05f9\u05fb\3\2\2\2\u05fa\u05e9\3\2\2\2")
        buf.write("\u05fa\u05eb\3\2\2\2\u05fa\u05ed\3\2\2\2\u05fa\u05fb\3")
        buf.write("\2\2\2\u05fb\u060c\3\2\2\2\u05fc\u05fd\7\25\2\2\u05fd")
        buf.write("\u05fe\7\26\2\2\u05fe\u05ff\7\27\2\2\u05ff\u0600\7\30")
        buf.write("\2\2\u0600\u0601\7\3\2\2\u0601\u0606\5X-\2\u0602\u0603")
        buf.write("\7\5\2\2\u0603\u0605\5X-\2\u0604\u0602\3\2\2\2\u0605\u0608")
        buf.write("\3\2\2\2\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607")
        buf.write("\u0609\3\2\2\2\u0608\u0606\3\2\2\2\u0609\u060a\7\4\2\2")
        buf.write("\u060a\u060c\3\2\2\2\u060b\u05df\3\2\2\2\u060b\u05fc\3")
        buf.write("\2\2\2\u060cW\3\2\2\2\u060d\u0616\7\3\2\2\u060e\u0613")
        buf.write("\5\u008eH\2\u060f\u0610\7\5\2\2\u0610\u0612\5\u008eH\2")
        buf.write("\u0611\u060f\3\2\2\2\u0612\u0615\3\2\2\2\u0613\u0611\3")
        buf.write("\2\2\2\u0613\u0614\3\2\2\2\u0614\u0617\3\2\2\2\u0615\u0613")
        buf.write("\3\2\2\2\u0616\u060e\3\2\2\2\u0616\u0617\3\2\2\2\u0617")
        buf.write("\u0618\3\2\2\2\u0618\u061b\7\4\2\2\u0619\u061b\5\u008e")
        buf.write("H\2\u061a\u060d\3\2\2\2\u061a\u0619\3\2\2\2\u061bY\3\2")
        buf.write("\2\2\u061c\u061d\7@\2\2\u061d\u061e\7\3\2\2\u061e\u061f")
        buf.write("\5\u008cG\2\u061f\u0620\7/\2\2\u0620\u0621\5\\/\2\u0621")
        buf.write("\u0622\7!\2\2\u0622\u0623\7\3\2\2\u0623\u0628\5^\60\2")
        buf.write("\u0624\u0625\7\5\2\2\u0625\u0627\5^\60\2\u0626\u0624\3")
        buf.write("\2\2\2\u0627\u062a\3\2\2\2\u0628\u0626\3\2\2\2\u0628\u0629")
        buf.write("\3\2\2\2\u0629\u062b\3\2\2\2\u062a\u0628\3\2\2\2\u062b")
        buf.write("\u062c\7\4\2\2\u062c\u062d\7\4\2\2\u062d[\3\2\2\2\u062e")
        buf.write("\u063b\5\u00c2b\2\u062f\u0630\7\3\2\2\u0630\u0635\5\u00c2")
        buf.write("b\2\u0631\u0632\7\5\2\2\u0632\u0634\5\u00c2b\2\u0633\u0631")
        buf.write("\3\2\2\2\u0634\u0637\3\2\2\2\u0635\u0633\3\2\2\2\u0635")
        buf.write("\u0636\3\2\2\2\u0636\u0638\3\2\2\2\u0637\u0635\3\2\2\2")
        buf.write("\u0638\u0639\7\4\2\2\u0639\u063b\3\2\2\2\u063a\u062e\3")
        buf.write("\2\2\2\u063a\u062f\3\2\2\2\u063b]\3\2\2\2\u063c\u0641")
        buf.write("\5\u008eH\2\u063d\u063f\7\20\2\2\u063e\u063d\3\2\2\2\u063e")
        buf.write("\u063f\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0642\5\u00c2")
        buf.write("b\2\u0641\u063e\3\2\2\2\u0641\u0642\3\2\2\2\u0642_\3\2")
        buf.write("\2\2\u0643\u0644\7A\2\2\u0644\u0646\7T\2\2\u0645\u0647")
        buf.write("\78\2\2\u0646\u0645\3\2\2\2\u0646\u0647\3\2\2\2\u0647")
        buf.write("\u0648\3\2\2\2\u0648\u0649\5\u00c0a\2\u0649\u0652\7\3")
        buf.write("\2\2\u064a\u064f\5\u008eH\2\u064b\u064c\7\5\2\2\u064c")
        buf.write("\u064e\5\u008eH\2\u064d\u064b\3\2\2\2\u064e\u0651\3\2")
        buf.write("\2\2\u064f\u064d\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0653")
        buf.write("\3\2\2\2\u0651\u064f\3\2\2\2\u0652\u064a\3\2\2\2\u0652")
        buf.write("\u0653\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u0655\7\4\2\2")
        buf.write("\u0655\u0661\5\u00c2b\2\u0656\u0658\7\20\2\2\u0657\u0656")
        buf.write("\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u0659\3\2\2\2\u0659")
        buf.write("\u065e\5\u00c2b\2\u065a\u065b\7\5\2\2\u065b\u065d\5\u00c2")
        buf.write("b\2\u065c\u065a\3\2\2\2\u065d\u0660\3\2\2\2\u065e\u065c")
        buf.write("\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0662\3\2\2\2\u0660")
        buf.write("\u065e\3\2\2\2\u0661\u0657\3\2\2\2\u0661\u0662\3\2\2\2")
        buf.write("\u0662a\3\2\2\2\u0663\u0664\t\r\2\2\u0664c\3\2\2\2\u0665")
        buf.write("\u0669\5|?\2\u0666\u0668\5f\64\2\u0667\u0666\3\2\2\2\u0668")
        buf.write("\u066b\3\2\2\2\u0669\u0667\3\2\2\2\u0669\u066a\3\2\2\2")
        buf.write("\u066ae\3\2\2\2\u066b\u0669\3\2\2\2\u066c\u066d\5h\65")
        buf.write("\2\u066d\u066e\7\66\2\2\u066e\u0670\5|?\2\u066f\u0671")
        buf.write("\5j\66\2\u0670\u066f\3\2\2\2\u0670\u0671\3\2\2\2\u0671")
        buf.write("\u0678\3\2\2\2\u0672\u0673\7>\2\2\u0673\u0674\5h\65\2")
        buf.write("\u0674\u0675\7\66\2\2\u0675\u0676\5|?\2\u0676\u0678\3")
        buf.write("\2\2\2\u0677\u066c\3\2\2\2\u0677\u0672\3\2\2\2\u0678g")
        buf.write("\3\2\2\2\u0679\u067b\79\2\2\u067a\u0679\3\2\2\2\u067a")
        buf.write("\u067b\3\2\2\2\u067b\u0690\3\2\2\2\u067c\u0690\7\67\2")
        buf.write("\2\u067d\u067f\7:\2\2\u067e\u0680\78\2\2\u067f\u067e\3")
        buf.write("\2\2\2\u067f\u0680\3\2\2\2\u0680\u0690\3\2\2\2\u0681\u0682")
        buf.write("\7:\2\2\u0682\u0690\7;\2\2\u0683\u0685\7<\2\2\u0684\u0686")
        buf.write("\78\2\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2\2\2\u0686")
        buf.write("\u0690\3\2\2\2\u0687\u0689\7=\2\2\u0688\u068a\78\2\2\u0689")
        buf.write("\u0688\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u0690\3\2\2\2")
        buf.write("\u068b\u068d\7:\2\2\u068c\u068b\3\2\2\2\u068c\u068d\3")
        buf.write("\2\2\2\u068d\u068e\3\2\2\2\u068e\u0690\7\u00ef\2\2\u068f")
        buf.write("\u067a\3\2\2\2\u068f\u067c\3\2\2\2\u068f\u067d\3\2\2\2")
        buf.write("\u068f\u0681\3\2\2\2\u068f\u0683\3\2\2\2\u068f\u0687\3")
        buf.write("\2\2\2\u068f\u068c\3\2\2\2\u0690i\3\2\2\2\u0691\u0692")
        buf.write("\7?\2\2\u0692\u06a0\5\u0090I\2\u0693\u0694\7\u00a1\2\2")
        buf.write("\u0694\u0695\7\3\2\2\u0695\u069a\5\u00c2b\2\u0696\u0697")
        buf.write("\7\5\2\2\u0697\u0699\5\u00c2b\2\u0698\u0696\3\2\2\2\u0699")
        buf.write("\u069c\3\2\2\2\u069a\u0698\3\2\2\2\u069a\u069b\3\2\2\2")
        buf.write("\u069b\u069d\3\2\2\2\u069c\u069a\3\2\2\2\u069d\u069e\7")
        buf.write("\4\2\2\u069e\u06a0\3\2\2\2\u069f\u0691\3\2\2\2\u069f\u0693")
        buf.write("\3\2\2\2\u06a0k\3\2\2\2\u06a1\u06a2\7m\2\2\u06a2\u06a4")
        buf.write("\7\3\2\2\u06a3\u06a5\5n8\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5")
        buf.write("\3\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u06a7\7\4\2\2\u06a7")
        buf.write("m\3\2\2\2\u06a8\u06aa\7\u008d\2\2\u06a9\u06a8\3\2\2\2")
        buf.write("\u06a9\u06aa\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06ac\t")
        buf.write("\16\2\2\u06ac\u06c1\7\u0097\2\2\u06ad\u06ae\5\u008eH\2")
        buf.write("\u06ae\u06af\7F\2\2\u06af\u06c1\3\2\2\2\u06b0\u06b1\7")
        buf.write("\u0098\2\2\u06b1\u06b2\7\u00f6\2\2\u06b2\u06b3\7\u0099")
        buf.write("\2\2\u06b3\u06b4\7\u009a\2\2\u06b4\u06bd\7\u00f6\2\2\u06b5")
        buf.write("\u06bb\7?\2\2\u06b6\u06bc\5\u00c2b\2\u06b7\u06b8\5\u00c0")
        buf.write("a\2\u06b8\u06b9\7\3\2\2\u06b9\u06ba\7\4\2\2\u06ba\u06bc")
        buf.write("\3\2\2\2\u06bb\u06b6\3\2\2\2\u06bb\u06b7\3\2\2\2\u06bc")
        buf.write("\u06be\3\2\2\2\u06bd\u06b5\3\2\2\2\u06bd\u06be\3\2\2\2")
        buf.write("\u06be\u06c1\3\2\2\2\u06bf\u06c1\5\u008eH\2\u06c0\u06a9")
        buf.write("\3\2\2\2\u06c0\u06ad\3\2\2\2\u06c0\u06b0\3\2\2\2\u06c0")
        buf.write("\u06bf\3\2\2\2\u06c1o\3\2\2\2\u06c2\u06c3\7\3\2\2\u06c3")
        buf.write("\u06c4\5r:\2\u06c4\u06c5\7\4\2\2\u06c5q\3\2\2\2\u06c6")
        buf.write("\u06cb\5\u00c2b\2\u06c7\u06c8\7\5\2\2\u06c8\u06ca\5\u00c2")
        buf.write("b\2\u06c9\u06c7\3\2\2\2\u06ca\u06cd\3\2\2\2\u06cb\u06c9")
        buf.write("\3\2\2\2\u06cb\u06cc\3\2\2\2\u06ccs\3\2\2\2\u06cd\u06cb")
        buf.write("\3\2\2\2\u06ce\u06cf\7\3\2\2\u06cf\u06d4\5v<\2\u06d0\u06d1")
        buf.write("\7\5\2\2\u06d1\u06d3\5v<\2\u06d2\u06d0\3\2\2\2\u06d3\u06d6")
        buf.write("\3\2\2\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5")
        buf.write("\u06d7\3\2\2\2\u06d6\u06d4\3\2\2\2\u06d7\u06d8\7\4\2\2")
        buf.write("\u06d8u\3\2\2\2\u06d9\u06db\5\u00c2b\2\u06da\u06dc\t\13")
        buf.write("\2\2\u06db\u06da\3\2\2\2\u06db\u06dc\3\2\2\2\u06dcw\3")
        buf.write("\2\2\2\u06dd\u06de\7\3\2\2\u06de\u06e3\5z>\2\u06df\u06e0")
        buf.write("\7\5\2\2\u06e0\u06e2\5z>\2\u06e1\u06df\3\2\2\2\u06e2\u06e5")
        buf.write("\3\2\2\2\u06e3\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4")
        buf.write("\u06e6\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e6\u06e7\7\4\2\2")
        buf.write("\u06e7y\3\2\2\2\u06e8\u06eb\5\u00c2b\2\u06e9\u06ea\7t")
        buf.write("\2\2\u06ea\u06ec\7\u00f2\2\2\u06eb\u06e9\3\2\2\2\u06eb")
        buf.write("\u06ec\3\2\2\2\u06ec{\3\2\2\2\u06ed\u06ef\5\u0086D\2\u06ee")
        buf.write("\u06f0\5l\67\2\u06ef\u06ee\3\2\2\2\u06ef\u06f0\3\2\2\2")
        buf.write("\u06f0\u06f1\3\2\2\2\u06f1\u06f2\5\u0082B\2\u06f2\u0706")
        buf.write("\3\2\2\2\u06f3\u06f4\7\3\2\2\u06f4\u06f5\5B\"\2\u06f5")
        buf.write("\u06f7\7\4\2\2\u06f6\u06f8\5l\67\2\u06f7\u06f6\3\2\2\2")
        buf.write("\u06f7\u06f8\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06fa\5")
        buf.write("\u0082B\2\u06fa\u0706\3\2\2\2\u06fb\u06fc\7\3\2\2\u06fc")
        buf.write("\u06fd\5d\63\2\u06fd\u06ff\7\4\2\2\u06fe\u0700\5l\67\2")
        buf.write("\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\3")
        buf.write("\2\2\2\u0701\u0702\5\u0082B\2\u0702\u0706\3\2\2\2\u0703")
        buf.write("\u0706\5~@\2\u0704\u0706\5\u0080A\2\u0705\u06ed\3\2\2")
        buf.write("\2\u0705\u06f3\3\2\2\2\u0705\u06fb\3\2\2\2\u0705\u0703")
        buf.write("\3\2\2\2\u0705\u0704\3\2\2\2\u0706}\3\2\2\2\u0707\u0708")
        buf.write("\7P\2\2\u0708\u070d\5\u008eH\2\u0709\u070a\7\5\2\2\u070a")
        buf.write("\u070c\5\u008eH\2\u070b\u0709\3\2\2\2\u070c\u070f\3\2")
        buf.write("\2\2\u070d\u070b\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u0710")
        buf.write("\3\2\2\2\u070f\u070d\3\2\2\2\u0710\u0711\5\u0082B\2\u0711")
        buf.write("\177\3\2\2\2\u0712\u0713\5\u00c2b\2\u0713\u071c\7\3\2")
        buf.write("\2\u0714\u0719\5\u008eH\2\u0715\u0716\7\5\2\2\u0716\u0718")
        buf.write("\5\u008eH\2\u0717\u0715\3\2\2\2\u0718\u071b\3\2\2\2\u0719")
        buf.write("\u0717\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071d\3\2\2\2")
        buf.write("\u071b\u0719\3\2\2\2\u071c\u0714\3\2\2\2\u071c\u071d\3")
        buf.write("\2\2\2\u071d\u071e\3\2\2\2\u071e\u071f\7\4\2\2\u071f\u0720")
        buf.write("\5\u0082B\2\u0720\u0081\3\2\2\2\u0721\u0723\7\20\2\2\u0722")
        buf.write("\u0721\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0724\3\2\2\2")
        buf.write("\u0724\u0726\5\u00c4c\2\u0725\u0727\5p9\2\u0726\u0725")
        buf.write("\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u0729\3\2\2\2\u0728")
        buf.write("\u0722\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u0083\3\2\2\2")
        buf.write("\u072a\u072b\7N\2\2\u072b\u072c\7[\2\2\u072c\u072d\7\u00a2")
        buf.write("\2\2\u072d\u0731\7\u00f2\2\2\u072e\u072f\7O\2\2\u072f")
        buf.write("\u0730\7\u00a3\2\2\u0730\u0732\5.\30\2\u0731\u072e\3\2")
        buf.write("\2\2\u0731\u0732\3\2\2\2\u0732\u075c\3\2\2\2\u0733\u0734")
        buf.write("\7N\2\2\u0734\u0735\7[\2\2\u0735\u073f\7\u00a6\2\2\u0736")
        buf.write("\u0737\7\u00a7\2\2\u0737\u0738\7\u00a8\2\2\u0738\u0739")
        buf.write("\7\26\2\2\u0739\u073d\7\u00f2\2\2\u073a\u073b\7\u00ac")
        buf.write("\2\2\u073b\u073c\7\26\2\2\u073c\u073e\7\u00f2\2\2\u073d")
        buf.write("\u073a\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u0740\3\2\2\2")
        buf.write("\u073f\u0736\3\2\2\2\u073f\u0740\3\2\2\2\u0740\u0746\3")
        buf.write("\2\2\2\u0741\u0742\7\u00a9\2\2\u0742\u0743\7\u00aa\2\2")
        buf.write("\u0743\u0744\7\u00a8\2\2\u0744\u0745\7\26\2\2\u0745\u0747")
        buf.write("\7\u00f2\2\2\u0746\u0741\3\2\2\2\u0746\u0747\3\2\2\2\u0747")
        buf.write("\u074d\3\2\2\2\u0748\u0749\7r\2\2\u0749\u074a\7\u00ab")
        buf.write("\2\2\u074a\u074b\7\u00a8\2\2\u074b\u074c\7\26\2\2\u074c")
        buf.write("\u074e\7\u00f2\2\2\u074d\u0748\3\2\2\2\u074d\u074e\3\2")
        buf.write("\2\2\u074e\u0753\3\2\2\2\u074f\u0750\7\u00ad\2\2\u0750")
        buf.write("\u0751\7\u00a8\2\2\u0751\u0752\7\26\2\2\u0752\u0754\7")
        buf.write("\u00f2\2\2\u0753\u074f\3\2\2\2\u0753\u0754\3\2\2\2\u0754")
        buf.write("\u0759\3\2\2\2\u0755\u0756\7)\2\2\u0756\u0757\7\u00db")
        buf.write("\2\2\u0757\u0758\7\20\2\2\u0758\u075a\7\u00f2\2\2\u0759")
        buf.write("\u0755\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075c\3\2\2\2")
        buf.write("\u075b\u072a\3\2\2\2\u075b\u0733\3\2\2\2\u075c\u0085\3")
        buf.write("\2\2\2\u075d\u075e\5\u00c2b\2\u075e\u075f\7\6\2\2\u075f")
        buf.write("\u0761\3\2\2\2\u0760\u075d\3\2\2\2\u0760\u0761\3\2\2\2")
        buf.write("\u0761\u0762\3\2\2\2\u0762\u0763\5\u00c2b\2\u0763\u0087")
        buf.write("\3\2\2\2\u0764\u0765\5\u00c2b\2\u0765\u0766\7\6\2\2\u0766")
        buf.write("\u0768\3\2\2\2\u0767\u0764\3\2\2\2\u0767\u0768\3\2\2\2")
        buf.write("\u0768\u0769\3\2\2\2\u0769\u076a\5\u00c2b\2\u076a\u0089")
        buf.write("\3\2\2\2\u076b\u0773\5\u008eH\2\u076c\u076e\7\20\2\2\u076d")
        buf.write("\u076c\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0771\3\2\2\2")
        buf.write("\u076f\u0772\5\u00c2b\2\u0770\u0772\5p9\2\u0771\u076f")
        buf.write("\3\2\2\2\u0771\u0770\3\2\2\2\u0772\u0774\3\2\2\2\u0773")
        buf.write("\u076d\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u008b\3\2\2\2")
        buf.write("\u0775\u077a\5\u008aF\2\u0776\u0777\7\5\2\2\u0777\u0779")
        buf.write("\5\u008aF\2\u0778\u0776\3\2\2\2\u0779\u077c\3\2\2\2\u077a")
        buf.write("\u0778\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u008d\3\2\2\2")
        buf.write("\u077c\u077a\3\2\2\2\u077d\u077e\5\u0090I\2\u077e\u008f")
        buf.write("\3\2\2\2\u077f\u0780\bI\1\2\u0780\u0781\7\"\2\2\u0781")
        buf.write("\u078c\5\u0090I\7\u0782\u0783\7$\2\2\u0783\u0784\7\3\2")
        buf.write("\2\u0784\u0785\5\32\16\2\u0785\u0786\7\4\2\2\u0786\u078c")
        buf.write("\3\2\2\2\u0787\u0789\5\u0094K\2\u0788\u078a\5\u0092J\2")
        buf.write("\u0789\u0788\3\2\2\2\u0789\u078a\3\2\2\2\u078a\u078c\3")
        buf.write("\2\2\2\u078b\u077f\3\2\2\2\u078b\u0782\3\2\2\2\u078b\u0787")
        buf.write("\3\2\2\2\u078c\u0795\3\2\2\2\u078d\u078e\f\4\2\2\u078e")
        buf.write("\u078f\7 \2\2\u078f\u0794\5\u0090I\5\u0790\u0791\f\3\2")
        buf.write("\2\u0791\u0792\7\37\2\2\u0792\u0794\5\u0090I\4\u0793\u078d")
        buf.write("\3\2\2\2\u0793\u0790\3\2\2\2\u0794\u0797\3\2\2\2\u0795")
        buf.write("\u0793\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u0091\3\2\2\2")
        buf.write("\u0797\u0795\3\2\2\2\u0798\u079a\7\"\2\2\u0799\u0798\3")
        buf.write("\2\2\2\u0799\u079a\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079c")
        buf.write("\7%\2\2\u079c\u079d\5\u0094K\2\u079d\u079e\7 \2\2\u079e")
        buf.write("\u079f\5\u0094K\2\u079f\u07c9\3\2\2\2\u07a0\u07a2\7\"")
        buf.write("\2\2\u07a1\u07a0\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a3")
        buf.write("\3\2\2\2\u07a3\u07a4\7!\2\2\u07a4\u07a5\7\3\2\2\u07a5")
        buf.write("\u07aa\5\u008eH\2\u07a6\u07a7\7\5\2\2\u07a7\u07a9\5\u008e")
        buf.write("H\2\u07a8\u07a6\3\2\2\2\u07a9\u07ac\3\2\2\2\u07aa\u07a8")
        buf.write("\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ad\3\2\2\2\u07ac")
        buf.write("\u07aa\3\2\2\2\u07ad\u07ae\7\4\2\2\u07ae\u07c9\3\2\2\2")
        buf.write("\u07af\u07b1\7\"\2\2\u07b0\u07af\3\2\2\2\u07b0\u07b1\3")
        buf.write("\2\2\2\u07b1\u07b2\3\2\2\2\u07b2\u07b3\7!\2\2\u07b3\u07b4")
        buf.write("\7\3\2\2\u07b4\u07b5\5\32\16\2\u07b5\u07b6\7\4\2\2\u07b6")
        buf.write("\u07c9\3\2\2\2\u07b7\u07b9\7\"\2\2\u07b8\u07b7\3\2\2\2")
        buf.write("\u07b8\u07b9\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bb\t")
        buf.write("\17\2\2\u07bb\u07c9\5\u0094K\2\u07bc\u07be\7(\2\2\u07bd")
        buf.write("\u07bf\7\"\2\2\u07be\u07bd\3\2\2\2\u07be\u07bf\3\2\2\2")
        buf.write("\u07bf\u07c0\3\2\2\2\u07c0\u07c9\7)\2\2\u07c1\u07c3\7")
        buf.write("(\2\2\u07c2\u07c4\7\"\2\2\u07c3\u07c2\3\2\2\2\u07c3\u07c4")
        buf.write("\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u07c6\7\23\2\2\u07c6")
        buf.write("\u07c7\7\16\2\2\u07c7\u07c9\5\u0094K\2\u07c8\u0799\3\2")
        buf.write("\2\2\u07c8\u07a1\3\2\2\2\u07c8\u07b0\3\2\2\2\u07c8\u07b8")
        buf.write("\3\2\2\2\u07c8\u07bc\3\2\2\2\u07c8\u07c1\3\2\2\2\u07c9")
        buf.write("\u0093\3\2\2\2\u07ca\u07cb\bK\1\2\u07cb\u07cf\5\u0096")
        buf.write("L\2\u07cc\u07cd\t\20\2\2\u07cd\u07cf\5\u0094K\t\u07ce")
        buf.write("\u07ca\3\2\2\2\u07ce\u07cc\3\2\2\2\u07cf\u07e5\3\2\2\2")
        buf.write("\u07d0\u07d1\f\b\2\2\u07d1\u07d2\t\21\2\2\u07d2\u07e4")
        buf.write("\5\u0094K\t\u07d3\u07d4\f\7\2\2\u07d4\u07d5\t\22\2\2\u07d5")
        buf.write("\u07e4\5\u0094K\b\u07d6\u07d7\f\6\2\2\u07d7\u07d8\7\u0093")
        buf.write("\2\2\u07d8\u07e4\5\u0094K\7\u07d9\u07da\f\5\2\2\u07da")
        buf.write("\u07db\7\u0096\2\2\u07db\u07e4\5\u0094K\6\u07dc\u07dd")
        buf.write("\f\4\2\2\u07dd\u07de\7\u0094\2\2\u07de\u07e4\5\u0094K")
        buf.write("\5\u07df\u07e0\f\3\2\2\u07e0\u07e1\5\u009aN\2\u07e1\u07e2")
        buf.write("\5\u0094K\4\u07e2\u07e4\3\2\2\2\u07e3\u07d0\3\2\2\2\u07e3")
        buf.write("\u07d3\3\2\2\2\u07e3\u07d6\3\2\2\2\u07e3\u07d9\3\2\2\2")
        buf.write("\u07e3\u07dc\3\2\2\2\u07e3\u07df\3\2\2\2\u07e4\u07e7\3")
        buf.write("\2\2\2\u07e5\u07e3\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u0095")
        buf.write("\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e8\u07e9\bL\1\2\u07e9")
        buf.write("\u07eb\7\61\2\2\u07ea\u07ec\5\u00b4[\2\u07eb\u07ea\3\2")
        buf.write("\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07eb\3\2\2\2\u07ed\u07ee")
        buf.write("\3\2\2\2\u07ee\u07f1\3\2\2\2\u07ef\u07f0\7\64\2\2\u07f0")
        buf.write("\u07f2\5\u008eH\2\u07f1\u07ef\3\2\2\2\u07f1\u07f2\3\2")
        buf.write("\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\7\65\2\2\u07f4\u087a")
        buf.write("\3\2\2\2\u07f5\u07f6\7\61\2\2\u07f6\u07f8\5\u008eH\2\u07f7")
        buf.write("\u07f9\5\u00b4[\2\u07f8\u07f7\3\2\2\2\u07f9\u07fa\3\2")
        buf.write("\2\2\u07fa\u07f8\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u07fe")
        buf.write("\3\2\2\2\u07fc\u07fd\7\64\2\2\u07fd\u07ff\5\u008eH\2\u07fe")
        buf.write("\u07fc\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0800\3\2\2\2")
        buf.write("\u0800\u0801\7\65\2\2\u0801\u087a\3\2\2\2\u0802\u0803")
        buf.write("\7_\2\2\u0803\u0804\7\3\2\2\u0804\u0805\5\u008eH\2\u0805")
        buf.write("\u0806\7\20\2\2\u0806\u0807\5\u00aaV\2\u0807\u0808\7\4")
        buf.write("\2\2\u0808\u087a\3\2\2\2\u0809\u080a\7s\2\2\u080a\u0813")
        buf.write("\7\3\2\2\u080b\u0810\5\u008aF\2\u080c\u080d\7\5\2\2\u080d")
        buf.write("\u080f\5\u008aF\2\u080e\u080c\3\2\2\2\u080f\u0812\3\2")
        buf.write("\2\2\u0810\u080e\3\2\2\2\u0810\u0811\3\2\2\2\u0811\u0814")
        buf.write("\3\2\2\2\u0812\u0810\3\2\2\2\u0813\u080b\3\2\2\2\u0813")
        buf.write("\u0814\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u087a\7\4\2\2")
        buf.write("\u0816\u0817\7K\2\2\u0817\u0818\7\3\2\2\u0818\u081b\5")
        buf.write("\u008eH\2\u0819\u081a\7}\2\2\u081a\u081c\7,\2\2\u081b")
        buf.write("\u0819\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081d\3\2\2\2")
        buf.write("\u081d\u081e\7\4\2\2\u081e\u087a\3\2\2\2\u081f\u0820\7")
        buf.write("M\2\2\u0820\u0821\7\3\2\2\u0821\u0824\5\u008eH\2\u0822")
        buf.write("\u0823\7}\2\2\u0823\u0825\7,\2\2\u0824\u0822\3\2\2\2\u0824")
        buf.write("\u0825\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u0827\7\4\2\2")
        buf.write("\u0827\u087a\3\2\2\2\u0828\u0829\7\u0082\2\2\u0829\u082a")
        buf.write("\7\3\2\2\u082a\u082b\5\u0094K\2\u082b\u082c\7!\2\2\u082c")
        buf.write("\u082d\5\u0094K\2\u082d\u082e\7\4\2\2\u082e\u087a\3\2")
        buf.write("\2\2\u082f\u087a\5\u0098M\2\u0830\u087a\7\u008e\2\2\u0831")
        buf.write("\u0832\5\u00c0a\2\u0832\u0833\7\6\2\2\u0833\u0834\7\u008e")
        buf.write("\2\2\u0834\u087a\3\2\2\2\u0835\u0836\7\3\2\2\u0836\u0839")
        buf.write("\5\u008aF\2\u0837\u0838\7\5\2\2\u0838\u083a\5\u008aF\2")
        buf.write("\u0839\u0837\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u0839\3")
        buf.write("\2\2\2\u083b\u083c\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083e")
        buf.write("\7\4\2\2\u083e\u087a\3\2\2\2\u083f\u0840\7\3\2\2\u0840")
        buf.write("\u0841\5\32\16\2\u0841\u0842\7\4\2\2\u0842\u087a\3\2\2")
        buf.write("\2\u0843\u0844\5\u00c0a\2\u0844\u0850\7\3\2\2\u0845\u0847")
        buf.write("\5b\62\2\u0846\u0845\3\2\2\2\u0846\u0847\3\2\2\2\u0847")
        buf.write("\u0848\3\2\2\2\u0848\u084d\5\u008eH\2\u0849\u084a\7\5")
        buf.write("\2\2\u084a\u084c\5\u008eH\2\u084b\u0849\3\2\2\2\u084c")
        buf.write("\u084f\3\2\2\2\u084d\u084b\3\2\2\2\u084d\u084e\3\2\2\2")
        buf.write("\u084e\u0851\3\2\2\2\u084f\u084d\3\2\2\2\u0850\u0846\3")
        buf.write("\2\2\2\u0850\u0851\3\2\2\2\u0851\u0852\3\2\2\2\u0852\u0855")
        buf.write("\7\4\2\2\u0853\u0854\7C\2\2\u0854\u0856\5\u00ba^\2\u0855")
        buf.write("\u0853\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u087a\3\2\2\2")
        buf.write("\u0857\u0858\5\u00c0a\2\u0858\u0859\7\3\2\2\u0859\u085a")
        buf.write("\t\23\2\2\u085a\u085b\5\u008eH\2\u085b\u085c\7\16\2\2")
        buf.write("\u085c\u085d\5\u008eH\2\u085d\u085e\7\4\2\2\u085e\u087a")
        buf.write("\3\2\2\2\u085f\u0860\7\u00fa\2\2\u0860\u0861\7\t\2\2\u0861")
        buf.write("\u087a\5\u008eH\2\u0862\u0863\7\3\2\2\u0863\u0866\7\u00fa")
        buf.write("\2\2\u0864\u0865\7\5\2\2\u0865\u0867\7\u00fa\2\2\u0866")
        buf.write("\u0864\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u0866\3\2\2\2")
        buf.write("\u0868\u0869\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u086b\7")
        buf.write("\4\2\2\u086b\u086c\7\t\2\2\u086c\u087a\5\u008eH\2\u086d")
        buf.write("\u087a\5\u00c2b\2\u086e\u086f\7\3\2\2\u086f\u0870\5\u008e")
        buf.write("H\2\u0870\u0871\7\4\2\2\u0871\u087a\3\2\2\2\u0872\u0873")
        buf.write("\7\u0083\2\2\u0873\u0874\7\3\2\2\u0874\u0875\5\u00c2b")
        buf.write("\2\u0875\u0876\7\16\2\2\u0876\u0877\5\u0094K\2\u0877\u0878")
        buf.write("\7\4\2\2\u0878\u087a\3\2\2\2\u0879\u07e8\3\2\2\2\u0879")
        buf.write("\u07f5\3\2\2\2\u0879\u0802\3\2\2\2\u0879\u0809\3\2\2\2")
        buf.write("\u0879\u0816\3\2\2\2\u0879\u081f\3\2\2\2\u0879\u0828\3")
        buf.write("\2\2\2\u0879\u082f\3\2\2\2\u0879\u0830\3\2\2\2\u0879\u0831")
        buf.write("\3\2\2\2\u0879\u0835\3\2\2\2\u0879\u083f\3\2\2\2\u0879")
        buf.write("\u0843\3\2\2\2\u0879\u0857\3\2\2\2\u0879\u085f\3\2\2\2")
        buf.write("\u0879\u0862\3\2\2\2\u0879\u086d\3\2\2\2\u0879\u086e\3")
        buf.write("\2\2\2\u0879\u0872\3\2\2\2\u087a\u0885\3\2\2\2\u087b\u087c")
        buf.write("\f\7\2\2\u087c\u087d\7\n\2\2\u087d\u087e\5\u0094K\2\u087e")
        buf.write("\u087f\7\13\2\2\u087f\u0884\3\2\2\2\u0880\u0881\f\5\2")
        buf.write("\2\u0881\u0882\7\6\2\2\u0882\u0884\5\u00c2b\2\u0883\u087b")
        buf.write("\3\2\2\2\u0883\u0880\3\2\2\2\u0884\u0887\3\2\2\2\u0885")
        buf.write("\u0883\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u0097\3\2\2\2")
        buf.write("\u0887\u0885\3\2\2\2\u0888\u0895\7)\2\2\u0889\u0895\5")
        buf.write("\u00a2R\2\u088a\u088b\5\u00c2b\2\u088b\u088c\7\u00f2\2")
        buf.write("\2\u088c\u0895\3\2\2\2\u088d\u0895\5\u00c8e\2\u088e\u0895")
        buf.write("\5\u00a0Q\2\u088f\u0891\7\u00f2\2\2\u0890\u088f\3\2\2")
        buf.write("\2\u0891\u0892\3\2\2\2\u0892\u0890\3\2\2\2\u0892\u0893")
        buf.write("\3\2\2\2\u0893\u0895\3\2\2\2\u0894\u0888\3\2\2\2\u0894")
        buf.write("\u0889\3\2\2\2\u0894\u088a\3\2\2\2\u0894\u088d\3\2\2\2")
        buf.write("\u0894\u088e\3\2\2\2\u0894\u0890\3\2\2\2\u0895\u0099\3")
        buf.write("\2\2\2\u0896\u0897\t\24\2\2\u0897\u009b\3\2\2\2\u0898")
        buf.write("\u0899\t\25\2\2\u0899\u009d\3\2\2\2\u089a\u089b\t\26\2")
        buf.write("\2\u089b\u009f\3\2\2\2\u089c\u089d\t\27\2\2\u089d\u00a1")
        buf.write("\3\2\2\2\u089e\u08a2\7\60\2\2\u089f\u08a1\5\u00a4S\2\u08a0")
        buf.write("\u089f\3\2\2\2\u08a1\u08a4\3\2\2\2\u08a2\u08a0\3\2\2\2")
        buf.write("\u08a2\u08a3\3\2\2\2\u08a3\u00a3\3\2\2\2\u08a4\u08a2\3")
        buf.write("\2\2\2\u08a5\u08a6\5\u00a6T\2\u08a6\u08a9\5\u00c2b\2\u08a7")
        buf.write("\u08a8\7l\2\2\u08a8\u08aa\5\u00c2b\2\u08a9\u08a7\3\2\2")
        buf.write("\2\u08a9\u08aa\3\2\2\2\u08aa\u00a5\3\2\2\2\u08ab\u08ad")
        buf.write("\t\30\2\2\u08ac\u08ab\3\2\2\2\u08ac\u08ad\3\2\2\2\u08ad")
        buf.write("\u08ae\3\2\2\2\u08ae\u08b1\t\16\2\2\u08af\u08b1\7\u00f2")
        buf.write("\2\2\u08b0\u08ac\3\2\2\2\u08b0\u08af\3\2\2\2\u08b1\u00a7")
        buf.write("\3\2\2\2\u08b2\u08b6\7K\2\2\u08b3\u08b4\7L\2\2\u08b4\u08b6")
        buf.write("\5\u00c2b\2\u08b5\u08b2\3\2\2\2\u08b5\u08b3\3\2\2\2\u08b6")
        buf.write("\u00a9\3\2\2\2\u08b7\u08b8\7q\2\2\u08b8\u08b9\7\u0088")
        buf.write("\2\2\u08b9\u08ba\5\u00aaV\2\u08ba\u08bb\7\u008a\2\2\u08bb")
        buf.write("\u08da\3\2\2\2\u08bc\u08bd\7r\2\2\u08bd\u08be\7\u0088")
        buf.write("\2\2\u08be\u08bf\5\u00aaV\2\u08bf\u08c0\7\5\2\2\u08c0")
        buf.write("\u08c1\5\u00aaV\2\u08c1\u08c2\7\u008a\2\2\u08c2\u08da")
        buf.write("\3\2\2\2\u08c3\u08ca\7s\2\2\u08c4\u08c6\7\u0088\2\2\u08c5")
        buf.write("\u08c7\5\u00b0Y\2\u08c6\u08c5\3\2\2\2\u08c6\u08c7\3\2")
        buf.write("\2\2\u08c7\u08c8\3\2\2\2\u08c8\u08cb\7\u008a\2\2\u08c9")
        buf.write("\u08cb\7\u0086\2\2\u08ca\u08c4\3\2\2\2\u08ca\u08c9\3\2")
        buf.write("\2\2\u08cb\u08da\3\2\2\2\u08cc\u08d7\5\u00c2b\2\u08cd")
        buf.write("\u08ce\7\3\2\2\u08ce\u08d3\7\u00f6\2\2\u08cf\u08d0\7\5")
        buf.write("\2\2\u08d0\u08d2\7\u00f6\2\2\u08d1\u08cf\3\2\2\2\u08d2")
        buf.write("\u08d5\3\2\2\2\u08d3\u08d1\3\2\2\2\u08d3\u08d4\3\2\2\2")
        buf.write("\u08d4\u08d6\3\2\2\2\u08d5\u08d3\3\2\2\2\u08d6\u08d8\7")
        buf.write("\4\2\2\u08d7\u08cd\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8\u08da")
        buf.write("\3\2\2\2\u08d9\u08b7\3\2\2\2\u08d9\u08bc\3\2\2\2\u08d9")
        buf.write("\u08c3\3\2\2\2\u08d9\u08cc\3\2\2\2\u08da\u00ab\3\2\2\2")
        buf.write("\u08db\u08e0\5\u00aeX\2\u08dc\u08dd\7\5\2\2\u08dd\u08df")
        buf.write("\5\u00aeX\2\u08de\u08dc\3\2\2\2\u08df\u08e2\3\2\2\2\u08e0")
        buf.write("\u08de\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u00ad\3\2\2\2")
        buf.write("\u08e2\u08e0\3\2\2\2\u08e3\u08e4\5\u00c2b\2\u08e4\u08e7")
        buf.write("\5\u00aaV\2\u08e5\u08e6\7t\2\2\u08e6\u08e8\7\u00f2\2\2")
        buf.write("\u08e7\u08e5\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u00af\3")
        buf.write("\2\2\2\u08e9\u08ee\5\u00b2Z\2\u08ea\u08eb\7\5\2\2\u08eb")
        buf.write("\u08ed\5\u00b2Z\2\u08ec\u08ea\3\2\2\2\u08ed\u08f0\3\2")
        buf.write("\2\2\u08ee\u08ec\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u00b1")
        buf.write("\3\2\2\2\u08f0\u08ee\3\2\2\2\u08f1\u08f2\5\u00c2b\2\u08f2")
        buf.write("\u08f3\7\f\2\2\u08f3\u08f6\5\u00aaV\2\u08f4\u08f5\7t\2")
        buf.write("\2\u08f5\u08f7\7\u00f2\2\2\u08f6\u08f4\3\2\2\2\u08f6\u08f7")
        buf.write("\3\2\2\2\u08f7\u00b3\3\2\2\2\u08f8\u08f9\7\62\2\2\u08f9")
        buf.write("\u08fa\5\u008eH\2\u08fa\u08fb\7\63\2\2\u08fb\u08fc\5\u008e")
        buf.write("H\2\u08fc\u00b5\3\2\2\2\u08fd\u08fe\7B\2\2\u08fe\u0903")
        buf.write("\5\u00b8]\2\u08ff\u0900\7\5\2\2\u0900\u0902\5\u00b8]\2")
        buf.write("\u0901\u08ff\3\2\2\2\u0902\u0905\3\2\2\2\u0903\u0901\3")
        buf.write("\2\2\2\u0903\u0904\3\2\2\2\u0904\u00b7\3\2\2\2\u0905\u0903")
        buf.write("\3\2\2\2\u0906\u0907\5\u00c2b\2\u0907\u0908\7\20\2\2\u0908")
        buf.write("\u0909\5\u00ba^\2\u0909\u00b9\3\2\2\2\u090a\u0939\5\u00c2")
        buf.write("b\2\u090b\u090c\7\3\2\2\u090c\u090d\5\u00c2b\2\u090d\u090e")
        buf.write("\7\4\2\2\u090e\u0939\3\2\2\2\u090f\u0932\7\3\2\2\u0910")
        buf.write("\u0911\7\u009c\2\2\u0911\u0912\7\26\2\2\u0912\u0917\5")
        buf.write("\u008eH\2\u0913\u0914\7\5\2\2\u0914\u0916\5\u008eH\2\u0915")
        buf.write("\u0913\3\2\2\2\u0916\u0919\3\2\2\2\u0917\u0915\3\2\2\2")
        buf.write("\u0917\u0918\3\2\2\2\u0918\u0933\3\2\2\2\u0919\u0917\3")
        buf.write("\2\2\2\u091a\u091b\t\31\2\2\u091b\u091c\7\26\2\2\u091c")
        buf.write("\u0921\5\u008eH\2\u091d\u091e\7\5\2\2\u091e\u0920\5\u008e")
        buf.write("H\2\u091f\u091d\3\2\2\2\u0920\u0923\3\2\2\2\u0921\u091f")
        buf.write("\3\2\2\2\u0921\u0922\3\2\2\2\u0922\u0925\3\2\2\2\u0923")
        buf.write("\u0921\3\2\2\2\u0924\u091a\3\2\2\2\u0924\u0925\3\2\2\2")
        buf.write("\u0925\u0930\3\2\2\2\u0926\u0927\t\32\2\2\u0927\u0928")
        buf.write("\7\26\2\2\u0928\u092d\5L\'\2\u0929\u092a\7\5\2\2\u092a")
        buf.write("\u092c\5L\'\2\u092b\u0929\3\2\2\2\u092c\u092f\3\2\2\2")
        buf.write("\u092d\u092b\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u0931\3")
        buf.write("\2\2\2\u092f\u092d\3\2\2\2\u0930\u0926\3\2\2\2\u0930\u0931")
        buf.write("\3\2\2\2\u0931\u0933\3\2\2\2\u0932\u0910\3\2\2\2\u0932")
        buf.write("\u0924\3\2\2\2\u0933\u0935\3\2\2\2\u0934\u0936\5\u00bc")
        buf.write("_\2\u0935\u0934\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0937")
        buf.write("\3\2\2\2\u0937\u0939\7\4\2\2\u0938\u090a\3\2\2\2\u0938")
        buf.write("\u090b\3\2\2\2\u0938\u090f\3\2\2\2\u0939\u00bb\3\2\2\2")
        buf.write("\u093a\u093b\7E\2\2\u093b\u094b\5\u00be`\2\u093c\u093d")
        buf.write("\7F\2\2\u093d\u094b\5\u00be`\2\u093e\u093f\7E\2\2\u093f")
        buf.write("\u0940\7%\2\2\u0940\u0941\5\u00be`\2\u0941\u0942\7 \2")
        buf.write("\2\u0942\u0943\5\u00be`\2\u0943\u094b\3\2\2\2\u0944\u0945")
        buf.write("\7F\2\2\u0945\u0946\7%\2\2\u0946\u0947\5\u00be`\2\u0947")
        buf.write("\u0948\7 \2\2\u0948\u0949\5\u00be`\2\u0949\u094b\3\2\2")
        buf.write("\2\u094a\u093a\3\2\2\2\u094a\u093c\3\2\2\2\u094a\u093e")
        buf.write("\3\2\2\2\u094a\u0944\3\2\2\2\u094b\u00bd\3\2\2\2\u094c")
        buf.write("\u094d\7G\2\2\u094d\u0954\t\33\2\2\u094e\u094f\7J\2\2")
        buf.write("\u094f\u0954\7N\2\2\u0950\u0951\5\u008eH\2\u0951\u0952")
        buf.write("\t\33\2\2\u0952\u0954\3\2\2\2\u0953\u094c\3\2\2\2\u0953")
        buf.write("\u094e\3\2\2\2\u0953\u0950\3\2\2\2\u0954\u00bf\3\2\2\2")
        buf.write("\u0955\u095a\5\u00c2b\2\u0956\u0957\7\6\2\2\u0957\u0959")
        buf.write("\5\u00c2b\2\u0958\u0956\3\2\2\2\u0959\u095c\3\2\2\2\u095a")
        buf.write("\u0958\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u00c1\3\2\2\2")
        buf.write("\u095c\u095a\3\2\2\2\u095d\u096d\5\u00c4c\2\u095e\u096d")
        buf.write("\7\u00ef\2\2\u095f\u096d\7=\2\2\u0960\u096d\79\2\2\u0961")
        buf.write("\u096d\7:\2\2\u0962\u096d\7;\2\2\u0963\u096d\7<\2\2\u0964")
        buf.write("\u096d\7>\2\2\u0965\u096d\7\66\2\2\u0966\u096d\7\67\2")
        buf.write("\2\u0967\u096d\7?\2\2\u0968\u096d\7h\2\2\u0969\u096d\7")
        buf.write("k\2\2\u096a\u096d\7i\2\2\u096b\u096d\7j\2\2\u096c\u095d")
        buf.write("\3\2\2\2\u096c\u095e\3\2\2\2\u096c\u095f\3\2\2\2\u096c")
        buf.write("\u0960\3\2\2\2\u096c\u0961\3\2\2\2\u096c\u0962\3\2\2\2")
        buf.write("\u096c\u0963\3\2\2\2\u096c\u0964\3\2\2\2\u096c\u0965\3")
        buf.write("\2\2\2\u096c\u0966\3\2\2\2\u096c\u0967\3\2\2\2\u096c\u0968")
        buf.write("\3\2\2\2\u096c\u0969\3\2\2\2\u096c\u096a\3\2\2\2\u096c")
        buf.write("\u096b\3\2\2\2\u096d\u00c3\3\2\2\2\u096e\u0972\7\u00fa")
        buf.write("\2\2\u096f\u0972\5\u00c6d\2\u0970\u0972\5\u00caf\2\u0971")
        buf.write("\u096e\3\2\2\2\u0971\u096f\3\2\2\2\u0971\u0970\3\2\2\2")
        buf.write("\u0972\u00c5\3\2\2\2\u0973\u0974\7\u00fb\2\2\u0974\u00c7")
        buf.write("\3\2\2\2\u0975\u0977\7\u008d\2\2\u0976\u0975\3\2\2\2\u0976")
        buf.write("\u0977\3\2\2\2\u0977\u0978\3\2\2\2\u0978\u0992\7\u00f7")
        buf.write("\2\2\u0979\u097b\7\u008d\2\2\u097a\u0979\3\2\2\2\u097a")
        buf.write("\u097b\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u0992\7\u00f6")
        buf.write("\2\2\u097d\u097f\7\u008d\2\2\u097e\u097d\3\2\2\2\u097e")
        buf.write("\u097f\3\2\2\2\u097f\u0980\3\2\2\2\u0980\u0992\7\u00f3")
        buf.write("\2\2\u0981\u0983\7\u008d\2\2\u0982\u0981\3\2\2\2\u0982")
        buf.write("\u0983\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0992\7\u00f4")
        buf.write("\2\2\u0985\u0987\7\u008d\2\2\u0986\u0985\3\2\2\2\u0986")
        buf.write("\u0987\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u0992\7\u00f5")
        buf.write("\2\2\u0989\u098b\7\u008d\2\2\u098a\u0989\3\2\2\2\u098a")
        buf.write("\u098b\3\2\2\2\u098b\u098c\3\2\2\2\u098c\u0992\7\u00f8")
        buf.write("\2\2\u098d\u098f\7\u008d\2\2\u098e\u098d\3\2\2\2\u098e")
        buf.write("\u098f\3\2\2\2\u098f\u0990\3\2\2\2\u0990\u0992\7\u00f9")
        buf.write("\2\2\u0991\u0976\3\2\2\2\u0991\u097a\3\2\2\2\u0991\u097e")
        buf.write("\3\2\2\2\u0991\u0982\3\2\2\2\u0991\u0986\3\2\2\2\u0991")
        buf.write("\u098a\3\2\2\2\u0991\u098e\3\2\2\2\u0992\u00c9\3\2\2\2")
        buf.write("\u0993\u0994\t\34\2\2\u0994\u00cb\3\2\2\2\u0148\u00e6")
        buf.write("\u00eb\u00ee\u00f3\u0100\u0104\u010b\u0119\u011b\u011f")
        buf.write("\u0122\u0129\u013a\u013c\u0140\u0143\u014a\u0150\u0156")
        buf.write("\u015e\u017e\u0186\u018a\u018f\u0195\u019d\u01a3\u01b0")
        buf.write("\u01b5\u01be\u01c3\u01d3\u01da\u01de\u01e6\u01ed\u01f4")
        buf.write("\u0203\u0207\u020d\u0213\u0216\u0219\u021f\u0223\u0227")
        buf.write("\u022c\u0230\u0238\u023b\u0244\u0249\u024f\u0256\u0259")
        buf.write("\u025f\u026a\u026d\u0271\u0276\u027b\u0282\u0285\u0288")
        buf.write("\u028f\u0294\u0299\u029c\u02a5\u02ad\u02b3\u02b7\u02bb")
        buf.write("\u02bf\u02c1\u02ca\u02d0\u02d5\u02d8\u02dc\u02df\u02e9")
        buf.write("\u02ec\u02f0\u02f5\u02f8\u02fe\u0306\u030b\u0311\u0317")
        buf.write("\u0322\u032a\u0331\u0339\u033c\u0344\u0348\u034f\u03c3")
        buf.write("\u03cb\u03d3\u03dc\u03e8\u03ec\u03ef\u03f5\u03ff\u040b")
        buf.write("\u0410\u0416\u0422\u0424\u0429\u042d\u0432\u0437\u043a")
        buf.write("\u043f\u0443\u0448\u044a\u044e\u0457\u045f\u0466\u046d")
        buf.write("\u0476\u047b\u048a\u0491\u0494\u049b\u049f\u04a5\u04ad")
        buf.write("\u04b8\u04c3\u04ca\u04d0\u04d6\u04df\u04e1\u04ea\u04ed")
        buf.write("\u04f6\u04f9\u0502\u0505\u050e\u0511\u0514\u0519\u051b")
        buf.write("\u051e\u052a\u0531\u0538\u053b\u053d\u0548\u054c\u0550")
        buf.write("\u055c\u055f\u0563\u056d\u0571\u0573\u0576\u057a\u057d")
        buf.write("\u0581\u0587\u058b\u058f\u0594\u0597\u0599\u059e\u05a3")
        buf.write("\u05a6\u05aa\u05ad\u05af\u05b4\u05b9\u05c6\u05cb\u05d3")
        buf.write("\u05d9\u05dd\u05e6\u05f5\u05fa\u0606\u060b\u0613\u0616")
        buf.write("\u061a\u0628\u0635\u063a\u063e\u0641\u0646\u064f\u0652")
        buf.write("\u0657\u065e\u0661\u0669\u0670\u0677\u067a\u067f\u0685")
        buf.write("\u0689\u068c\u068f\u069a\u069f\u06a4\u06a9\u06bb\u06bd")
        buf.write("\u06c0\u06cb\u06d4\u06db\u06e3\u06eb\u06ef\u06f7\u06ff")
        buf.write("\u0705\u070d\u0719\u071c\u0722\u0726\u0728\u0731\u073d")
        buf.write("\u073f\u0746\u074d\u0753\u0759\u075b\u0760\u0767\u076d")
        buf.write("\u0771\u0773\u077a\u0789\u078b\u0793\u0795\u0799\u07a1")
        buf.write("\u07aa\u07b0\u07b8\u07be\u07c3\u07c8\u07ce\u07e3\u07e5")
        buf.write("\u07ed\u07f1\u07fa\u07fe\u0810\u0813\u081b\u0824\u083b")
        buf.write("\u0846\u084d\u0850\u0855\u0868\u0879\u0883\u0885\u0892")
        buf.write("\u0894\u08a2\u08a9\u08ac\u08b0\u08b5\u08c6\u08ca\u08d3")
        buf.write("\u08d7\u08d9\u08e0\u08e7\u08ee\u08f6\u0903\u0917\u0921")
        buf.write("\u0924\u092d\u0930\u0932\u0935\u0938\u094a\u0953\u095a")
        buf.write("\u096c\u0971\u0976\u097a\u097e\u0982\u0986\u098a\u098e")
        buf.write("\u0991")
        return buf.getvalue()


class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "','", "'.'", "'/*+'", "'*/'", 
                     "'->'", "'['", "']'", "':'", "'SELECT'", "'FROM'", 
                     "'ADD'", "'AS'", "'ALL'", "'ANY'", "'DISTINCT'", "'WHERE'", 
                     "'GROUP'", "'BY'", "'GROUPING'", "'SETS'", "'CUBE'", 
                     "'ROLLUP'", "'ORDER'", "'HAVING'", "'LIMIT'", "'AT'", 
                     "'OR'", "'AND'", "'IN'", "<INVALID>", "'NO'", "'EXISTS'", 
                     "'BETWEEN'", "'LIKE'", "<INVALID>", "'IS'", "'NULL'", 
                     "'TRUE'", "'FALSE'", "'NULLS'", "'ASC'", "'DESC'", 
                     "'FOR'", "'INTERVAL'", "'CASE'", "'WHEN'", "'THEN'", 
                     "'ELSE'", "'END'", "'JOIN'", "'CROSS'", "'OUTER'", 
                     "'INNER'", "'LEFT'", "'SEMI'", "'RIGHT'", "'FULL'", 
                     "'NATURAL'", "'ON'", "'PIVOT'", "'LATERAL'", "'WINDOW'", 
                     "'OVER'", "'PARTITION'", "'RANGE'", "'ROWS'", "'UNBOUNDED'", 
                     "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", "'FIRST'", 
                     "'AFTER'", "'LAST'", "'ROW'", "'WITH'", "'VALUES'", 
                     "'CREATE'", "'TABLE'", "'DIRECTORY'", "'VIEW'", "'REPLACE'", 
                     "'INSERT'", "'DELETE'", "'INTO'", "'DESCRIBE'", "'EXPLAIN'", 
                     "'FORMAT'", "'LOGICAL'", "'CODEGEN'", "'COST'", "'CAST'", 
                     "'SHOW'", "'TABLES'", "'COLUMNS'", "'COLUMN'", "'USE'", 
                     "'PARTITIONS'", "'FUNCTIONS'", "'DROP'", "'UNION'", 
                     "'EXCEPT'", "'MINUS'", "'INTERSECT'", "'TO'", "'TABLESAMPLE'", 
                     "'STRATIFY'", "'ALTER'", "'RENAME'", "'ARRAY'", "'MAP'", 
                     "'STRUCT'", "'COMMENT'", "'SET'", "'RESET'", "'DATA'", 
                     "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", 
                     "'MACRO'", "'IGNORE'", "'BOTH'", "'LEADING'", "'TRAILING'", 
                     "'IF'", "'POSITION'", "'EXTRACT'", "<INVALID>", "'<=>'", 
                     "'<>'", "'!='", "'<'", "<INVALID>", "'>'", "<INVALID>", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'DIV'", "'~'", 
                     "'&'", "'|'", "'||'", "'^'", "'PERCENT'", "'BUCKET'", 
                     "'OUT'", "'OF'", "'SORT'", "'CLUSTER'", "'DISTRIBUTE'", 
                     "'OVERWRITE'", "'TRANSFORM'", "'REDUCE'", "'USING'", 
                     "'SERDE'", "'SERDEPROPERTIES'", "'RECORDREADER'", "'RECORDWRITER'", 
                     "'DELIMITED'", "'FIELDS'", "'TERMINATED'", "'COLLECTION'", 
                     "'ITEMS'", "'KEYS'", "'ESCAPED'", "'LINES'", "'SEPARATED'", 
                     "'FUNCTION'", "'EXTENDED'", "'REFRESH'", "'CLEAR'", 
                     "'CACHE'", "'UNCACHE'", "'LAZY'", "'FORMATTED'", "'GLOBAL'", 
                     "<INVALID>", "'OPTIONS'", "'UNSET'", "'TBLPROPERTIES'", 
                     "'DBPROPERTIES'", "'BUCKETS'", "'SKEWED'", "'STORED'", 
                     "'DIRECTORIES'", "'LOCATION'", "'EXCHANGE'", "'ARCHIVE'", 
                     "'UNARCHIVE'", "'FILEFORMAT'", "'TOUCH'", "'COMPACT'", 
                     "'CONCATENATE'", "'CHANGE'", "'CASCADE'", "'RESTRICT'", 
                     "'CLUSTERED'", "'SORTED'", "'PURGE'", "'INPUTFORMAT'", 
                     "'OUTPUTFORMAT'", "<INVALID>", "<INVALID>", "'DFS'", 
                     "'TRUNCATE'", "'ANALYZE'", "'COMPUTE'", "'LIST'", "'STATISTICS'", 
                     "'PARTITIONED'", "'EXTERNAL'", "'DEFINED'", "'REVOKE'", 
                     "'GRANT'", "'LOCK'", "'UNLOCK'", "'MSCK'", "'REPAIR'", 
                     "'RECOVER'", "'EXPORT'", "'IMPORT'", "'LOAD'", "'ROLE'", 
                     "'ROLES'", "'COMPACTIONS'", "'PRINCIPALS'", "'TRANSACTIONS'", 
                     "'INDEX'", "'INDEXES'", "'LOCKS'", "'OPTION'", "'ANTI'", 
                     "'LOCAL'", "'INPATH'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'/**/'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "SELECT", "FROM", 
                      "ADD", "AS", "ALL", "ANY", "DISTINCT", "WHERE", "GROUP", 
                      "BY", "GROUPING", "SETS", "CUBE", "ROLLUP", "ORDER", 
                      "HAVING", "LIMIT", "AT", "OR", "AND", "IN", "NOT", 
                      "NO", "EXISTS", "BETWEEN", "LIKE", "RLIKE", "IS", 
                      "NULL", "TRUE", "FALSE", "NULLS", "ASC", "DESC", "FOR", 
                      "INTERVAL", "CASE", "WHEN", "THEN", "ELSE", "END", 
                      "JOIN", "CROSS", "OUTER", "INNER", "LEFT", "SEMI", 
                      "RIGHT", "FULL", "NATURAL", "ON", "PIVOT", "LATERAL", 
                      "WINDOW", "OVER", "PARTITION", "RANGE", "ROWS", "UNBOUNDED", 
                      "PRECEDING", "FOLLOWING", "CURRENT", "FIRST", "AFTER", 
                      "LAST", "ROW", "WITH", "VALUES", "CREATE", "TABLE", 
                      "DIRECTORY", "VIEW", "REPLACE", "INSERT", "DELETE", 
                      "INTO", "DESCRIBE", "EXPLAIN", "FORMAT", "LOGICAL", 
                      "CODEGEN", "COST", "CAST", "SHOW", "TABLES", "COLUMNS", 
                      "COLUMN", "USE", "PARTITIONS", "FUNCTIONS", "DROP", 
                      "UNION", "EXCEPT", "SETMINUS", "INTERSECT", "TO", 
                      "TABLESAMPLE", "STRATIFY", "ALTER", "RENAME", "ARRAY", 
                      "MAP", "STRUCT", "COMMENT", "SET", "RESET", "DATA", 
                      "START", "TRANSACTION", "COMMIT", "ROLLBACK", "MACRO", 
                      "IGNORE", "BOTH", "LEADING", "TRAILING", "IF", "POSITION", 
                      "EXTRACT", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "PERCENTLIT", "BUCKET", "OUT", "OF", "SORT", 
                      "CLUSTER", "DISTRIBUTE", "OVERWRITE", "TRANSFORM", 
                      "REDUCE", "USING", "SERDE", "SERDEPROPERTIES", "RECORDREADER", 
                      "RECORDWRITER", "DELIMITED", "FIELDS", "TERMINATED", 
                      "COLLECTION", "ITEMS", "KEYS", "ESCAPED", "LINES", 
                      "SEPARATED", "FUNCTION", "EXTENDED", "REFRESH", "CLEAR", 
                      "CACHE", "UNCACHE", "LAZY", "FORMATTED", "GLOBAL", 
                      "TEMPORARY", "OPTIONS", "UNSET", "TBLPROPERTIES", 
                      "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES", 
                      "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT", 
                      "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE", 
                      "RESTRICT", "CLUSTERED", "SORTED", "PURGE", "INPUTFORMAT", 
                      "OUTPUTFORMAT", "DATABASE", "DATABASES", "DFS", "TRUNCATE", 
                      "ANALYZE", "COMPUTE", "LIST", "STATISTICS", "PARTITIONED", 
                      "EXTERNAL", "DEFINED", "REVOKE", "GRANT", "LOCK", 
                      "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", "IMPORT", 
                      "LOAD", "ROLE", "ROLES", "COMPACTIONS", "PRINCIPALS", 
                      "TRANSACTIONS", "INDEX", "INDEXES", "LOCKS", "OPTION", 
                      "ANTI", "LOCAL", "INPATH", "STRING", "BIGINT_LITERAL", 
                      "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", "WS", 
                      "UNRECOGNIZED" ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleFunctionIdentifier = 3
    RULE_singleDataType = 4
    RULE_singleTableSchema = 5
    RULE_statement = 6
    RULE_unsupportedHiveNativeCommands = 7
    RULE_createTableHeader = 8
    RULE_bucketSpec = 9
    RULE_skewSpec = 10
    RULE_locationSpec = 11
    RULE_query = 12
    RULE_insertInto = 13
    RULE_partitionSpecLocation = 14
    RULE_partitionSpec = 15
    RULE_partitionVal = 16
    RULE_describeFuncName = 17
    RULE_describeColName = 18
    RULE_ctes = 19
    RULE_namedQuery = 20
    RULE_tableProvider = 21
    RULE_tablePropertyList = 22
    RULE_tableProperty = 23
    RULE_tablePropertyKey = 24
    RULE_tablePropertyValue = 25
    RULE_constantList = 26
    RULE_nestedConstantList = 27
    RULE_createFileFormat = 28
    RULE_fileFormat = 29
    RULE_storageHandler = 30
    RULE_resource = 31
    RULE_queryNoWith = 32
    RULE_queryOrganization = 33
    RULE_multiInsertQueryBody = 34
    RULE_queryTerm = 35
    RULE_queryPrimary = 36
    RULE_sortItem = 37
    RULE_querySpecification = 38
    RULE_hint = 39
    RULE_hintStatement = 40
    RULE_fromClause = 41
    RULE_aggregation = 42
    RULE_groupingSet = 43
    RULE_pivotClause = 44
    RULE_pivotColumn = 45
    RULE_pivotValue = 46
    RULE_lateralView = 47
    RULE_setQuantifier = 48
    RULE_relation = 49
    RULE_joinRelation = 50
    RULE_joinType = 51
    RULE_joinCriteria = 52
    RULE_sample = 53
    RULE_sampleMethod = 54
    RULE_identifierList = 55
    RULE_identifierSeq = 56
    RULE_orderedIdentifierList = 57
    RULE_orderedIdentifier = 58
    RULE_identifierCommentList = 59
    RULE_identifierComment = 60
    RULE_relationPrimary = 61
    RULE_inlineTable = 62
    RULE_functionTable = 63
    RULE_tableAlias = 64
    RULE_rowFormat = 65
    RULE_tableIdentifier = 66
    RULE_functionIdentifier = 67
    RULE_namedExpression = 68
    RULE_namedExpressionSeq = 69
    RULE_expression = 70
    RULE_booleanExpression = 71
    RULE_predicate = 72
    RULE_valueExpression = 73
    RULE_primaryExpression = 74
    RULE_constant = 75
    RULE_comparisonOperator = 76
    RULE_arithmeticOperator = 77
    RULE_predicateOperator = 78
    RULE_booleanValue = 79
    RULE_interval = 80
    RULE_intervalField = 81
    RULE_intervalValue = 82
    RULE_colPosition = 83
    RULE_dataType = 84
    RULE_colTypeList = 85
    RULE_colType = 86
    RULE_complexColTypeList = 87
    RULE_complexColType = 88
    RULE_whenClause = 89
    RULE_windows = 90
    RULE_namedWindow = 91
    RULE_windowSpec = 92
    RULE_windowFrame = 93
    RULE_frameBound = 94
    RULE_qualifiedName = 95
    RULE_identifier = 96
    RULE_strictIdentifier = 97
    RULE_quotedIdentifier = 98
    RULE_number = 99
    RULE_nonReserved = 100

    ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "singleTableSchema", 
                   "statement", "unsupportedHiveNativeCommands", "createTableHeader", 
                   "bucketSpec", "skewSpec", "locationSpec", "query", "insertInto", 
                   "partitionSpecLocation", "partitionSpec", "partitionVal", 
                   "describeFuncName", "describeColName", "ctes", "namedQuery", 
                   "tableProvider", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "queryNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "querySpecification", "hint", "hintStatement", 
                   "fromClause", "aggregation", "groupingSet", "pivotClause", 
                   "pivotColumn", "pivotValue", "lateralView", "setQuantifier", 
                   "relation", "joinRelation", "joinType", "joinCriteria", 
                   "sample", "sampleMethod", "identifierList", "identifierSeq", 
                   "orderedIdentifierList", "orderedIdentifier", "identifierCommentList", 
                   "identifierComment", "relationPrimary", "inlineTable", 
                   "functionTable", "tableAlias", "rowFormat", "tableIdentifier", 
                   "functionIdentifier", "namedExpression", "namedExpressionSeq", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "arithmeticOperator", "predicateOperator", "booleanValue", 
                   "interval", "intervalField", "intervalValue", "colPosition", 
                   "dataType", "colTypeList", "colType", "complexColTypeList", 
                   "complexColType", "whenClause", "windows", "namedWindow", 
                   "windowSpec", "windowFrame", "frameBound", "qualifiedName", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    SELECT=11
    FROM=12
    ADD=13
    AS=14
    ALL=15
    ANY=16
    DISTINCT=17
    WHERE=18
    GROUP=19
    BY=20
    GROUPING=21
    SETS=22
    CUBE=23
    ROLLUP=24
    ORDER=25
    HAVING=26
    LIMIT=27
    AT=28
    OR=29
    AND=30
    IN=31
    NOT=32
    NO=33
    EXISTS=34
    BETWEEN=35
    LIKE=36
    RLIKE=37
    IS=38
    NULL=39
    TRUE=40
    FALSE=41
    NULLS=42
    ASC=43
    DESC=44
    FOR=45
    INTERVAL=46
    CASE=47
    WHEN=48
    THEN=49
    ELSE=50
    END=51
    JOIN=52
    CROSS=53
    OUTER=54
    INNER=55
    LEFT=56
    SEMI=57
    RIGHT=58
    FULL=59
    NATURAL=60
    ON=61
    PIVOT=62
    LATERAL=63
    WINDOW=64
    OVER=65
    PARTITION=66
    RANGE=67
    ROWS=68
    UNBOUNDED=69
    PRECEDING=70
    FOLLOWING=71
    CURRENT=72
    FIRST=73
    AFTER=74
    LAST=75
    ROW=76
    WITH=77
    VALUES=78
    CREATE=79
    TABLE=80
    DIRECTORY=81
    VIEW=82
    REPLACE=83
    INSERT=84
    DELETE=85
    INTO=86
    DESCRIBE=87
    EXPLAIN=88
    FORMAT=89
    LOGICAL=90
    CODEGEN=91
    COST=92
    CAST=93
    SHOW=94
    TABLES=95
    COLUMNS=96
    COLUMN=97
    USE=98
    PARTITIONS=99
    FUNCTIONS=100
    DROP=101
    UNION=102
    EXCEPT=103
    SETMINUS=104
    INTERSECT=105
    TO=106
    TABLESAMPLE=107
    STRATIFY=108
    ALTER=109
    RENAME=110
    ARRAY=111
    MAP=112
    STRUCT=113
    COMMENT=114
    SET=115
    RESET=116
    DATA=117
    START=118
    TRANSACTION=119
    COMMIT=120
    ROLLBACK=121
    MACRO=122
    IGNORE=123
    BOTH=124
    LEADING=125
    TRAILING=126
    IF=127
    POSITION=128
    EXTRACT=129
    EQ=130
    NSEQ=131
    NEQ=132
    NEQJ=133
    LT=134
    LTE=135
    GT=136
    GTE=137
    PLUS=138
    MINUS=139
    ASTERISK=140
    SLASH=141
    PERCENT=142
    DIV=143
    TILDE=144
    AMPERSAND=145
    PIPE=146
    CONCAT_PIPE=147
    HAT=148
    PERCENTLIT=149
    BUCKET=150
    OUT=151
    OF=152
    SORT=153
    CLUSTER=154
    DISTRIBUTE=155
    OVERWRITE=156
    TRANSFORM=157
    REDUCE=158
    USING=159
    SERDE=160
    SERDEPROPERTIES=161
    RECORDREADER=162
    RECORDWRITER=163
    DELIMITED=164
    FIELDS=165
    TERMINATED=166
    COLLECTION=167
    ITEMS=168
    KEYS=169
    ESCAPED=170
    LINES=171
    SEPARATED=172
    FUNCTION=173
    EXTENDED=174
    REFRESH=175
    CLEAR=176
    CACHE=177
    UNCACHE=178
    LAZY=179
    FORMATTED=180
    GLOBAL=181
    TEMPORARY=182
    OPTIONS=183
    UNSET=184
    TBLPROPERTIES=185
    DBPROPERTIES=186
    BUCKETS=187
    SKEWED=188
    STORED=189
    DIRECTORIES=190
    LOCATION=191
    EXCHANGE=192
    ARCHIVE=193
    UNARCHIVE=194
    FILEFORMAT=195
    TOUCH=196
    COMPACT=197
    CONCATENATE=198
    CHANGE=199
    CASCADE=200
    RESTRICT=201
    CLUSTERED=202
    SORTED=203
    PURGE=204
    INPUTFORMAT=205
    OUTPUTFORMAT=206
    DATABASE=207
    DATABASES=208
    DFS=209
    TRUNCATE=210
    ANALYZE=211
    COMPUTE=212
    LIST=213
    STATISTICS=214
    PARTITIONED=215
    EXTERNAL=216
    DEFINED=217
    REVOKE=218
    GRANT=219
    LOCK=220
    UNLOCK=221
    MSCK=222
    REPAIR=223
    RECOVER=224
    EXPORT=225
    IMPORT=226
    LOAD=227
    ROLE=228
    ROLES=229
    COMPACTIONS=230
    PRINCIPALS=231
    TRANSACTIONS=232
    INDEX=233
    INDEXES=234
    LOCKS=235
    OPTION=236
    ANTI=237
    LOCAL=238
    INPATH=239
    STRING=240
    BIGINT_LITERAL=241
    SMALLINT_LITERAL=242
    TINYINT_LITERAL=243
    INTEGER_VALUE=244
    DECIMAL_VALUE=245
    DOUBLE_LITERAL=246
    BIGDECIMAL_LITERAL=247
    IDENTIFIER=248
    BACKQUOTED_IDENTIFIER=249
    SIMPLE_COMMENT=250
    BRACKETED_EMPTY_COMMENT=251
    BRACKETED_COMMENT=252
    WS=253
    UNRECOGNIZED=254

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



      /**
       * When false, INTERSECT is given the greater precedence over the other set
       * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
       */
      public boolean legacy_setops_precedence_enbled = false;

      /**
       * Verify whether current token is a valid decimal token (which contains dot).
       * Returns true if the character that follows the token is not a digit or letter or underscore.
       *
       * For example:
       * For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
       * For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
       * For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
       * For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is followed
       * by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
       * which is not a digit or letter or underscore.
       */
      public boolean isValidDecimal() {
        int nextChar = _input.LA(1);
        if (nextChar >= 'A' && nextChar <= 'Z' || nextChar >= '0' && nextChar <= '9' ||
          nextChar == '_') {
          return false;
        } else {
          return true;
        }
      }



    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.statement()
            self.state = 203
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.namedExpression()
            self.state = 206
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)




    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.tableIdentifier()
            self.state = 209
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)




    def singleFunctionIdentifier(self):

        localctx = SqlBaseParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.functionIdentifier()
            self.state = 212
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)




    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.dataType()
            self.state = 215
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableSchema" ):
                listener.enterSingleTableSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableSchema" ):
                listener.exitSingleTableSchema(self)




    def singleTableSchema(self):

        localctx = SqlBaseParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.colTypeList()
            self.state = 218
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)


    class DropDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)


    class DescribeDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeDatabase" ):
                listener.enterDescribeDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeDatabase" ):
                listener.exitDescribeDatabase(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from = None # TableIdentifierContext
            self.to = None # TableIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(SqlBaseParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecLocationContext,i)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)


    class CreateDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.comment = None # Token
            self.partitionColumns = None # ColTypeListContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,i)

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,i)

        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMENT)
            else:
                return self.getToken(SqlBaseParser.COMMENT, i)
        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateHiveTable" ):
                listener.enterCreateHiveTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateHiveTable" ):
                listener.exitCreateHiveTable(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTable" ):
                listener.enterShowTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTable" ):
                listener.exitShowTable(self)


    class SetDatabasePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDatabaseProperties" ):
                listener.enterSetDatabaseProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDatabaseProperties" ):
                listener.exitSetDatabaseProperties(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.comment = None # Token
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.OPTIONS)
            else:
                return self.getToken(SqlBaseParser.OPTIONS, i)
        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMENT)
            else:
                return self.getToken(SqlBaseParser.COMMENT, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,i)

        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,i)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)


    class DescribeTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeTable" ):
                listener.enterDescribeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeTable" ):
                listener.exitDescribeTable(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)


    class ChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeColumn" ):
                listener.enterChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeColumn" ):
                listener.exitChangeColumn(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentListContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)


    class ShowDatabasesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDatabases" ):
                listener.enterShowDatabases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDatabases" ):
                listener.exitShowDatabases(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # TableIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 220
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 221
                self.match(SqlBaseParser.USE)
                self.state = 222
                localctx.db = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CreateDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 223
                self.match(SqlBaseParser.CREATE)
                self.state = 224
                self.match(SqlBaseParser.DATABASE)
                self.state = 228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 225
                    self.match(SqlBaseParser.IF)
                    self.state = 226
                    self.match(SqlBaseParser.NOT)
                    self.state = 227
                    self.match(SqlBaseParser.EXISTS)


                self.state = 230
                self.identifier()
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 231
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 232
                    localctx.comment = self.match(SqlBaseParser.STRING)


                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCATION:
                    self.state = 235
                    self.locationSpec()


                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 238
                    self.match(SqlBaseParser.WITH)
                    self.state = 239
                    self.match(SqlBaseParser.DBPROPERTIES)
                    self.state = 240
                    self.tablePropertyList()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SetDatabasePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 243
                self.match(SqlBaseParser.ALTER)
                self.state = 244
                self.match(SqlBaseParser.DATABASE)
                self.state = 245
                self.identifier()
                self.state = 246
                self.match(SqlBaseParser.SET)
                self.state = 247
                self.match(SqlBaseParser.DBPROPERTIES)
                self.state = 248
                self.tablePropertyList()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 250
                self.match(SqlBaseParser.DROP)
                self.state = 251
                self.match(SqlBaseParser.DATABASE)
                self.state = 254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 252
                    self.match(SqlBaseParser.IF)
                    self.state = 253
                    self.match(SqlBaseParser.EXISTS)


                self.state = 256
                self.identifier()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT:
                    self.state = 257
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 260
                self.createTableHeader()
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__0:
                    self.state = 261
                    self.match(SqlBaseParser.T__0)
                    self.state = 262
                    self.colTypeList()
                    self.state = 263
                    self.match(SqlBaseParser.T__1)


                self.state = 267
                self.tableProvider()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.COMMENT or ((((_la - 183)) & ~0x3f) == 0 and ((1 << (_la - 183)) & ((1 << (SqlBaseParser.OPTIONS - 183)) | (1 << (SqlBaseParser.TBLPROPERTIES - 183)) | (1 << (SqlBaseParser.LOCATION - 183)) | (1 << (SqlBaseParser.CLUSTERED - 183)) | (1 << (SqlBaseParser.PARTITIONED - 183)))) != 0):
                    self.state = 279
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.OPTIONS]:
                        self.state = 268
                        self.match(SqlBaseParser.OPTIONS)
                        self.state = 269
                        localctx.options = self.tablePropertyList()
                        pass
                    elif token in [SqlBaseParser.PARTITIONED]:
                        self.state = 270
                        self.match(SqlBaseParser.PARTITIONED)
                        self.state = 271
                        self.match(SqlBaseParser.BY)
                        self.state = 272
                        localctx.partitionColumnNames = self.identifierList()
                        pass
                    elif token in [SqlBaseParser.CLUSTERED]:
                        self.state = 273
                        self.bucketSpec()
                        pass
                    elif token in [SqlBaseParser.LOCATION]:
                        self.state = 274
                        self.locationSpec()
                        pass
                    elif token in [SqlBaseParser.COMMENT]:
                        self.state = 275
                        self.match(SqlBaseParser.COMMENT)
                        self.state = 276
                        localctx.comment = self.match(SqlBaseParser.STRING)
                        pass
                    elif token in [SqlBaseParser.TBLPROPERTIES]:
                        self.state = 277
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 278
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SqlBaseParser.WITH - 77)) | (1 << (SqlBaseParser.VALUES - 77)) | (1 << (SqlBaseParser.TABLE - 77)) | (1 << (SqlBaseParser.INSERT - 77)) | (1 << (SqlBaseParser.MAP - 77)))) != 0) or _la==SqlBaseParser.REDUCE:
                    self.state = 285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 284
                        self.match(SqlBaseParser.AS)


                    self.state = 287
                    self.query()


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 290
                self.createTableHeader()
                self.state = 295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 291
                    self.match(SqlBaseParser.T__0)
                    self.state = 292
                    localctx.columns = self.colTypeList()
                    self.state = 293
                    self.match(SqlBaseParser.T__1)


                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.ROW or _la==SqlBaseParser.COMMENT or ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (SqlBaseParser.TBLPROPERTIES - 185)) | (1 << (SqlBaseParser.SKEWED - 185)) | (1 << (SqlBaseParser.STORED - 185)) | (1 << (SqlBaseParser.LOCATION - 185)) | (1 << (SqlBaseParser.CLUSTERED - 185)) | (1 << (SqlBaseParser.PARTITIONED - 185)))) != 0):
                    self.state = 312
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.COMMENT]:
                        self.state = 297
                        self.match(SqlBaseParser.COMMENT)
                        self.state = 298
                        localctx.comment = self.match(SqlBaseParser.STRING)
                        pass
                    elif token in [SqlBaseParser.PARTITIONED]:
                        self.state = 299
                        self.match(SqlBaseParser.PARTITIONED)
                        self.state = 300
                        self.match(SqlBaseParser.BY)
                        self.state = 301
                        self.match(SqlBaseParser.T__0)
                        self.state = 302
                        localctx.partitionColumns = self.colTypeList()
                        self.state = 303
                        self.match(SqlBaseParser.T__1)
                        pass
                    elif token in [SqlBaseParser.CLUSTERED]:
                        self.state = 305
                        self.bucketSpec()
                        pass
                    elif token in [SqlBaseParser.SKEWED]:
                        self.state = 306
                        self.skewSpec()
                        pass
                    elif token in [SqlBaseParser.ROW]:
                        self.state = 307
                        self.rowFormat()
                        pass
                    elif token in [SqlBaseParser.STORED]:
                        self.state = 308
                        self.createFileFormat()
                        pass
                    elif token in [SqlBaseParser.LOCATION]:
                        self.state = 309
                        self.locationSpec()
                        pass
                    elif token in [SqlBaseParser.TBLPROPERTIES]:
                        self.state = 310
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 311
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SqlBaseParser.WITH - 77)) | (1 << (SqlBaseParser.VALUES - 77)) | (1 << (SqlBaseParser.TABLE - 77)) | (1 << (SqlBaseParser.INSERT - 77)) | (1 << (SqlBaseParser.MAP - 77)))) != 0) or _la==SqlBaseParser.REDUCE:
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 317
                        self.match(SqlBaseParser.AS)


                    self.state = 320
                    self.query()


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 323
                self.match(SqlBaseParser.CREATE)
                self.state = 324
                self.match(SqlBaseParser.TABLE)
                self.state = 328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 325
                    self.match(SqlBaseParser.IF)
                    self.state = 326
                    self.match(SqlBaseParser.NOT)
                    self.state = 327
                    self.match(SqlBaseParser.EXISTS)


                self.state = 330
                localctx.target = self.tableIdentifier()
                self.state = 331
                self.match(SqlBaseParser.LIKE)
                self.state = 332
                localctx.source = self.tableIdentifier()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCATION:
                    self.state = 333
                    self.locationSpec()


                pass

            elif la_ == 9:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 336
                self.match(SqlBaseParser.ANALYZE)
                self.state = 337
                self.match(SqlBaseParser.TABLE)
                self.state = 338
                self.tableIdentifier()
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 339
                    self.partitionSpec()


                self.state = 342
                self.match(SqlBaseParser.COMPUTE)
                self.state = 343
                self.match(SqlBaseParser.STATISTICS)
                self.state = 348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 344
                    self.identifier()

                elif la_ == 2:
                    self.state = 345
                    self.match(SqlBaseParser.FOR)
                    self.state = 346
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 347
                    self.identifierSeq()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 350
                self.match(SqlBaseParser.ALTER)
                self.state = 351
                self.match(SqlBaseParser.TABLE)
                self.state = 352
                self.tableIdentifier()
                self.state = 353
                self.match(SqlBaseParser.ADD)
                self.state = 354
                self.match(SqlBaseParser.COLUMNS)
                self.state = 355
                self.match(SqlBaseParser.T__0)
                self.state = 356
                localctx.columns = self.colTypeList()
                self.state = 357
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 359
                self.match(SqlBaseParser.ALTER)
                self.state = 360
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 361
                localctx.from = self.tableIdentifier()
                self.state = 362
                self.match(SqlBaseParser.RENAME)
                self.state = 363
                self.match(SqlBaseParser.TO)
                self.state = 364
                localctx.to = self.tableIdentifier()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 366
                self.match(SqlBaseParser.ALTER)
                self.state = 367
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 368
                self.tableIdentifier()
                self.state = 369
                self.match(SqlBaseParser.SET)
                self.state = 370
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 371
                self.tablePropertyList()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 373
                self.match(SqlBaseParser.ALTER)
                self.state = 374
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 375
                self.tableIdentifier()
                self.state = 376
                self.match(SqlBaseParser.UNSET)
                self.state = 377
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 378
                    self.match(SqlBaseParser.IF)
                    self.state = 379
                    self.match(SqlBaseParser.EXISTS)


                self.state = 382
                self.tablePropertyList()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 384
                self.match(SqlBaseParser.ALTER)
                self.state = 385
                self.match(SqlBaseParser.TABLE)
                self.state = 386
                self.tableIdentifier()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 387
                    self.partitionSpec()


                self.state = 390
                self.match(SqlBaseParser.CHANGE)
                self.state = 392
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 391
                    self.match(SqlBaseParser.COLUMN)


                self.state = 394
                self.identifier()
                self.state = 395
                self.colType()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FIRST or _la==SqlBaseParser.AFTER:
                    self.state = 396
                    self.colPosition()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 399
                self.match(SqlBaseParser.ALTER)
                self.state = 400
                self.match(SqlBaseParser.TABLE)
                self.state = 401
                self.tableIdentifier()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 402
                    self.partitionSpec()


                self.state = 405
                self.match(SqlBaseParser.SET)
                self.state = 406
                self.match(SqlBaseParser.SERDE)
                self.state = 407
                self.match(SqlBaseParser.STRING)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 408
                    self.match(SqlBaseParser.WITH)
                    self.state = 409
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 410
                    self.tablePropertyList()


                pass

            elif la_ == 16:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 413
                self.match(SqlBaseParser.ALTER)
                self.state = 414
                self.match(SqlBaseParser.TABLE)
                self.state = 415
                self.tableIdentifier()
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 416
                    self.partitionSpec()


                self.state = 419
                self.match(SqlBaseParser.SET)
                self.state = 420
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 421
                self.tablePropertyList()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 423
                self.match(SqlBaseParser.ALTER)
                self.state = 424
                self.match(SqlBaseParser.TABLE)
                self.state = 425
                self.tableIdentifier()
                self.state = 426
                self.match(SqlBaseParser.ADD)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 427
                    self.match(SqlBaseParser.IF)
                    self.state = 428
                    self.match(SqlBaseParser.NOT)
                    self.state = 429
                    self.match(SqlBaseParser.EXISTS)


                self.state = 433 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 432
                    self.partitionSpecLocation()
                    self.state = 435 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 18:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 437
                self.match(SqlBaseParser.ALTER)
                self.state = 438
                self.match(SqlBaseParser.VIEW)
                self.state = 439
                self.tableIdentifier()
                self.state = 440
                self.match(SqlBaseParser.ADD)
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 441
                    self.match(SqlBaseParser.IF)
                    self.state = 442
                    self.match(SqlBaseParser.NOT)
                    self.state = 443
                    self.match(SqlBaseParser.EXISTS)


                self.state = 447 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 446
                    self.partitionSpec()
                    self.state = 449 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 451
                self.match(SqlBaseParser.ALTER)
                self.state = 452
                self.match(SqlBaseParser.TABLE)
                self.state = 453
                self.tableIdentifier()
                self.state = 454
                localctx.from = self.partitionSpec()
                self.state = 455
                self.match(SqlBaseParser.RENAME)
                self.state = 456
                self.match(SqlBaseParser.TO)
                self.state = 457
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 459
                self.match(SqlBaseParser.ALTER)
                self.state = 460
                self.match(SqlBaseParser.TABLE)
                self.state = 461
                self.tableIdentifier()
                self.state = 462
                self.match(SqlBaseParser.DROP)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 463
                    self.match(SqlBaseParser.IF)
                    self.state = 464
                    self.match(SqlBaseParser.EXISTS)


                self.state = 467
                self.partitionSpec()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 468
                    self.match(SqlBaseParser.T__2)
                    self.state = 469
                    self.partitionSpec()
                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PURGE:
                    self.state = 475
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 21:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 478
                self.match(SqlBaseParser.ALTER)
                self.state = 479
                self.match(SqlBaseParser.VIEW)
                self.state = 480
                self.tableIdentifier()
                self.state = 481
                self.match(SqlBaseParser.DROP)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 482
                    self.match(SqlBaseParser.IF)
                    self.state = 483
                    self.match(SqlBaseParser.EXISTS)


                self.state = 486
                self.partitionSpec()
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 487
                    self.match(SqlBaseParser.T__2)
                    self.state = 488
                    self.partitionSpec()
                    self.state = 493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 494
                self.match(SqlBaseParser.ALTER)
                self.state = 495
                self.match(SqlBaseParser.TABLE)
                self.state = 496
                self.tableIdentifier()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 497
                    self.partitionSpec()


                self.state = 500
                self.match(SqlBaseParser.SET)
                self.state = 501
                self.locationSpec()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 503
                self.match(SqlBaseParser.ALTER)
                self.state = 504
                self.match(SqlBaseParser.TABLE)
                self.state = 505
                self.tableIdentifier()
                self.state = 506
                self.match(SqlBaseParser.RECOVER)
                self.state = 507
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 509
                self.match(SqlBaseParser.DROP)
                self.state = 510
                self.match(SqlBaseParser.TABLE)
                self.state = 513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 511
                    self.match(SqlBaseParser.IF)
                    self.state = 512
                    self.match(SqlBaseParser.EXISTS)


                self.state = 515
                self.tableIdentifier()
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PURGE:
                    self.state = 516
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 25:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 519
                self.match(SqlBaseParser.DROP)
                self.state = 520
                self.match(SqlBaseParser.VIEW)
                self.state = 523
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 521
                    self.match(SqlBaseParser.IF)
                    self.state = 522
                    self.match(SqlBaseParser.EXISTS)


                self.state = 525
                self.tableIdentifier()
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 526
                self.match(SqlBaseParser.CREATE)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 527
                    self.match(SqlBaseParser.OR)
                    self.state = 528
                    self.match(SqlBaseParser.REPLACE)


                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GLOBAL or _la==SqlBaseParser.TEMPORARY:
                    self.state = 532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.GLOBAL:
                        self.state = 531
                        self.match(SqlBaseParser.GLOBAL)


                    self.state = 534
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 537
                self.match(SqlBaseParser.VIEW)
                self.state = 541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 538
                    self.match(SqlBaseParser.IF)
                    self.state = 539
                    self.match(SqlBaseParser.NOT)
                    self.state = 540
                    self.match(SqlBaseParser.EXISTS)


                self.state = 543
                self.tableIdentifier()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__0:
                    self.state = 544
                    self.identifierCommentList()


                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 547
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 548
                    self.match(SqlBaseParser.STRING)


                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITIONED:
                    self.state = 551
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 552
                    self.match(SqlBaseParser.ON)
                    self.state = 553
                    self.identifierList()


                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TBLPROPERTIES:
                    self.state = 556
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 557
                    self.tablePropertyList()


                self.state = 560
                self.match(SqlBaseParser.AS)
                self.state = 561
                self.query()
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 563
                self.match(SqlBaseParser.CREATE)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 564
                    self.match(SqlBaseParser.OR)
                    self.state = 565
                    self.match(SqlBaseParser.REPLACE)


                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GLOBAL:
                    self.state = 568
                    self.match(SqlBaseParser.GLOBAL)


                self.state = 571
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 572
                self.match(SqlBaseParser.VIEW)
                self.state = 573
                self.tableIdentifier()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__0:
                    self.state = 574
                    self.match(SqlBaseParser.T__0)
                    self.state = 575
                    self.colTypeList()
                    self.state = 576
                    self.match(SqlBaseParser.T__1)


                self.state = 580
                self.tableProvider()
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OPTIONS:
                    self.state = 581
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 582
                    self.tablePropertyList()


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 585
                self.match(SqlBaseParser.ALTER)
                self.state = 586
                self.match(SqlBaseParser.VIEW)
                self.state = 587
                self.tableIdentifier()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AS:
                    self.state = 588
                    self.match(SqlBaseParser.AS)


                self.state = 591
                self.query()
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 593
                self.match(SqlBaseParser.CREATE)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 594
                    self.match(SqlBaseParser.OR)
                    self.state = 595
                    self.match(SqlBaseParser.REPLACE)


                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TEMPORARY:
                    self.state = 598
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 601
                self.match(SqlBaseParser.FUNCTION)
                self.state = 605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 602
                    self.match(SqlBaseParser.IF)
                    self.state = 603
                    self.match(SqlBaseParser.NOT)
                    self.state = 604
                    self.match(SqlBaseParser.EXISTS)


                self.state = 607
                self.qualifiedName()
                self.state = 608
                self.match(SqlBaseParser.AS)
                self.state = 609
                localctx.className = self.match(SqlBaseParser.STRING)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.USING:
                    self.state = 610
                    self.match(SqlBaseParser.USING)
                    self.state = 611
                    self.resource()
                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 612
                        self.match(SqlBaseParser.T__2)
                        self.state = 613
                        self.resource()
                        self.state = 618
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 30:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 621
                self.match(SqlBaseParser.DROP)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TEMPORARY:
                    self.state = 622
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 625
                self.match(SqlBaseParser.FUNCTION)
                self.state = 628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 626
                    self.match(SqlBaseParser.IF)
                    self.state = 627
                    self.match(SqlBaseParser.EXISTS)


                self.state = 630
                self.qualifiedName()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 631
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SqlBaseParser.LOGICAL - 90)) | (1 << (SqlBaseParser.CODEGEN - 90)) | (1 << (SqlBaseParser.COST - 90)))) != 0) or _la==SqlBaseParser.EXTENDED or _la==SqlBaseParser.FORMATTED:
                    self.state = 632
                    _la = self._input.LA(1)
                    if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (SqlBaseParser.LOGICAL - 90)) | (1 << (SqlBaseParser.CODEGEN - 90)) | (1 << (SqlBaseParser.COST - 90)))) != 0) or _la==SqlBaseParser.EXTENDED or _la==SqlBaseParser.FORMATTED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 635
                self.statement()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 636
                self.match(SqlBaseParser.SHOW)
                self.state = 637
                self.match(SqlBaseParser.TABLES)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 638
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 639
                    localctx.db = self.identifier()


                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE or _la==SqlBaseParser.STRING:
                    self.state = 643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.LIKE:
                        self.state = 642
                        self.match(SqlBaseParser.LIKE)


                    self.state = 645
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 33:
                localctx = SqlBaseParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 648
                self.match(SqlBaseParser.SHOW)
                self.state = 649
                self.match(SqlBaseParser.TABLE)
                self.state = 650
                self.match(SqlBaseParser.EXTENDED)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 651
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 652
                    localctx.db = self.identifier()


                self.state = 655
                self.match(SqlBaseParser.LIKE)
                self.state = 656
                localctx.pattern = self.match(SqlBaseParser.STRING)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 657
                    self.partitionSpec()


                pass

            elif la_ == 34:
                localctx = SqlBaseParser.ShowDatabasesContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 660
                self.match(SqlBaseParser.SHOW)
                self.state = 661
                self.match(SqlBaseParser.DATABASES)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE or _la==SqlBaseParser.STRING:
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.LIKE:
                        self.state = 662
                        self.match(SqlBaseParser.LIKE)


                    self.state = 665
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 35:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 668
                self.match(SqlBaseParser.SHOW)
                self.state = 669
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 670
                localctx.table = self.tableIdentifier()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__0:
                    self.state = 671
                    self.match(SqlBaseParser.T__0)
                    self.state = 672
                    localctx.key = self.tablePropertyKey()
                    self.state = 673
                    self.match(SqlBaseParser.T__1)


                pass

            elif la_ == 36:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 677
                self.match(SqlBaseParser.SHOW)
                self.state = 678
                self.match(SqlBaseParser.COLUMNS)
                self.state = 679
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 680
                self.tableIdentifier()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 681
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 682
                    localctx.db = self.identifier()


                pass

            elif la_ == 37:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 685
                self.match(SqlBaseParser.SHOW)
                self.state = 686
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 687
                self.tableIdentifier()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 688
                    self.partitionSpec()


                pass

            elif la_ == 38:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 691
                self.match(SqlBaseParser.SHOW)
                self.state = 693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 692
                    self.identifier()


                self.state = 695
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.STRING - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                    self.state = 697
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        self.state = 696
                        self.match(SqlBaseParser.LIKE)


                    self.state = 701
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.ANY, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.PIVOT, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.DIRECTORY, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.BOTH, SqlBaseParser.LEADING, SqlBaseParser.TRAILING, SqlBaseParser.IF, SqlBaseParser.POSITION, SqlBaseParser.EXTRACT, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                        self.state = 699
                        self.qualifiedName()
                        pass
                    elif token in [SqlBaseParser.STRING]:
                        self.state = 700
                        localctx.pattern = self.match(SqlBaseParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 39:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 705
                self.match(SqlBaseParser.SHOW)
                self.state = 706
                self.match(SqlBaseParser.CREATE)
                self.state = 707
                self.match(SqlBaseParser.TABLE)
                self.state = 708
                self.tableIdentifier()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 709
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 710
                self.match(SqlBaseParser.FUNCTION)
                self.state = 712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 711
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 714
                self.describeFuncName()
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.DescribeDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 715
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 716
                self.match(SqlBaseParser.DATABASE)
                self.state = 718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 717
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 720
                self.identifier()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.DescribeTableContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 721
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 722
                    self.match(SqlBaseParser.TABLE)


                self.state = 726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 725
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.EXTENDED or _la==SqlBaseParser.FORMATTED):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 728
                self.tableIdentifier()
                self.state = 730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 729
                    self.partitionSpec()


                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                    self.state = 732
                    self.describeColName()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 735
                self.match(SqlBaseParser.REFRESH)
                self.state = 736
                self.match(SqlBaseParser.TABLE)
                self.state = 737
                self.tableIdentifier()
                pass

            elif la_ == 44:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 738
                self.match(SqlBaseParser.REFRESH)
                self.state = 746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 739
                    self.match(SqlBaseParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 743
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 740
                            self.matchWildcard() 
                        self.state = 745
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                    pass


                pass

            elif la_ == 45:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 748
                self.match(SqlBaseParser.CACHE)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LAZY:
                    self.state = 749
                    self.match(SqlBaseParser.LAZY)


                self.state = 752
                self.match(SqlBaseParser.TABLE)
                self.state = 753
                self.tableIdentifier()
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SqlBaseParser.WITH - 77)) | (1 << (SqlBaseParser.VALUES - 77)) | (1 << (SqlBaseParser.TABLE - 77)) | (1 << (SqlBaseParser.INSERT - 77)) | (1 << (SqlBaseParser.MAP - 77)))) != 0) or _la==SqlBaseParser.REDUCE:
                    self.state = 755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 754
                        self.match(SqlBaseParser.AS)


                    self.state = 757
                    self.query()


                pass

            elif la_ == 46:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 760
                self.match(SqlBaseParser.UNCACHE)
                self.state = 761
                self.match(SqlBaseParser.TABLE)
                self.state = 764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 762
                    self.match(SqlBaseParser.IF)
                    self.state = 763
                    self.match(SqlBaseParser.EXISTS)


                self.state = 766
                self.tableIdentifier()
                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 767
                self.match(SqlBaseParser.CLEAR)
                self.state = 768
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 48:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 769
                self.match(SqlBaseParser.LOAD)
                self.state = 770
                self.match(SqlBaseParser.DATA)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCAL:
                    self.state = 771
                    self.match(SqlBaseParser.LOCAL)


                self.state = 774
                self.match(SqlBaseParser.INPATH)
                self.state = 775
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OVERWRITE:
                    self.state = 776
                    self.match(SqlBaseParser.OVERWRITE)


                self.state = 779
                self.match(SqlBaseParser.INTO)
                self.state = 780
                self.match(SqlBaseParser.TABLE)
                self.state = 781
                self.tableIdentifier()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 782
                    self.partitionSpec()


                pass

            elif la_ == 49:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 785
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 786
                self.match(SqlBaseParser.TABLE)
                self.state = 787
                self.tableIdentifier()
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 788
                    self.partitionSpec()


                pass

            elif la_ == 50:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 791
                self.match(SqlBaseParser.MSCK)
                self.state = 792
                self.match(SqlBaseParser.REPAIR)
                self.state = 793
                self.match(SqlBaseParser.TABLE)
                self.state = 794
                self.tableIdentifier()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 795
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ADD or _la==SqlBaseParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 796
                self.identifier()
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 797
                        self.matchWildcard() 
                    self.state = 802
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                pass

            elif la_ == 52:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 803
                self.match(SqlBaseParser.SET)
                self.state = 804
                self.match(SqlBaseParser.ROLE)
                self.state = 808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 805
                        self.matchWildcard() 
                    self.state = 810
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                pass

            elif la_ == 53:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 811
                self.match(SqlBaseParser.SET)
                self.state = 815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 812
                        self.matchWildcard() 
                    self.state = 817
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                pass

            elif la_ == 54:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 818
                self.match(SqlBaseParser.RESET)
                pass

            elif la_ == 55:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 819
                self.unsupportedHiveNativeCommands()
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 820
                        self.matchWildcard() 
                    self.state = 825
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)




    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 829
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 831
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 833
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 836
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 838
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 837
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 840
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 841
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 842
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 843
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 845
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 844
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 847
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 848
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 849
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 850
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 851
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 852
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 853
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 854
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 855
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 856
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 857
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 858
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 859
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 860
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 861
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 862
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 863
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 864
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 865
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 866
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 867
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 868
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 869
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 870
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 871
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 872
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 873
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 874
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 875
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 876
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 877
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 878
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 879
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 880
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 881
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 882
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 883
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 884
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 885
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 886
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 887
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 888
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 889
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 890
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 891
                self.tableIdentifier()
                self.state = 892
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 893
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 895
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 896
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 897
                self.tableIdentifier()
                self.state = 898
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 899
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 901
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 902
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 903
                self.tableIdentifier()
                self.state = 904
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 905
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 907
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 908
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 909
                self.tableIdentifier()
                self.state = 910
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 911
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 913
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 914
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 915
                self.tableIdentifier()
                self.state = 916
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 917
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 919
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 920
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 921
                self.tableIdentifier()
                self.state = 922
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 923
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 924
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 925
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 927
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 928
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 929
                self.tableIdentifier()
                self.state = 930
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 931
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 932
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 934
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 935
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 936
                self.tableIdentifier()
                self.state = 937
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 938
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 940
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 941
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 942
                self.tableIdentifier()
                self.state = 943
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 944
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 946
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 947
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 948
                self.tableIdentifier()
                self.state = 949
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 950
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 952
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 953
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 954
                self.tableIdentifier()
                self.state = 955
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 957
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 958
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 959
                self.tableIdentifier()
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 960
                    self.partitionSpec()


                self.state = 963
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 965
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 966
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 967
                self.tableIdentifier()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 968
                    self.partitionSpec()


                self.state = 971
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 973
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 974
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 975
                self.tableIdentifier()
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 976
                    self.partitionSpec()


                self.state = 979
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 980
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 982
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 983
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 984
                self.tableIdentifier()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 985
                    self.partitionSpec()


                self.state = 988
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 989
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 991
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 992
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 993
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 994
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 995
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 996
                localctx.kw1 = self.match(SqlBaseParser.DELETE)
                self.state = 997
                localctx.kw2 = self.match(SqlBaseParser.FROM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)




    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(SqlBaseParser.CREATE)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.TEMPORARY:
                self.state = 1001
                self.match(SqlBaseParser.TEMPORARY)


            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.EXTERNAL:
                self.state = 1004
                self.match(SqlBaseParser.EXTERNAL)


            self.state = 1007
            self.match(SqlBaseParser.TABLE)
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1008
                self.match(SqlBaseParser.IF)
                self.state = 1009
                self.match(SqlBaseParser.NOT)
                self.state = 1010
                self.match(SqlBaseParser.EXISTS)


            self.state = 1013
            self.tableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)




    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 1016
            self.match(SqlBaseParser.BY)
            self.state = 1017
            self.identifierList()
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.SORTED:
                self.state = 1018
                self.match(SqlBaseParser.SORTED)
                self.state = 1019
                self.match(SqlBaseParser.BY)
                self.state = 1020
                self.orderedIdentifierList()


            self.state = 1023
            self.match(SqlBaseParser.INTO)
            self.state = 1024
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 1025
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)




    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(SqlBaseParser.SKEWED)
            self.state = 1028
            self.match(SqlBaseParser.BY)
            self.state = 1029
            self.identifierList()
            self.state = 1030
            self.match(SqlBaseParser.ON)
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 1031
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1032
                self.nestedConstantList()
                pass


            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 1035
                self.match(SqlBaseParser.STORED)
                self.state = 1036
                self.match(SqlBaseParser.AS)
                self.state = 1037
                self.match(SqlBaseParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)




    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(SqlBaseParser.LOCATION)
            self.state = 1041
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WITH:
                self.state = 1043
                self.ctes()


            self.state = 1046
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteHiveDir" ):
                listener.enterInsertOverwriteHiveDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteHiveDir" ):
                listener.exitInsertOverwriteHiveDir(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteDir" ):
                listener.enterInsertOverwriteDir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteDir" ):
                listener.exitInsertOverwriteDir(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertOverwriteTable" ):
                listener.enterInsertOverwriteTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertOverwriteTable" ):
                listener.exitInsertOverwriteTable(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertIntoTable" ):
                listener.enterInsertIntoTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertIntoTable" ):
                listener.exitInsertIntoTable(self)



    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.match(SqlBaseParser.INSERT)
                self.state = 1049
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1050
                self.match(SqlBaseParser.TABLE)
                self.state = 1051
                self.tableIdentifier()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1052
                    self.partitionSpec()
                    self.state = 1056
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.IF:
                        self.state = 1053
                        self.match(SqlBaseParser.IF)
                        self.state = 1054
                        self.match(SqlBaseParser.NOT)
                        self.state = 1055
                        self.match(SqlBaseParser.EXISTS)




                pass

            elif la_ == 2:
                localctx = SqlBaseParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.match(SqlBaseParser.INSERT)
                self.state = 1061
                self.match(SqlBaseParser.INTO)
                self.state = 1063
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1062
                    self.match(SqlBaseParser.TABLE)


                self.state = 1065
                self.tableIdentifier()
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1066
                    self.partitionSpec()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1069
                self.match(SqlBaseParser.INSERT)
                self.state = 1070
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCAL:
                    self.state = 1071
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1074
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1075
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ROW:
                    self.state = 1076
                    self.rowFormat()


                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.STORED:
                    self.state = 1079
                    self.createFileFormat()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1082
                self.match(SqlBaseParser.INSERT)
                self.state = 1083
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCAL:
                    self.state = 1084
                    self.match(SqlBaseParser.LOCAL)


                self.state = 1087
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.STRING:
                    self.state = 1088
                    localctx.path = self.match(SqlBaseParser.STRING)


                self.state = 1091
                self.tableProvider()
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OPTIONS:
                    self.state = 1092
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1093
                    localctx.options = self.tablePropertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)




    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.partitionSpec()
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.LOCATION:
                self.state = 1099
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)




    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(SqlBaseParser.PARTITION)
            self.state = 1103
            self.match(SqlBaseParser.T__0)
            self.state = 1104
            self.partitionVal()
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1105
                self.match(SqlBaseParser.T__2)
                self.state = 1106
                self.partitionVal()
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1112
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)




    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.identifier()
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.EQ:
                self.state = 1115
                self.match(SqlBaseParser.EQ)
                self.state = 1116
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)




    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_describeFuncName)
        try:
            self.state = 1124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1119
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1120
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1121
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1122
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1123
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)




    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1127
                self.match(SqlBaseParser.T__3)
                self.state = 1128
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)




    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(SqlBaseParser.WITH)
            self.state = 1135
            self.namedQuery()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1136
                self.match(SqlBaseParser.T__2)
                self.state = 1137
                self.namedQuery()
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            localctx.name = self.identifier()
            self.state = 1145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.AS:
                self.state = 1144
                self.match(SqlBaseParser.AS)


            self.state = 1147
            self.match(SqlBaseParser.T__0)
            self.state = 1148
            self.query()
            self.state = 1149
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)




    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(SqlBaseParser.USING)
            self.state = 1152
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyList" ):
                listener.enterTablePropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyList" ):
                listener.exitTablePropertyList(self)




    def tablePropertyList(self):

        localctx = SqlBaseParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(SqlBaseParser.T__0)
            self.state = 1155
            self.tableProperty()
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1156
                self.match(SqlBaseParser.T__2)
                self.state = 1157
                self.tableProperty()
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1163
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyValueContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperty" ):
                listener.enterTableProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperty" ):
                listener.exitTableProperty(self)




    def tableProperty(self):

        localctx = SqlBaseParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            localctx.key = self.tablePropertyKey()
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.TRUE or _la==SqlBaseParser.FALSE or _la==SqlBaseParser.EQ or ((((_la - 240)) & ~0x3f) == 0 and ((1 << (_la - 240)) & ((1 << (SqlBaseParser.STRING - 240)) | (1 << (SqlBaseParser.INTEGER_VALUE - 240)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 240)))) != 0):
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.EQ:
                    self.state = 1166
                    self.match(SqlBaseParser.EQ)


                self.state = 1169
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyKey" ):
                listener.enterTablePropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyKey" ):
                listener.exitTablePropertyKey(self)




    def tablePropertyKey(self):

        localctx = SqlBaseParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 1181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.ANY, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.PIVOT, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.DIRECTORY, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.BOTH, SqlBaseParser.LEADING, SqlBaseParser.TRAILING, SqlBaseParser.IF, SqlBaseParser.POSITION, SqlBaseParser.EXTRACT, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.identifier()
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1173
                    self.match(SqlBaseParser.T__3)
                    self.state = 1174
                    self.identifier()
                    self.state = 1179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1180
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyValue" ):
                listener.enterTablePropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyValue" ):
                listener.exitTablePropertyValue(self)




    def tablePropertyValue(self):

        localctx = SqlBaseParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_tablePropertyValue)
        try:
            self.state = 1187
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [SqlBaseParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass
            elif token in [SqlBaseParser.TRUE, SqlBaseParser.FALSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1185
                self.booleanValue()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1186
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)




    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(SqlBaseParser.T__0)
            self.state = 1190
            self.constant()
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1191
                self.match(SqlBaseParser.T__2)
                self.state = 1192
                self.constant()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1198
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)




    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.match(SqlBaseParser.T__0)
            self.state = 1201
            self.constantList()
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1202
                self.match(SqlBaseParser.T__2)
                self.state = 1203
                self.constantList()
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1209
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)




    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_createFileFormat)
        try:
            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1211
                self.match(SqlBaseParser.STORED)
                self.state = 1212
                self.match(SqlBaseParser.AS)
                self.state = 1213
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1214
                self.match(SqlBaseParser.STORED)
                self.state = 1215
                self.match(SqlBaseParser.BY)
                self.state = 1216
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)



    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fileFormat)
        try:
            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1219
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1220
                localctx.inFmt = self.match(SqlBaseParser.STRING)
                self.state = 1221
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1222
                localctx.outFmt = self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)




    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(SqlBaseParser.STRING)
            self.state = 1230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1227
                self.match(SqlBaseParser.WITH)
                self.state = 1228
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1229
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.identifier()
            self.state = 1233
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleInsertQueryContext(QueryNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)


    class MultiInsertQueryContext(QueryNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)



    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.state = 1247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INSERT:
                    self.state = 1235
                    self.insertInto()


                self.state = 1238
                self.queryTerm(0)
                self.state = 1239
                self.queryOrganization()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.fromClause()
                self.state = 1243 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1242
                    self.multiInsertQueryBody()
                    self.state = 1245 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.SELECT or _la==SqlBaseParser.FROM or _la==SqlBaseParser.INSERT or _la==SqlBaseParser.MAP or _la==SqlBaseParser.REDUCE):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext,0)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)




    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_queryOrganization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ORDER:
                self.state = 1249
                self.match(SqlBaseParser.ORDER)
                self.state = 1250
                self.match(SqlBaseParser.BY)
                self.state = 1251
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1252
                    self.match(SqlBaseParser.T__2)
                    self.state = 1253
                    localctx._sortItem = self.sortItem()
                    localctx.order.append(localctx._sortItem)
                    self.state = 1258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.CLUSTER:
                self.state = 1261
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1262
                self.match(SqlBaseParser.BY)
                self.state = 1263
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1264
                    self.match(SqlBaseParser.T__2)
                    self.state = 1265
                    localctx._expression = self.expression()
                    localctx.clusterBy.append(localctx._expression)
                    self.state = 1270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.DISTRIBUTE:
                self.state = 1273
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1274
                self.match(SqlBaseParser.BY)
                self.state = 1275
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1276
                    self.match(SqlBaseParser.T__2)
                    self.state = 1277
                    localctx._expression = self.expression()
                    localctx.distributeBy.append(localctx._expression)
                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.SORT:
                self.state = 1285
                self.match(SqlBaseParser.SORT)
                self.state = 1286
                self.match(SqlBaseParser.BY)
                self.state = 1287
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1288
                    self.match(SqlBaseParser.T__2)
                    self.state = 1289
                    localctx._sortItem = self.sortItem()
                    localctx.sort.append(localctx._sortItem)
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WINDOW:
                self.state = 1297
                self.windows()


            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.LIMIT:
                self.state = 1300
                self.match(SqlBaseParser.LIMIT)
                self.state = 1303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1301
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1302
                    localctx.limit = self.expression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)




    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_multiInsertQueryBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.INSERT:
                self.state = 1307
                self.insertInto()


            self.state = 1310
            self.querySpecification()
            self.state = 1311
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1314
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,159,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1337
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1316
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1317
                        if not legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "legacy_setops_precedence_enbled")
                        self.state = 1318
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (SqlBaseParser.UNION - 102)) | (1 << (SqlBaseParser.EXCEPT - 102)) | (1 << (SqlBaseParser.SETMINUS - 102)) | (1 << (SqlBaseParser.INTERSECT - 102)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1320
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 1319
                            self.setQuantifier()


                        self.state = 1322
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1323
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1324
                        if not !legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!legacy_setops_precedence_enbled")
                        self.state = 1325
                        localctx.operator = self.match(SqlBaseParser.INTERSECT)
                        self.state = 1327
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 1326
                            self.setQuantifier()


                        self.state = 1329
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 1330
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1331
                        if not !legacy_setops_precedence_enbled:
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!legacy_setops_precedence_enbled")
                        self.state = 1332
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (SqlBaseParser.UNION - 102)) | (1 << (SqlBaseParser.EXCEPT - 102)) | (1 << (SqlBaseParser.SETMINUS - 102)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1334
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                            self.state = 1333
                            self.setQuantifier()


                        self.state = 1336
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 1341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_queryPrimary)
        try:
            self.state = 1350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.MAP, SqlBaseParser.REDUCE]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.querySpecification()
                pass
            elif token in [SqlBaseParser.TABLE]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.match(SqlBaseParser.TABLE)
                self.state = 1344
                self.tableIdentifier()
                pass
            elif token in [SqlBaseParser.VALUES]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1345
                self.inlineTable()
                pass
            elif token in [SqlBaseParser.T__0]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1346
                self.match(SqlBaseParser.T__0)
                self.state = 1347
                self.queryNoWith()
                self.state = 1348
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.expression()
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC:
                self.state = 1353
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NULLS:
                self.state = 1356
                self.match(SqlBaseParser.NULLS)
                self.state = 1357
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FIRST or _la==SqlBaseParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token
            self.where = None # BooleanExpressionContext
            self._hint = None # HintContext
            self.hints = list() # of HintContexts
            self.having = None # BooleanExpressionContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)


        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)


        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def aggregation(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationContext,0)


        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 1453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT]:
                    self.state = 1360
                    self.match(SqlBaseParser.SELECT)
                    self.state = 1361
                    localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                    self.state = 1362
                    self.match(SqlBaseParser.T__0)
                    self.state = 1363
                    self.namedExpressionSeq()
                    self.state = 1364
                    self.match(SqlBaseParser.T__1)
                    pass
                elif token in [SqlBaseParser.MAP]:
                    self.state = 1366
                    localctx.kind = self.match(SqlBaseParser.MAP)
                    self.state = 1367
                    self.namedExpressionSeq()
                    pass
                elif token in [SqlBaseParser.REDUCE]:
                    self.state = 1368
                    localctx.kind = self.match(SqlBaseParser.REDUCE)
                    self.state = 1369
                    self.namedExpressionSeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ROW:
                    self.state = 1372
                    localctx.inRowFormat = self.rowFormat()


                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.RECORDWRITER:
                    self.state = 1375
                    self.match(SqlBaseParser.RECORDWRITER)
                    self.state = 1376
                    localctx.recordWriter = self.match(SqlBaseParser.STRING)


                self.state = 1379
                self.match(SqlBaseParser.USING)
                self.state = 1380
                localctx.script = self.match(SqlBaseParser.STRING)
                self.state = 1393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1381
                    self.match(SqlBaseParser.AS)
                    self.state = 1391
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                    if la_ == 1:
                        self.state = 1382
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 1383
                        self.colTypeList()
                        pass

                    elif la_ == 3:
                        self.state = 1384
                        self.match(SqlBaseParser.T__0)
                        self.state = 1387
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                        if la_ == 1:
                            self.state = 1385
                            self.identifierSeq()
                            pass

                        elif la_ == 2:
                            self.state = 1386
                            self.colTypeList()
                            pass


                        self.state = 1389
                        self.match(SqlBaseParser.T__1)
                        pass




                self.state = 1396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1395
                    localctx.outRowFormat = self.rowFormat()


                self.state = 1400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1398
                    self.match(SqlBaseParser.RECORDREADER)
                    self.state = 1399
                    localctx.recordReader = self.match(SqlBaseParser.STRING)


                self.state = 1403
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1402
                    self.fromClause()


                self.state = 1407
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1405
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1406
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1431
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT]:
                    self.state = 1409
                    localctx.kind = self.match(SqlBaseParser.SELECT)
                    self.state = 1413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__4:
                        self.state = 1410
                        localctx._hint = self.hint()
                        localctx.hints.append(localctx._hint)
                        self.state = 1415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1417
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                    if la_ == 1:
                        self.state = 1416
                        self.setQuantifier()


                    self.state = 1419
                    self.namedExpressionSeq()
                    self.state = 1421
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        self.state = 1420
                        self.fromClause()


                    pass
                elif token in [SqlBaseParser.FROM]:
                    self.state = 1423
                    self.fromClause()
                    self.state = 1429
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                    if la_ == 1:
                        self.state = 1424
                        localctx.kind = self.match(SqlBaseParser.SELECT)
                        self.state = 1426
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                        if la_ == 1:
                            self.state = 1425
                            self.setQuantifier()


                        self.state = 1428
                        self.namedExpressionSeq()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1436
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1433
                        self.lateralView() 
                    self.state = 1438
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                self.state = 1441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1439
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1440
                    localctx.where = self.booleanExpression(0)


                self.state = 1444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1443
                    self.aggregation()


                self.state = 1448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1446
                    self.match(SqlBaseParser.HAVING)
                    self.state = 1447
                    localctx.having = self.booleanExpression(0)


                self.state = 1451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1450
                    self.windows()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintStatementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)




    def hint(self):

        localctx = SqlBaseParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.match(SqlBaseParser.T__4)
            self.state = 1456
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 1463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__2) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                self.state = 1458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__2:
                    self.state = 1457
                    self.match(SqlBaseParser.T__2)


                self.state = 1460
                localctx._hintStatement = self.hintStatement()
                localctx.hintStatements.append(localctx._hintStatement)
                self.state = 1465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1466
            self.match(SqlBaseParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)




    def hintStatement(self):

        localctx = SqlBaseParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1469
                localctx.hintName = self.identifier()
                self.state = 1470
                self.match(SqlBaseParser.T__0)
                self.state = 1471
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1472
                    self.match(SqlBaseParser.T__2)
                    self.state = 1473
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 1478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1479
                self.match(SqlBaseParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotClauseContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self.match(SqlBaseParser.FROM)
            self.state = 1484
            self.relation()
            self.state = 1489
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1485
                    self.match(SqlBaseParser.T__2)
                    self.state = 1486
                    self.relation() 
                self.state = 1491
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

            self.state = 1495
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1492
                    self.lateralView() 
                self.state = 1497
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

            self.state = 1499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1498
                self.pivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregation" ):
                listener.enterAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregation" ):
                listener.exitAggregation(self)




    def aggregation(self):

        localctx = SqlBaseParser.AggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_aggregation)
        self._la = 0 # Token type
        try:
            self.state = 1545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1501
                self.match(SqlBaseParser.GROUP)
                self.state = 1502
                self.match(SqlBaseParser.BY)
                self.state = 1503
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 1508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1504
                        self.match(SqlBaseParser.T__2)
                        self.state = 1505
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 1510
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                self.state = 1528
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1511
                    self.match(SqlBaseParser.WITH)
                    self.state = 1512
                    localctx.kind = self.match(SqlBaseParser.ROLLUP)

                elif la_ == 2:
                    self.state = 1513
                    self.match(SqlBaseParser.WITH)
                    self.state = 1514
                    localctx.kind = self.match(SqlBaseParser.CUBE)

                elif la_ == 3:
                    self.state = 1515
                    localctx.kind = self.match(SqlBaseParser.GROUPING)
                    self.state = 1516
                    self.match(SqlBaseParser.SETS)
                    self.state = 1517
                    self.match(SqlBaseParser.T__0)
                    self.state = 1518
                    self.groupingSet()
                    self.state = 1523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1519
                        self.match(SqlBaseParser.T__2)
                        self.state = 1520
                        self.groupingSet()
                        self.state = 1525
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1526
                    self.match(SqlBaseParser.T__1)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                self.match(SqlBaseParser.GROUP)
                self.state = 1531
                self.match(SqlBaseParser.BY)
                self.state = 1532
                localctx.kind = self.match(SqlBaseParser.GROUPING)
                self.state = 1533
                self.match(SqlBaseParser.SETS)
                self.state = 1534
                self.match(SqlBaseParser.T__0)
                self.state = 1535
                self.groupingSet()
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1536
                    self.match(SqlBaseParser.T__2)
                    self.state = 1537
                    self.groupingSet()
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1543
                self.match(SqlBaseParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1547
                self.match(SqlBaseParser.T__0)
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.STRING - 192)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 192)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 192)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 192)) | (1 << (SqlBaseParser.INTEGER_VALUE - 192)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 192)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 192)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                    self.state = 1548
                    self.expression()
                    self.state = 1553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1549
                        self.match(SqlBaseParser.T__2)
                        self.state = 1550
                        self.expression()
                        self.state = 1555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1558
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1559
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(SqlBaseParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PivotValueContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotClause" ):
                listener.enterPivotClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotClause" ):
                listener.exitPivotClause(self)




    def pivotClause(self):

        localctx = SqlBaseParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.match(SqlBaseParser.PIVOT)
            self.state = 1563
            self.match(SqlBaseParser.T__0)
            self.state = 1564
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 1565
            self.match(SqlBaseParser.FOR)
            self.state = 1566
            self.pivotColumn()
            self.state = 1567
            self.match(SqlBaseParser.IN)
            self.state = 1568
            self.match(SqlBaseParser.T__0)
            self.state = 1569
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1570
                self.match(SqlBaseParser.T__2)
                self.state = 1571
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1577
            self.match(SqlBaseParser.T__1)
            self.state = 1578
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotColumn" ):
                listener.enterPivotColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotColumn" ):
                listener.exitPivotColumn(self)




    def pivotColumn(self):

        localctx = SqlBaseParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 1592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.ANY, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.PIVOT, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.DIRECTORY, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.BOTH, SqlBaseParser.LEADING, SqlBaseParser.TRAILING, SqlBaseParser.IF, SqlBaseParser.POSITION, SqlBaseParser.EXTRACT, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1580
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass
            elif token in [SqlBaseParser.T__0]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.match(SqlBaseParser.T__0)
                self.state = 1582
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1583
                    self.match(SqlBaseParser.T__2)
                    self.state = 1584
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 1589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1590
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_pivotValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivotValue" ):
                listener.enterPivotValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivotValue" ):
                listener.exitPivotValue(self)




    def pivotValue(self):

        localctx = SqlBaseParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_pivotValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.expression()
            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                self.state = 1596
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1595
                    self.match(SqlBaseParser.AS)


                self.state = 1598
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)




    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.match(SqlBaseParser.LATERAL)
            self.state = 1602
            self.match(SqlBaseParser.VIEW)
            self.state = 1604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1603
                self.match(SqlBaseParser.OUTER)


            self.state = 1606
            self.qualifiedName()
            self.state = 1607
            self.match(SqlBaseParser.T__0)
            self.state = 1616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.STRING - 192)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 192)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 192)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 192)) | (1 << (SqlBaseParser.INTEGER_VALUE - 192)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 192)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 192)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                self.state = 1608
                self.expression()
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1609
                    self.match(SqlBaseParser.T__2)
                    self.state = 1610
                    self.expression()
                    self.state = 1615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1618
            self.match(SqlBaseParser.T__1)
            self.state = 1619
            localctx.tblName = self.identifier()
            self.state = 1631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1621
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1620
                    self.match(SqlBaseParser.AS)


                self.state = 1623
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 1628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1624
                        self.match(SqlBaseParser.T__2)
                        self.state = 1625
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 1630
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,209,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.relationPrimary()
            self.state = 1639
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1636
                    self.joinRelation() 
                self.state = 1641
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)




    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_joinRelation)
        try:
            self.state = 1653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.ANTI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1642
                self.joinType()
                self.state = 1643
                self.match(SqlBaseParser.JOIN)
                self.state = 1644
                localctx.right = self.relationPrimary()
                self.state = 1646
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1645
                    self.joinCriteria()


                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1648
                self.match(SqlBaseParser.NATURAL)
                self.state = 1649
                self.joinType()
                self.state = 1650
                self.match(SqlBaseParser.JOIN)
                self.state = 1651
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INNER:
                    self.state = 1655
                    self.match(SqlBaseParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1658
                self.match(SqlBaseParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1659
                self.match(SqlBaseParser.LEFT)
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1660
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1663
                self.match(SqlBaseParser.LEFT)
                self.state = 1664
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1665
                self.match(SqlBaseParser.RIGHT)
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1666
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1669
                self.match(SqlBaseParser.FULL)
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1670
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LEFT:
                    self.state = 1673
                    self.match(SqlBaseParser.LEFT)


                self.state = 1676
                self.match(SqlBaseParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                self.match(SqlBaseParser.ON)
                self.state = 1680
                self.booleanExpression(0)
                pass
            elif token in [SqlBaseParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1681
                self.match(SqlBaseParser.USING)
                self.state = 1682
                self.match(SqlBaseParser.T__0)
                self.state = 1683
                self.identifier()
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1684
                    self.match(SqlBaseParser.T__2)
                    self.state = 1685
                    self.identifier()
                    self.state = 1690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1691
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleMethodContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)




    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_sample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 1696
            self.match(SqlBaseParser.T__0)
            self.state = 1698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.STRING - 192)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 192)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 192)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 192)) | (1 << (SqlBaseParser.INTEGER_VALUE - 192)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 192)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 192)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                self.state = 1697
                self.sampleMethod()


            self.state = 1700
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByRows" ):
                listener.enterSampleByRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByRows" ):
                listener.exitSampleByRows(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByPercentile" ):
                listener.enterSampleByPercentile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByPercentile" ):
                listener.exitSampleByPercentile(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)
        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)
        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBucket" ):
                listener.enterSampleByBucket(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBucket" ):
                listener.exitSampleByBucket(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByBytes" ):
                listener.enterSampleByBytes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByBytes" ):
                listener.exitSampleByBytes(self)



    def sampleMethod(self):

        localctx = SqlBaseParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 1726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 1702
                    localctx.negativeSign = self.match(SqlBaseParser.MINUS)


                self.state = 1705
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.INTEGER_VALUE or _la==SqlBaseParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1706
                self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1707
                self.expression()
                self.state = 1708
                self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1710
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 1711
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1712
                self.match(SqlBaseParser.OUT)
                self.state = 1713
                self.match(SqlBaseParser.OF)
                self.state = 1714
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ON:
                    self.state = 1715
                    self.match(SqlBaseParser.ON)
                    self.state = 1721
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                    if la_ == 1:
                        self.state = 1716
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 1717
                        self.qualifiedName()
                        self.state = 1718
                        self.match(SqlBaseParser.T__0)
                        self.state = 1719
                        self.match(SqlBaseParser.T__1)
                        pass




                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1725
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.match(SqlBaseParser.T__0)
            self.state = 1729
            self.identifierSeq()
            self.state = 1730
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)




    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1732
            self.identifier()
            self.state = 1737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1733
                    self.match(SqlBaseParser.T__2)
                    self.state = 1734
                    self.identifier() 
                self.state = 1739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)




    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.match(SqlBaseParser.T__0)
            self.state = 1741
            self.orderedIdentifier()
            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1742
                self.match(SqlBaseParser.T__2)
                self.state = 1743
                self.orderedIdentifier()
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1749
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)




    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.identifier()
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC:
                self.state = 1752
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)




    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.match(SqlBaseParser.T__0)
            self.state = 1756
            self.identifierComment()
            self.state = 1761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1757
                self.match(SqlBaseParser.T__2)
                self.state = 1758
                self.identifierComment()
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1764
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)




    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.identifier()
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 1767
                self.match(SqlBaseParser.COMMENT)
                self.state = 1768
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_relationPrimary)
        try:
            self.state = 1795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1771
                self.tableIdentifier()
                self.state = 1773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1772
                    self.sample()


                self.state = 1775
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1777
                self.match(SqlBaseParser.T__0)
                self.state = 1778
                self.queryNoWith()
                self.state = 1779
                self.match(SqlBaseParser.T__1)
                self.state = 1781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1780
                    self.sample()


                self.state = 1783
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                self.match(SqlBaseParser.T__0)
                self.state = 1786
                self.relation()
                self.state = 1787
                self.match(SqlBaseParser.T__1)
                self.state = 1789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1788
                    self.sample()


                self.state = 1791
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1793
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1794
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)




    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.match(SqlBaseParser.VALUES)
            self.state = 1798
            self.expression()
            self.state = 1803
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1799
                    self.match(SqlBaseParser.T__2)
                    self.state = 1800
                    self.expression() 
                self.state = 1805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

            self.state = 1806
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTable" ):
                listener.enterFunctionTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTable" ):
                listener.exitFunctionTable(self)




    def functionTable(self):

        localctx = SqlBaseParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.identifier()
            self.state = 1809
            self.match(SqlBaseParser.T__0)
            self.state = 1818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.STRING - 192)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 192)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 192)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 192)) | (1 << (SqlBaseParser.INTEGER_VALUE - 192)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 192)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 192)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                self.state = 1810
                self.expression()
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1811
                    self.match(SqlBaseParser.T__2)
                    self.state = 1812
                    self.expression()
                    self.state = 1817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1820
            self.match(SqlBaseParser.T__1)
            self.state = 1821
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableAlias" ):
                listener.enterTableAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableAlias" ):
                listener.exitTableAlias(self)




    def tableAlias(self):

        localctx = SqlBaseParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1824
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1823
                    self.match(SqlBaseParser.AS)


                self.state = 1826
                self.strictIdentifier()
                self.state = 1828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1827
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)
        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)



    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_rowFormat)
        try:
            self.state = 1881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1832
                self.match(SqlBaseParser.ROW)
                self.state = 1833
                self.match(SqlBaseParser.FORMAT)
                self.state = 1834
                self.match(SqlBaseParser.SERDE)
                self.state = 1835
                localctx.name = self.match(SqlBaseParser.STRING)
                self.state = 1839
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1836
                    self.match(SqlBaseParser.WITH)
                    self.state = 1837
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 1838
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                self.match(SqlBaseParser.ROW)
                self.state = 1842
                self.match(SqlBaseParser.FORMAT)
                self.state = 1843
                self.match(SqlBaseParser.DELIMITED)
                self.state = 1853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 1844
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 1845
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1846
                    self.match(SqlBaseParser.BY)
                    self.state = 1847
                    localctx.fieldsTerminatedBy = self.match(SqlBaseParser.STRING)
                    self.state = 1851
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                    if la_ == 1:
                        self.state = 1848
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 1849
                        self.match(SqlBaseParser.BY)
                        self.state = 1850
                        localctx.escapedBy = self.match(SqlBaseParser.STRING)




                self.state = 1860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1855
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 1856
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 1857
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1858
                    self.match(SqlBaseParser.BY)
                    self.state = 1859
                    localctx.collectionItemsTerminatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1862
                    self.match(SqlBaseParser.MAP)
                    self.state = 1863
                    self.match(SqlBaseParser.KEYS)
                    self.state = 1864
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1865
                    self.match(SqlBaseParser.BY)
                    self.state = 1866
                    localctx.keysTerminatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 1869
                    self.match(SqlBaseParser.LINES)
                    self.state = 1870
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1871
                    self.match(SqlBaseParser.BY)
                    self.state = 1872
                    localctx.linesSeparatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1879
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 1875
                    self.match(SqlBaseParser.NULL)
                    self.state = 1876
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 1877
                    self.match(SqlBaseParser.AS)
                    self.state = 1878
                    localctx.nullDefinedAs = self.match(SqlBaseParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext
            self.table = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)




    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 1883
                localctx.db = self.identifier()
                self.state = 1884
                self.match(SqlBaseParser.T__3)


            self.state = 1888
            localctx.table = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext
            self.function = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)




    def functionIdentifier(self):

        localctx = SqlBaseParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1890
                localctx.db = self.identifier()
                self.state = 1891
                self.match(SqlBaseParser.T__3)


            self.state = 1895
            localctx.function = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)




    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.expression()
            self.state = 1905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1898
                    self.match(SqlBaseParser.AS)


                self.state = 1903
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.ANY, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.PIVOT, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.DIRECTORY, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.BOTH, SqlBaseParser.LEADING, SqlBaseParser.TRAILING, SqlBaseParser.IF, SqlBaseParser.POSITION, SqlBaseParser.EXTRACT, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                    self.state = 1901
                    self.identifier()
                    pass
                elif token in [SqlBaseParser.T__0]:
                    self.state = 1902
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)




    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1907
            self.namedExpression()
            self.state = 1912
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1908
                    self.match(SqlBaseParser.T__2)
                    self.state = 1909
                    self.namedExpression() 
                self.state = 1914
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1915
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1918
                self.match(SqlBaseParser.NOT)
                self.state = 1919
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1920
                self.match(SqlBaseParser.EXISTS)
                self.state = 1921
                self.match(SqlBaseParser.T__0)
                self.state = 1922
                self.query()
                self.state = 1923
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1925
                self.valueExpression(0)
                self.state = 1927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1926
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1937
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1931
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1932
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 1933
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1934
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1935
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 1936
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 1941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1942
                    self.match(SqlBaseParser.NOT)


                self.state = 1945
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 1946
                localctx.lower = self.valueExpression(0)
                self.state = 1947
                self.match(SqlBaseParser.AND)
                self.state = 1948
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1950
                    self.match(SqlBaseParser.NOT)


                self.state = 1953
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1954
                self.match(SqlBaseParser.T__0)
                self.state = 1955
                self.expression()
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1956
                    self.match(SqlBaseParser.T__2)
                    self.state = 1957
                    self.expression()
                    self.state = 1962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1963
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1965
                    self.match(SqlBaseParser.NOT)


                self.state = 1968
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1969
                self.match(SqlBaseParser.T__0)
                self.state = 1970
                self.query()
                self.state = 1971
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1973
                    self.match(SqlBaseParser.NOT)


                self.state = 1976
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.LIKE or _la==SqlBaseParser.RLIKE):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1977
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1978
                self.match(SqlBaseParser.IS)
                self.state = 1980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1979
                    self.match(SqlBaseParser.NOT)


                self.state = 1982
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1983
                self.match(SqlBaseParser.IS)
                self.state = 1985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1984
                    self.match(SqlBaseParser.NOT)


                self.state = 1987
                localctx.kind = self.match(SqlBaseParser.DISTINCT)
                self.state = 1988
                self.match(SqlBaseParser.FROM)
                self.state = 1989
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)
        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 146
        self.enterRecursionRule(localctx, 146, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1993
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1994
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (SqlBaseParser.PLUS - 138)) | (1 << (SqlBaseParser.MINUS - 138)) | (1 << (SqlBaseParser.TILDE - 138)))) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1995
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2019
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2017
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1998
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1999
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (SqlBaseParser.ASTERISK - 140)) | (1 << (SqlBaseParser.SLASH - 140)) | (1 << (SqlBaseParser.PERCENT - 140)) | (1 << (SqlBaseParser.DIV - 140)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2000
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2001
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2002
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (SqlBaseParser.PLUS - 138)) | (1 << (SqlBaseParser.MINUS - 138)) | (1 << (SqlBaseParser.CONCAT_PIPE - 138)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2003
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2004
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2005
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 2006
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2007
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2008
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 2009
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2010
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2011
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 2012
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 2013
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2014
                        self.comparisonOperator()
                        self.state = 2015
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 2021
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IDENTIFIER)
            else:
                return self.getToken(SqlBaseParser.IDENTIFIER, i)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.trimOption = None # Token
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.str = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 148
        self.enterRecursionRule(localctx, 148, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2023
                self.match(SqlBaseParser.CASE)
                self.state = 2025 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2024
                    self.whenClause()
                    self.state = 2027 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 2029
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2030
                    localctx.elseExpression = self.expression()


                self.state = 2033
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2035
                self.match(SqlBaseParser.CASE)
                self.state = 2036
                localctx.value = self.expression()
                self.state = 2038 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2037
                    self.whenClause()
                    self.state = 2040 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 2042
                    self.match(SqlBaseParser.ELSE)
                    self.state = 2043
                    localctx.elseExpression = self.expression()


                self.state = 2046
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2048
                self.match(SqlBaseParser.CAST)
                self.state = 2049
                self.match(SqlBaseParser.T__0)
                self.state = 2050
                self.expression()
                self.state = 2051
                self.match(SqlBaseParser.AS)
                self.state = 2052
                self.dataType()
                self.state = 2053
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2055
                self.match(SqlBaseParser.STRUCT)
                self.state = 2056
                self.match(SqlBaseParser.T__0)
                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.STRING - 192)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 192)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 192)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 192)) | (1 << (SqlBaseParser.INTEGER_VALUE - 192)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 192)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 192)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                    self.state = 2057
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 2062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 2058
                        self.match(SqlBaseParser.T__2)
                        self.state = 2059
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 2064
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2067
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2068
                self.match(SqlBaseParser.FIRST)
                self.state = 2069
                self.match(SqlBaseParser.T__0)
                self.state = 2070
                self.expression()
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IGNORE:
                    self.state = 2071
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2072
                    self.match(SqlBaseParser.NULLS)


                self.state = 2075
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2077
                self.match(SqlBaseParser.LAST)
                self.state = 2078
                self.match(SqlBaseParser.T__0)
                self.state = 2079
                self.expression()
                self.state = 2082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IGNORE:
                    self.state = 2080
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2081
                    self.match(SqlBaseParser.NULLS)


                self.state = 2084
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2086
                self.match(SqlBaseParser.POSITION)
                self.state = 2087
                self.match(SqlBaseParser.T__0)
                self.state = 2088
                localctx.substr = self.valueExpression(0)
                self.state = 2089
                self.match(SqlBaseParser.IN)
                self.state = 2090
                localctx.str = self.valueExpression(0)
                self.state = 2091
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2093
                self.constant()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2094
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2095
                self.qualifiedName()
                self.state = 2096
                self.match(SqlBaseParser.T__3)
                self.state = 2097
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2099
                self.match(SqlBaseParser.T__0)
                self.state = 2100
                self.namedExpression()
                self.state = 2103 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2101
                    self.match(SqlBaseParser.T__2)
                    self.state = 2102
                    self.namedExpression()
                    self.state = 2105 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.T__2):
                        break

                self.state = 2107
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2109
                self.match(SqlBaseParser.T__0)
                self.state = 2110
                self.query()
                self.state = 2111
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2113
                self.qualifiedName()
                self.state = 2114
                self.match(SqlBaseParser.T__0)
                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.PLUS - 128)) | (1 << (SqlBaseParser.MINUS - 128)) | (1 << (SqlBaseParser.ASTERISK - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.TILDE - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.STRING - 192)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 192)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 192)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 192)) | (1 << (SqlBaseParser.INTEGER_VALUE - 192)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 192)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 192)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                    self.state = 2116
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                    if la_ == 1:
                        self.state = 2115
                        self.setQuantifier()


                    self.state = 2118
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 2123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 2119
                        self.match(SqlBaseParser.T__2)
                        self.state = 2120
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 2125
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2128
                self.match(SqlBaseParser.T__1)
                self.state = 2131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2129
                    self.match(SqlBaseParser.OVER)
                    self.state = 2130
                    self.windowSpec()


                pass

            elif la_ == 14:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2133
                self.qualifiedName()
                self.state = 2134
                self.match(SqlBaseParser.T__0)
                self.state = 2135
                localctx.trimOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 124)) & ~0x3f) == 0 and ((1 << (_la - 124)) & ((1 << (SqlBaseParser.BOTH - 124)) | (1 << (SqlBaseParser.LEADING - 124)) | (1 << (SqlBaseParser.TRAILING - 124)))) != 0)):
                    localctx.trimOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2136
                localctx._expression = self.expression()
                localctx.argument.append(localctx._expression)
                self.state = 2137
                self.match(SqlBaseParser.FROM)
                self.state = 2138
                localctx._expression = self.expression()
                localctx.argument.append(localctx._expression)
                self.state = 2139
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2141
                self.match(SqlBaseParser.IDENTIFIER)
                self.state = 2142
                self.match(SqlBaseParser.T__6)
                self.state = 2143
                self.expression()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2144
                self.match(SqlBaseParser.T__0)
                self.state = 2145
                self.match(SqlBaseParser.IDENTIFIER)
                self.state = 2148 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2146
                    self.match(SqlBaseParser.T__2)
                    self.state = 2147
                    self.match(SqlBaseParser.IDENTIFIER)
                    self.state = 2150 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.T__2):
                        break

                self.state = 2152
                self.match(SqlBaseParser.T__1)
                self.state = 2153
                self.match(SqlBaseParser.T__6)
                self.state = 2154
                self.expression()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2155
                self.identifier()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2156
                self.match(SqlBaseParser.T__0)
                self.state = 2157
                self.expression()
                self.state = 2158
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 19:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2160
                self.match(SqlBaseParser.EXTRACT)
                self.state = 2161
                self.match(SqlBaseParser.T__0)
                self.state = 2162
                localctx.field = self.identifier()
                self.state = 2163
                self.match(SqlBaseParser.FROM)
                self.state = 2164
                localctx.source = self.valueExpression(0)
                self.state = 2165
                self.match(SqlBaseParser.T__1)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2179
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2177
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2169
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2170
                        self.match(SqlBaseParser.T__7)
                        self.state = 2171
                        localctx.index = self.valueExpression(0)
                        self.state = 2172
                        self.match(SqlBaseParser.T__8)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2174
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2175
                        self.match(SqlBaseParser.T__3)
                        self.state = 2176
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 2181
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)



    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_constant)
        try:
            self.state = 2194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2182
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2183
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2184
                self.identifier()
                self.state = 2185
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2187
                self.number()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2188
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2190 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2189
                        self.match(SqlBaseParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2192 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2196
            _la = self._input.LA(1)
            if not(((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (SqlBaseParser.EQ - 130)) | (1 << (SqlBaseParser.NSEQ - 130)) | (1 << (SqlBaseParser.NEQ - 130)) | (1 << (SqlBaseParser.NEQJ - 130)) | (1 << (SqlBaseParser.LT - 130)) | (1 << (SqlBaseParser.LTE - 130)) | (1 << (SqlBaseParser.GT - 130)) | (1 << (SqlBaseParser.GTE - 130)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)




    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            _la = self._input.LA(1)
            if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (SqlBaseParser.PLUS - 138)) | (1 << (SqlBaseParser.MINUS - 138)) | (1 << (SqlBaseParser.ASTERISK - 138)) | (1 << (SqlBaseParser.SLASH - 138)) | (1 << (SqlBaseParser.PERCENT - 138)) | (1 << (SqlBaseParser.DIV - 138)) | (1 << (SqlBaseParser.TILDE - 138)) | (1 << (SqlBaseParser.AMPERSAND - 138)) | (1 << (SqlBaseParser.PIPE - 138)) | (1 << (SqlBaseParser.CONCAT_PIPE - 138)) | (1 << (SqlBaseParser.HAT - 138)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)




    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2202
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.TRUE or _la==SqlBaseParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2204
            self.match(SqlBaseParser.INTERVAL)
            self.state = 2208
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2205
                    self.intervalField() 
                self.state = 2210
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.unit = None # IdentifierContext
            self.to = None # IdentifierContext

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_intervalField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            localctx.value = self.intervalValue()
            self.state = 2212
            localctx.unit = self.identifier()
            self.state = 2215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2213
                self.match(SqlBaseParser.TO)
                self.state = 2214
                localctx.to = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)




    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 2222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.PLUS, SqlBaseParser.MINUS, SqlBaseParser.INTEGER_VALUE, SqlBaseParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS:
                    self.state = 2217
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2220
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.INTEGER_VALUE or _la==SqlBaseParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2221
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)




    def colPosition(self):

        localctx = SqlBaseParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_colPosition)
        try:
            self.state = 2227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2224
                self.match(SqlBaseParser.FIRST)
                pass
            elif token in [SqlBaseParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2225
                self.match(SqlBaseParser.AFTER)
                self.state = 2226
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complex = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)



    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 2263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2229
                localctx.complex = self.match(SqlBaseParser.ARRAY)
                self.state = 2230
                self.match(SqlBaseParser.LT)
                self.state = 2231
                self.dataType()
                self.state = 2232
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2234
                localctx.complex = self.match(SqlBaseParser.MAP)
                self.state = 2235
                self.match(SqlBaseParser.LT)
                self.state = 2236
                self.dataType()
                self.state = 2237
                self.match(SqlBaseParser.T__2)
                self.state = 2238
                self.dataType()
                self.state = 2239
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2241
                localctx.complex = self.match(SqlBaseParser.STRUCT)
                self.state = 2248
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.LT]:
                    self.state = 2242
                    self.match(SqlBaseParser.LT)
                    self.state = 2244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.ANTI - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)) | (1 << (SqlBaseParser.IDENTIFIER - 192)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                        self.state = 2243
                        self.complexColTypeList()


                    self.state = 2246
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [SqlBaseParser.NEQ]:
                    self.state = 2247
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2250
                self.identifier()
                self.state = 2261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2251
                    self.match(SqlBaseParser.T__0)
                    self.state = 2252
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 2253
                        self.match(SqlBaseParser.T__2)
                        self.state = 2254
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 2259
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2260
                    self.match(SqlBaseParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)




    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2265
            self.colType()
            self.state = 2270
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2266
                    self.match(SqlBaseParser.T__2)
                    self.state = 2267
                    self.colType() 
                self.state = 2272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)




    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2273
            self.identifier()
            self.state = 2274
            self.dataType()
            self.state = 2277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2275
                self.match(SqlBaseParser.COMMENT)
                self.state = 2276
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)




    def complexColTypeList(self):

        localctx = SqlBaseParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2279
            self.complexColType()
            self.state = 2284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 2280
                self.match(SqlBaseParser.T__2)
                self.state = 2281
                self.complexColType()
                self.state = 2286
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)




    def complexColType(self):

        localctx = SqlBaseParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.identifier()
            self.state = 2288
            self.match(SqlBaseParser.T__9)
            self.state = 2289
            self.dataType()
            self.state = 2292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 2290
                self.match(SqlBaseParser.COMMENT)
                self.state = 2291
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2294
            self.match(SqlBaseParser.WHEN)
            self.state = 2295
            localctx.condition = self.expression()
            self.state = 2296
            self.match(SqlBaseParser.THEN)
            self.state = 2297
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindows" ):
                listener.enterWindows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindows" ):
                listener.exitWindows(self)




    def windows(self):

        localctx = SqlBaseParser.WindowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_windows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2299
            self.match(SqlBaseParser.WINDOW)
            self.state = 2300
            self.namedWindow()
            self.state = 2305
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2301
                    self.match(SqlBaseParser.T__2)
                    self.state = 2302
                    self.namedWindow() 
                self.state = 2307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2308
            self.identifier()
            self.state = 2309
            self.match(SqlBaseParser.AS)
            self.state = 2310
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)



    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 2358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2312
                localctx.name = self.identifier()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2313
                self.match(SqlBaseParser.T__0)
                self.state = 2314
                localctx.name = self.identifier()
                self.state = 2315
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2317
                self.match(SqlBaseParser.T__0)
                self.state = 2352
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CLUSTER]:
                    self.state = 2318
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 2319
                    self.match(SqlBaseParser.BY)
                    self.state = 2320
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 2325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 2321
                        self.match(SqlBaseParser.T__2)
                        self.state = 2322
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2327
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SqlBaseParser.T__1, SqlBaseParser.ORDER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.SORT, SqlBaseParser.DISTRIBUTE]:
                    self.state = 2338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.PARTITION or _la==SqlBaseParser.DISTRIBUTE:
                        self.state = 2328
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.PARTITION or _la==SqlBaseParser.DISTRIBUTE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2329
                        self.match(SqlBaseParser.BY)
                        self.state = 2330
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2335
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlBaseParser.T__2:
                            self.state = 2331
                            self.match(SqlBaseParser.T__2)
                            self.state = 2332
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 2337
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 2350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ORDER or _la==SqlBaseParser.SORT:
                        self.state = 2340
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.ORDER or _la==SqlBaseParser.SORT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2341
                        self.match(SqlBaseParser.BY)
                        self.state = 2342
                        self.sortItem()
                        self.state = 2347
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlBaseParser.T__2:
                            self.state = 2343
                            self.match(SqlBaseParser.T__2)
                            self.state = 2344
                            self.sortItem()
                            self.state = 2349
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.RANGE or _la==SqlBaseParser.ROWS:
                    self.state = 2354
                    self.windowFrame()


                self.state = 2357
                self.match(SqlBaseParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_windowFrame)
        try:
            self.state = 2376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2360
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2361
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2362
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2363
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2364
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2365
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2366
                localctx.start = self.frameBound()
                self.state = 2367
                self.match(SqlBaseParser.AND)
                self.state = 2368
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2370
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2371
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2372
                localctx.start = self.frameBound()
                self.state = 2373
                self.match(SqlBaseParser.AND)
                self.state = 2374
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)




    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2378
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2379
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PRECEDING or _la==SqlBaseParser.FOLLOWING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2380
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 2381
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2382
                self.expression()
                self.state = 2383
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PRECEDING or _la==SqlBaseParser.FOLLOWING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2387
            self.identifier()
            self.state = 2392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,315,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2388
                    self.match(SqlBaseParser.T__3)
                    self.state = 2389
                    self.identifier() 
                self.state = 2394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,315,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_identifier)
        try:
            self.state = 2410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.ANY, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.OUTER, SqlBaseParser.PIVOT, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.DIRECTORY, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.BOTH, SqlBaseParser.LEADING, SqlBaseParser.TRAILING, SqlBaseParser.IF, SqlBaseParser.POSITION, SqlBaseParser.EXTRACT, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2395
                self.strictIdentifier()
                pass
            elif token in [SqlBaseParser.ANTI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2396
                self.match(SqlBaseParser.ANTI)
                pass
            elif token in [SqlBaseParser.FULL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2397
                self.match(SqlBaseParser.FULL)
                pass
            elif token in [SqlBaseParser.INNER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2398
                self.match(SqlBaseParser.INNER)
                pass
            elif token in [SqlBaseParser.LEFT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2399
                self.match(SqlBaseParser.LEFT)
                pass
            elif token in [SqlBaseParser.SEMI]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2400
                self.match(SqlBaseParser.SEMI)
                pass
            elif token in [SqlBaseParser.RIGHT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2401
                self.match(SqlBaseParser.RIGHT)
                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2402
                self.match(SqlBaseParser.NATURAL)
                pass
            elif token in [SqlBaseParser.JOIN]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2403
                self.match(SqlBaseParser.JOIN)
                pass
            elif token in [SqlBaseParser.CROSS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2404
                self.match(SqlBaseParser.CROSS)
                pass
            elif token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2405
                self.match(SqlBaseParser.ON)
                pass
            elif token in [SqlBaseParser.UNION]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2406
                self.match(SqlBaseParser.UNION)
                pass
            elif token in [SqlBaseParser.INTERSECT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2407
                self.match(SqlBaseParser.INTERSECT)
                pass
            elif token in [SqlBaseParser.EXCEPT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2408
                self.match(SqlBaseParser.EXCEPT)
                pass
            elif token in [SqlBaseParser.SETMINUS]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2409
                self.match(SqlBaseParser.SETMINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_strictIdentifier)
        try:
            self.state = 2415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IDENTIFIER]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2412
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2413
                self.quotedIdentifier()
                pass
            elif token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.ANY, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.OUTER, SqlBaseParser.PIVOT, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.DIRECTORY, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.BOTH, SqlBaseParser.LEADING, SqlBaseParser.TRAILING, SqlBaseParser.IF, SqlBaseParser.POSITION, SqlBaseParser.EXTRACT, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.LOCAL, SqlBaseParser.INPATH]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2414
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)




    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2417
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 2447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2419
                    self.match(SqlBaseParser.MINUS)


                self.state = 2422
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2423
                    self.match(SqlBaseParser.MINUS)


                self.state = 2426
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2427
                    self.match(SqlBaseParser.MINUS)


                self.state = 2430
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2431
                    self.match(SqlBaseParser.MINUS)


                self.state = 2434
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2435
                    self.match(SqlBaseParser.MINUS)


                self.state = 2438
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2439
                    self.match(SqlBaseParser.MINUS)


                self.state = 2442
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2443
                    self.match(SqlBaseParser.MINUS)


                self.state = 2446
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def PIVOT(self):
            return self.getToken(SqlBaseParser.PIVOT, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2449
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.PIVOT) | (1 << SqlBaseParser.LATERAL))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.WINDOW - 64)) | (1 << (SqlBaseParser.OVER - 64)) | (1 << (SqlBaseParser.PARTITION - 64)) | (1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.BOTH - 64)) | (1 << (SqlBaseParser.LEADING - 64)) | (1 << (SqlBaseParser.TRAILING - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SqlBaseParser.POSITION - 128)) | (1 << (SqlBaseParser.EXTRACT - 128)) | (1 << (SqlBaseParser.DIV - 128)) | (1 << (SqlBaseParser.PERCENTLIT - 128)) | (1 << (SqlBaseParser.BUCKET - 128)) | (1 << (SqlBaseParser.OUT - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.SORT - 128)) | (1 << (SqlBaseParser.CLUSTER - 128)) | (1 << (SqlBaseParser.DISTRIBUTE - 128)) | (1 << (SqlBaseParser.OVERWRITE - 128)) | (1 << (SqlBaseParser.TRANSFORM - 128)) | (1 << (SqlBaseParser.REDUCE - 128)) | (1 << (SqlBaseParser.SERDE - 128)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 128)) | (1 << (SqlBaseParser.RECORDREADER - 128)) | (1 << (SqlBaseParser.RECORDWRITER - 128)) | (1 << (SqlBaseParser.DELIMITED - 128)) | (1 << (SqlBaseParser.FIELDS - 128)) | (1 << (SqlBaseParser.TERMINATED - 128)) | (1 << (SqlBaseParser.COLLECTION - 128)) | (1 << (SqlBaseParser.ITEMS - 128)) | (1 << (SqlBaseParser.KEYS - 128)) | (1 << (SqlBaseParser.ESCAPED - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.SEPARATED - 128)) | (1 << (SqlBaseParser.FUNCTION - 128)) | (1 << (SqlBaseParser.EXTENDED - 128)) | (1 << (SqlBaseParser.REFRESH - 128)) | (1 << (SqlBaseParser.CLEAR - 128)) | (1 << (SqlBaseParser.CACHE - 128)) | (1 << (SqlBaseParser.UNCACHE - 128)) | (1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.FORMATTED - 128)) | (1 << (SqlBaseParser.GLOBAL - 128)) | (1 << (SqlBaseParser.TEMPORARY - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.UNSET - 128)) | (1 << (SqlBaseParser.TBLPROPERTIES - 128)) | (1 << (SqlBaseParser.DBPROPERTIES - 128)) | (1 << (SqlBaseParser.BUCKETS - 128)) | (1 << (SqlBaseParser.SKEWED - 128)) | (1 << (SqlBaseParser.STORED - 128)) | (1 << (SqlBaseParser.DIRECTORIES - 128)) | (1 << (SqlBaseParser.LOCATION - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (SqlBaseParser.EXCHANGE - 192)) | (1 << (SqlBaseParser.ARCHIVE - 192)) | (1 << (SqlBaseParser.UNARCHIVE - 192)) | (1 << (SqlBaseParser.FILEFORMAT - 192)) | (1 << (SqlBaseParser.TOUCH - 192)) | (1 << (SqlBaseParser.COMPACT - 192)) | (1 << (SqlBaseParser.CONCATENATE - 192)) | (1 << (SqlBaseParser.CHANGE - 192)) | (1 << (SqlBaseParser.CASCADE - 192)) | (1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.CLUSTERED - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.PURGE - 192)) | (1 << (SqlBaseParser.INPUTFORMAT - 192)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 192)) | (1 << (SqlBaseParser.DATABASE - 192)) | (1 << (SqlBaseParser.DATABASES - 192)) | (1 << (SqlBaseParser.DFS - 192)) | (1 << (SqlBaseParser.TRUNCATE - 192)) | (1 << (SqlBaseParser.ANALYZE - 192)) | (1 << (SqlBaseParser.COMPUTE - 192)) | (1 << (SqlBaseParser.LIST - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.PARTITIONED - 192)) | (1 << (SqlBaseParser.EXTERNAL - 192)) | (1 << (SqlBaseParser.DEFINED - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.GRANT - 192)) | (1 << (SqlBaseParser.LOCK - 192)) | (1 << (SqlBaseParser.UNLOCK - 192)) | (1 << (SqlBaseParser.MSCK - 192)) | (1 << (SqlBaseParser.REPAIR - 192)) | (1 << (SqlBaseParser.RECOVER - 192)) | (1 << (SqlBaseParser.EXPORT - 192)) | (1 << (SqlBaseParser.IMPORT - 192)) | (1 << (SqlBaseParser.LOAD - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.COMPACTIONS - 192)) | (1 << (SqlBaseParser.PRINCIPALS - 192)) | (1 << (SqlBaseParser.TRANSACTIONS - 192)) | (1 << (SqlBaseParser.INDEX - 192)) | (1 << (SqlBaseParser.INDEXES - 192)) | (1 << (SqlBaseParser.LOCKS - 192)) | (1 << (SqlBaseParser.OPTION - 192)) | (1 << (SqlBaseParser.LOCAL - 192)) | (1 << (SqlBaseParser.INPATH - 192)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[35] = self.queryTerm_sempred
        self._predicates[71] = self.booleanExpression_sempred
        self._predicates[73] = self.valueExpression_sempred
        self._predicates[74] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return legacy_setops_precedence_enbled
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return !legacy_setops_precedence_enbled
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 5:
                return !legacy_setops_precedence_enbled
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         




