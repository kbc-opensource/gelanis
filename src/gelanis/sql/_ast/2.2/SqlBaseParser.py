# Generated from SqlBase.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00f8")
        buf.write("\u08f6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5")
        buf.write("\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00d8")
        buf.write("\n\7\3\7\3\7\3\7\5\7\u00dd\n\7\3\7\5\7\u00e0\n\7\3\7\3")
        buf.write("\7\3\7\5\7\u00e5\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\5\7\u00f2\n\7\3\7\3\7\5\7\u00f6\n\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u00fd\n\7\3\7\3\7\3\7\5\7\u0102\n\7\3")
        buf.write("\7\3\7\3\7\5\7\u0107\n\7\3\7\5\7\u010a\n\7\3\7\5\7\u010d")
        buf.write("\n\7\3\7\3\7\5\7\u0111\n\7\3\7\5\7\u0114\n\7\3\7\5\7\u0117")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u011e\n\7\3\7\3\7\5\7\u0122")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u012a\n\7\3\7\5\7\u012d")
        buf.write("\n\7\3\7\5\7\u0130\n\7\3\7\5\7\u0133\n\7\3\7\5\7\u0136")
        buf.write("\n\7\3\7\5\7\u0139\n\7\3\7\3\7\5\7\u013d\n\7\3\7\5\7\u0140")
        buf.write("\n\7\3\7\5\7\u0143\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u014a\n")
        buf.write("\7\3\7\3\7\3\7\3\7\5\7\u0150\n\7\3\7\3\7\3\7\3\7\5\7\u0156")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u015e\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u017e\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0186\n\7\3")
        buf.write("\7\3\7\5\7\u018a\n\7\3\7\3\7\3\7\5\7\u018f\n\7\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u0195\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u019d")
        buf.write("\n\7\3\7\3\7\3\7\3\7\5\7\u01a3\n\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01b0\n\7\3\7\6\7\u01b3\n")
        buf.write("\7\r\7\16\7\u01b4\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01be")
        buf.write("\n\7\3\7\6\7\u01c1\n\7\r\7\16\7\u01c2\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01d3\n\7")
        buf.write("\3\7\3\7\3\7\7\7\u01d8\n\7\f\7\16\7\u01db\13\7\3\7\5\7")
        buf.write("\u01de\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01e6\n\7\3\7\3")
        buf.write("\7\3\7\7\7\u01eb\n\7\f\7\16\7\u01ee\13\7\3\7\3\7\3\7\3")
        buf.write("\7\5\7\u01f4\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u0203\n\7\3\7\3\7\5\7\u0207\n\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u020d\n\7\3\7\3\7\3\7\3\7\5\7\u0213\n")
        buf.write("\7\3\7\5\7\u0216\n\7\3\7\5\7\u0219\n\7\3\7\3\7\3\7\3\7")
        buf.write("\5\7\u021f\n\7\3\7\3\7\5\7\u0223\n\7\3\7\3\7\5\7\u0227")
        buf.write("\n\7\3\7\3\7\3\7\5\7\u022c\n\7\3\7\3\7\5\7\u0230\n\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\5\7\u0238\n\7\3\7\5\7\u023b\n\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0244\n\7\3\7\3\7\3\7")
        buf.write("\5\7\u0249\n\7\3\7\3\7\3\7\3\7\5\7\u024f\n\7\3\7\3\7\3")
        buf.write("\7\3\7\5\7\u0255\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7")
        buf.write("\7\u025f\n\7\f\7\16\7\u0262\13\7\5\7\u0264\n\7\3\7\3\7")
        buf.write("\5\7\u0268\n\7\3\7\3\7\3\7\5\7\u026d\n\7\3\7\3\7\3\7\5")
        buf.write("\7\u0272\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0279\n\7\3\7\5\7")
        buf.write("\u027c\n\7\3\7\5\7\u027f\n\7\3\7\3\7\3\7\3\7\3\7\5\7\u0286")
        buf.write("\n\7\3\7\3\7\3\7\5\7\u028b\n\7\3\7\3\7\3\7\3\7\5\7\u0291")
        buf.write("\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u029a\n\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\5\7\u02a2\n\7\3\7\3\7\3\7\3\7\5\7\u02a8")
        buf.write("\n\7\3\7\3\7\5\7\u02ac\n\7\3\7\3\7\5\7\u02b0\n\7\3\7\3")
        buf.write("\7\5\7\u02b4\n\7\5\7\u02b6\n\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\5\7\u02bf\n\7\3\7\3\7\3\7\3\7\5\7\u02c5\n\7\3\7\3")
        buf.write("\7\3\7\5\7\u02ca\n\7\3\7\5\7\u02cd\n\7\3\7\3\7\5\7\u02d1")
        buf.write("\n\7\3\7\5\7\u02d4\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u02db\n")
        buf.write("\7\f\7\16\7\u02de\13\7\3\7\3\7\5\7\u02e2\n\7\3\7\3\7\3")
        buf.write("\7\5\7\u02e7\n\7\3\7\5\7\u02ea\n\7\3\7\3\7\3\7\3\7\5\7")
        buf.write("\u02f0\n\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u02f8\n\7\3\7\3")
        buf.write("\7\3\7\5\7\u02fd\n\7\3\7\3\7\3\7\3\7\5\7\u0303\n\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u0309\n\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\7\7\u0312\n\7\f\7\16\7\u0315\13\7\3\7\3\7\3\7\7\7\u031a")
        buf.write("\n\7\f\7\16\7\u031d\13\7\3\7\3\7\7\7\u0321\n\7\f\7\16")
        buf.write("\7\u0324\13\7\3\7\3\7\3\7\7\7\u0329\n\7\f\7\16\7\u032c")
        buf.write("\13\7\5\7\u032e\n\7\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0336")
        buf.write("\n\b\3\b\3\b\5\b\u033a\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0341")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u03b5\n\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u03bd\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b")
        buf.write("\u03c5\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u03ce\n\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u03da\n\b\3")
        buf.write("\t\3\t\5\t\u03de\n\t\3\t\5\t\u03e1\n\t\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u03e7\n\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u03f1")
        buf.write("\n\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u03fd\n\13\3\13\3\13\3\13\5\13\u0402\n\13\3\f\3\f\3\f")
        buf.write("\3\r\5\r\u0408\n\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\5\16\u0414\n\16\5\16\u0416\n\16\3\16\3\16")
        buf.write("\3\16\5\16\u041b\n\16\3\16\3\16\5\16\u041f\n\16\5\16\u0421")
        buf.write("\n\16\3\17\3\17\5\17\u0425\n\17\3\20\3\20\3\20\3\20\3")
        buf.write("\20\7\20\u042c\n\20\f\20\16\20\u042f\13\20\3\20\3\20\3")
        buf.write("\21\3\21\3\21\5\21\u0436\n\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\5\22\u043d\n\22\3\23\3\23\3\23\3\23\5\23\u0443\n\23\7")
        buf.write("\23\u0445\n\23\f\23\16\23\u0448\13\23\3\24\3\24\3\24\3")
        buf.write("\24\7\24\u044e\n\24\f\24\16\24\u0451\13\24\3\25\3\25\5")
        buf.write("\25\u0455\n\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u0462\n\27\f\27\16\27\u0465\13\27")
        buf.write("\3\27\3\27\3\30\3\30\5\30\u046b\n\30\3\30\5\30\u046e\n")
        buf.write("\30\3\31\3\31\3\31\7\31\u0473\n\31\f\31\16\31\u0476\13")
        buf.write("\31\3\31\5\31\u0479\n\31\3\32\3\32\3\32\3\32\5\32\u047f")
        buf.write("\n\32\3\33\3\33\3\33\3\33\7\33\u0485\n\33\f\33\16\33\u0488")
        buf.write("\13\33\3\33\3\33\3\34\3\34\3\34\3\34\7\34\u0490\n\34\f")
        buf.write("\34\16\34\u0493\13\34\3\34\3\34\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\5\35\u049d\n\35\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u04a4\n\36\3\37\3\37\3\37\3\37\5\37\u04aa\n\37\3 \3 ")
        buf.write("\3 \3!\5!\u04b0\n!\3!\3!\3!\3!\3!\6!\u04b7\n!\r!\16!\u04b8")
        buf.write("\5!\u04bb\n!\3\"\3\"\3\"\3\"\3\"\7\"\u04c2\n\"\f\"\16")
        buf.write("\"\u04c5\13\"\5\"\u04c7\n\"\3\"\3\"\3\"\3\"\3\"\7\"\u04ce")
        buf.write("\n\"\f\"\16\"\u04d1\13\"\5\"\u04d3\n\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\7\"\u04da\n\"\f\"\16\"\u04dd\13\"\5\"\u04df\n\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\7\"\u04e6\n\"\f\"\16\"\u04e9\13\"\5")
        buf.write("\"\u04eb\n\"\3\"\5\"\u04ee\n\"\3\"\3\"\5\"\u04f2\n\"\3")
        buf.write("#\5#\u04f5\n#\3#\3#\3#\3$\3$\3$\3$\3$\3$\5$\u0500\n$\3")
        buf.write("$\7$\u0503\n$\f$\16$\u0506\13$\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\5%\u0510\n%\3&\3&\5&\u0514\n&\3&\3&\5&\u0518\n&\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0524\n\'\3\'")
        buf.write("\5\'\u0527\n\'\3\'\3\'\5\'\u052b\n\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\5\'\u0535\n\'\3\'\3\'\5\'\u0539\n\'\5\'")
        buf.write("\u053b\n\'\3\'\5\'\u053e\n\'\3\'\3\'\5\'\u0542\n\'\3\'")
        buf.write("\5\'\u0545\n\'\3\'\3\'\5\'\u0549\n\'\3\'\3\'\7\'\u054d")
        buf.write("\n\'\f\'\16\'\u0550\13\'\3\'\5\'\u0553\n\'\3\'\3\'\5\'")
        buf.write("\u0557\n\'\3\'\3\'\3\'\5\'\u055c\n\'\3\'\5\'\u055f\n\'")
        buf.write("\5\'\u0561\n\'\3\'\7\'\u0564\n\'\f\'\16\'\u0567\13\'\3")
        buf.write("\'\3\'\5\'\u056b\n\'\3\'\5\'\u056e\n\'\3\'\3\'\5\'\u0572")
        buf.write("\n\'\3\'\5\'\u0575\n\'\5\'\u0577\n\'\3(\3(\3(\5(\u057c")
        buf.write("\n(\3(\7(\u057f\n(\f(\16(\u0582\13(\3(\3(\3)\3)\3)\3)")
        buf.write("\3)\3)\7)\u058c\n)\f)\16)\u058f\13)\3)\3)\5)\u0593\n)")
        buf.write("\3*\3*\3*\3*\7*\u0599\n*\f*\16*\u059c\13*\3*\7*\u059f")
        buf.write("\n*\f*\16*\u05a2\13*\3+\3+\3+\3+\3+\7+\u05a9\n+\f+\16")
        buf.write("+\u05ac\13+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\7+\u05b8\n+")
        buf.write("\f+\16+\u05bb\13+\3+\3+\5+\u05bf\n+\3,\3,\3,\3,\7,\u05c5")
        buf.write("\n,\f,\16,\u05c8\13,\5,\u05ca\n,\3,\3,\5,\u05ce\n,\3-")
        buf.write("\3-\3-\5-\u05d3\n-\3-\3-\3-\3-\3-\7-\u05da\n-\f-\16-\u05dd")
        buf.write("\13-\5-\u05df\n-\3-\3-\3-\5-\u05e4\n-\3-\3-\3-\7-\u05e9")
        buf.write("\n-\f-\16-\u05ec\13-\5-\u05ee\n-\3.\3.\3/\3/\7/\u05f4")
        buf.write("\n/\f/\16/\u05f7\13/\3\60\3\60\3\60\3\60\5\60\u05fd\n")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\5\60\u0604\n\60\3\61\5\61")
        buf.write("\u0607\n\61\3\61\3\61\3\61\5\61\u060c\n\61\3\61\3\61\3")
        buf.write("\61\3\61\5\61\u0612\n\61\3\61\3\61\5\61\u0616\n\61\3\61")
        buf.write("\5\61\u0619\n\61\3\61\5\61\u061c\n\61\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\7\62\u0625\n\62\f\62\16\62\u0628\13")
        buf.write("\62\3\62\3\62\5\62\u062c\n\62\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\5\63\u0641\n\63\5\63\u0643\n\63\5\63\u0645")
        buf.write("\n\63\3\63\3\63\3\64\3\64\3\64\3\64\3\65\3\65\3\65\7\65")
        buf.write("\u0650\n\65\f\65\16\65\u0653\13\65\3\66\3\66\3\66\3\66")
        buf.write("\7\66\u0659\n\66\f\66\16\66\u065c\13\66\3\66\3\66\3\67")
        buf.write("\3\67\5\67\u0662\n\67\38\38\38\38\78\u0668\n8\f8\168\u066b")
        buf.write("\138\38\38\39\39\39\59\u0672\n9\3:\3:\5:\u0676\n:\3:\5")
        buf.write(":\u0679\n:\3:\5:\u067c\n:\3:\3:\3:\3:\5:\u0682\n:\3:\5")
        buf.write(":\u0685\n:\3:\5:\u0688\n:\3:\3:\3:\3:\5:\u068e\n:\3:\5")
        buf.write(":\u0691\n:\3:\5:\u0694\n:\3:\3:\3:\3:\3:\3:\7:\u069c\n")
        buf.write(":\f:\16:\u069f\13:\5:\u06a1\n:\3:\3:\5:\u06a5\n:\3;\3")
        buf.write(";\3;\3;\7;\u06ab\n;\f;\16;\u06ae\13;\3;\5;\u06b1\n;\3")
        buf.write(";\3;\5;\u06b5\n;\5;\u06b7\n;\3<\3<\3<\3<\3<\3<\3<\5<\u06c0")
        buf.write("\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u06cc\n<\5<\u06ce")
        buf.write("\n<\3<\3<\3<\3<\3<\5<\u06d5\n<\3<\3<\3<\3<\3<\5<\u06dc")
        buf.write("\n<\3<\3<\3<\3<\5<\u06e2\n<\3<\3<\3<\3<\5<\u06e8\n<\5")
        buf.write("<\u06ea\n<\3=\3=\3=\5=\u06ef\n=\3=\3=\3>\3>\3>\5>\u06f6")
        buf.write("\n>\3>\3>\3?\3?\5?\u06fc\n?\3?\3?\5?\u0700\n?\5?\u0702")
        buf.write("\n?\3@\3@\3@\7@\u0707\n@\f@\16@\u070a\13@\3A\3A\3B\3B")
        buf.write("\3B\3B\3B\3B\3B\3B\3B\5B\u0717\nB\3B\3B\3B\3B\3B\3B\7")
        buf.write("B\u071f\nB\fB\16B\u0722\13B\3C\3C\5C\u0726\nC\3D\5D\u0729")
        buf.write("\nD\3D\3D\3D\3D\3D\3D\5D\u0731\nD\3D\3D\3D\3D\3D\7D\u0738")
        buf.write("\nD\fD\16D\u073b\13D\3D\3D\3D\5D\u0740\nD\3D\3D\3D\3D")
        buf.write("\3D\3D\5D\u0748\nD\3D\3D\3D\3D\5D\u074e\nD\3D\5D\u0751")
        buf.write("\nD\3E\3E\3E\3E\5E\u0757\nE\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u076c\nE\fE\16E\u076f")
        buf.write("\13E\3F\3F\3F\6F\u0774\nF\rF\16F\u0775\3F\3F\5F\u077a")
        buf.write("\nF\3F\3F\3F\3F\3F\6F\u0781\nF\rF\16F\u0782\3F\3F\5F\u0787")
        buf.write("\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\7F\u0797")
        buf.write("\nF\fF\16F\u079a\13F\5F\u079c\nF\3F\3F\3F\3F\3F\3F\5F")
        buf.write("\u07a4\nF\3F\3F\3F\3F\3F\3F\3F\5F\u07ad\nF\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\6F\u07bb\nF\rF\16F\u07bc\3F")
        buf.write("\3F\3F\3F\3F\3F\3F\3F\3F\5F\u07c8\nF\3F\3F\3F\7F\u07cd")
        buf.write("\nF\fF\16F\u07d0\13F\5F\u07d2\nF\3F\3F\3F\5F\u07d7\nF")
        buf.write("\3F\3F\3F\3F\3F\5F\u07de\nF\3F\3F\3F\3F\3F\3F\3F\3F\7")
        buf.write("F\u07e8\nF\fF\16F\u07eb\13F\3G\3G\3G\3G\3G\3G\3G\3G\6")
        buf.write("G\u07f5\nG\rG\16G\u07f6\5G\u07f9\nG\3H\3H\3I\3I\3J\3J")
        buf.write("\3K\3K\3L\3L\7L\u0805\nL\fL\16L\u0808\13L\3M\3M\3M\3M")
        buf.write("\5M\u080e\nM\3N\5N\u0811\nN\3N\3N\5N\u0815\nN\3O\3O\3")
        buf.write("O\5O\u081a\nO\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\5P\u082b\nP\3P\3P\5P\u082f\nP\3P\3P\3P\3P\3P\7P\u0836")
        buf.write("\nP\fP\16P\u0839\13P\3P\5P\u083c\nP\5P\u083e\nP\3Q\3Q")
        buf.write("\3Q\7Q\u0843\nQ\fQ\16Q\u0846\13Q\3R\3R\3R\3R\5R\u084c")
        buf.write("\nR\3S\3S\3S\7S\u0851\nS\fS\16S\u0854\13S\3T\3T\3T\3T")
        buf.write("\3T\5T\u085b\nT\3U\3U\3U\3U\3U\3V\3V\3V\3V\7V\u0866\n")
        buf.write("V\fV\16V\u0869\13V\3W\3W\3W\3W\3X\3X\3X\3X\3X\3X\3X\7")
        buf.write("X\u0876\nX\fX\16X\u0879\13X\3X\3X\3X\3X\3X\7X\u0880\n")
        buf.write("X\fX\16X\u0883\13X\5X\u0885\nX\3X\3X\3X\3X\3X\7X\u088c")
        buf.write("\nX\fX\16X\u088f\13X\5X\u0891\nX\5X\u0893\nX\3X\5X\u0896")
        buf.write("\nX\3X\5X\u0899\nX\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\3Y\5Y\u08ab\nY\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u08b4")
        buf.write("\nZ\3[\3[\3[\7[\u08b9\n[\f[\16[\u08bc\13[\3\\\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u08cd")
        buf.write("\n\\\3]\3]\3]\5]\u08d2\n]\3^\3^\3_\5_\u08d7\n_\3_\3_\5")
        buf.write("_\u08db\n_\3_\3_\5_\u08df\n_\3_\3_\5_\u08e3\n_\3_\3_\5")
        buf.write("_\u08e7\n_\3_\3_\5_\u08eb\n_\3_\3_\5_\u08ef\n_\3_\5_\u08f2")
        buf.write("\n_\3`\3`\3`\7\u02dc\u0313\u031b\u0322\u032a\6F\u0082")
        buf.write("\u0088\u008aa\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 ")
        buf.write("\"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtv")
        buf.write("xz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\2\32\3\2\u00c0\u00c1\3")
        buf.write("\2OP\5\2XZ\u00a6\u00a6\u00ac\u00ac\4\2\r\r\37\37\4\2,")
        buf.write(",UU\4\2\u00a6\u00a6\u00ac\u00ac\4\2\16\16\u00cd\u00cd")
        buf.write("\3\2dg\3\2+,\4\2HHJJ\3\2\20\21\3\2\u00ed\u00ee\3\2$%\4")
        buf.write("\2\u0083\u0084\u0089\u0089\3\2\u0085\u0088\3\2\u0083\u0084")
        buf.write("\3\2{\u0082\3\2\u0083\u008c\3\2\35 \3\2()\4\2AA\u0093")
        buf.write("\u0093\4\2\31\31\u0091\u0091\3\2EF\t\2\f\63\66\66>chz")
        buf.write("\u0088\u0088\u008d\u00e4\u00e6\u00e7\2\u0a78\2\u00c0\3")
        buf.write("\2\2\2\4\u00c3\3\2\2\2\6\u00c6\3\2\2\2\b\u00c9\3\2\2\2")
        buf.write("\n\u00cc\3\2\2\2\f\u032d\3\2\2\2\16\u03d9\3\2\2\2\20\u03db")
        buf.write("\3\2\2\2\22\u03ea\3\2\2\2\24\u03f6\3\2\2\2\26\u0403\3")
        buf.write("\2\2\2\30\u0407\3\2\2\2\32\u0420\3\2\2\2\34\u0422\3\2")
        buf.write("\2\2\36\u0426\3\2\2\2 \u0432\3\2\2\2\"\u043c\3\2\2\2$")
        buf.write("\u043e\3\2\2\2&\u0449\3\2\2\2(\u0452\3\2\2\2*\u045a\3")
        buf.write("\2\2\2,\u045d\3\2\2\2.\u0468\3\2\2\2\60\u0478\3\2\2\2")
        buf.write("\62\u047e\3\2\2\2\64\u0480\3\2\2\2\66\u048b\3\2\2\28\u049c")
        buf.write("\3\2\2\2:\u04a3\3\2\2\2<\u04a5\3\2\2\2>\u04ab\3\2\2\2")
        buf.write("@\u04ba\3\2\2\2B\u04c6\3\2\2\2D\u04f4\3\2\2\2F\u04f9\3")
        buf.write("\2\2\2H\u050f\3\2\2\2J\u0511\3\2\2\2L\u0576\3\2\2\2N\u0578")
        buf.write("\3\2\2\2P\u0592\3\2\2\2R\u0594\3\2\2\2T\u05a3\3\2\2\2")
        buf.write("V\u05cd\3\2\2\2X\u05cf\3\2\2\2Z\u05ef\3\2\2\2\\\u05f1")
        buf.write("\3\2\2\2^\u0603\3\2\2\2`\u061b\3\2\2\2b\u062b\3\2\2\2")
        buf.write("d\u062d\3\2\2\2f\u0648\3\2\2\2h\u064c\3\2\2\2j\u0654\3")
        buf.write("\2\2\2l\u065f\3\2\2\2n\u0663\3\2\2\2p\u066e\3\2\2\2r\u06a4")
        buf.write("\3\2\2\2t\u06a6\3\2\2\2v\u06e9\3\2\2\2x\u06ee\3\2\2\2")
        buf.write("z\u06f5\3\2\2\2|\u06f9\3\2\2\2~\u0703\3\2\2\2\u0080\u070b")
        buf.write("\3\2\2\2\u0082\u0716\3\2\2\2\u0084\u0723\3\2\2\2\u0086")
        buf.write("\u0750\3\2\2\2\u0088\u0756\3\2\2\2\u008a\u07dd\3\2\2\2")
        buf.write("\u008c\u07f8\3\2\2\2\u008e\u07fa\3\2\2\2\u0090\u07fc\3")
        buf.write("\2\2\2\u0092\u07fe\3\2\2\2\u0094\u0800\3\2\2\2\u0096\u0802")
        buf.write("\3\2\2\2\u0098\u0809\3\2\2\2\u009a\u0814\3\2\2\2\u009c")
        buf.write("\u0819\3\2\2\2\u009e\u083d\3\2\2\2\u00a0\u083f\3\2\2\2")
        buf.write("\u00a2\u0847\3\2\2\2\u00a4\u084d\3\2\2\2\u00a6\u0855\3")
        buf.write("\2\2\2\u00a8\u085c\3\2\2\2\u00aa\u0861\3\2\2\2\u00ac\u086a")
        buf.write("\3\2\2\2\u00ae\u0898\3\2\2\2\u00b0\u08aa\3\2\2\2\u00b2")
        buf.write("\u08b3\3\2\2\2\u00b4\u08b5\3\2\2\2\u00b6\u08cc\3\2\2\2")
        buf.write("\u00b8\u08d1\3\2\2\2\u00ba\u08d3\3\2\2\2\u00bc\u08f1\3")
        buf.write("\2\2\2\u00be\u08f3\3\2\2\2\u00c0\u00c1\5\f\7\2\u00c1\u00c2")
        buf.write("\7\2\2\3\u00c2\3\3\2\2\2\u00c3\u00c4\5|?\2\u00c4\u00c5")
        buf.write("\7\2\2\3\u00c5\5\3\2\2\2\u00c6\u00c7\5x=\2\u00c7\u00c8")
        buf.write("\7\2\2\3\u00c8\7\3\2\2\2\u00c9\u00ca\5z>\2\u00ca\u00cb")
        buf.write("\7\2\2\3\u00cb\t\3\2\2\2\u00cc\u00cd\5\u009eP\2\u00cd")
        buf.write("\u00ce\7\2\2\3\u00ce\13\3\2\2\2\u00cf\u032e\5\30\r\2\u00d0")
        buf.write("\u00d1\7`\2\2\u00d1\u032e\5\u00b6\\\2\u00d2\u00d3\7N\2")
        buf.write("\2\u00d3\u00d7\7\u00c7\2\2\u00d4\u00d5\7z\2\2\u00d5\u00d6")
        buf.write("\7 \2\2\u00d6\u00d8\7\"\2\2\u00d7\u00d4\3\2\2\2\u00d7")
        buf.write("\u00d8\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00dc\5\u00b6")
        buf.write("\\\2\u00da\u00db\7p\2\2\u00db\u00dd\7\u00e8\2\2\u00dc")
        buf.write("\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00df\3\2\2\2")
        buf.write("\u00de\u00e0\5\26\f\2\u00df\u00de\3\2\2\2\u00df\u00e0")
        buf.write("\3\2\2\2\u00e0\u00e4\3\2\2\2\u00e1\u00e2\7L\2\2\u00e2")
        buf.write("\u00e3\7\u00b2\2\2\u00e3\u00e5\5,\27\2\u00e4\u00e1\3\2")
        buf.write("\2\2\u00e4\u00e5\3\2\2\2\u00e5\u032e\3\2\2\2\u00e6\u00e7")
        buf.write("\7k\2\2\u00e7\u00e8\7\u00c7\2\2\u00e8\u00e9\5\u00b6\\")
        buf.write("\2\u00e9\u00ea\7q\2\2\u00ea\u00eb\7\u00b2\2\2\u00eb\u00ec")
        buf.write("\5,\27\2\u00ec\u032e\3\2\2\2\u00ed\u00ee\7c\2\2\u00ee")
        buf.write("\u00f1\7\u00c7\2\2\u00ef\u00f0\7z\2\2\u00f0\u00f2\7\"")
        buf.write("\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f3")
        buf.write("\3\2\2\2\u00f3\u00f5\5\u00b6\\\2\u00f4\u00f6\t\2\2\2\u00f5")
        buf.write("\u00f4\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u032e\3\2\2\2")
        buf.write("\u00f7\u00fc\5\20\t\2\u00f8\u00f9\7\3\2\2\u00f9\u00fa")
        buf.write("\5\u00a0Q\2\u00fa\u00fb\7\4\2\2\u00fb\u00fd\3\2\2\2\u00fc")
        buf.write("\u00f8\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3\2\2\2")
        buf.write("\u00fe\u0101\5*\26\2\u00ff\u0100\7\u00af\2\2\u0100\u0102")
        buf.write("\5,\27\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102")
        buf.write("\u0106\3\2\2\2\u0103\u0104\7\u00cf\2\2\u0104\u0105\7\24")
        buf.write("\2\2\u0105\u0107\5f\64\2\u0106\u0103\3\2\2\2\u0106\u0107")
        buf.write("\3\2\2\2\u0107\u0109\3\2\2\2\u0108\u010a\5\22\n\2\u0109")
        buf.write("\u0108\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\3\2\2\2")
        buf.write("\u010b\u010d\5\26\f\2\u010c\u010b\3\2\2\2\u010c\u010d")
        buf.write("\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010f\7p\2\2\u010f")
        buf.write("\u0111\7\u00e8\2\2\u0110\u010e\3\2\2\2\u0110\u0111\3\2")
        buf.write("\2\2\u0111\u0116\3\2\2\2\u0112\u0114\7\17\2\2\u0113\u0112")
        buf.write("\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0115\3\2\2\2\u0115")
        buf.write("\u0117\5\30\r\2\u0116\u0113\3\2\2\2\u0116\u0117\3\2\2")
        buf.write("\2\u0117\u032e\3\2\2\2\u0118\u011d\5\20\t\2\u0119\u011a")
        buf.write("\7\3\2\2\u011a\u011b\5\u00a0Q\2\u011b\u011c\7\4\2\2\u011c")
        buf.write("\u011e\3\2\2\2\u011d\u0119\3\2\2\2\u011d\u011e\3\2\2\2")
        buf.write("\u011e\u0121\3\2\2\2\u011f\u0120\7p\2\2\u0120\u0122\7")
        buf.write("\u00e8\2\2\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122")
        buf.write("\u0129\3\2\2\2\u0123\u0124\7\u00cf\2\2\u0124\u0125\7\24")
        buf.write("\2\2\u0125\u0126\7\3\2\2\u0126\u0127\5\u00a0Q\2\u0127")
        buf.write("\u0128\7\4\2\2\u0128\u012a\3\2\2\2\u0129\u0123\3\2\2\2")
        buf.write("\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b\u012d\5")
        buf.write("\22\n\2\u012c\u012b\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\u012f\3\2\2\2\u012e\u0130\5\24\13\2\u012f\u012e\3\2\2")
        buf.write("\2\u012f\u0130\3\2\2\2\u0130\u0132\3\2\2\2\u0131\u0133")
        buf.write("\5v<\2\u0132\u0131\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0135")
        buf.write("\3\2\2\2\u0134\u0136\58\35\2\u0135\u0134\3\2\2\2\u0135")
        buf.write("\u0136\3\2\2\2\u0136\u0138\3\2\2\2\u0137\u0139\5\26\f")
        buf.write("\2\u0138\u0137\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013c")
        buf.write("\3\2\2\2\u013a\u013b\7\u00b1\2\2\u013b\u013d\5,\27\2\u013c")
        buf.write("\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u0142\3\2\2\2")
        buf.write("\u013e\u0140\7\17\2\2\u013f\u013e\3\2\2\2\u013f\u0140")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\5\30\r\2\u0142")
        buf.write("\u013f\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u032e\3\2\2\2")
        buf.write("\u0144\u0145\7N\2\2\u0145\u0149\7O\2\2\u0146\u0147\7z")
        buf.write("\2\2\u0147\u0148\7 \2\2\u0148\u014a\7\"\2\2\u0149\u0146")
        buf.write("\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014b\3\2\2\2\u014b")
        buf.write("\u014c\5x=\2\u014c\u014d\7$\2\2\u014d\u014f\5x=\2\u014e")
        buf.write("\u0150\5\26\f\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2")
        buf.write("\2\u0150\u032e\3\2\2\2\u0151\u0152\7\u00cb\2\2\u0152\u0153")
        buf.write("\7O\2\2\u0153\u0155\5x=\2\u0154\u0156\5\36\20\2\u0155")
        buf.write("\u0154\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0157\3\2\2\2")
        buf.write("\u0157\u0158\7\u00cc\2\2\u0158\u015d\7\u00ce\2\2\u0159")
        buf.write("\u015e\5\u00b6\\\2\u015a\u015b\7-\2\2\u015b\u015c\7^\2")
        buf.write("\2\u015c\u015e\5h\65\2\u015d\u0159\3\2\2\2\u015d\u015a")
        buf.write("\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u032e\3\2\2\2\u015f")
        buf.write("\u0160\7k\2\2\u0160\u0161\7O\2\2\u0161\u0162\5x=\2\u0162")
        buf.write("\u0163\7\16\2\2\u0163\u0164\7^\2\2\u0164\u0165\7\3\2\2")
        buf.write("\u0165\u0166\5\u00a0Q\2\u0166\u0167\7\4\2\2\u0167\u032e")
        buf.write("\3\2\2\2\u0168\u0169\7k\2\2\u0169\u016a\t\3\2\2\u016a")
        buf.write("\u016b\5x=\2\u016b\u016c\7l\2\2\u016c\u016d\7h\2\2\u016d")
        buf.write("\u016e\5x=\2\u016e\u032e\3\2\2\2\u016f\u0170\7k\2\2\u0170")
        buf.write("\u0171\t\3\2\2\u0171\u0172\5x=\2\u0172\u0173\7q\2\2\u0173")
        buf.write("\u0174\7\u00b1\2\2\u0174\u0175\5,\27\2\u0175\u032e\3\2")
        buf.write("\2\2\u0176\u0177\7k\2\2\u0177\u0178\t\3\2\2\u0178\u0179")
        buf.write("\5x=\2\u0179\u017a\7\u00b0\2\2\u017a\u017d\7\u00b1\2\2")
        buf.write("\u017b\u017c\7z\2\2\u017c\u017e\7\"\2\2\u017d\u017b\3")
        buf.write("\2\2\2\u017d\u017e\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0180")
        buf.write("\5,\27\2\u0180\u032e\3\2\2\2\u0181\u0182\7k\2\2\u0182")
        buf.write("\u0183\7O\2\2\u0183\u0185\5x=\2\u0184\u0186\5\36\20\2")
        buf.write("\u0185\u0184\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\3")
        buf.write("\2\2\2\u0187\u0189\7\u00bf\2\2\u0188\u018a\7_\2\2\u0189")
        buf.write("\u0188\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018b\3\2\2\2")
        buf.write("\u018b\u018c\5\u00b6\\\2\u018c\u018e\5\u00a2R\2\u018d")
        buf.write("\u018f\5\u009cO\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2")
        buf.write("\2\2\u018f\u032e\3\2\2\2\u0190\u0191\7k\2\2\u0191\u0192")
        buf.write("\7O\2\2\u0192\u0194\5x=\2\u0193\u0195\5\36\20\2\u0194")
        buf.write("\u0193\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196\3\2\2\2")
        buf.write("\u0196\u0197\7q\2\2\u0197\u0198\7\u0098\2\2\u0198\u019c")
        buf.write("\7\u00e8\2\2\u0199\u019a\7L\2\2\u019a\u019b\7\u0099\2")
        buf.write("\2\u019b\u019d\5,\27\2\u019c\u0199\3\2\2\2\u019c\u019d")
        buf.write("\3\2\2\2\u019d\u032e\3\2\2\2\u019e\u019f\7k\2\2\u019f")
        buf.write("\u01a0\7O\2\2\u01a0\u01a2\5x=\2\u01a1\u01a3\5\36\20\2")
        buf.write("\u01a2\u01a1\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\3")
        buf.write("\2\2\2\u01a4\u01a5\7q\2\2\u01a5\u01a6\7\u0099\2\2\u01a6")
        buf.write("\u01a7\5,\27\2\u01a7\u032e\3\2\2\2\u01a8\u01a9\7k\2\2")
        buf.write("\u01a9\u01aa\7O\2\2\u01aa\u01ab\5x=\2\u01ab\u01af\7\16")
        buf.write("\2\2\u01ac\u01ad\7z\2\2\u01ad\u01ae\7 \2\2\u01ae\u01b0")
        buf.write("\7\"\2\2\u01af\u01ac\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0")
        buf.write("\u01b2\3\2\2\2\u01b1\u01b3\5\34\17\2\u01b2\u01b1\3\2\2")
        buf.write("\2\u01b3\u01b4\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b5")
        buf.write("\3\2\2\2\u01b5\u032e\3\2\2\2\u01b6\u01b7\7k\2\2\u01b7")
        buf.write("\u01b8\7P\2\2\u01b8\u01b9\5x=\2\u01b9\u01bd\7\16\2\2\u01ba")
        buf.write("\u01bb\7z\2\2\u01bb\u01bc\7 \2\2\u01bc\u01be\7\"\2\2\u01bd")
        buf.write("\u01ba\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01c0\3\2\2\2")
        buf.write("\u01bf\u01c1\5\36\20\2\u01c0\u01bf\3\2\2\2\u01c1\u01c2")
        buf.write("\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3")
        buf.write("\u032e\3\2\2\2\u01c4\u01c5\7k\2\2\u01c5\u01c6\7O\2\2\u01c6")
        buf.write("\u01c7\5x=\2\u01c7\u01c8\5\36\20\2\u01c8\u01c9\7l\2\2")
        buf.write("\u01c9\u01ca\7h\2\2\u01ca\u01cb\5\36\20\2\u01cb\u032e")
        buf.write("\3\2\2\2\u01cc\u01cd\7k\2\2\u01cd\u01ce\7O\2\2\u01ce\u01cf")
        buf.write("\5x=\2\u01cf\u01d2\7c\2\2\u01d0\u01d1\7z\2\2\u01d1\u01d3")
        buf.write("\7\"\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3")
        buf.write("\u01d4\3\2\2\2\u01d4\u01d9\5\36\20\2\u01d5\u01d6\7\5\2")
        buf.write("\2\u01d6\u01d8\5\36\20\2\u01d7\u01d5\3\2\2\2\u01d8\u01db")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da")
        buf.write("\u01dd\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01de\7\u00c4")
        buf.write("\2\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u032e")
        buf.write("\3\2\2\2\u01df\u01e0\7k\2\2\u01e0\u01e1\7P\2\2\u01e1\u01e2")
        buf.write("\5x=\2\u01e2\u01e5\7c\2\2\u01e3\u01e4\7z\2\2\u01e4\u01e6")
        buf.write("\7\"\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write("\u01e7\3\2\2\2\u01e7\u01ec\5\36\20\2\u01e8\u01e9\7\5\2")
        buf.write("\2\u01e9\u01eb\5\36\20\2\u01ea\u01e8\3\2\2\2\u01eb\u01ee")
        buf.write("\3\2\2\2\u01ec\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed")
        buf.write("\u032e\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ef\u01f0\7k\2\2")
        buf.write("\u01f0\u01f1\7O\2\2\u01f1\u01f3\5x=\2\u01f2\u01f4\5\36")
        buf.write("\20\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f5")
        buf.write("\3\2\2\2\u01f5\u01f6\7q\2\2\u01f6\u01f7\5\26\f\2\u01f7")
        buf.write("\u032e\3\2\2\2\u01f8\u01f9\7k\2\2\u01f9\u01fa\7O\2\2\u01fa")
        buf.write("\u01fb\5x=\2\u01fb\u01fc\7\u00d8\2\2\u01fc\u01fd\7a\2")
        buf.write("\2\u01fd\u032e\3\2\2\2\u01fe\u01ff\7c\2\2\u01ff\u0202")
        buf.write("\7O\2\2\u0200\u0201\7z\2\2\u0201\u0203\7\"\2\2\u0202\u0200")
        buf.write("\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0204\3\2\2\2\u0204")
        buf.write("\u0206\5x=\2\u0205\u0207\7\u00c4\2\2\u0206\u0205\3\2\2")
        buf.write("\2\u0206\u0207\3\2\2\2\u0207\u032e\3\2\2\2\u0208\u0209")
        buf.write("\7c\2\2\u0209\u020c\7P\2\2\u020a\u020b\7z\2\2\u020b\u020d")
        buf.write("\7\"\2\2\u020c\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d")
        buf.write("\u020e\3\2\2\2\u020e\u032e\5x=\2\u020f\u0212\7N\2\2\u0210")
        buf.write("\u0211\7\35\2\2\u0211\u0213\7Q\2\2\u0212\u0210\3\2\2\2")
        buf.write("\u0212\u0213\3\2\2\2\u0213\u0218\3\2\2\2\u0214\u0216\7")
        buf.write("\u00ad\2\2\u0215\u0214\3\2\2\2\u0215\u0216\3\2\2\2\u0216")
        buf.write("\u0217\3\2\2\2\u0217\u0219\7\u00ae\2\2\u0218\u0215\3\2")
        buf.write("\2\2\u0218\u0219\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021e")
        buf.write("\7P\2\2\u021b\u021c\7z\2\2\u021c\u021d\7 \2\2\u021d\u021f")
        buf.write("\7\"\2\2\u021e\u021b\3\2\2\2\u021e\u021f\3\2\2\2\u021f")
        buf.write("\u0220\3\2\2\2\u0220\u0222\5x=\2\u0221\u0223\5n8\2\u0222")
        buf.write("\u0221\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0226\3\2\2\2")
        buf.write("\u0224\u0225\7p\2\2\u0225\u0227\7\u00e8\2\2\u0226\u0224")
        buf.write("\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u022b\3\2\2\2\u0228")
        buf.write("\u0229\7\u00cf\2\2\u0229\u022a\7=\2\2\u022a\u022c\5f\64")
        buf.write("\2\u022b\u0228\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022f")
        buf.write("\3\2\2\2\u022d\u022e\7\u00b1\2\2\u022e\u0230\5,\27\2\u022f")
        buf.write("\u022d\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0231\3\2\2\2")
        buf.write("\u0231\u0232\7\17\2\2\u0232\u0233\5\30\r\2\u0233\u032e")
        buf.write("\3\2\2\2\u0234\u0237\7N\2\2\u0235\u0236\7\35\2\2\u0236")
        buf.write("\u0238\7Q\2\2\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2\2")
        buf.write("\u0238\u023a\3\2\2\2\u0239\u023b\7\u00ad\2\2\u023a\u0239")
        buf.write("\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023c\3\2\2\2\u023c")
        buf.write("\u023d\7\u00ae\2\2\u023d\u023e\7P\2\2\u023e\u0243\5x=")
        buf.write("\2\u023f\u0240\7\3\2\2\u0240\u0241\5\u00a0Q\2\u0241\u0242")
        buf.write("\7\4\2\2\u0242\u0244\3\2\2\2\u0243\u023f\3\2\2\2\u0243")
        buf.write("\u0244\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0248\5*\26\2")
        buf.write("\u0246\u0247\7\u00af\2\2\u0247\u0249\5,\27\2\u0248\u0246")
        buf.write("\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u032e\3\2\2\2\u024a")
        buf.write("\u024b\7k\2\2\u024b\u024c\7P\2\2\u024c\u024e\5x=\2\u024d")
        buf.write("\u024f\7\17\2\2\u024e\u024d\3\2\2\2\u024e\u024f\3\2\2")
        buf.write("\2\u024f\u0250\3\2\2\2\u0250\u0251\5\30\r\2\u0251\u032e")
        buf.write("\3\2\2\2\u0252\u0254\7N\2\2\u0253\u0255\7\u00ae\2\2\u0254")
        buf.write("\u0253\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0256\3\2\2\2")
        buf.write("\u0256\u0257\7\u00a5\2\2\u0257\u0258\5\u00b4[\2\u0258")
        buf.write("\u0259\7\17\2\2\u0259\u0263\7\u00e8\2\2\u025a\u025b\7")
        buf.write("\u0097\2\2\u025b\u0260\5> \2\u025c\u025d\7\5\2\2\u025d")
        buf.write("\u025f\5> \2\u025e\u025c\3\2\2\2\u025f\u0262\3\2\2\2\u0260")
        buf.write("\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0264\3\2\2\2")
        buf.write("\u0262\u0260\3\2\2\2\u0263\u025a\3\2\2\2\u0263\u0264\3")
        buf.write("\2\2\2\u0264\u032e\3\2\2\2\u0265\u0267\7c\2\2\u0266\u0268")
        buf.write("\7\u00ae\2\2\u0267\u0266\3\2\2\2\u0267\u0268\3\2\2\2\u0268")
        buf.write("\u0269\3\2\2\2\u0269\u026c\7\u00a5\2\2\u026a\u026b\7z")
        buf.write("\2\2\u026b\u026d\7\"\2\2\u026c\u026a\3\2\2\2\u026c\u026d")
        buf.write("\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u032e\5\u00b4[\2\u026f")
        buf.write("\u0271\7V\2\2\u0270\u0272\t\4\2\2\u0271\u0270\3\2\2\2")
        buf.write("\u0271\u0272\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u032e\5")
        buf.write("\f\7\2\u0274\u0275\7\\\2\2\u0275\u0278\7]\2\2\u0276\u0277")
        buf.write("\t\5\2\2\u0277\u0279\5\u00b6\\\2\u0278\u0276\3\2\2\2\u0278")
        buf.write("\u0279\3\2\2\2\u0279\u027e\3\2\2\2\u027a\u027c\7$\2\2")
        buf.write("\u027b\u027a\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u027d\3")
        buf.write("\2\2\2\u027d\u027f\7\u00e8\2\2\u027e\u027b\3\2\2\2\u027e")
        buf.write("\u027f\3\2\2\2\u027f\u032e\3\2\2\2\u0280\u0281\7\\\2\2")
        buf.write("\u0281\u0282\7O\2\2\u0282\u0285\7\u00a6\2\2\u0283\u0284")
        buf.write("\t\5\2\2\u0284\u0286\5\u00b6\\\2\u0285\u0283\3\2\2\2\u0285")
        buf.write("\u0286\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\7$\2\2")
        buf.write("\u0288\u028a\7\u00e8\2\2\u0289\u028b\5\36\20\2\u028a\u0289")
        buf.write("\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u032e\3\2\2\2\u028c")
        buf.write("\u028d\7\\\2\2\u028d\u0290\7\u00c8\2\2\u028e\u028f\7$")
        buf.write("\2\2\u028f\u0291\7\u00e8\2\2\u0290\u028e\3\2\2\2\u0290")
        buf.write("\u0291\3\2\2\2\u0291\u032e\3\2\2\2\u0292\u0293\7\\\2\2")
        buf.write("\u0293\u0294\7\u00b1\2\2\u0294\u0299\5x=\2\u0295\u0296")
        buf.write("\7\3\2\2\u0296\u0297\5\60\31\2\u0297\u0298\7\4\2\2\u0298")
        buf.write("\u029a\3\2\2\2\u0299\u0295\3\2\2\2\u0299\u029a\3\2\2\2")
        buf.write("\u029a\u032e\3\2\2\2\u029b\u029c\7\\\2\2\u029c\u029d\7")
        buf.write("^\2\2\u029d\u029e\t\5\2\2\u029e\u02a1\5x=\2\u029f\u02a0")
        buf.write("\t\5\2\2\u02a0\u02a2\5\u00b6\\\2\u02a1\u029f\3\2\2\2\u02a1")
        buf.write("\u02a2\3\2\2\2\u02a2\u032e\3\2\2\2\u02a3\u02a4\7\\\2\2")
        buf.write("\u02a4\u02a5\7a\2\2\u02a5\u02a7\5x=\2\u02a6\u02a8\5\36")
        buf.write("\20\2\u02a7\u02a6\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u032e")
        buf.write("\3\2\2\2\u02a9\u02ab\7\\\2\2\u02aa\u02ac\5\u00b6\\\2\u02ab")
        buf.write("\u02aa\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ad\3\2\2\2")
        buf.write("\u02ad\u02b5\7b\2\2\u02ae\u02b0\7$\2\2\u02af\u02ae\3\2")
        buf.write("\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02b4")
        buf.write("\5\u00b4[\2\u02b2\u02b4\7\u00e8\2\2\u02b3\u02b1\3\2\2")
        buf.write("\2\u02b3\u02b2\3\2\2\2\u02b4\u02b6\3\2\2\2\u02b5\u02af")
        buf.write("\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u032e\3\2\2\2\u02b7")
        buf.write("\u02b8\7\\\2\2\u02b8\u02b9\7N\2\2\u02b9\u02ba\7O\2\2\u02ba")
        buf.write("\u032e\5x=\2\u02bb\u02bc\t\6\2\2\u02bc\u02be\7\u00a5\2")
        buf.write("\2\u02bd\u02bf\7\u00a6\2\2\u02be\u02bd\3\2\2\2\u02be\u02bf")
        buf.write("\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u032e\5\"\22\2\u02c1")
        buf.write("\u02c2\t\6\2\2\u02c2\u02c4\7\u00c7\2\2\u02c3\u02c5\7\u00a6")
        buf.write("\2\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c6")
        buf.write("\3\2\2\2\u02c6\u032e\5\u00b6\\\2\u02c7\u02c9\t\6\2\2\u02c8")
        buf.write("\u02ca\7O\2\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca\3\2\2\2")
        buf.write("\u02ca\u02cc\3\2\2\2\u02cb\u02cd\t\7\2\2\u02cc\u02cb\3")
        buf.write("\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02d0")
        buf.write("\5x=\2\u02cf\u02d1\5\36\20\2\u02d0\u02cf\3\2\2\2\u02d0")
        buf.write("\u02d1\3\2\2\2\u02d1\u02d3\3\2\2\2\u02d2\u02d4\5$\23\2")
        buf.write("\u02d3\u02d2\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u032e\3")
        buf.write("\2\2\2\u02d5\u02d6\7\u00a7\2\2\u02d6\u02d7\7O\2\2\u02d7")
        buf.write("\u032e\5x=\2\u02d8\u02dc\7\u00a7\2\2\u02d9\u02db\13\2")
        buf.write("\2\2\u02da\u02d9\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02dd")
        buf.write("\3\2\2\2\u02dc\u02da\3\2\2\2\u02dd\u032e\3\2\2\2\u02de")
        buf.write("\u02dc\3\2\2\2\u02df\u02e1\7\u00a9\2\2\u02e0\u02e2\7\u00ab")
        buf.write("\2\2\u02e1\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3")
        buf.write("\3\2\2\2\u02e3\u02e4\7O\2\2\u02e4\u02e9\5x=\2\u02e5\u02e7")
        buf.write("\7\17\2\2\u02e6\u02e5\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7")
        buf.write("\u02e8\3\2\2\2\u02e8\u02ea\5\30\r\2\u02e9\u02e6\3\2\2")
        buf.write("\2\u02e9\u02ea\3\2\2\2\u02ea\u032e\3\2\2\2\u02eb\u02ec")
        buf.write("\7\u00aa\2\2\u02ec\u02ef\7O\2\2\u02ed\u02ee\7z\2\2\u02ee")
        buf.write("\u02f0\7\"\2\2\u02ef\u02ed\3\2\2\2\u02ef\u02f0\3\2\2\2")
        buf.write("\u02f0\u02f1\3\2\2\2\u02f1\u032e\5x=\2\u02f2\u02f3\7\u00a8")
        buf.write("\2\2\u02f3\u032e\7\u00a9\2\2\u02f4\u02f5\7\u00db\2\2\u02f5")
        buf.write("\u02f7\7s\2\2\u02f6\u02f8\7\u00e6\2\2\u02f7\u02f6\3\2")
        buf.write("\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa")
        buf.write("\7\u00e7\2\2\u02fa\u02fc\7\u00e8\2\2\u02fb\u02fd\7\u0094")
        buf.write("\2\2\u02fc\u02fb\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe")
        buf.write("\3\2\2\2\u02fe\u02ff\7T\2\2\u02ff\u0300\7O\2\2\u0300\u0302")
        buf.write("\5x=\2\u0301\u0303\5\36\20\2\u0302\u0301\3\2\2\2\u0302")
        buf.write("\u0303\3\2\2\2\u0303\u032e\3\2\2\2\u0304\u0305\7\u00ca")
        buf.write("\2\2\u0305\u0306\7O\2\2\u0306\u0308\5x=\2\u0307\u0309")
        buf.write("\5\36\20\2\u0308\u0307\3\2\2\2\u0308\u0309\3\2\2\2\u0309")
        buf.write("\u032e\3\2\2\2\u030a\u030b\7\u00d6\2\2\u030b\u030c\7\u00d7")
        buf.write("\2\2\u030c\u030d\7O\2\2\u030d\u032e\5x=\2\u030e\u030f")
        buf.write("\t\b\2\2\u030f\u0313\5\u00b6\\\2\u0310\u0312\13\2\2\2")
        buf.write("\u0311\u0310\3\2\2\2\u0312\u0315\3\2\2\2\u0313\u0314\3")
        buf.write("\2\2\2\u0313\u0311\3\2\2\2\u0314\u032e\3\2\2\2\u0315\u0313")
        buf.write("\3\2\2\2\u0316\u0317\7q\2\2\u0317\u031b\7\u00dc\2\2\u0318")
        buf.write("\u031a\13\2\2\2\u0319\u0318\3\2\2\2\u031a\u031d\3\2\2")
        buf.write("\2\u031b\u031c\3\2\2\2\u031b\u0319\3\2\2\2\u031c\u032e")
        buf.write("\3\2\2\2\u031d\u031b\3\2\2\2\u031e\u0322\7q\2\2\u031f")
        buf.write("\u0321\13\2\2\2\u0320\u031f\3\2\2\2\u0321\u0324\3\2\2")
        buf.write("\2\u0322\u0323\3\2\2\2\u0322\u0320\3\2\2\2\u0323\u032e")
        buf.write("\3\2\2\2\u0324\u0322\3\2\2\2\u0325\u032e\7r\2\2\u0326")
        buf.write("\u032a\5\16\b\2\u0327\u0329\13\2\2\2\u0328\u0327\3\2\2")
        buf.write("\2\u0329\u032c\3\2\2\2\u032a\u032b\3\2\2\2\u032a\u0328")
        buf.write("\3\2\2\2\u032b\u032e\3\2\2\2\u032c\u032a\3\2\2\2\u032d")
        buf.write("\u00cf\3\2\2\2\u032d\u00d0\3\2\2\2\u032d\u00d2\3\2\2\2")
        buf.write("\u032d\u00e6\3\2\2\2\u032d\u00ed\3\2\2\2\u032d\u00f7\3")
        buf.write("\2\2\2\u032d\u0118\3\2\2\2\u032d\u0144\3\2\2\2\u032d\u0151")
        buf.write("\3\2\2\2\u032d\u015f\3\2\2\2\u032d\u0168\3\2\2\2\u032d")
        buf.write("\u016f\3\2\2\2\u032d\u0176\3\2\2\2\u032d\u0181\3\2\2\2")
        buf.write("\u032d\u0190\3\2\2\2\u032d\u019e\3\2\2\2\u032d\u01a8\3")
        buf.write("\2\2\2\u032d\u01b6\3\2\2\2\u032d\u01c4\3\2\2\2\u032d\u01cc")
        buf.write("\3\2\2\2\u032d\u01df\3\2\2\2\u032d\u01ef\3\2\2\2\u032d")
        buf.write("\u01f8\3\2\2\2\u032d\u01fe\3\2\2\2\u032d\u0208\3\2\2\2")
        buf.write("\u032d\u020f\3\2\2\2\u032d\u0234\3\2\2\2\u032d\u024a\3")
        buf.write("\2\2\2\u032d\u0252\3\2\2\2\u032d\u0265\3\2\2\2\u032d\u026f")
        buf.write("\3\2\2\2\u032d\u0274\3\2\2\2\u032d\u0280\3\2\2\2\u032d")
        buf.write("\u028c\3\2\2\2\u032d\u0292\3\2\2\2\u032d\u029b\3\2\2\2")
        buf.write("\u032d\u02a3\3\2\2\2\u032d\u02a9\3\2\2\2\u032d\u02b7\3")
        buf.write("\2\2\2\u032d\u02bb\3\2\2\2\u032d\u02c1\3\2\2\2\u032d\u02c7")
        buf.write("\3\2\2\2\u032d\u02d5\3\2\2\2\u032d\u02d8\3\2\2\2\u032d")
        buf.write("\u02df\3\2\2\2\u032d\u02eb\3\2\2\2\u032d\u02f2\3\2\2\2")
        buf.write("\u032d\u02f4\3\2\2\2\u032d\u0304\3\2\2\2\u032d\u030a\3")
        buf.write("\2\2\2\u032d\u030e\3\2\2\2\u032d\u0316\3\2\2\2\u032d\u031e")
        buf.write("\3\2\2\2\u032d\u0325\3\2\2\2\u032d\u0326\3\2\2\2\u032e")
        buf.write("\r\3\2\2\2\u032f\u0330\7N\2\2\u0330\u03da\7\u00dc\2\2")
        buf.write("\u0331\u0332\7c\2\2\u0332\u03da\7\u00dc\2\2\u0333\u0335")
        buf.write("\7\u00d3\2\2\u0334\u0336\7\u00dc\2\2\u0335\u0334\3\2\2")
        buf.write("\2\u0335\u0336\3\2\2\2\u0336\u03da\3\2\2\2\u0337\u0339")
        buf.write("\7\u00d2\2\2\u0338\u033a\7\u00dc\2\2\u0339\u0338\3\2\2")
        buf.write("\2\u0339\u033a\3\2\2\2\u033a\u03da\3\2\2\2\u033b\u033c")
        buf.write("\7\\\2\2\u033c\u03da\7\u00d3\2\2\u033d\u033e\7\\\2\2\u033e")
        buf.write("\u0340\7\u00dc\2\2\u033f\u0341\7\u00d3\2\2\u0340\u033f")
        buf.write("\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u03da\3\2\2\2\u0342")
        buf.write("\u0343\7\\\2\2\u0343\u03da\7\u00df\2\2\u0344\u0345\7\\")
        buf.write("\2\2\u0345\u03da\7\u00dd\2\2\u0346\u0347\7\\\2\2\u0347")
        buf.write("\u0348\7G\2\2\u0348\u03da\7\u00dd\2\2\u0349\u034a\7\u00d9")
        buf.write("\2\2\u034a\u03da\7O\2\2\u034b\u034c\7\u00da\2\2\u034c")
        buf.write("\u03da\7O\2\2\u034d\u034e\7\\\2\2\u034e\u03da\7\u00de")
        buf.write("\2\2\u034f\u0350\7\\\2\2\u0350\u0351\7N\2\2\u0351\u03da")
        buf.write("\7O\2\2\u0352\u0353\7\\\2\2\u0353\u03da\7\u00e0\2\2\u0354")
        buf.write("\u0355\7\\\2\2\u0355\u03da\7\u00e2\2\2\u0356\u0357\7\\")
        buf.write("\2\2\u0357\u03da\7\u00e3\2\2\u0358\u0359\7N\2\2\u0359")
        buf.write("\u03da\7\u00e1\2\2\u035a\u035b\7c\2\2\u035b\u03da\7\u00e1")
        buf.write("\2\2\u035c\u035d\7k\2\2\u035d\u03da\7\u00e1\2\2\u035e")
        buf.write("\u035f\7\u00d4\2\2\u035f\u03da\7O\2\2\u0360\u0361\7\u00d4")
        buf.write("\2\2\u0361\u03da\7\u00c7\2\2\u0362\u0363\7\u00d5\2\2\u0363")
        buf.write("\u03da\7O\2\2\u0364\u0365\7\u00d5\2\2\u0365\u03da\7\u00c7")
        buf.write("\2\2\u0366\u0367\7N\2\2\u0367\u0368\7\u00ae\2\2\u0368")
        buf.write("\u03da\7x\2\2\u0369\u036a\7c\2\2\u036a\u036b\7\u00ae\2")
        buf.write("\2\u036b\u03da\7x\2\2\u036c\u036d\7k\2\2\u036d\u036e\7")
        buf.write("O\2\2\u036e\u036f\5x=\2\u036f\u0370\7 \2\2\u0370\u0371")
        buf.write("\7\u00c2\2\2\u0371\u03da\3\2\2\2\u0372\u0373\7k\2\2\u0373")
        buf.write("\u0374\7O\2\2\u0374\u0375\5x=\2\u0375\u0376\7\u00c2\2")
        buf.write("\2\u0376\u0377\7\24\2\2\u0377\u03da\3\2\2\2\u0378\u0379")
        buf.write("\7k\2\2\u0379\u037a\7O\2\2\u037a\u037b\5x=\2\u037b\u037c")
        buf.write("\7 \2\2\u037c\u037d\7\u00c3\2\2\u037d\u03da\3\2\2\2\u037e")
        buf.write("\u037f\7k\2\2\u037f\u0380\7O\2\2\u0380\u0381\5x=\2\u0381")
        buf.write("\u0382\7\u00b4\2\2\u0382\u0383\7\24\2\2\u0383\u03da\3")
        buf.write("\2\2\2\u0384\u0385\7k\2\2\u0385\u0386\7O\2\2\u0386\u0387")
        buf.write("\5x=\2\u0387\u0388\7 \2\2\u0388\u0389\7\u00b4\2\2\u0389")
        buf.write("\u03da\3\2\2\2\u038a\u038b\7k\2\2\u038b\u038c\7O\2\2\u038c")
        buf.write("\u038d\5x=\2\u038d\u038e\7 \2\2\u038e\u038f\7\u00b5\2")
        buf.write("\2\u038f\u0390\7\17\2\2\u0390\u0391\7\u00b6\2\2\u0391")
        buf.write("\u03da\3\2\2\2\u0392\u0393\7k\2\2\u0393\u0394\7O\2\2\u0394")
        buf.write("\u0395\5x=\2\u0395\u0396\7q\2\2\u0396\u0397\7\u00b4\2")
        buf.write("\2\u0397\u0398\7\u00b7\2\2\u0398\u03da\3\2\2\2\u0399\u039a")
        buf.write("\7k\2\2\u039a\u039b\7O\2\2\u039b\u039c\5x=\2\u039c\u039d")
        buf.write("\7\u00b8\2\2\u039d\u039e\7A\2\2\u039e\u03da\3\2\2\2\u039f")
        buf.write("\u03a0\7k\2\2\u03a0\u03a1\7O\2\2\u03a1\u03a2\5x=\2\u03a2")
        buf.write("\u03a3\7\u00b9\2\2\u03a3\u03a4\7A\2\2\u03a4\u03da\3\2")
        buf.write("\2\2\u03a5\u03a6\7k\2\2\u03a6\u03a7\7O\2\2\u03a7\u03a8")
        buf.write("\5x=\2\u03a8\u03a9\7\u00ba\2\2\u03a9\u03aa\7A\2\2\u03aa")
        buf.write("\u03da\3\2\2\2\u03ab\u03ac\7k\2\2\u03ac\u03ad\7O\2\2\u03ad")
        buf.write("\u03ae\5x=\2\u03ae\u03af\7\u00bc\2\2\u03af\u03da\3\2\2")
        buf.write("\2\u03b0\u03b1\7k\2\2\u03b1\u03b2\7O\2\2\u03b2\u03b4\5")
        buf.write("x=\2\u03b3\u03b5\5\36\20\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5")
        buf.write("\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b7\7\u00bd\2\2\u03b7")
        buf.write("\u03da\3\2\2\2\u03b8\u03b9\7k\2\2\u03b9\u03ba\7O\2\2\u03ba")
        buf.write("\u03bc\5x=\2\u03bb\u03bd\5\36\20\2\u03bc\u03bb\3\2\2\2")
        buf.write("\u03bc\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf\7")
        buf.write("\u00be\2\2\u03bf\u03da\3\2\2\2\u03c0\u03c1\7k\2\2\u03c1")
        buf.write("\u03c2\7O\2\2\u03c2\u03c4\5x=\2\u03c3\u03c5\5\36\20\2")
        buf.write("\u03c4\u03c3\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6\3")
        buf.write("\2\2\2\u03c6\u03c7\7q\2\2\u03c7\u03c8\7\u00bb\2\2\u03c8")
        buf.write("\u03da\3\2\2\2\u03c9\u03ca\7k\2\2\u03ca\u03cb\7O\2\2\u03cb")
        buf.write("\u03cd\5x=\2\u03cc\u03ce\5\36\20\2\u03cd\u03cc\3\2\2\2")
        buf.write("\u03cd\u03ce\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d0\7")
        buf.write("Q\2\2\u03d0\u03d1\7^\2\2\u03d1\u03da\3\2\2\2\u03d2\u03d3")
        buf.write("\7t\2\2\u03d3\u03da\7u\2\2\u03d4\u03da\7v\2\2\u03d5\u03da")
        buf.write("\7w\2\2\u03d6\u03da\7\u00c9\2\2\u03d7\u03d8\7S\2\2\u03d8")
        buf.write("\u03da\7\r\2\2\u03d9\u032f\3\2\2\2\u03d9\u0331\3\2\2\2")
        buf.write("\u03d9\u0333\3\2\2\2\u03d9\u0337\3\2\2\2\u03d9\u033b\3")
        buf.write("\2\2\2\u03d9\u033d\3\2\2\2\u03d9\u0342\3\2\2\2\u03d9\u0344")
        buf.write("\3\2\2\2\u03d9\u0346\3\2\2\2\u03d9\u0349\3\2\2\2\u03d9")
        buf.write("\u034b\3\2\2\2\u03d9\u034d\3\2\2\2\u03d9\u034f\3\2\2\2")
        buf.write("\u03d9\u0352\3\2\2\2\u03d9\u0354\3\2\2\2\u03d9\u0356\3")
        buf.write("\2\2\2\u03d9\u0358\3\2\2\2\u03d9\u035a\3\2\2\2\u03d9\u035c")
        buf.write("\3\2\2\2\u03d9\u035e\3\2\2\2\u03d9\u0360\3\2\2\2\u03d9")
        buf.write("\u0362\3\2\2\2\u03d9\u0364\3\2\2\2\u03d9\u0366\3\2\2\2")
        buf.write("\u03d9\u0369\3\2\2\2\u03d9\u036c\3\2\2\2\u03d9\u0372\3")
        buf.write("\2\2\2\u03d9\u0378\3\2\2\2\u03d9\u037e\3\2\2\2\u03d9\u0384")
        buf.write("\3\2\2\2\u03d9\u038a\3\2\2\2\u03d9\u0392\3\2\2\2\u03d9")
        buf.write("\u0399\3\2\2\2\u03d9\u039f\3\2\2\2\u03d9\u03a5\3\2\2\2")
        buf.write("\u03d9\u03ab\3\2\2\2\u03d9\u03b0\3\2\2\2\u03d9\u03b8\3")
        buf.write("\2\2\2\u03d9\u03c0\3\2\2\2\u03d9\u03c9\3\2\2\2\u03d9\u03d2")
        buf.write("\3\2\2\2\u03d9\u03d4\3\2\2\2\u03d9\u03d5\3\2\2\2\u03d9")
        buf.write("\u03d6\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da\17\3\2\2\2\u03db")
        buf.write("\u03dd\7N\2\2\u03dc\u03de\7\u00ae\2\2\u03dd\u03dc\3\2")
        buf.write("\2\2\u03dd\u03de\3\2\2\2\u03de\u03e0\3\2\2\2\u03df\u03e1")
        buf.write("\7\u00d0\2\2\u03e0\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e2\3\2\2\2\u03e2\u03e6\7O\2\2\u03e3\u03e4\7z\2\2\u03e4")
        buf.write("\u03e5\7 \2\2\u03e5\u03e7\7\"\2\2\u03e6\u03e3\3\2\2\2")
        buf.write("\u03e6\u03e7\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\5")
        buf.write("x=\2\u03e9\21\3\2\2\2\u03ea\u03eb\7\u00c2\2\2\u03eb\u03ec")
        buf.write("\7\24\2\2\u03ec\u03f0\5f\64\2\u03ed\u03ee\7\u00c3\2\2")
        buf.write("\u03ee\u03ef\7\24\2\2\u03ef\u03f1\5j\66\2\u03f0\u03ed")
        buf.write("\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2")
        buf.write("\u03f3\7T\2\2\u03f3\u03f4\7\u00ed\2\2\u03f4\u03f5\7\u00b3")
        buf.write("\2\2\u03f5\23\3\2\2\2\u03f6\u03f7\7\u00b4\2\2\u03f7\u03f8")
        buf.write("\7\24\2\2\u03f8\u03f9\5f\64\2\u03f9\u03fc\7=\2\2\u03fa")
        buf.write("\u03fd\5\64\33\2\u03fb\u03fd\5\66\34\2\u03fc\u03fa\3\2")
        buf.write("\2\2\u03fc\u03fb\3\2\2\2\u03fd\u0401\3\2\2\2\u03fe\u03ff")
        buf.write("\7\u00b5\2\2\u03ff\u0400\7\17\2\2\u0400\u0402\7\u00b6")
        buf.write("\2\2\u0401\u03fe\3\2\2\2\u0401\u0402\3\2\2\2\u0402\25")
        buf.write("\3\2\2\2\u0403\u0404\7\u00b7\2\2\u0404\u0405\7\u00e8\2")
        buf.write("\2\u0405\27\3\2\2\2\u0406\u0408\5&\24\2\u0407\u0406\3")
        buf.write("\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040a")
        buf.write("\5@!\2\u040a\31\3\2\2\2\u040b\u040c\7R\2\2\u040c\u040d")
        buf.write("\7\u0094\2\2\u040d\u040e\7O\2\2\u040e\u0415\5x=\2\u040f")
        buf.write("\u0413\5\36\20\2\u0410\u0411\7z\2\2\u0411\u0412\7 \2\2")
        buf.write("\u0412\u0414\7\"\2\2\u0413\u0410\3\2\2\2\u0413\u0414\3")
        buf.write("\2\2\2\u0414\u0416\3\2\2\2\u0415\u040f\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0421\3\2\2\2\u0417\u0418\7R\2\2\u0418")
        buf.write("\u041a\7T\2\2\u0419\u041b\7O\2\2\u041a\u0419\3\2\2\2\u041a")
        buf.write("\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041e\5x=\2\u041d")
        buf.write("\u041f\5\36\20\2\u041e\u041d\3\2\2\2\u041e\u041f\3\2\2")
        buf.write("\2\u041f\u0421\3\2\2\2\u0420\u040b\3\2\2\2\u0420\u0417")
        buf.write("\3\2\2\2\u0421\33\3\2\2\2\u0422\u0424\5\36\20\2\u0423")
        buf.write("\u0425\5\26\f\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2")
        buf.write("\2\u0425\35\3\2\2\2\u0426\u0427\7A\2\2\u0427\u0428\7\3")
        buf.write("\2\2\u0428\u042d\5 \21\2\u0429\u042a\7\5\2\2\u042a\u042c")
        buf.write("\5 \21\2\u042b\u0429\3\2\2\2\u042c\u042f\3\2\2\2\u042d")
        buf.write("\u042b\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u0430\3\2\2\2")
        buf.write("\u042f\u042d\3\2\2\2\u0430\u0431\7\4\2\2\u0431\37\3\2")
        buf.write("\2\2\u0432\u0435\5\u00b6\\\2\u0433\u0434\7{\2\2\u0434")
        buf.write("\u0436\5\u008cG\2\u0435\u0433\3\2\2\2\u0435\u0436\3\2")
        buf.write("\2\2\u0436!\3\2\2\2\u0437\u043d\5\u00b4[\2\u0438\u043d")
        buf.write("\7\u00e8\2\2\u0439\u043d\5\u008eH\2\u043a\u043d\5\u0090")
        buf.write("I\2\u043b\u043d\5\u0092J\2\u043c\u0437\3\2\2\2\u043c\u0438")
        buf.write("\3\2\2\2\u043c\u0439\3\2\2\2\u043c\u043a\3\2\2\2\u043c")
        buf.write("\u043b\3\2\2\2\u043d#\3\2\2\2\u043e\u0446\5\u00b6\\\2")
        buf.write("\u043f\u0442\7\6\2\2\u0440\u0443\5\u00b6\\\2\u0441\u0443")
        buf.write("\7\u00e8\2\2\u0442\u0440\3\2\2\2\u0442\u0441\3\2\2\2\u0443")
        buf.write("\u0445\3\2\2\2\u0444\u043f\3\2\2\2\u0445\u0448\3\2\2\2")
        buf.write("\u0446\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447%\3\2\2")
        buf.write("\2\u0448\u0446\3\2\2\2\u0449\u044a\7L\2\2\u044a\u044f")
        buf.write("\5(\25\2\u044b\u044c\7\5\2\2\u044c\u044e\5(\25\2\u044d")
        buf.write("\u044b\3\2\2\2\u044e\u0451\3\2\2\2\u044f\u044d\3\2\2\2")
        buf.write("\u044f\u0450\3\2\2\2\u0450\'\3\2\2\2\u0451\u044f\3\2\2")
        buf.write("\2\u0452\u0454\5\u00b6\\\2\u0453\u0455\7\17\2\2\u0454")
        buf.write("\u0453\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0456\3\2\2\2")
        buf.write("\u0456\u0457\7\3\2\2\u0457\u0458\5\30\r\2\u0458\u0459")
        buf.write("\7\4\2\2\u0459)\3\2\2\2\u045a\u045b\7\u0097\2\2\u045b")
        buf.write("\u045c\5\u00b4[\2\u045c+\3\2\2\2\u045d\u045e\7\3\2\2\u045e")
        buf.write("\u0463\5.\30\2\u045f\u0460\7\5\2\2\u0460\u0462\5.\30\2")
        buf.write("\u0461\u045f\3\2\2\2\u0462\u0465\3\2\2\2\u0463\u0461\3")
        buf.write("\2\2\2\u0463\u0464\3\2\2\2\u0464\u0466\3\2\2\2\u0465\u0463")
        buf.write("\3\2\2\2\u0466\u0467\7\4\2\2\u0467-\3\2\2\2\u0468\u046d")
        buf.write("\5\60\31\2\u0469\u046b\7{\2\2\u046a\u0469\3\2\2\2\u046a")
        buf.write("\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\5\62\32")
        buf.write("\2\u046d\u046a\3\2\2\2\u046d\u046e\3\2\2\2\u046e/\3\2")
        buf.write("\2\2\u046f\u0474\5\u00b6\\\2\u0470\u0471\7\6\2\2\u0471")
        buf.write("\u0473\5\u00b6\\\2\u0472\u0470\3\2\2\2\u0473\u0476\3\2")
        buf.write("\2\2\u0474\u0472\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0479")
        buf.write("\3\2\2\2\u0476\u0474\3\2\2\2\u0477\u0479\7\u00e8\2\2\u0478")
        buf.write("\u046f\3\2\2\2\u0478\u0477\3\2\2\2\u0479\61\3\2\2\2\u047a")
        buf.write("\u047f\7\u00ed\2\2\u047b\u047f\7\u00ee\2\2\u047c\u047f")
        buf.write("\5\u0094K\2\u047d\u047f\7\u00e8\2\2\u047e\u047a\3\2\2")
        buf.write("\2\u047e\u047b\3\2\2\2\u047e\u047c\3\2\2\2\u047e\u047d")
        buf.write("\3\2\2\2\u047f\63\3\2\2\2\u0480\u0481\7\3\2\2\u0481\u0486")
        buf.write("\5\u008cG\2\u0482\u0483\7\5\2\2\u0483\u0485\5\u008cG\2")
        buf.write("\u0484\u0482\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484\3")
        buf.write("\2\2\2\u0486\u0487\3\2\2\2\u0487\u0489\3\2\2\2\u0488\u0486")
        buf.write("\3\2\2\2\u0489\u048a\7\4\2\2\u048a\65\3\2\2\2\u048b\u048c")
        buf.write("\7\3\2\2\u048c\u0491\5\64\33\2\u048d\u048e\7\5\2\2\u048e")
        buf.write("\u0490\5\64\33\2\u048f\u048d\3\2\2\2\u0490\u0493\3\2\2")
        buf.write("\2\u0491\u048f\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0494")
        buf.write("\3\2\2\2\u0493\u0491\3\2\2\2\u0494\u0495\7\4\2\2\u0495")
        buf.write("\67\3\2\2\2\u0496\u0497\7\u00b5\2\2\u0497\u0498\7\17\2")
        buf.write("\2\u0498\u049d\5:\36\2\u0499\u049a\7\u00b5\2\2\u049a\u049b")
        buf.write("\7\24\2\2\u049b\u049d\5<\37\2\u049c\u0496\3\2\2\2\u049c")
        buf.write("\u0499\3\2\2\2\u049d9\3\2\2\2\u049e\u049f\7\u00c5\2\2")
        buf.write("\u049f\u04a0\7\u00e8\2\2\u04a0\u04a1\7\u00c6\2\2\u04a1")
        buf.write("\u04a4\7\u00e8\2\2\u04a2\u04a4\5\u00b6\\\2\u04a3\u049e")
        buf.write("\3\2\2\2\u04a3\u04a2\3\2\2\2\u04a4;\3\2\2\2\u04a5\u04a9")
        buf.write("\7\u00e8\2\2\u04a6\u04a7\7L\2\2\u04a7\u04a8\7\u0099\2")
        buf.write("\2\u04a8\u04aa\5,\27\2\u04a9\u04a6\3\2\2\2\u04a9\u04aa")
        buf.write("\3\2\2\2\u04aa=\3\2\2\2\u04ab\u04ac\5\u00b6\\\2\u04ac")
        buf.write("\u04ad\7\u00e8\2\2\u04ad?\3\2\2\2\u04ae\u04b0\5\32\16")
        buf.write("\2\u04af\u04ae\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b1")
        buf.write("\3\2\2\2\u04b1\u04b2\5F$\2\u04b2\u04b3\5B\"\2\u04b3\u04bb")
        buf.write("\3\2\2\2\u04b4\u04b6\5R*\2\u04b5\u04b7\5D#\2\u04b6\u04b5")
        buf.write("\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b8")
        buf.write("\u04b9\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04af\3\2\2\2")
        buf.write("\u04ba\u04b4\3\2\2\2\u04bbA\3\2\2\2\u04bc\u04bd\7\31\2")
        buf.write("\2\u04bd\u04be\7\24\2\2\u04be\u04c3\5J&\2\u04bf\u04c0")
        buf.write("\7\5\2\2\u04c0\u04c2\5J&\2\u04c1\u04bf\3\2\2\2\u04c2\u04c5")
        buf.write("\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4")
        buf.write("\u04c7\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04bc\3\2\2\2")
        buf.write("\u04c6\u04c7\3\2\2\2\u04c7\u04d2\3\2\2\2\u04c8\u04c9\7")
        buf.write("\u0092\2\2\u04c9\u04ca\7\24\2\2\u04ca\u04cf\5\u0080A\2")
        buf.write("\u04cb\u04cc\7\5\2\2\u04cc\u04ce\5\u0080A\2\u04cd\u04cb")
        buf.write("\3\2\2\2\u04ce\u04d1\3\2\2\2\u04cf\u04cd\3\2\2\2\u04cf")
        buf.write("\u04d0\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1\u04cf\3\2\2\2")
        buf.write("\u04d2\u04c8\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04de\3")
        buf.write("\2\2\2\u04d4\u04d5\7\u0093\2\2\u04d5\u04d6\7\24\2\2\u04d6")
        buf.write("\u04db\5\u0080A\2\u04d7\u04d8\7\5\2\2\u04d8\u04da\5\u0080")
        buf.write("A\2\u04d9\u04d7\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04d9")
        buf.write("\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04df\3\2\2\2\u04dd")
        buf.write("\u04db\3\2\2\2\u04de\u04d4\3\2\2\2\u04de\u04df\3\2\2\2")
        buf.write("\u04df\u04ea\3\2\2\2\u04e0\u04e1\7\u0091\2\2\u04e1\u04e2")
        buf.write("\7\24\2\2\u04e2\u04e7\5J&\2\u04e3\u04e4\7\5\2\2\u04e4")
        buf.write("\u04e6\5J&\2\u04e5\u04e3\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7")
        buf.write("\u04e5\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04eb\3\2\2\2")
        buf.write("\u04e9\u04e7\3\2\2\2\u04ea\u04e0\3\2\2\2\u04ea\u04eb\3")
        buf.write("\2\2\2\u04eb\u04ed\3\2\2\2\u04ec\u04ee\5\u00aaV\2\u04ed")
        buf.write("\u04ec\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f1\3\2\2\2")
        buf.write("\u04ef\u04f0\7\33\2\2\u04f0\u04f2\5\u0080A\2\u04f1\u04ef")
        buf.write("\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2C\3\2\2\2\u04f3\u04f5")
        buf.write("\5\32\16\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5")
        buf.write("\u04f6\3\2\2\2\u04f6\u04f7\5L\'\2\u04f7\u04f8\5B\"\2\u04f8")
        buf.write("E\3\2\2\2\u04f9\u04fa\b$\1\2\u04fa\u04fb\5H%\2\u04fb\u0504")
        buf.write("\3\2\2\2\u04fc\u04fd\f\3\2\2\u04fd\u04ff\t\t\2\2\u04fe")
        buf.write("\u0500\5Z.\2\u04ff\u04fe\3\2\2\2\u04ff\u0500\3\2\2\2\u0500")
        buf.write("\u0501\3\2\2\2\u0501\u0503\5F$\4\u0502\u04fc\3\2\2\2\u0503")
        buf.write("\u0506\3\2\2\2\u0504\u0502\3\2\2\2\u0504\u0505\3\2\2\2")
        buf.write("\u0505G\3\2\2\2\u0506\u0504\3\2\2\2\u0507\u0510\5L\'\2")
        buf.write("\u0508\u0509\7O\2\2\u0509\u0510\5x=\2\u050a\u0510\5t;")
        buf.write("\2\u050b\u050c\7\3\2\2\u050c\u050d\5@!\2\u050d\u050e\7")
        buf.write("\4\2\2\u050e\u0510\3\2\2\2\u050f\u0507\3\2\2\2\u050f\u0508")
        buf.write("\3\2\2\2\u050f\u050a\3\2\2\2\u050f\u050b\3\2\2\2\u0510")
        buf.write("I\3\2\2\2\u0511\u0513\5\u0080A\2\u0512\u0514\t\n\2\2\u0513")
        buf.write("\u0512\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0517\3\2\2\2")
        buf.write("\u0515\u0516\7*\2\2\u0516\u0518\t\13\2\2\u0517\u0515\3")
        buf.write("\2\2\2\u0517\u0518\3\2\2\2\u0518K\3\2\2\2\u0519\u051a")
        buf.write("\7\f\2\2\u051a\u051b\7\u0095\2\2\u051b\u051c\7\3\2\2\u051c")
        buf.write("\u051d\5~@\2\u051d\u051e\7\4\2\2\u051e\u0524\3\2\2\2\u051f")
        buf.write("\u0520\7n\2\2\u0520\u0524\5~@\2\u0521\u0522\7\u0096\2")
        buf.write("\2\u0522\u0524\5~@\2\u0523\u0519\3\2\2\2\u0523\u051f\3")
        buf.write("\2\2\2\u0523\u0521\3\2\2\2\u0524\u0526\3\2\2\2\u0525\u0527")
        buf.write("\5v<\2\u0526\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527\u052a")
        buf.write("\3\2\2\2\u0528\u0529\7\u009b\2\2\u0529\u052b\7\u00e8\2")
        buf.write("\2\u052a\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052c")
        buf.write("\3\2\2\2\u052c\u052d\7\u0097\2\2\u052d\u053a\7\u00e8\2")
        buf.write("\2\u052e\u0538\7\17\2\2\u052f\u0539\5h\65\2\u0530\u0539")
        buf.write("\5\u00a0Q\2\u0531\u0534\7\3\2\2\u0532\u0535\5h\65\2\u0533")
        buf.write("\u0535\5\u00a0Q\2\u0534\u0532\3\2\2\2\u0534\u0533\3\2")
        buf.write("\2\2\u0535\u0536\3\2\2\2\u0536\u0537\7\4\2\2\u0537\u0539")
        buf.write("\3\2\2\2\u0538\u052f\3\2\2\2\u0538\u0530\3\2\2\2\u0538")
        buf.write("\u0531\3\2\2\2\u0539\u053b\3\2\2\2\u053a\u052e\3\2\2\2")
        buf.write("\u053a\u053b\3\2\2\2\u053b\u053d\3\2\2\2\u053c\u053e\5")
        buf.write("v<\2\u053d\u053c\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0541")
        buf.write("\3\2\2\2\u053f\u0540\7\u009a\2\2\u0540\u0542\7\u00e8\2")
        buf.write("\2\u0541\u053f\3\2\2\2\u0541\u0542\3\2\2\2\u0542\u0544")
        buf.write("\3\2\2\2\u0543\u0545\5R*\2\u0544\u0543\3\2\2\2\u0544\u0545")
        buf.write("\3\2\2\2\u0545\u0548\3\2\2\2\u0546\u0547\7\22\2\2\u0547")
        buf.write("\u0549\5\u0082B\2\u0548\u0546\3\2\2\2\u0548\u0549\3\2")
        buf.write("\2\2\u0549\u0577\3\2\2\2\u054a\u054e\7\f\2\2\u054b\u054d")
        buf.write("\5N(\2\u054c\u054b\3\2\2\2\u054d\u0550\3\2\2\2\u054e\u054c")
        buf.write("\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0552\3\2\2\2\u0550")
        buf.write("\u054e\3\2\2\2\u0551\u0553\5Z.\2\u0552\u0551\3\2\2\2\u0552")
        buf.write("\u0553\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0556\5~@\2\u0555")
        buf.write("\u0557\5R*\2\u0556\u0555\3\2\2\2\u0556\u0557\3\2\2\2\u0557")
        buf.write("\u0561\3\2\2\2\u0558\u055e\5R*\2\u0559\u055b\7\f\2\2\u055a")
        buf.write("\u055c\5Z.\2\u055b\u055a\3\2\2\2\u055b\u055c\3\2\2\2\u055c")
        buf.write("\u055d\3\2\2\2\u055d\u055f\5~@\2\u055e\u0559\3\2\2\2\u055e")
        buf.write("\u055f\3\2\2\2\u055f\u0561\3\2\2\2\u0560\u054a\3\2\2\2")
        buf.write("\u0560\u0558\3\2\2\2\u0561\u0565\3\2\2\2\u0562\u0564\5")
        buf.write("X-\2\u0563\u0562\3\2\2\2\u0564\u0567\3\2\2\2\u0565\u0563")
        buf.write("\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u056a\3\2\2\2\u0567")
        buf.write("\u0565\3\2\2\2\u0568\u0569\7\22\2\2\u0569\u056b\5\u0082")
        buf.write("B\2\u056a\u0568\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056d")
        buf.write("\3\2\2\2\u056c\u056e\5T+\2\u056d\u056c\3\2\2\2\u056d\u056e")
        buf.write("\3\2\2\2\u056e\u0571\3\2\2\2\u056f\u0570\7\32\2\2\u0570")
        buf.write("\u0572\5\u0082B\2\u0571\u056f\3\2\2\2\u0571\u0572\3\2")
        buf.write("\2\2\u0572\u0574\3\2\2\2\u0573\u0575\5\u00aaV\2\u0574")
        buf.write("\u0573\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0577\3\2\2\2")
        buf.write("\u0576\u0523\3\2\2\2\u0576\u0560\3\2\2\2\u0577M\3\2\2")
        buf.write("\2\u0578\u0579\7\7\2\2\u0579\u0580\5P)\2\u057a\u057c\7")
        buf.write("\5\2\2\u057b\u057a\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057d")
        buf.write("\3\2\2\2\u057d\u057f\5P)\2\u057e\u057b\3\2\2\2\u057f\u0582")
        buf.write("\3\2\2\2\u0580\u057e\3\2\2\2\u0580\u0581\3\2\2\2\u0581")
        buf.write("\u0583\3\2\2\2\u0582\u0580\3\2\2\2\u0583\u0584\7\b\2\2")
        buf.write("\u0584O\3\2\2\2\u0585\u0593\5\u00b6\\\2\u0586\u0587\5")
        buf.write("\u00b6\\\2\u0587\u0588\7\3\2\2\u0588\u058d\5\u008aF\2")
        buf.write("\u0589\u058a\7\5\2\2\u058a\u058c\5\u008aF\2\u058b\u0589")
        buf.write("\3\2\2\2\u058c\u058f\3\2\2\2\u058d\u058b\3\2\2\2\u058d")
        buf.write("\u058e\3\2\2\2\u058e\u0590\3\2\2\2\u058f\u058d\3\2\2\2")
        buf.write("\u0590\u0591\7\4\2\2\u0591\u0593\3\2\2\2\u0592\u0585\3")
        buf.write("\2\2\2\u0592\u0586\3\2\2\2\u0593Q\3\2\2\2\u0594\u0595")
        buf.write("\7\r\2\2\u0595\u059a\5\\/\2\u0596\u0597\7\5\2\2\u0597")
        buf.write("\u0599\5\\/\2\u0598\u0596\3\2\2\2\u0599\u059c\3\2\2\2")
        buf.write("\u059a\u0598\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u05a0\3")
        buf.write("\2\2\2\u059c\u059a\3\2\2\2\u059d\u059f\5X-\2\u059e\u059d")
        buf.write("\3\2\2\2\u059f\u05a2\3\2\2\2\u05a0\u059e\3\2\2\2\u05a0")
        buf.write("\u05a1\3\2\2\2\u05a1S\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a3")
        buf.write("\u05a4\7\23\2\2\u05a4\u05a5\7\24\2\2\u05a5\u05aa\5\u0080")
        buf.write("A\2\u05a6\u05a7\7\5\2\2\u05a7\u05a9\5\u0080A\2\u05a8\u05a6")
        buf.write("\3\2\2\2\u05a9\u05ac\3\2\2\2\u05aa\u05a8\3\2\2\2\u05aa")
        buf.write("\u05ab\3\2\2\2\u05ab\u05be\3\2\2\2\u05ac\u05aa\3\2\2\2")
        buf.write("\u05ad\u05ae\7L\2\2\u05ae\u05bf\7\30\2\2\u05af\u05b0\7")
        buf.write("L\2\2\u05b0\u05bf\7\27\2\2\u05b1\u05b2\7\25\2\2\u05b2")
        buf.write("\u05b3\7\26\2\2\u05b3\u05b4\7\3\2\2\u05b4\u05b9\5V,\2")
        buf.write("\u05b5\u05b6\7\5\2\2\u05b6\u05b8\5V,\2\u05b7\u05b5\3\2")
        buf.write("\2\2\u05b8\u05bb\3\2\2\2\u05b9\u05b7\3\2\2\2\u05b9\u05ba")
        buf.write("\3\2\2\2\u05ba\u05bc\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bc")
        buf.write("\u05bd\7\4\2\2\u05bd\u05bf\3\2\2\2\u05be\u05ad\3\2\2\2")
        buf.write("\u05be\u05af\3\2\2\2\u05be\u05b1\3\2\2\2\u05be\u05bf\3")
        buf.write("\2\2\2\u05bfU\3\2\2\2\u05c0\u05c9\7\3\2\2\u05c1\u05c6")
        buf.write("\5\u0080A\2\u05c2\u05c3\7\5\2\2\u05c3\u05c5\5\u0080A\2")
        buf.write("\u05c4\u05c2\3\2\2\2\u05c5\u05c8\3\2\2\2\u05c6\u05c4\3")
        buf.write("\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05ca\3\2\2\2\u05c8\u05c6")
        buf.write("\3\2\2\2\u05c9\u05c1\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca")
        buf.write("\u05cb\3\2\2\2\u05cb\u05ce\7\4\2\2\u05cc\u05ce\5\u0080")
        buf.write("A\2\u05cd\u05c0\3\2\2\2\u05cd\u05cc\3\2\2\2\u05ceW\3\2")
        buf.write("\2\2\u05cf\u05d0\7>\2\2\u05d0\u05d2\7P\2\2\u05d1\u05d3")
        buf.write("\7\66\2\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3")
        buf.write("\u05d4\3\2\2\2\u05d4\u05d5\5\u00b4[\2\u05d5\u05de\7\3")
        buf.write("\2\2\u05d6\u05db\5\u0080A\2\u05d7\u05d8\7\5\2\2\u05d8")
        buf.write("\u05da\5\u0080A\2\u05d9\u05d7\3\2\2\2\u05da\u05dd\3\2")
        buf.write("\2\2\u05db\u05d9\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05df")
        buf.write("\3\2\2\2\u05dd\u05db\3\2\2\2\u05de\u05d6\3\2\2\2\u05de")
        buf.write("\u05df\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1\7\4\2\2")
        buf.write("\u05e1\u05ed\5\u00b6\\\2\u05e2\u05e4\7\17\2\2\u05e3\u05e2")
        buf.write("\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5")
        buf.write("\u05ea\5\u00b6\\\2\u05e6\u05e7\7\5\2\2\u05e7\u05e9\5\u00b6")
        buf.write("\\\2\u05e8\u05e6\3\2\2\2\u05e9\u05ec\3\2\2\2\u05ea\u05e8")
        buf.write("\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec")
        buf.write("\u05ea\3\2\2\2\u05ed\u05e3\3\2\2\2\u05ed\u05ee\3\2\2\2")
        buf.write("\u05eeY\3\2\2\2\u05ef\u05f0\t\f\2\2\u05f0[\3\2\2\2\u05f1")
        buf.write("\u05f5\5r:\2\u05f2\u05f4\5^\60\2\u05f3\u05f2\3\2\2\2\u05f4")
        buf.write("\u05f7\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f5\u05f6\3\2\2\2")
        buf.write("\u05f6]\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f8\u05f9\5`\61")
        buf.write("\2\u05f9\u05fa\7\64\2\2\u05fa\u05fc\5r:\2\u05fb\u05fd")
        buf.write("\5b\62\2\u05fc\u05fb\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd")
        buf.write("\u0604\3\2\2\2\u05fe\u05ff\7<\2\2\u05ff\u0600\5`\61\2")
        buf.write("\u0600\u0601\7\64\2\2\u0601\u0602\5r:\2\u0602\u0604\3")
        buf.write("\2\2\2\u0603\u05f8\3\2\2\2\u0603\u05fe\3\2\2\2\u0604_")
        buf.write("\3\2\2\2\u0605\u0607\7\67\2\2\u0606\u0605\3\2\2\2\u0606")
        buf.write("\u0607\3\2\2\2\u0607\u061c\3\2\2\2\u0608\u061c\7\65\2")
        buf.write("\2\u0609\u060b\78\2\2\u060a\u060c\7\66\2\2\u060b\u060a")
        buf.write("\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u061c\3\2\2\2\u060d")
        buf.write("\u060e\78\2\2\u060e\u061c\79\2\2\u060f\u0611\7:\2\2\u0610")
        buf.write("\u0612\7\66\2\2\u0611\u0610\3\2\2\2\u0611\u0612\3\2\2")
        buf.write("\2\u0612\u061c\3\2\2\2\u0613\u0615\7;\2\2\u0614\u0616")
        buf.write("\7\66\2\2\u0615\u0614\3\2\2\2\u0615\u0616\3\2\2\2\u0616")
        buf.write("\u061c\3\2\2\2\u0617\u0619\78\2\2\u0618\u0617\3\2\2\2")
        buf.write("\u0618\u0619\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\7")
        buf.write("\u00e5\2\2\u061b\u0606\3\2\2\2\u061b\u0608\3\2\2\2\u061b")
        buf.write("\u0609\3\2\2\2\u061b\u060d\3\2\2\2\u061b\u060f\3\2\2\2")
        buf.write("\u061b\u0613\3\2\2\2\u061b\u0618\3\2\2\2\u061ca\3\2\2")
        buf.write("\2\u061d\u061e\7=\2\2\u061e\u062c\5\u0082B\2\u061f\u0620")
        buf.write("\7\u0097\2\2\u0620\u0621\7\3\2\2\u0621\u0626\5\u00b6\\")
        buf.write("\2\u0622\u0623\7\5\2\2\u0623\u0625\5\u00b6\\\2\u0624\u0622")
        buf.write("\3\2\2\2\u0625\u0628\3\2\2\2\u0626\u0624\3\2\2\2\u0626")
        buf.write("\u0627\3\2\2\2\u0627\u0629\3\2\2\2\u0628\u0626\3\2\2\2")
        buf.write("\u0629\u062a\7\4\2\2\u062a\u062c\3\2\2\2\u062b\u061d\3")
        buf.write("\2\2\2\u062b\u061f\3\2\2\2\u062cc\3\2\2\2\u062d\u062e")
        buf.write("\7i\2\2\u062e\u0644\7\3\2\2\u062f\u0630\t\r\2\2\u0630")
        buf.write("\u0645\7\u008d\2\2\u0631\u0632\5\u0080A\2\u0632\u0633")
        buf.write("\7C\2\2\u0633\u0645\3\2\2\2\u0634\u0645\7\u00ec\2\2\u0635")
        buf.write("\u0636\7\u008e\2\2\u0636\u0637\7\u00ed\2\2\u0637\u0638")
        buf.write("\7\u008f\2\2\u0638\u0639\7\u0090\2\2\u0639\u0642\7\u00ed")
        buf.write("\2\2\u063a\u0640\7=\2\2\u063b\u0641\5\u00b6\\\2\u063c")
        buf.write("\u063d\5\u00b4[\2\u063d\u063e\7\3\2\2\u063e\u063f\7\4")
        buf.write("\2\2\u063f\u0641\3\2\2\2\u0640\u063b\3\2\2\2\u0640\u063c")
        buf.write("\3\2\2\2\u0641\u0643\3\2\2\2\u0642\u063a\3\2\2\2\u0642")
        buf.write("\u0643\3\2\2\2\u0643\u0645\3\2\2\2\u0644\u062f\3\2\2\2")
        buf.write("\u0644\u0631\3\2\2\2\u0644\u0634\3\2\2\2\u0644\u0635\3")
        buf.write("\2\2\2\u0645\u0646\3\2\2\2\u0646\u0647\7\4\2\2\u0647e")
        buf.write("\3\2\2\2\u0648\u0649\7\3\2\2\u0649\u064a\5h\65\2\u064a")
        buf.write("\u064b\7\4\2\2\u064bg\3\2\2\2\u064c\u0651\5\u00b6\\\2")
        buf.write("\u064d\u064e\7\5\2\2\u064e\u0650\5\u00b6\\\2\u064f\u064d")
        buf.write("\3\2\2\2\u0650\u0653\3\2\2\2\u0651\u064f\3\2\2\2\u0651")
        buf.write("\u0652\3\2\2\2\u0652i\3\2\2\2\u0653\u0651\3\2\2\2\u0654")
        buf.write("\u0655\7\3\2\2\u0655\u065a\5l\67\2\u0656\u0657\7\5\2\2")
        buf.write("\u0657\u0659\5l\67\2\u0658\u0656\3\2\2\2\u0659\u065c\3")
        buf.write("\2\2\2\u065a\u0658\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u065d")
        buf.write("\3\2\2\2\u065c\u065a\3\2\2\2\u065d\u065e\7\4\2\2\u065e")
        buf.write("k\3\2\2\2\u065f\u0661\5\u00b6\\\2\u0660\u0662\t\n\2\2")
        buf.write("\u0661\u0660\3\2\2\2\u0661\u0662\3\2\2\2\u0662m\3\2\2")
        buf.write("\2\u0663\u0664\7\3\2\2\u0664\u0669\5p9\2\u0665\u0666\7")
        buf.write("\5\2\2\u0666\u0668\5p9\2\u0667\u0665\3\2\2\2\u0668\u066b")
        buf.write("\3\2\2\2\u0669\u0667\3\2\2\2\u0669\u066a\3\2\2\2\u066a")
        buf.write("\u066c\3\2\2\2\u066b\u0669\3\2\2\2\u066c\u066d\7\4\2\2")
        buf.write("\u066do\3\2\2\2\u066e\u0671\5\u00b6\\\2\u066f\u0670\7")
        buf.write("p\2\2\u0670\u0672\7\u00e8\2\2\u0671\u066f\3\2\2\2\u0671")
        buf.write("\u0672\3\2\2\2\u0672q\3\2\2\2\u0673\u0675\5x=\2\u0674")
        buf.write("\u0676\5d\63\2\u0675\u0674\3\2\2\2\u0675\u0676\3\2\2\2")
        buf.write("\u0676\u067b\3\2\2\2\u0677\u0679\7\17\2\2\u0678\u0677")
        buf.write("\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a\3\2\2\2\u067a")
        buf.write("\u067c\5\u00b8]\2\u067b\u0678\3\2\2\2\u067b\u067c\3\2")
        buf.write("\2\2\u067c\u06a5\3\2\2\2\u067d\u067e\7\3\2\2\u067e\u067f")
        buf.write("\5@!\2\u067f\u0681\7\4\2\2\u0680\u0682\5d\63\2\u0681\u0680")
        buf.write("\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0687\3\2\2\2\u0683")
        buf.write("\u0685\7\17\2\2\u0684\u0683\3\2\2\2\u0684\u0685\3\2\2")
        buf.write("\2\u0685\u0686\3\2\2\2\u0686\u0688\5\u00b8]\2\u0687\u0684")
        buf.write("\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u06a5\3\2\2\2\u0689")
        buf.write("\u068a\7\3\2\2\u068a\u068b\5\\/\2\u068b\u068d\7\4\2\2")
        buf.write("\u068c\u068e\5d\63\2\u068d\u068c\3\2\2\2\u068d\u068e\3")
        buf.write("\2\2\2\u068e\u0693\3\2\2\2\u068f\u0691\7\17\2\2\u0690")
        buf.write("\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0692\3\2\2\2")
        buf.write("\u0692\u0694\5\u00b8]\2\u0693\u0690\3\2\2\2\u0693\u0694")
        buf.write("\3\2\2\2\u0694\u06a5\3\2\2\2\u0695\u06a5\5t;\2\u0696\u0697")
        buf.write("\5\u00b6\\\2\u0697\u06a0\7\3\2\2\u0698\u069d\5\u0080A")
        buf.write("\2\u0699\u069a\7\5\2\2\u069a\u069c\5\u0080A\2\u069b\u0699")
        buf.write("\3\2\2\2\u069c\u069f\3\2\2\2\u069d\u069b\3\2\2\2\u069d")
        buf.write("\u069e\3\2\2\2\u069e\u06a1\3\2\2\2\u069f\u069d\3\2\2\2")
        buf.write("\u06a0\u0698\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a2\3")
        buf.write("\2\2\2\u06a2\u06a3\7\4\2\2\u06a3\u06a5\3\2\2\2\u06a4\u0673")
        buf.write("\3\2\2\2\u06a4\u067d\3\2\2\2\u06a4\u0689\3\2\2\2\u06a4")
        buf.write("\u0695\3\2\2\2\u06a4\u0696\3\2\2\2\u06a5s\3\2\2\2\u06a6")
        buf.write("\u06a7\7M\2\2\u06a7\u06ac\5\u0080A\2\u06a8\u06a9\7\5\2")
        buf.write("\2\u06a9\u06ab\5\u0080A\2\u06aa\u06a8\3\2\2\2\u06ab\u06ae")
        buf.write("\3\2\2\2\u06ac\u06aa\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad")
        buf.write("\u06b6\3\2\2\2\u06ae\u06ac\3\2\2\2\u06af\u06b1\7\17\2")
        buf.write("\2\u06b0\u06af\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06b2")
        buf.write("\3\2\2\2\u06b2\u06b4\5\u00b6\\\2\u06b3\u06b5\5f\64\2\u06b4")
        buf.write("\u06b3\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06b7\3\2\2\2")
        buf.write("\u06b6\u06b0\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7u\3\2\2")
        buf.write("\2\u06b8\u06b9\7K\2\2\u06b9\u06ba\7W\2\2\u06ba\u06bb\7")
        buf.write("\u0098\2\2\u06bb\u06bf\7\u00e8\2\2\u06bc\u06bd\7L\2\2")
        buf.write("\u06bd\u06be\7\u0099\2\2\u06be\u06c0\5,\27\2\u06bf\u06bc")
        buf.write("\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06ea\3\2\2\2\u06c1")
        buf.write("\u06c2\7K\2\2\u06c2\u06c3\7W\2\2\u06c3\u06cd\7\u009c\2")
        buf.write("\2\u06c4\u06c5\7\u009d\2\2\u06c5\u06c6\7\u009e\2\2\u06c6")
        buf.write("\u06c7\7\24\2\2\u06c7\u06cb\7\u00e8\2\2\u06c8\u06c9\7")
        buf.write("\u00a2\2\2\u06c9\u06ca\7\24\2\2\u06ca\u06cc\7\u00e8\2")
        buf.write("\2\u06cb\u06c8\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce")
        buf.write("\3\2\2\2\u06cd\u06c4\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce")
        buf.write("\u06d4\3\2\2\2\u06cf\u06d0\7\u009f\2\2\u06d0\u06d1\7\u00a0")
        buf.write("\2\2\u06d1\u06d2\7\u009e\2\2\u06d2\u06d3\7\24\2\2\u06d3")
        buf.write("\u06d5\7\u00e8\2\2\u06d4\u06cf\3\2\2\2\u06d4\u06d5\3\2")
        buf.write("\2\2\u06d5\u06db\3\2\2\2\u06d6\u06d7\7n\2\2\u06d7\u06d8")
        buf.write("\7\u00a1\2\2\u06d8\u06d9\7\u009e\2\2\u06d9\u06da\7\24")
        buf.write("\2\2\u06da\u06dc\7\u00e8\2\2\u06db\u06d6\3\2\2\2\u06db")
        buf.write("\u06dc\3\2\2\2\u06dc\u06e1\3\2\2\2\u06dd\u06de\7\u00a3")
        buf.write("\2\2\u06de\u06df\7\u009e\2\2\u06df\u06e0\7\24\2\2\u06e0")
        buf.write("\u06e2\7\u00e8\2\2\u06e1\u06dd\3\2\2\2\u06e1\u06e2\3\2")
        buf.write("\2\2\u06e2\u06e7\3\2\2\2\u06e3\u06e4\7\'\2\2\u06e4\u06e5")
        buf.write("\7\u00d1\2\2\u06e5\u06e6\7\17\2\2\u06e6\u06e8\7\u00e8")
        buf.write("\2\2\u06e7\u06e3\3\2\2\2\u06e7\u06e8\3\2\2\2\u06e8\u06ea")
        buf.write("\3\2\2\2\u06e9\u06b8\3\2\2\2\u06e9\u06c1\3\2\2\2\u06ea")
        buf.write("w\3\2\2\2\u06eb\u06ec\5\u00b6\\\2\u06ec\u06ed\7\6\2\2")
        buf.write("\u06ed\u06ef\3\2\2\2\u06ee\u06eb\3\2\2\2\u06ee\u06ef\3")
        buf.write("\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\5\u00b6\\\2\u06f1")
        buf.write("y\3\2\2\2\u06f2\u06f3\5\u00b6\\\2\u06f3\u06f4\7\6\2\2")
        buf.write("\u06f4\u06f6\3\2\2\2\u06f5\u06f2\3\2\2\2\u06f5\u06f6\3")
        buf.write("\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f8\5\u00b6\\\2\u06f8")
        buf.write("{\3\2\2\2\u06f9\u0701\5\u0080A\2\u06fa\u06fc\7\17\2\2")
        buf.write("\u06fb\u06fa\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06ff\3")
        buf.write("\2\2\2\u06fd\u0700\5\u00b6\\\2\u06fe\u0700\5f\64\2\u06ff")
        buf.write("\u06fd\3\2\2\2\u06ff\u06fe\3\2\2\2\u0700\u0702\3\2\2\2")
        buf.write("\u0701\u06fb\3\2\2\2\u0701\u0702\3\2\2\2\u0702}\3\2\2")
        buf.write("\2\u0703\u0708\5|?\2\u0704\u0705\7\5\2\2\u0705\u0707\5")
        buf.write("|?\2\u0706\u0704\3\2\2\2\u0707\u070a\3\2\2\2\u0708\u0706")
        buf.write("\3\2\2\2\u0708\u0709\3\2\2\2\u0709\177\3\2\2\2\u070a\u0708")
        buf.write("\3\2\2\2\u070b\u070c\5\u0082B\2\u070c\u0081\3\2\2\2\u070d")
        buf.write("\u070e\bB\1\2\u070e\u070f\7 \2\2\u070f\u0717\5\u0082B")
        buf.write("\7\u0710\u0711\7\"\2\2\u0711\u0712\7\3\2\2\u0712\u0713")
        buf.write("\5\30\r\2\u0713\u0714\7\4\2\2\u0714\u0717\3\2\2\2\u0715")
        buf.write("\u0717\5\u0084C\2\u0716\u070d\3\2\2\2\u0716\u0710\3\2")
        buf.write("\2\2\u0716\u0715\3\2\2\2\u0717\u0720\3\2\2\2\u0718\u0719")
        buf.write("\f\4\2\2\u0719\u071a\7\36\2\2\u071a\u071f\5\u0082B\5\u071b")
        buf.write("\u071c\f\3\2\2\u071c\u071d\7\35\2\2\u071d\u071f\5\u0082")
        buf.write("B\4\u071e\u0718\3\2\2\2\u071e\u071b\3\2\2\2\u071f\u0722")
        buf.write("\3\2\2\2\u0720\u071e\3\2\2\2\u0720\u0721\3\2\2\2\u0721")
        buf.write("\u0083\3\2\2\2\u0722\u0720\3\2\2\2\u0723\u0725\5\u0088")
        buf.write("E\2\u0724\u0726\5\u0086D\2\u0725\u0724\3\2\2\2\u0725\u0726")
        buf.write("\3\2\2\2\u0726\u0085\3\2\2\2\u0727\u0729\7 \2\2\u0728")
        buf.write("\u0727\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072a\3\2\2\2")
        buf.write("\u072a\u072b\7#\2\2\u072b\u072c\5\u0088E\2\u072c\u072d")
        buf.write("\7\36\2\2\u072d\u072e\5\u0088E\2\u072e\u0751\3\2\2\2\u072f")
        buf.write("\u0731\7 \2\2\u0730\u072f\3\2\2\2\u0730\u0731\3\2\2\2")
        buf.write("\u0731\u0732\3\2\2\2\u0732\u0733\7\37\2\2\u0733\u0734")
        buf.write("\7\3\2\2\u0734\u0739\5\u0080A\2\u0735\u0736\7\5\2\2\u0736")
        buf.write("\u0738\5\u0080A\2\u0737\u0735\3\2\2\2\u0738\u073b\3\2")
        buf.write("\2\2\u0739\u0737\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073c")
        buf.write("\3\2\2\2\u073b\u0739\3\2\2\2\u073c\u073d\7\4\2\2\u073d")
        buf.write("\u0751\3\2\2\2\u073e\u0740\7 \2\2\u073f\u073e\3\2\2\2")
        buf.write("\u073f\u0740\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0742\7")
        buf.write("\37\2\2\u0742\u0743\7\3\2\2\u0743\u0744\5\30\r\2\u0744")
        buf.write("\u0745\7\4\2\2\u0745\u0751\3\2\2\2\u0746\u0748\7 \2\2")
        buf.write("\u0747\u0746\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u0749\3")
        buf.write("\2\2\2\u0749\u074a\t\16\2\2\u074a\u0751\5\u0088E\2\u074b")
        buf.write("\u074d\7&\2\2\u074c\u074e\7 \2\2\u074d\u074c\3\2\2\2\u074d")
        buf.write("\u074e\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0751\7\'\2\2")
        buf.write("\u0750\u0728\3\2\2\2\u0750\u0730\3\2\2\2\u0750\u073f\3")
        buf.write("\2\2\2\u0750\u0747\3\2\2\2\u0750\u074b\3\2\2\2\u0751\u0087")
        buf.write("\3\2\2\2\u0752\u0753\bE\1\2\u0753\u0757\5\u008aF\2\u0754")
        buf.write("\u0755\t\17\2\2\u0755\u0757\5\u0088E\t\u0756\u0752\3\2")
        buf.write("\2\2\u0756\u0754\3\2\2\2\u0757\u076d\3\2\2\2\u0758\u0759")
        buf.write("\f\b\2\2\u0759\u075a\t\20\2\2\u075a\u076c\5\u0088E\t\u075b")
        buf.write("\u075c\f\7\2\2\u075c\u075d\t\21\2\2\u075d\u076c\5\u0088")
        buf.write("E\b\u075e\u075f\f\6\2\2\u075f\u0760\7\u008a\2\2\u0760")
        buf.write("\u076c\5\u0088E\7\u0761\u0762\f\5\2\2\u0762\u0763\7\u008c")
        buf.write("\2\2\u0763\u076c\5\u0088E\6\u0764\u0765\f\4\2\2\u0765")
        buf.write("\u0766\7\u008b\2\2\u0766\u076c\5\u0088E\5\u0767\u0768")
        buf.write("\f\3\2\2\u0768\u0769\5\u008eH\2\u0769\u076a\5\u0088E\4")
        buf.write("\u076a\u076c\3\2\2\2\u076b\u0758\3\2\2\2\u076b\u075b\3")
        buf.write("\2\2\2\u076b\u075e\3\2\2\2\u076b\u0761\3\2\2\2\u076b\u0764")
        buf.write("\3\2\2\2\u076b\u0767\3\2\2\2\u076c\u076f\3\2\2\2\u076d")
        buf.write("\u076b\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0089\3\2\2\2")
        buf.write("\u076f\u076d\3\2\2\2\u0770\u0771\bF\1\2\u0771\u0773\7")
        buf.write("/\2\2\u0772\u0774\5\u00a8U\2\u0773\u0772\3\2\2\2\u0774")
        buf.write("\u0775\3\2\2\2\u0775\u0773\3\2\2\2\u0775\u0776\3\2\2\2")
        buf.write("\u0776\u0779\3\2\2\2\u0777\u0778\7\62\2\2\u0778\u077a")
        buf.write("\5\u0080A\2\u0779\u0777\3\2\2\2\u0779\u077a\3\2\2\2\u077a")
        buf.write("\u077b\3\2\2\2\u077b\u077c\7\63\2\2\u077c\u07de\3\2\2")
        buf.write("\2\u077d\u077e\7/\2\2\u077e\u0780\5\u0080A\2\u077f\u0781")
        buf.write("\5\u00a8U\2\u0780\u077f\3\2\2\2\u0781\u0782\3\2\2\2\u0782")
        buf.write("\u0780\3\2\2\2\u0782\u0783\3\2\2\2\u0783\u0786\3\2\2\2")
        buf.write("\u0784\u0785\7\62\2\2\u0785\u0787\5\u0080A\2\u0786\u0784")
        buf.write("\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0788\3\2\2\2\u0788")
        buf.write("\u0789\7\63\2\2\u0789\u07de\3\2\2\2\u078a\u078b\7[\2\2")
        buf.write("\u078b\u078c\7\3\2\2\u078c\u078d\5\u0080A\2\u078d\u078e")
        buf.write("\7\17\2\2\u078e\u078f\5\u009eP\2\u078f\u0790\7\4\2\2\u0790")
        buf.write("\u07de\3\2\2\2\u0791\u0792\7o\2\2\u0792\u079b\7\3\2\2")
        buf.write("\u0793\u0798\5|?\2\u0794\u0795\7\5\2\2\u0795\u0797\5|")
        buf.write("?\2\u0796\u0794\3\2\2\2\u0797\u079a\3\2\2\2\u0798\u0796")
        buf.write("\3\2\2\2\u0798\u0799\3\2\2\2\u0799\u079c\3\2\2\2\u079a")
        buf.write("\u0798\3\2\2\2\u079b\u0793\3\2\2\2\u079b\u079c\3\2\2\2")
        buf.write("\u079c\u079d\3\2\2\2\u079d\u07de\7\4\2\2\u079e\u079f\7")
        buf.write("H\2\2\u079f\u07a0\7\3\2\2\u07a0\u07a3\5\u0080A\2\u07a1")
        buf.write("\u07a2\7y\2\2\u07a2\u07a4\7*\2\2\u07a3\u07a1\3\2\2\2\u07a3")
        buf.write("\u07a4\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a6\7\4\2\2")
        buf.write("\u07a6\u07de\3\2\2\2\u07a7\u07a8\7J\2\2\u07a8\u07a9\7")
        buf.write("\3\2\2\u07a9\u07ac\5\u0080A\2\u07aa\u07ab\7y\2\2\u07ab")
        buf.write("\u07ad\7*\2\2\u07ac\u07aa\3\2\2\2\u07ac\u07ad\3\2\2\2")
        buf.write("\u07ad\u07ae\3\2\2\2\u07ae\u07af\7\4\2\2\u07af\u07de\3")
        buf.write("\2\2\2\u07b0\u07de\5\u008cG\2\u07b1\u07de\7\u0085\2\2")
        buf.write("\u07b2\u07b3\5\u00b4[\2\u07b3\u07b4\7\6\2\2\u07b4\u07b5")
        buf.write("\7\u0085\2\2\u07b5\u07de\3\2\2\2\u07b6\u07b7\7\3\2\2\u07b7")
        buf.write("\u07ba\5|?\2\u07b8\u07b9\7\5\2\2\u07b9\u07bb\5|?\2\u07ba")
        buf.write("\u07b8\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u07ba\3\2\2\2")
        buf.write("\u07bc\u07bd\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07bf\7")
        buf.write("\4\2\2\u07bf\u07de\3\2\2\2\u07c0\u07c1\7\3\2\2\u07c1\u07c2")
        buf.write("\5\30\r\2\u07c2\u07c3\7\4\2\2\u07c3\u07de\3\2\2\2\u07c4")
        buf.write("\u07c5\5\u00b4[\2\u07c5\u07d1\7\3\2\2\u07c6\u07c8\5Z.")
        buf.write("\2\u07c7\u07c6\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9")
        buf.write("\3\2\2\2\u07c9\u07ce\5\u0080A\2\u07ca\u07cb\7\5\2\2\u07cb")
        buf.write("\u07cd\5\u0080A\2\u07cc\u07ca\3\2\2\2\u07cd\u07d0\3\2")
        buf.write("\2\2\u07ce\u07cc\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d2")
        buf.write("\3\2\2\2\u07d0\u07ce\3\2\2\2\u07d1\u07c7\3\2\2\2\u07d1")
        buf.write("\u07d2\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07d6\7\4\2\2")
        buf.write("\u07d4\u07d5\7@\2\2\u07d5\u07d7\5\u00aeX\2\u07d6\u07d4")
        buf.write("\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07de\3\2\2\2\u07d8")
        buf.write("\u07de\5\u00b6\\\2\u07d9\u07da\7\3\2\2\u07da\u07db\5\u0080")
        buf.write("A\2\u07db\u07dc\7\4\2\2\u07dc\u07de\3\2\2\2\u07dd\u0770")
        buf.write("\3\2\2\2\u07dd\u077d\3\2\2\2\u07dd\u078a\3\2\2\2\u07dd")
        buf.write("\u0791\3\2\2\2\u07dd\u079e\3\2\2\2\u07dd\u07a7\3\2\2\2")
        buf.write("\u07dd\u07b0\3\2\2\2\u07dd\u07b1\3\2\2\2\u07dd\u07b2\3")
        buf.write("\2\2\2\u07dd\u07b6\3\2\2\2\u07dd\u07c0\3\2\2\2\u07dd\u07c4")
        buf.write("\3\2\2\2\u07dd\u07d8\3\2\2\2\u07dd\u07d9\3\2\2\2\u07de")
        buf.write("\u07e9\3\2\2\2\u07df\u07e0\f\6\2\2\u07e0\u07e1\7\t\2\2")
        buf.write("\u07e1\u07e2\5\u0088E\2\u07e2\u07e3\7\n\2\2\u07e3\u07e8")
        buf.write("\3\2\2\2\u07e4\u07e5\f\4\2\2\u07e5\u07e6\7\6\2\2\u07e6")
        buf.write("\u07e8\5\u00b6\\\2\u07e7\u07df\3\2\2\2\u07e7\u07e4\3\2")
        buf.write("\2\2\u07e8\u07eb\3\2\2\2\u07e9\u07e7\3\2\2\2\u07e9\u07ea")
        buf.write("\3\2\2\2\u07ea\u008b\3\2\2\2\u07eb\u07e9\3\2\2\2\u07ec")
        buf.write("\u07f9\7\'\2\2\u07ed\u07f9\5\u0096L\2\u07ee\u07ef\5\u00b6")
        buf.write("\\\2\u07ef\u07f0\7\u00e8\2\2\u07f0\u07f9\3\2\2\2\u07f1")
        buf.write("\u07f9\5\u00bc_\2\u07f2\u07f9\5\u0094K\2\u07f3\u07f5\7")
        buf.write("\u00e8\2\2\u07f4\u07f3\3\2\2\2\u07f5\u07f6\3\2\2\2\u07f6")
        buf.write("\u07f4\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07f9\3\2\2\2")
        buf.write("\u07f8\u07ec\3\2\2\2\u07f8\u07ed\3\2\2\2\u07f8\u07ee\3")
        buf.write("\2\2\2\u07f8\u07f1\3\2\2\2\u07f8\u07f2\3\2\2\2\u07f8\u07f4")
        buf.write("\3\2\2\2\u07f9\u008d\3\2\2\2\u07fa\u07fb\t\22\2\2\u07fb")
        buf.write("\u008f\3\2\2\2\u07fc\u07fd\t\23\2\2\u07fd\u0091\3\2\2")
        buf.write("\2\u07fe\u07ff\t\24\2\2\u07ff\u0093\3\2\2\2\u0800\u0801")
        buf.write("\t\25\2\2\u0801\u0095\3\2\2\2\u0802\u0806\7.\2\2\u0803")
        buf.write("\u0805\5\u0098M\2\u0804\u0803\3\2\2\2\u0805\u0808\3\2")
        buf.write("\2\2\u0806\u0804\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u0097")
        buf.write("\3\2\2\2\u0808\u0806\3\2\2\2\u0809\u080a\5\u009aN\2\u080a")
        buf.write("\u080d\5\u00b6\\\2\u080b\u080c\7h\2\2\u080c\u080e\5\u00b6")
        buf.write("\\\2\u080d\u080b\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u0099")
        buf.write("\3\2\2\2\u080f\u0811\t\21\2\2\u0810\u080f\3\2\2\2\u0810")
        buf.write("\u0811\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0815\t\r\2\2")
        buf.write("\u0813\u0815\7\u00e8\2\2\u0814\u0810\3\2\2\2\u0814\u0813")
        buf.write("\3\2\2\2\u0815\u009b\3\2\2\2\u0816\u081a\7H\2\2\u0817")
        buf.write("\u0818\7I\2\2\u0818\u081a\5\u00b6\\\2\u0819\u0816\3\2")
        buf.write("\2\2\u0819\u0817\3\2\2\2\u081a\u009d\3\2\2\2\u081b\u081c")
        buf.write("\7m\2\2\u081c\u081d\7\177\2\2\u081d\u081e\5\u009eP\2\u081e")
        buf.write("\u081f\7\u0081\2\2\u081f\u083e\3\2\2\2\u0820\u0821\7n")
        buf.write("\2\2\u0821\u0822\7\177\2\2\u0822\u0823\5\u009eP\2\u0823")
        buf.write("\u0824\7\5\2\2\u0824\u0825\5\u009eP\2\u0825\u0826\7\u0081")
        buf.write("\2\2\u0826\u083e\3\2\2\2\u0827\u082e\7o\2\2\u0828\u082a")
        buf.write("\7\177\2\2\u0829\u082b\5\u00a4S\2\u082a\u0829\3\2\2\2")
        buf.write("\u082a\u082b\3\2\2\2\u082b\u082c\3\2\2\2\u082c\u082f\7")
        buf.write("\u0081\2\2\u082d\u082f\7}\2\2\u082e\u0828\3\2\2\2\u082e")
        buf.write("\u082d\3\2\2\2\u082f\u083e\3\2\2\2\u0830\u083b\5\u00b6")
        buf.write("\\\2\u0831\u0832\7\3\2\2\u0832\u0837\7\u00ed\2\2\u0833")
        buf.write("\u0834\7\5\2\2\u0834\u0836\7\u00ed\2\2\u0835\u0833\3\2")
        buf.write("\2\2\u0836\u0839\3\2\2\2\u0837\u0835\3\2\2\2\u0837\u0838")
        buf.write("\3\2\2\2\u0838\u083a\3\2\2\2\u0839\u0837\3\2\2\2\u083a")
        buf.write("\u083c\7\4\2\2\u083b\u0831\3\2\2\2\u083b\u083c\3\2\2\2")
        buf.write("\u083c\u083e\3\2\2\2\u083d\u081b\3\2\2\2\u083d\u0820\3")
        buf.write("\2\2\2\u083d\u0827\3\2\2\2\u083d\u0830\3\2\2\2\u083e\u009f")
        buf.write("\3\2\2\2\u083f\u0844\5\u00a2R\2\u0840\u0841\7\5\2\2\u0841")
        buf.write("\u0843\5\u00a2R\2\u0842\u0840\3\2\2\2\u0843\u0846\3\2")
        buf.write("\2\2\u0844\u0842\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u00a1")
        buf.write("\3\2\2\2\u0846\u0844\3\2\2\2\u0847\u0848\5\u00b6\\\2\u0848")
        buf.write("\u084b\5\u009eP\2\u0849\u084a\7p\2\2\u084a\u084c\7\u00e8")
        buf.write("\2\2\u084b\u0849\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u00a3")
        buf.write("\3\2\2\2\u084d\u0852\5\u00a6T\2\u084e\u084f\7\5\2\2\u084f")
        buf.write("\u0851\5\u00a6T\2\u0850\u084e\3\2\2\2\u0851\u0854\3\2")
        buf.write("\2\2\u0852\u0850\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u00a5")
        buf.write("\3\2\2\2\u0854\u0852\3\2\2\2\u0855\u0856\5\u00b6\\\2\u0856")
        buf.write("\u0857\7\13\2\2\u0857\u085a\5\u009eP\2\u0858\u0859\7p")
        buf.write("\2\2\u0859\u085b\7\u00e8\2\2\u085a\u0858\3\2\2\2\u085a")
        buf.write("\u085b\3\2\2\2\u085b\u00a7\3\2\2\2\u085c\u085d\7\60\2")
        buf.write("\2\u085d\u085e\5\u0080A\2\u085e\u085f\7\61\2\2\u085f\u0860")
        buf.write("\5\u0080A\2\u0860\u00a9\3\2\2\2\u0861\u0862\7?\2\2\u0862")
        buf.write("\u0867\5\u00acW\2\u0863\u0864\7\5\2\2\u0864\u0866\5\u00ac")
        buf.write("W\2\u0865\u0863\3\2\2\2\u0866\u0869\3\2\2\2\u0867\u0865")
        buf.write("\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u00ab\3\2\2\2\u0869")
        buf.write("\u0867\3\2\2\2\u086a\u086b\5\u00b6\\\2\u086b\u086c\7\17")
        buf.write("\2\2\u086c\u086d\5\u00aeX\2\u086d\u00ad\3\2\2\2\u086e")
        buf.write("\u0899\5\u00b6\\\2\u086f\u0892\7\3\2\2\u0870\u0871\7\u0092")
        buf.write("\2\2\u0871\u0872\7\24\2\2\u0872\u0877\5\u0080A\2\u0873")
        buf.write("\u0874\7\5\2\2\u0874\u0876\5\u0080A\2\u0875\u0873\3\2")
        buf.write("\2\2\u0876\u0879\3\2\2\2\u0877\u0875\3\2\2\2\u0877\u0878")
        buf.write("\3\2\2\2\u0878\u0893\3\2\2\2\u0879\u0877\3\2\2\2\u087a")
        buf.write("\u087b\t\26\2\2\u087b\u087c\7\24\2\2\u087c\u0881\5\u0080")
        buf.write("A\2\u087d\u087e\7\5\2\2\u087e\u0880\5\u0080A\2\u087f\u087d")
        buf.write("\3\2\2\2\u0880\u0883\3\2\2\2\u0881\u087f\3\2\2\2\u0881")
        buf.write("\u0882\3\2\2\2\u0882\u0885\3\2\2\2\u0883\u0881\3\2\2\2")
        buf.write("\u0884\u087a\3\2\2\2\u0884\u0885\3\2\2\2\u0885\u0890\3")
        buf.write("\2\2\2\u0886\u0887\t\27\2\2\u0887\u0888\7\24\2\2\u0888")
        buf.write("\u088d\5J&\2\u0889\u088a\7\5\2\2\u088a\u088c\5J&\2\u088b")
        buf.write("\u0889\3\2\2\2\u088c\u088f\3\2\2\2\u088d\u088b\3\2\2\2")
        buf.write("\u088d\u088e\3\2\2\2\u088e\u0891\3\2\2\2\u088f\u088d\3")
        buf.write("\2\2\2\u0890\u0886\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u0893")
        buf.write("\3\2\2\2\u0892\u0870\3\2\2\2\u0892\u0884\3\2\2\2\u0893")
        buf.write("\u0895\3\2\2\2\u0894\u0896\5\u00b0Y\2\u0895\u0894\3\2")
        buf.write("\2\2\u0895\u0896\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0899")
        buf.write("\7\4\2\2\u0898\u086e\3\2\2\2\u0898\u086f\3\2\2\2\u0899")
        buf.write("\u00af\3\2\2\2\u089a\u089b\7B\2\2\u089b\u08ab\5\u00b2")
        buf.write("Z\2\u089c\u089d\7C\2\2\u089d\u08ab\5\u00b2Z\2\u089e\u089f")
        buf.write("\7B\2\2\u089f\u08a0\7#\2\2\u08a0\u08a1\5\u00b2Z\2\u08a1")
        buf.write("\u08a2\7\36\2\2\u08a2\u08a3\5\u00b2Z\2\u08a3\u08ab\3\2")
        buf.write("\2\2\u08a4\u08a5\7C\2\2\u08a5\u08a6\7#\2\2\u08a6\u08a7")
        buf.write("\5\u00b2Z\2\u08a7\u08a8\7\36\2\2\u08a8\u08a9\5\u00b2Z")
        buf.write("\2\u08a9\u08ab\3\2\2\2\u08aa\u089a\3\2\2\2\u08aa\u089c")
        buf.write("\3\2\2\2\u08aa\u089e\3\2\2\2\u08aa\u08a4\3\2\2\2\u08ab")
        buf.write("\u00b1\3\2\2\2\u08ac\u08ad\7D\2\2\u08ad\u08b4\t\30\2\2")
        buf.write("\u08ae\u08af\7G\2\2\u08af\u08b4\7K\2\2\u08b0\u08b1\5\u0080")
        buf.write("A\2\u08b1\u08b2\t\30\2\2\u08b2\u08b4\3\2\2\2\u08b3\u08ac")
        buf.write("\3\2\2\2\u08b3\u08ae\3\2\2\2\u08b3\u08b0\3\2\2\2\u08b4")
        buf.write("\u00b3\3\2\2\2\u08b5\u08ba\5\u00b6\\\2\u08b6\u08b7\7\6")
        buf.write("\2\2\u08b7\u08b9\5\u00b6\\\2\u08b8\u08b6\3\2\2\2\u08b9")
        buf.write("\u08bc\3\2\2\2\u08ba\u08b8\3\2\2\2\u08ba\u08bb\3\2\2\2")
        buf.write("\u08bb\u00b5\3\2\2\2\u08bc\u08ba\3\2\2\2\u08bd\u08cd\5")
        buf.write("\u00b8]\2\u08be\u08cd\7\u00e5\2\2\u08bf\u08cd\7;\2\2\u08c0")
        buf.write("\u08cd\7\67\2\2\u08c1\u08cd\78\2\2\u08c2\u08cd\79\2\2")
        buf.write("\u08c3\u08cd\7:\2\2\u08c4\u08cd\7<\2\2\u08c5\u08cd\7\64")
        buf.write("\2\2\u08c6\u08cd\7\65\2\2\u08c7\u08cd\7=\2\2\u08c8\u08cd")
        buf.write("\7d\2\2\u08c9\u08cd\7g\2\2\u08ca\u08cd\7e\2\2\u08cb\u08cd")
        buf.write("\7f\2\2\u08cc\u08bd\3\2\2\2\u08cc\u08be\3\2\2\2\u08cc")
        buf.write("\u08bf\3\2\2\2\u08cc\u08c0\3\2\2\2\u08cc\u08c1\3\2\2\2")
        buf.write("\u08cc\u08c2\3\2\2\2\u08cc\u08c3\3\2\2\2\u08cc\u08c4\3")
        buf.write("\2\2\2\u08cc\u08c5\3\2\2\2\u08cc\u08c6\3\2\2\2\u08cc\u08c7")
        buf.write("\3\2\2\2\u08cc\u08c8\3\2\2\2\u08cc\u08c9\3\2\2\2\u08cc")
        buf.write("\u08ca\3\2\2\2\u08cc\u08cb\3\2\2\2\u08cd\u00b7\3\2\2\2")
        buf.write("\u08ce\u08d2\7\u00f1\2\2\u08cf\u08d2\5\u00ba^\2\u08d0")
        buf.write("\u08d2\5\u00be`\2\u08d1\u08ce\3\2\2\2\u08d1\u08cf\3\2")
        buf.write("\2\2\u08d1\u08d0\3\2\2\2\u08d2\u00b9\3\2\2\2\u08d3\u08d4")
        buf.write("\7\u00f2\2\2\u08d4\u00bb\3\2\2\2\u08d5\u08d7\7\u0084\2")
        buf.write("\2\u08d6\u08d5\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08d8")
        buf.write("\3\2\2\2\u08d8\u08f2\7\u00ee\2\2\u08d9\u08db\7\u0084\2")
        buf.write("\2\u08da\u08d9\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u08dc")
        buf.write("\3\2\2\2\u08dc\u08f2\7\u00ed\2\2\u08dd\u08df\7\u0084\2")
        buf.write("\2\u08de\u08dd\3\2\2\2\u08de\u08df\3\2\2\2\u08df\u08e0")
        buf.write("\3\2\2\2\u08e0\u08f2\7\u00e9\2\2\u08e1\u08e3\7\u0084\2")
        buf.write("\2\u08e2\u08e1\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3\u08e4")
        buf.write("\3\2\2\2\u08e4\u08f2\7\u00ea\2\2\u08e5\u08e7\7\u0084\2")
        buf.write("\2\u08e6\u08e5\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08e8")
        buf.write("\3\2\2\2\u08e8\u08f2\7\u00eb\2\2\u08e9\u08eb\7\u0084\2")
        buf.write("\2\u08ea\u08e9\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ec")
        buf.write("\3\2\2\2\u08ec\u08f2\7\u00ef\2\2\u08ed\u08ef\7\u0084\2")
        buf.write("\2\u08ee\u08ed\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f0")
        buf.write("\3\2\2\2\u08f0\u08f2\7\u00f0\2\2\u08f1\u08d6\3\2\2\2\u08f1")
        buf.write("\u08da\3\2\2\2\u08f1\u08de\3\2\2\2\u08f1\u08e2\3\2\2\2")
        buf.write("\u08f1\u08e6\3\2\2\2\u08f1\u08ea\3\2\2\2\u08f1\u08ee\3")
        buf.write("\2\2\2\u08f2\u00bd\3\2\2\2\u08f3\u08f4\t\31\2\2\u08f4")
        buf.write("\u00bf\3\2\2\2\u013e\u00d7\u00dc\u00df\u00e4\u00f1\u00f5")
        buf.write("\u00fc\u0101\u0106\u0109\u010c\u0110\u0113\u0116\u011d")
        buf.write("\u0121\u0129\u012c\u012f\u0132\u0135\u0138\u013c\u013f")
        buf.write("\u0142\u0149\u014f\u0155\u015d\u017d\u0185\u0189\u018e")
        buf.write("\u0194\u019c\u01a2\u01af\u01b4\u01bd\u01c2\u01d2\u01d9")
        buf.write("\u01dd\u01e5\u01ec\u01f3\u0202\u0206\u020c\u0212\u0215")
        buf.write("\u0218\u021e\u0222\u0226\u022b\u022f\u0237\u023a\u0243")
        buf.write("\u0248\u024e\u0254\u0260\u0263\u0267\u026c\u0271\u0278")
        buf.write("\u027b\u027e\u0285\u028a\u0290\u0299\u02a1\u02a7\u02ab")
        buf.write("\u02af\u02b3\u02b5\u02be\u02c4\u02c9\u02cc\u02d0\u02d3")
        buf.write("\u02dc\u02e1\u02e6\u02e9\u02ef\u02f7\u02fc\u0302\u0308")
        buf.write("\u0313\u031b\u0322\u032a\u032d\u0335\u0339\u0340\u03b4")
        buf.write("\u03bc\u03c4\u03cd\u03d9\u03dd\u03e0\u03e6\u03f0\u03fc")
        buf.write("\u0401\u0407\u0413\u0415\u041a\u041e\u0420\u0424\u042d")
        buf.write("\u0435\u043c\u0442\u0446\u044f\u0454\u0463\u046a\u046d")
        buf.write("\u0474\u0478\u047e\u0486\u0491\u049c\u04a3\u04a9\u04af")
        buf.write("\u04b8\u04ba\u04c3\u04c6\u04cf\u04d2\u04db\u04de\u04e7")
        buf.write("\u04ea\u04ed\u04f1\u04f4\u04ff\u0504\u050f\u0513\u0517")
        buf.write("\u0523\u0526\u052a\u0534\u0538\u053a\u053d\u0541\u0544")
        buf.write("\u0548\u054e\u0552\u0556\u055b\u055e\u0560\u0565\u056a")
        buf.write("\u056d\u0571\u0574\u0576\u057b\u0580\u058d\u0592\u059a")
        buf.write("\u05a0\u05aa\u05b9\u05be\u05c6\u05c9\u05cd\u05d2\u05db")
        buf.write("\u05de\u05e3\u05ea\u05ed\u05f5\u05fc\u0603\u0606\u060b")
        buf.write("\u0611\u0615\u0618\u061b\u0626\u062b\u0640\u0642\u0644")
        buf.write("\u0651\u065a\u0661\u0669\u0671\u0675\u0678\u067b\u0681")
        buf.write("\u0684\u0687\u068d\u0690\u0693\u069d\u06a0\u06a4\u06ac")
        buf.write("\u06b0\u06b4\u06b6\u06bf\u06cb\u06cd\u06d4\u06db\u06e1")
        buf.write("\u06e7\u06e9\u06ee\u06f5\u06fb\u06ff\u0701\u0708\u0716")
        buf.write("\u071e\u0720\u0725\u0728\u0730\u0739\u073f\u0747\u074d")
        buf.write("\u0750\u0756\u076b\u076d\u0775\u0779\u0782\u0786\u0798")
        buf.write("\u079b\u07a3\u07ac\u07bc\u07c7\u07ce\u07d1\u07d6\u07dd")
        buf.write("\u07e7\u07e9\u07f6\u07f8\u0806\u080d\u0810\u0814\u0819")
        buf.write("\u082a\u082e\u0837\u083b\u083d\u0844\u084b\u0852\u085a")
        buf.write("\u0867\u0877\u0881\u0884\u088d\u0890\u0892\u0895\u0898")
        buf.write("\u08aa\u08b3\u08ba\u08cc\u08d1\u08d6\u08da\u08de\u08e2")
        buf.write("\u08e6\u08ea\u08ee\u08f1")
        return buf.getvalue()


class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "','", "'.'", "'/*+'", "'*/'", 
                     "'['", "']'", "':'", "'SELECT'", "'FROM'", "'ADD'", 
                     "'AS'", "'ALL'", "'DISTINCT'", "'WHERE'", "'GROUP'", 
                     "'BY'", "'GROUPING'", "'SETS'", "'CUBE'", "'ROLLUP'", 
                     "'ORDER'", "'HAVING'", "'LIMIT'", "'AT'", "'OR'", "'AND'", 
                     "'IN'", "<INVALID>", "'NO'", "'EXISTS'", "'BETWEEN'", 
                     "'LIKE'", "<INVALID>", "'IS'", "'NULL'", "'TRUE'", 
                     "'FALSE'", "'NULLS'", "'ASC'", "'DESC'", "'FOR'", "'INTERVAL'", 
                     "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'", 
                     "'CROSS'", "'OUTER'", "'INNER'", "'LEFT'", "'SEMI'", 
                     "'RIGHT'", "'FULL'", "'NATURAL'", "'ON'", "'LATERAL'", 
                     "'WINDOW'", "'OVER'", "'PARTITION'", "'RANGE'", "'ROWS'", 
                     "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", 
                     "'FIRST'", "'AFTER'", "'LAST'", "'ROW'", "'WITH'", 
                     "'VALUES'", "'CREATE'", "'TABLE'", "'VIEW'", "'REPLACE'", 
                     "'INSERT'", "'DELETE'", "'INTO'", "'DESCRIBE'", "'EXPLAIN'", 
                     "'FORMAT'", "'LOGICAL'", "'CODEGEN'", "'COST'", "'CAST'", 
                     "'SHOW'", "'TABLES'", "'COLUMNS'", "'COLUMN'", "'USE'", 
                     "'PARTITIONS'", "'FUNCTIONS'", "'DROP'", "'UNION'", 
                     "'EXCEPT'", "'MINUS'", "'INTERSECT'", "'TO'", "'TABLESAMPLE'", 
                     "'STRATIFY'", "'ALTER'", "'RENAME'", "'ARRAY'", "'MAP'", 
                     "'STRUCT'", "'COMMENT'", "'SET'", "'RESET'", "'DATA'", 
                     "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", 
                     "'MACRO'", "'IGNORE'", "'IF'", "<INVALID>", "'<=>'", 
                     "'<>'", "'!='", "'<'", "<INVALID>", "'>'", "<INVALID>", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'DIV'", "'~'", 
                     "'&'", "'|'", "'^'", "'PERCENT'", "'BUCKET'", "'OUT'", 
                     "'OF'", "'SORT'", "'CLUSTER'", "'DISTRIBUTE'", "'OVERWRITE'", 
                     "'TRANSFORM'", "'REDUCE'", "'USING'", "'SERDE'", "'SERDEPROPERTIES'", 
                     "'RECORDREADER'", "'RECORDWRITER'", "'DELIMITED'", 
                     "'FIELDS'", "'TERMINATED'", "'COLLECTION'", "'ITEMS'", 
                     "'KEYS'", "'ESCAPED'", "'LINES'", "'SEPARATED'", "'FUNCTION'", 
                     "'EXTENDED'", "'REFRESH'", "'CLEAR'", "'CACHE'", "'UNCACHE'", 
                     "'LAZY'", "'FORMATTED'", "'GLOBAL'", "<INVALID>", "'OPTIONS'", 
                     "'UNSET'", "'TBLPROPERTIES'", "'DBPROPERTIES'", "'BUCKETS'", 
                     "'SKEWED'", "'STORED'", "'DIRECTORIES'", "'LOCATION'", 
                     "'EXCHANGE'", "'ARCHIVE'", "'UNARCHIVE'", "'FILEFORMAT'", 
                     "'TOUCH'", "'COMPACT'", "'CONCATENATE'", "'CHANGE'", 
                     "'CASCADE'", "'RESTRICT'", "'CLUSTERED'", "'SORTED'", 
                     "'PURGE'", "'INPUTFORMAT'", "'OUTPUTFORMAT'", "<INVALID>", 
                     "<INVALID>", "'DFS'", "'TRUNCATE'", "'ANALYZE'", "'COMPUTE'", 
                     "'LIST'", "'STATISTICS'", "'PARTITIONED'", "'EXTERNAL'", 
                     "'DEFINED'", "'REVOKE'", "'GRANT'", "'LOCK'", "'UNLOCK'", 
                     "'MSCK'", "'REPAIR'", "'RECOVER'", "'EXPORT'", "'IMPORT'", 
                     "'LOAD'", "'ROLE'", "'ROLES'", "'COMPACTIONS'", "'PRINCIPALS'", 
                     "'TRANSACTIONS'", "'INDEX'", "'INDEXES'", "'LOCKS'", 
                     "'OPTION'", "'ANTI'", "'LOCAL'", "'INPATH'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'/**/'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "SELECT", "FROM", "ADD", 
                      "AS", "ALL", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", 
                      "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT", 
                      "AT", "OR", "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN", 
                      "LIKE", "RLIKE", "IS", "NULL", "TRUE", "FALSE", "NULLS", 
                      "ASC", "DESC", "FOR", "INTERVAL", "CASE", "WHEN", 
                      "THEN", "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER", 
                      "LEFT", "SEMI", "RIGHT", "FULL", "NATURAL", "ON", 
                      "LATERAL", "WINDOW", "OVER", "PARTITION", "RANGE", 
                      "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", "CURRENT", 
                      "FIRST", "AFTER", "LAST", "ROW", "WITH", "VALUES", 
                      "CREATE", "TABLE", "VIEW", "REPLACE", "INSERT", "DELETE", 
                      "INTO", "DESCRIBE", "EXPLAIN", "FORMAT", "LOGICAL", 
                      "CODEGEN", "COST", "CAST", "SHOW", "TABLES", "COLUMNS", 
                      "COLUMN", "USE", "PARTITIONS", "FUNCTIONS", "DROP", 
                      "UNION", "EXCEPT", "SETMINUS", "INTERSECT", "TO", 
                      "TABLESAMPLE", "STRATIFY", "ALTER", "RENAME", "ARRAY", 
                      "MAP", "STRUCT", "COMMENT", "SET", "RESET", "DATA", 
                      "START", "TRANSACTION", "COMMIT", "ROLLBACK", "MACRO", 
                      "IGNORE", "IF", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", 
                      "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "HAT", 
                      "PERCENTLIT", "BUCKET", "OUT", "OF", "SORT", "CLUSTER", 
                      "DISTRIBUTE", "OVERWRITE", "TRANSFORM", "REDUCE", 
                      "USING", "SERDE", "SERDEPROPERTIES", "RECORDREADER", 
                      "RECORDWRITER", "DELIMITED", "FIELDS", "TERMINATED", 
                      "COLLECTION", "ITEMS", "KEYS", "ESCAPED", "LINES", 
                      "SEPARATED", "FUNCTION", "EXTENDED", "REFRESH", "CLEAR", 
                      "CACHE", "UNCACHE", "LAZY", "FORMATTED", "GLOBAL", 
                      "TEMPORARY", "OPTIONS", "UNSET", "TBLPROPERTIES", 
                      "DBPROPERTIES", "BUCKETS", "SKEWED", "STORED", "DIRECTORIES", 
                      "LOCATION", "EXCHANGE", "ARCHIVE", "UNARCHIVE", "FILEFORMAT", 
                      "TOUCH", "COMPACT", "CONCATENATE", "CHANGE", "CASCADE", 
                      "RESTRICT", "CLUSTERED", "SORTED", "PURGE", "INPUTFORMAT", 
                      "OUTPUTFORMAT", "DATABASE", "DATABASES", "DFS", "TRUNCATE", 
                      "ANALYZE", "COMPUTE", "LIST", "STATISTICS", "PARTITIONED", 
                      "EXTERNAL", "DEFINED", "REVOKE", "GRANT", "LOCK", 
                      "UNLOCK", "MSCK", "REPAIR", "RECOVER", "EXPORT", "IMPORT", 
                      "LOAD", "ROLE", "ROLES", "COMPACTIONS", "PRINCIPALS", 
                      "TRANSACTIONS", "INDEX", "INDEXES", "LOCKS", "OPTION", 
                      "ANTI", "LOCAL", "INPATH", "STRING", "BIGINT_LITERAL", 
                      "SMALLINT_LITERAL", "TINYINT_LITERAL", "BYTELENGTH_LITERAL", 
                      "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_LITERAL", 
                      "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                      "SIMPLE_COMMENT", "BRACKETED_EMPTY_COMMENT", "BRACKETED_COMMENT", 
                      "WS", "UNRECOGNIZED", "DELIMITER" ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleFunctionIdentifier = 3
    RULE_singleDataType = 4
    RULE_statement = 5
    RULE_unsupportedHiveNativeCommands = 6
    RULE_createTableHeader = 7
    RULE_bucketSpec = 8
    RULE_skewSpec = 9
    RULE_locationSpec = 10
    RULE_query = 11
    RULE_insertInto = 12
    RULE_partitionSpecLocation = 13
    RULE_partitionSpec = 14
    RULE_partitionVal = 15
    RULE_describeFuncName = 16
    RULE_describeColName = 17
    RULE_ctes = 18
    RULE_namedQuery = 19
    RULE_tableProvider = 20
    RULE_tablePropertyList = 21
    RULE_tableProperty = 22
    RULE_tablePropertyKey = 23
    RULE_tablePropertyValue = 24
    RULE_constantList = 25
    RULE_nestedConstantList = 26
    RULE_createFileFormat = 27
    RULE_fileFormat = 28
    RULE_storageHandler = 29
    RULE_resource = 30
    RULE_queryNoWith = 31
    RULE_queryOrganization = 32
    RULE_multiInsertQueryBody = 33
    RULE_queryTerm = 34
    RULE_queryPrimary = 35
    RULE_sortItem = 36
    RULE_querySpecification = 37
    RULE_hint = 38
    RULE_hintStatement = 39
    RULE_fromClause = 40
    RULE_aggregation = 41
    RULE_groupingSet = 42
    RULE_lateralView = 43
    RULE_setQuantifier = 44
    RULE_relation = 45
    RULE_joinRelation = 46
    RULE_joinType = 47
    RULE_joinCriteria = 48
    RULE_sample = 49
    RULE_identifierList = 50
    RULE_identifierSeq = 51
    RULE_orderedIdentifierList = 52
    RULE_orderedIdentifier = 53
    RULE_identifierCommentList = 54
    RULE_identifierComment = 55
    RULE_relationPrimary = 56
    RULE_inlineTable = 57
    RULE_rowFormat = 58
    RULE_tableIdentifier = 59
    RULE_functionIdentifier = 60
    RULE_namedExpression = 61
    RULE_namedExpressionSeq = 62
    RULE_expression = 63
    RULE_booleanExpression = 64
    RULE_predicated = 65
    RULE_predicate = 66
    RULE_valueExpression = 67
    RULE_primaryExpression = 68
    RULE_constant = 69
    RULE_comparisonOperator = 70
    RULE_arithmeticOperator = 71
    RULE_predicateOperator = 72
    RULE_booleanValue = 73
    RULE_interval = 74
    RULE_intervalField = 75
    RULE_intervalValue = 76
    RULE_colPosition = 77
    RULE_dataType = 78
    RULE_colTypeList = 79
    RULE_colType = 80
    RULE_complexColTypeList = 81
    RULE_complexColType = 82
    RULE_whenClause = 83
    RULE_windows = 84
    RULE_namedWindow = 85
    RULE_windowSpec = 86
    RULE_windowFrame = 87
    RULE_frameBound = 88
    RULE_qualifiedName = 89
    RULE_identifier = 90
    RULE_strictIdentifier = 91
    RULE_quotedIdentifier = 92
    RULE_number = 93
    RULE_nonReserved = 94

    ruleNames =  [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "statement", 
                   "unsupportedHiveNativeCommands", "createTableHeader", 
                   "bucketSpec", "skewSpec", "locationSpec", "query", "insertInto", 
                   "partitionSpecLocation", "partitionSpec", "partitionVal", 
                   "describeFuncName", "describeColName", "ctes", "namedQuery", 
                   "tableProvider", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "queryNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "querySpecification", "hint", "hintStatement", 
                   "fromClause", "aggregation", "groupingSet", "lateralView", 
                   "setQuantifier", "relation", "joinRelation", "joinType", 
                   "joinCriteria", "sample", "identifierList", "identifierSeq", 
                   "orderedIdentifierList", "orderedIdentifier", "identifierCommentList", 
                   "identifierComment", "relationPrimary", "inlineTable", 
                   "rowFormat", "tableIdentifier", "functionIdentifier", 
                   "namedExpression", "namedExpressionSeq", "expression", 
                   "booleanExpression", "predicated", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "arithmeticOperator", "predicateOperator", "booleanValue", 
                   "interval", "intervalField", "intervalValue", "colPosition", 
                   "dataType", "colTypeList", "colType", "complexColTypeList", 
                   "complexColType", "whenClause", "windows", "namedWindow", 
                   "windowSpec", "windowFrame", "frameBound", "qualifiedName", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    SELECT=10
    FROM=11
    ADD=12
    AS=13
    ALL=14
    DISTINCT=15
    WHERE=16
    GROUP=17
    BY=18
    GROUPING=19
    SETS=20
    CUBE=21
    ROLLUP=22
    ORDER=23
    HAVING=24
    LIMIT=25
    AT=26
    OR=27
    AND=28
    IN=29
    NOT=30
    NO=31
    EXISTS=32
    BETWEEN=33
    LIKE=34
    RLIKE=35
    IS=36
    NULL=37
    TRUE=38
    FALSE=39
    NULLS=40
    ASC=41
    DESC=42
    FOR=43
    INTERVAL=44
    CASE=45
    WHEN=46
    THEN=47
    ELSE=48
    END=49
    JOIN=50
    CROSS=51
    OUTER=52
    INNER=53
    LEFT=54
    SEMI=55
    RIGHT=56
    FULL=57
    NATURAL=58
    ON=59
    LATERAL=60
    WINDOW=61
    OVER=62
    PARTITION=63
    RANGE=64
    ROWS=65
    UNBOUNDED=66
    PRECEDING=67
    FOLLOWING=68
    CURRENT=69
    FIRST=70
    AFTER=71
    LAST=72
    ROW=73
    WITH=74
    VALUES=75
    CREATE=76
    TABLE=77
    VIEW=78
    REPLACE=79
    INSERT=80
    DELETE=81
    INTO=82
    DESCRIBE=83
    EXPLAIN=84
    FORMAT=85
    LOGICAL=86
    CODEGEN=87
    COST=88
    CAST=89
    SHOW=90
    TABLES=91
    COLUMNS=92
    COLUMN=93
    USE=94
    PARTITIONS=95
    FUNCTIONS=96
    DROP=97
    UNION=98
    EXCEPT=99
    SETMINUS=100
    INTERSECT=101
    TO=102
    TABLESAMPLE=103
    STRATIFY=104
    ALTER=105
    RENAME=106
    ARRAY=107
    MAP=108
    STRUCT=109
    COMMENT=110
    SET=111
    RESET=112
    DATA=113
    START=114
    TRANSACTION=115
    COMMIT=116
    ROLLBACK=117
    MACRO=118
    IGNORE=119
    IF=120
    EQ=121
    NSEQ=122
    NEQ=123
    NEQJ=124
    LT=125
    LTE=126
    GT=127
    GTE=128
    PLUS=129
    MINUS=130
    ASTERISK=131
    SLASH=132
    PERCENT=133
    DIV=134
    TILDE=135
    AMPERSAND=136
    PIPE=137
    HAT=138
    PERCENTLIT=139
    BUCKET=140
    OUT=141
    OF=142
    SORT=143
    CLUSTER=144
    DISTRIBUTE=145
    OVERWRITE=146
    TRANSFORM=147
    REDUCE=148
    USING=149
    SERDE=150
    SERDEPROPERTIES=151
    RECORDREADER=152
    RECORDWRITER=153
    DELIMITED=154
    FIELDS=155
    TERMINATED=156
    COLLECTION=157
    ITEMS=158
    KEYS=159
    ESCAPED=160
    LINES=161
    SEPARATED=162
    FUNCTION=163
    EXTENDED=164
    REFRESH=165
    CLEAR=166
    CACHE=167
    UNCACHE=168
    LAZY=169
    FORMATTED=170
    GLOBAL=171
    TEMPORARY=172
    OPTIONS=173
    UNSET=174
    TBLPROPERTIES=175
    DBPROPERTIES=176
    BUCKETS=177
    SKEWED=178
    STORED=179
    DIRECTORIES=180
    LOCATION=181
    EXCHANGE=182
    ARCHIVE=183
    UNARCHIVE=184
    FILEFORMAT=185
    TOUCH=186
    COMPACT=187
    CONCATENATE=188
    CHANGE=189
    CASCADE=190
    RESTRICT=191
    CLUSTERED=192
    SORTED=193
    PURGE=194
    INPUTFORMAT=195
    OUTPUTFORMAT=196
    DATABASE=197
    DATABASES=198
    DFS=199
    TRUNCATE=200
    ANALYZE=201
    COMPUTE=202
    LIST=203
    STATISTICS=204
    PARTITIONED=205
    EXTERNAL=206
    DEFINED=207
    REVOKE=208
    GRANT=209
    LOCK=210
    UNLOCK=211
    MSCK=212
    REPAIR=213
    RECOVER=214
    EXPORT=215
    IMPORT=216
    LOAD=217
    ROLE=218
    ROLES=219
    COMPACTIONS=220
    PRINCIPALS=221
    TRANSACTIONS=222
    INDEX=223
    INDEXES=224
    LOCKS=225
    OPTION=226
    ANTI=227
    LOCAL=228
    INPATH=229
    STRING=230
    BIGINT_LITERAL=231
    SMALLINT_LITERAL=232
    TINYINT_LITERAL=233
    BYTELENGTH_LITERAL=234
    INTEGER_VALUE=235
    DECIMAL_VALUE=236
    DOUBLE_LITERAL=237
    BIGDECIMAL_LITERAL=238
    IDENTIFIER=239
    BACKQUOTED_IDENTIFIER=240
    SIMPLE_COMMENT=241
    BRACKETED_EMPTY_COMMENT=242
    BRACKETED_COMMENT=243
    WS=244
    UNRECOGNIZED=245
    DELIMITER=246

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



      /**
       * Verify whether current token is a valid decimal token (which contains dot).
       * Returns true if the character that follows the token is not a digit or letter or underscore.
       *
       * For example:
       * For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
       * For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
       * For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
       * For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is folllowed
       * by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
       * which is not a digit or letter or underscore.
       */
      public boolean isValidDecimal() {
        int nextChar = _input.LA(1);
        if (nextChar >= 'A' && nextChar <= 'Z' || nextChar >= '0' && nextChar <= '9' ||
          nextChar == '_') {
          return false;
        } else {
          return true;
        }
      }



    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.statement()
            self.state = 191
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.namedExpression()
            self.state = 194
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTableIdentifier" ):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTableIdentifier" ):
                listener.exitSingleTableIdentifier(self)




    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.tableIdentifier()
            self.state = 197
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleFunctionIdentifier" ):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleFunctionIdentifier" ):
                listener.exitSingleFunctionIdentifier(self)




    def singleFunctionIdentifier(self):

        localctx = SqlBaseParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.functionIdentifier()
            self.state = 200
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDataType" ):
                listener.enterSingleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDataType" ):
                listener.exitSingleDataType(self)




    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.dataType()
            self.state = 203
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)


    class DropDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetConfiguration" ):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetConfiguration" ):
                listener.exitResetConfiguration(self)


    class DescribeDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeDatabase" ):
                listener.enterDescribeDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeDatabase" ):
                listener.exitDescribeDatabase(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterViewQuery" ):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterViewQuery" ):
                listener.exitAlterViewQuery(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTempViewUsing" ):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTempViewUsing" ):
                listener.exitCreateTempViewUsing(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from = None # TableIdentifierContext
            self.to = None # TableIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(SqlBaseParser.UnsupportedHiveNativeCommandsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailNativeCommand" ):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailNativeCommand" ):
                listener.exitFailNativeCommand(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClearCache" ):
                listener.enterClearCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClearCache" ):
                listener.exitClearCache(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecoverPartitions" ):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecoverPartitions" ):
                listener.exitRecoverPartitions(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTablePartition" ):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTablePartition" ):
                listener.exitRenameTablePartition(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshResource" ):
                listener.enterRefreshResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshResource" ):
                listener.exitRefreshResource(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecLocationContext,i)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTablePartition" ):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTablePartition" ):
                listener.exitAddTablePartition(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterManageResource" ):
                listener.enterManageResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitManageResource" ):
                listener.exitManageResource(self)


    class CreateDatabaseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.comment = None # Token
            self.partitionColumns = None # ColTypeListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def bucketSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,0)

        def skewSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext,0)

        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext,0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,i)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateHiveTable" ):
                listener.enterCreateHiveTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateHiveTable" ):
                listener.exitCreateHiveTable(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None # IdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTable" ):
                listener.enterShowTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTable" ):
                listener.exitShowTable(self)


    class SetDatabasePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetDatabaseProperties" ):
                listener.enterSetDatabaseProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetDatabaseProperties" ):
                listener.exitSetDatabaseProperties(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.comment = None # Token
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)
        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def bucketSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext,0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)


    class DescribeTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeTable" ):
                listener.enterDescribeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeTable" ):
                listener.exitDescribeTable(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableLike" ):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableLike" ):
                listener.exitCreateTableLike(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncacheTable" ):
                listener.enterUncacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncacheTable" ):
                listener.exitUncacheTable(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)
        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)
        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadData" ):
                listener.enterLoadData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadData" ):
                listener.exitLoadData(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowPartitions" ):
                listener.enterShowPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowPartitions" ):
                listener.exitShowPartitions(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFunction" ):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFunction" ):
                listener.exitDescribeFunction(self)


    class ChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeColumn" ):
                listener.enterChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeColumn" ):
                listener.exitChangeColumn(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableSerDe" ):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableSerDe" ):
                listener.exitSetTableSerDe(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentListContext,0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablePartitions" ):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablePartitions" ):
                listener.exitDropTablePartitions(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetConfiguration" ):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetConfiguration" ):
                listener.exitSetConfiguration(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)


    class ShowDatabasesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDatabases" ):
                listener.enterShowDatabases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDatabases" ):
                listener.exitShowDatabases(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None # TableIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTblProperties" ):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTblProperties" ):
                listener.exitShowTblProperties(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetTableProperties" ):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetTableProperties" ):
                listener.exitUnsetTableProperties(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableLocation" ):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableLocation" ):
                listener.exitSetTableLocation(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheTable" ):
                listener.enterCacheTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheTable" ):
                listener.exitCacheTable(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddTableColumns" ):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddTableColumns" ):
                listener.exitAddTableColumns(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTableProperties" ):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTableProperties" ):
                listener.exitSetTableProperties(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 205
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(SqlBaseParser.USE)
                self.state = 207
                localctx.db = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CreateDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 208
                self.match(SqlBaseParser.CREATE)
                self.state = 209
                self.match(SqlBaseParser.DATABASE)
                self.state = 213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 210
                    self.match(SqlBaseParser.IF)
                    self.state = 211
                    self.match(SqlBaseParser.NOT)
                    self.state = 212
                    self.match(SqlBaseParser.EXISTS)


                self.state = 215
                self.identifier()
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 216
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 217
                    localctx.comment = self.match(SqlBaseParser.STRING)


                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCATION:
                    self.state = 220
                    self.locationSpec()


                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 223
                    self.match(SqlBaseParser.WITH)
                    self.state = 224
                    self.match(SqlBaseParser.DBPROPERTIES)
                    self.state = 225
                    self.tablePropertyList()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SetDatabasePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 228
                self.match(SqlBaseParser.ALTER)
                self.state = 229
                self.match(SqlBaseParser.DATABASE)
                self.state = 230
                self.identifier()
                self.state = 231
                self.match(SqlBaseParser.SET)
                self.state = 232
                self.match(SqlBaseParser.DBPROPERTIES)
                self.state = 233
                self.tablePropertyList()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 235
                self.match(SqlBaseParser.DROP)
                self.state = 236
                self.match(SqlBaseParser.DATABASE)
                self.state = 239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 237
                    self.match(SqlBaseParser.IF)
                    self.state = 238
                    self.match(SqlBaseParser.EXISTS)


                self.state = 241
                self.identifier()
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT:
                    self.state = 242
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.CASCADE or _la==SqlBaseParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 245
                self.createTableHeader()
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__0:
                    self.state = 246
                    self.match(SqlBaseParser.T__0)
                    self.state = 247
                    self.colTypeList()
                    self.state = 248
                    self.match(SqlBaseParser.T__1)


                self.state = 252
                self.tableProvider()
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OPTIONS:
                    self.state = 253
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 254
                    localctx.options = self.tablePropertyList()


                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITIONED:
                    self.state = 257
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 258
                    self.match(SqlBaseParser.BY)
                    self.state = 259
                    localctx.partitionColumnNames = self.identifierList()


                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CLUSTERED:
                    self.state = 262
                    self.bucketSpec()


                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCATION:
                    self.state = 265
                    self.locationSpec()


                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 268
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 269
                    localctx.comment = self.match(SqlBaseParser.STRING)


                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SqlBaseParser.WITH - 74)) | (1 << (SqlBaseParser.VALUES - 74)) | (1 << (SqlBaseParser.TABLE - 74)) | (1 << (SqlBaseParser.INSERT - 74)) | (1 << (SqlBaseParser.MAP - 74)))) != 0) or _la==SqlBaseParser.REDUCE:
                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 272
                        self.match(SqlBaseParser.AS)


                    self.state = 275
                    self.query()


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 278
                self.createTableHeader()
                self.state = 283
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 279
                    self.match(SqlBaseParser.T__0)
                    self.state = 280
                    localctx.columns = self.colTypeList()
                    self.state = 281
                    self.match(SqlBaseParser.T__1)


                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 285
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 286
                    localctx.comment = self.match(SqlBaseParser.STRING)


                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITIONED:
                    self.state = 289
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 290
                    self.match(SqlBaseParser.BY)
                    self.state = 291
                    self.match(SqlBaseParser.T__0)
                    self.state = 292
                    localctx.partitionColumns = self.colTypeList()
                    self.state = 293
                    self.match(SqlBaseParser.T__1)


                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.CLUSTERED:
                    self.state = 297
                    self.bucketSpec()


                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.SKEWED:
                    self.state = 300
                    self.skewSpec()


                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ROW:
                    self.state = 303
                    self.rowFormat()


                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.STORED:
                    self.state = 306
                    self.createFileFormat()


                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCATION:
                    self.state = 309
                    self.locationSpec()


                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TBLPROPERTIES:
                    self.state = 312
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 313
                    self.tablePropertyList()


                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SqlBaseParser.WITH - 74)) | (1 << (SqlBaseParser.VALUES - 74)) | (1 << (SqlBaseParser.TABLE - 74)) | (1 << (SqlBaseParser.INSERT - 74)) | (1 << (SqlBaseParser.MAP - 74)))) != 0) or _la==SqlBaseParser.REDUCE:
                    self.state = 317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 316
                        self.match(SqlBaseParser.AS)


                    self.state = 319
                    self.query()


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 322
                self.match(SqlBaseParser.CREATE)
                self.state = 323
                self.match(SqlBaseParser.TABLE)
                self.state = 327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 324
                    self.match(SqlBaseParser.IF)
                    self.state = 325
                    self.match(SqlBaseParser.NOT)
                    self.state = 326
                    self.match(SqlBaseParser.EXISTS)


                self.state = 329
                localctx.target = self.tableIdentifier()
                self.state = 330
                self.match(SqlBaseParser.LIKE)
                self.state = 331
                localctx.source = self.tableIdentifier()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCATION:
                    self.state = 332
                    self.locationSpec()


                pass

            elif la_ == 9:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 335
                self.match(SqlBaseParser.ANALYZE)
                self.state = 336
                self.match(SqlBaseParser.TABLE)
                self.state = 337
                self.tableIdentifier()
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 338
                    self.partitionSpec()


                self.state = 341
                self.match(SqlBaseParser.COMPUTE)
                self.state = 342
                self.match(SqlBaseParser.STATISTICS)
                self.state = 347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 343
                    self.identifier()

                elif la_ == 2:
                    self.state = 344
                    self.match(SqlBaseParser.FOR)
                    self.state = 345
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 346
                    self.identifierSeq()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 349
                self.match(SqlBaseParser.ALTER)
                self.state = 350
                self.match(SqlBaseParser.TABLE)
                self.state = 351
                self.tableIdentifier()
                self.state = 352
                self.match(SqlBaseParser.ADD)
                self.state = 353
                self.match(SqlBaseParser.COLUMNS)
                self.state = 354
                self.match(SqlBaseParser.T__0)
                self.state = 355
                localctx.columns = self.colTypeList()
                self.state = 356
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 358
                self.match(SqlBaseParser.ALTER)
                self.state = 359
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 360
                localctx.from = self.tableIdentifier()
                self.state = 361
                self.match(SqlBaseParser.RENAME)
                self.state = 362
                self.match(SqlBaseParser.TO)
                self.state = 363
                localctx.to = self.tableIdentifier()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 365
                self.match(SqlBaseParser.ALTER)
                self.state = 366
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 367
                self.tableIdentifier()
                self.state = 368
                self.match(SqlBaseParser.SET)
                self.state = 369
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 370
                self.tablePropertyList()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 372
                self.match(SqlBaseParser.ALTER)
                self.state = 373
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.TABLE or _la==SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 374
                self.tableIdentifier()
                self.state = 375
                self.match(SqlBaseParser.UNSET)
                self.state = 376
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 377
                    self.match(SqlBaseParser.IF)
                    self.state = 378
                    self.match(SqlBaseParser.EXISTS)


                self.state = 381
                self.tablePropertyList()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 383
                self.match(SqlBaseParser.ALTER)
                self.state = 384
                self.match(SqlBaseParser.TABLE)
                self.state = 385
                self.tableIdentifier()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 386
                    self.partitionSpec()


                self.state = 389
                self.match(SqlBaseParser.CHANGE)
                self.state = 391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 390
                    self.match(SqlBaseParser.COLUMN)


                self.state = 393
                self.identifier()
                self.state = 394
                self.colType()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FIRST or _la==SqlBaseParser.AFTER:
                    self.state = 395
                    self.colPosition()


                pass

            elif la_ == 15:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 398
                self.match(SqlBaseParser.ALTER)
                self.state = 399
                self.match(SqlBaseParser.TABLE)
                self.state = 400
                self.tableIdentifier()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 401
                    self.partitionSpec()


                self.state = 404
                self.match(SqlBaseParser.SET)
                self.state = 405
                self.match(SqlBaseParser.SERDE)
                self.state = 406
                self.match(SqlBaseParser.STRING)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.WITH:
                    self.state = 407
                    self.match(SqlBaseParser.WITH)
                    self.state = 408
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 409
                    self.tablePropertyList()


                pass

            elif la_ == 16:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 412
                self.match(SqlBaseParser.ALTER)
                self.state = 413
                self.match(SqlBaseParser.TABLE)
                self.state = 414
                self.tableIdentifier()
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 415
                    self.partitionSpec()


                self.state = 418
                self.match(SqlBaseParser.SET)
                self.state = 419
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 420
                self.tablePropertyList()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 422
                self.match(SqlBaseParser.ALTER)
                self.state = 423
                self.match(SqlBaseParser.TABLE)
                self.state = 424
                self.tableIdentifier()
                self.state = 425
                self.match(SqlBaseParser.ADD)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 426
                    self.match(SqlBaseParser.IF)
                    self.state = 427
                    self.match(SqlBaseParser.NOT)
                    self.state = 428
                    self.match(SqlBaseParser.EXISTS)


                self.state = 432 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 431
                    self.partitionSpecLocation()
                    self.state = 434 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 18:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 436
                self.match(SqlBaseParser.ALTER)
                self.state = 437
                self.match(SqlBaseParser.VIEW)
                self.state = 438
                self.tableIdentifier()
                self.state = 439
                self.match(SqlBaseParser.ADD)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 440
                    self.match(SqlBaseParser.IF)
                    self.state = 441
                    self.match(SqlBaseParser.NOT)
                    self.state = 442
                    self.match(SqlBaseParser.EXISTS)


                self.state = 446 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 445
                    self.partitionSpec()
                    self.state = 448 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 450
                self.match(SqlBaseParser.ALTER)
                self.state = 451
                self.match(SqlBaseParser.TABLE)
                self.state = 452
                self.tableIdentifier()
                self.state = 453
                localctx.from = self.partitionSpec()
                self.state = 454
                self.match(SqlBaseParser.RENAME)
                self.state = 455
                self.match(SqlBaseParser.TO)
                self.state = 456
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 458
                self.match(SqlBaseParser.ALTER)
                self.state = 459
                self.match(SqlBaseParser.TABLE)
                self.state = 460
                self.tableIdentifier()
                self.state = 461
                self.match(SqlBaseParser.DROP)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 462
                    self.match(SqlBaseParser.IF)
                    self.state = 463
                    self.match(SqlBaseParser.EXISTS)


                self.state = 466
                self.partitionSpec()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 467
                    self.match(SqlBaseParser.T__2)
                    self.state = 468
                    self.partitionSpec()
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PURGE:
                    self.state = 474
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 21:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 477
                self.match(SqlBaseParser.ALTER)
                self.state = 478
                self.match(SqlBaseParser.VIEW)
                self.state = 479
                self.tableIdentifier()
                self.state = 480
                self.match(SqlBaseParser.DROP)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IF:
                    self.state = 481
                    self.match(SqlBaseParser.IF)
                    self.state = 482
                    self.match(SqlBaseParser.EXISTS)


                self.state = 485
                self.partitionSpec()
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 486
                    self.match(SqlBaseParser.T__2)
                    self.state = 487
                    self.partitionSpec()
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 493
                self.match(SqlBaseParser.ALTER)
                self.state = 494
                self.match(SqlBaseParser.TABLE)
                self.state = 495
                self.tableIdentifier()
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 496
                    self.partitionSpec()


                self.state = 499
                self.match(SqlBaseParser.SET)
                self.state = 500
                self.locationSpec()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 502
                self.match(SqlBaseParser.ALTER)
                self.state = 503
                self.match(SqlBaseParser.TABLE)
                self.state = 504
                self.tableIdentifier()
                self.state = 505
                self.match(SqlBaseParser.RECOVER)
                self.state = 506
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 508
                self.match(SqlBaseParser.DROP)
                self.state = 509
                self.match(SqlBaseParser.TABLE)
                self.state = 512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 510
                    self.match(SqlBaseParser.IF)
                    self.state = 511
                    self.match(SqlBaseParser.EXISTS)


                self.state = 514
                self.tableIdentifier()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PURGE:
                    self.state = 515
                    self.match(SqlBaseParser.PURGE)


                pass

            elif la_ == 25:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 518
                self.match(SqlBaseParser.DROP)
                self.state = 519
                self.match(SqlBaseParser.VIEW)
                self.state = 522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 520
                    self.match(SqlBaseParser.IF)
                    self.state = 521
                    self.match(SqlBaseParser.EXISTS)


                self.state = 524
                self.tableIdentifier()
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 525
                self.match(SqlBaseParser.CREATE)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 526
                    self.match(SqlBaseParser.OR)
                    self.state = 527
                    self.match(SqlBaseParser.REPLACE)


                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GLOBAL or _la==SqlBaseParser.TEMPORARY:
                    self.state = 531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.GLOBAL:
                        self.state = 530
                        self.match(SqlBaseParser.GLOBAL)


                    self.state = 533
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 536
                self.match(SqlBaseParser.VIEW)
                self.state = 540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 537
                    self.match(SqlBaseParser.IF)
                    self.state = 538
                    self.match(SqlBaseParser.NOT)
                    self.state = 539
                    self.match(SqlBaseParser.EXISTS)


                self.state = 542
                self.tableIdentifier()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__0:
                    self.state = 543
                    self.identifierCommentList()


                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.COMMENT:
                    self.state = 546
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 547
                    self.match(SqlBaseParser.STRING)


                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITIONED:
                    self.state = 550
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 551
                    self.match(SqlBaseParser.ON)
                    self.state = 552
                    self.identifierList()


                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TBLPROPERTIES:
                    self.state = 555
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 556
                    self.tablePropertyList()


                self.state = 559
                self.match(SqlBaseParser.AS)
                self.state = 560
                self.query()
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 562
                self.match(SqlBaseParser.CREATE)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OR:
                    self.state = 563
                    self.match(SqlBaseParser.OR)
                    self.state = 564
                    self.match(SqlBaseParser.REPLACE)


                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.GLOBAL:
                    self.state = 567
                    self.match(SqlBaseParser.GLOBAL)


                self.state = 570
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 571
                self.match(SqlBaseParser.VIEW)
                self.state = 572
                self.tableIdentifier()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__0:
                    self.state = 573
                    self.match(SqlBaseParser.T__0)
                    self.state = 574
                    self.colTypeList()
                    self.state = 575
                    self.match(SqlBaseParser.T__1)


                self.state = 579
                self.tableProvider()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OPTIONS:
                    self.state = 580
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 581
                    self.tablePropertyList()


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 584
                self.match(SqlBaseParser.ALTER)
                self.state = 585
                self.match(SqlBaseParser.VIEW)
                self.state = 586
                self.tableIdentifier()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.AS:
                    self.state = 587
                    self.match(SqlBaseParser.AS)


                self.state = 590
                self.query()
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 592
                self.match(SqlBaseParser.CREATE)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TEMPORARY:
                    self.state = 593
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 596
                self.match(SqlBaseParser.FUNCTION)
                self.state = 597
                self.qualifiedName()
                self.state = 598
                self.match(SqlBaseParser.AS)
                self.state = 599
                localctx.className = self.match(SqlBaseParser.STRING)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.USING:
                    self.state = 600
                    self.match(SqlBaseParser.USING)
                    self.state = 601
                    self.resource()
                    self.state = 606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 602
                        self.match(SqlBaseParser.T__2)
                        self.state = 603
                        self.resource()
                        self.state = 608
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 30:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 611
                self.match(SqlBaseParser.DROP)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.TEMPORARY:
                    self.state = 612
                    self.match(SqlBaseParser.TEMPORARY)


                self.state = 615
                self.match(SqlBaseParser.FUNCTION)
                self.state = 618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 616
                    self.match(SqlBaseParser.IF)
                    self.state = 617
                    self.match(SqlBaseParser.EXISTS)


                self.state = 620
                self.qualifiedName()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 621
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (SqlBaseParser.LOGICAL - 86)) | (1 << (SqlBaseParser.CODEGEN - 86)) | (1 << (SqlBaseParser.COST - 86)))) != 0) or _la==SqlBaseParser.EXTENDED or _la==SqlBaseParser.FORMATTED:
                    self.state = 622
                    _la = self._input.LA(1)
                    if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (SqlBaseParser.LOGICAL - 86)) | (1 << (SqlBaseParser.CODEGEN - 86)) | (1 << (SqlBaseParser.COST - 86)))) != 0) or _la==SqlBaseParser.EXTENDED or _la==SqlBaseParser.FORMATTED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 625
                self.statement()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 626
                self.match(SqlBaseParser.SHOW)
                self.state = 627
                self.match(SqlBaseParser.TABLES)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 628
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 629
                    localctx.db = self.identifier()


                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE or _la==SqlBaseParser.STRING:
                    self.state = 633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.LIKE:
                        self.state = 632
                        self.match(SqlBaseParser.LIKE)


                    self.state = 635
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 33:
                localctx = SqlBaseParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 638
                self.match(SqlBaseParser.SHOW)
                self.state = 639
                self.match(SqlBaseParser.TABLE)
                self.state = 640
                self.match(SqlBaseParser.EXTENDED)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 641
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 642
                    localctx.db = self.identifier()


                self.state = 645
                self.match(SqlBaseParser.LIKE)
                self.state = 646
                localctx.pattern = self.match(SqlBaseParser.STRING)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 647
                    self.partitionSpec()


                pass

            elif la_ == 34:
                localctx = SqlBaseParser.ShowDatabasesContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 650
                self.match(SqlBaseParser.SHOW)
                self.state = 651
                self.match(SqlBaseParser.DATABASES)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LIKE:
                    self.state = 652
                    self.match(SqlBaseParser.LIKE)
                    self.state = 653
                    localctx.pattern = self.match(SqlBaseParser.STRING)


                pass

            elif la_ == 35:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 656
                self.match(SqlBaseParser.SHOW)
                self.state = 657
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 658
                localctx.table = self.tableIdentifier()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__0:
                    self.state = 659
                    self.match(SqlBaseParser.T__0)
                    self.state = 660
                    localctx.key = self.tablePropertyKey()
                    self.state = 661
                    self.match(SqlBaseParser.T__1)


                pass

            elif la_ == 36:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 665
                self.match(SqlBaseParser.SHOW)
                self.state = 666
                self.match(SqlBaseParser.COLUMNS)
                self.state = 667
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 668
                self.tableIdentifier()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.FROM or _la==SqlBaseParser.IN:
                    self.state = 669
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.FROM or _la==SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 670
                    localctx.db = self.identifier()


                pass

            elif la_ == 37:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 673
                self.match(SqlBaseParser.SHOW)
                self.state = 674
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 675
                self.tableIdentifier()
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 676
                    self.partitionSpec()


                pass

            elif la_ == 38:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 679
                self.match(SqlBaseParser.SHOW)
                self.state = 681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 680
                    self.identifier()


                self.state = 683
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (SqlBaseParser.DIV - 134)) | (1 << (SqlBaseParser.PERCENTLIT - 134)) | (1 << (SqlBaseParser.BUCKET - 134)) | (1 << (SqlBaseParser.OUT - 134)) | (1 << (SqlBaseParser.OF - 134)) | (1 << (SqlBaseParser.SORT - 134)) | (1 << (SqlBaseParser.CLUSTER - 134)) | (1 << (SqlBaseParser.DISTRIBUTE - 134)) | (1 << (SqlBaseParser.OVERWRITE - 134)) | (1 << (SqlBaseParser.TRANSFORM - 134)) | (1 << (SqlBaseParser.REDUCE - 134)) | (1 << (SqlBaseParser.USING - 134)) | (1 << (SqlBaseParser.SERDE - 134)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 134)) | (1 << (SqlBaseParser.RECORDREADER - 134)) | (1 << (SqlBaseParser.RECORDWRITER - 134)) | (1 << (SqlBaseParser.DELIMITED - 134)) | (1 << (SqlBaseParser.FIELDS - 134)) | (1 << (SqlBaseParser.TERMINATED - 134)) | (1 << (SqlBaseParser.COLLECTION - 134)) | (1 << (SqlBaseParser.ITEMS - 134)) | (1 << (SqlBaseParser.KEYS - 134)) | (1 << (SqlBaseParser.ESCAPED - 134)) | (1 << (SqlBaseParser.LINES - 134)) | (1 << (SqlBaseParser.SEPARATED - 134)) | (1 << (SqlBaseParser.FUNCTION - 134)) | (1 << (SqlBaseParser.EXTENDED - 134)) | (1 << (SqlBaseParser.REFRESH - 134)) | (1 << (SqlBaseParser.CLEAR - 134)) | (1 << (SqlBaseParser.CACHE - 134)) | (1 << (SqlBaseParser.UNCACHE - 134)) | (1 << (SqlBaseParser.LAZY - 134)) | (1 << (SqlBaseParser.FORMATTED - 134)) | (1 << (SqlBaseParser.GLOBAL - 134)) | (1 << (SqlBaseParser.TEMPORARY - 134)) | (1 << (SqlBaseParser.OPTIONS - 134)) | (1 << (SqlBaseParser.UNSET - 134)) | (1 << (SqlBaseParser.TBLPROPERTIES - 134)) | (1 << (SqlBaseParser.DBPROPERTIES - 134)) | (1 << (SqlBaseParser.BUCKETS - 134)) | (1 << (SqlBaseParser.SKEWED - 134)) | (1 << (SqlBaseParser.STORED - 134)) | (1 << (SqlBaseParser.DIRECTORIES - 134)) | (1 << (SqlBaseParser.LOCATION - 134)) | (1 << (SqlBaseParser.EXCHANGE - 134)) | (1 << (SqlBaseParser.ARCHIVE - 134)) | (1 << (SqlBaseParser.UNARCHIVE - 134)) | (1 << (SqlBaseParser.FILEFORMAT - 134)) | (1 << (SqlBaseParser.TOUCH - 134)) | (1 << (SqlBaseParser.COMPACT - 134)) | (1 << (SqlBaseParser.CONCATENATE - 134)) | (1 << (SqlBaseParser.CHANGE - 134)) | (1 << (SqlBaseParser.CASCADE - 134)) | (1 << (SqlBaseParser.RESTRICT - 134)) | (1 << (SqlBaseParser.CLUSTERED - 134)) | (1 << (SqlBaseParser.SORTED - 134)) | (1 << (SqlBaseParser.PURGE - 134)) | (1 << (SqlBaseParser.INPUTFORMAT - 134)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 134)) | (1 << (SqlBaseParser.DATABASE - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (SqlBaseParser.DATABASES - 198)) | (1 << (SqlBaseParser.DFS - 198)) | (1 << (SqlBaseParser.TRUNCATE - 198)) | (1 << (SqlBaseParser.ANALYZE - 198)) | (1 << (SqlBaseParser.COMPUTE - 198)) | (1 << (SqlBaseParser.LIST - 198)) | (1 << (SqlBaseParser.STATISTICS - 198)) | (1 << (SqlBaseParser.PARTITIONED - 198)) | (1 << (SqlBaseParser.EXTERNAL - 198)) | (1 << (SqlBaseParser.DEFINED - 198)) | (1 << (SqlBaseParser.REVOKE - 198)) | (1 << (SqlBaseParser.GRANT - 198)) | (1 << (SqlBaseParser.LOCK - 198)) | (1 << (SqlBaseParser.UNLOCK - 198)) | (1 << (SqlBaseParser.MSCK - 198)) | (1 << (SqlBaseParser.REPAIR - 198)) | (1 << (SqlBaseParser.RECOVER - 198)) | (1 << (SqlBaseParser.EXPORT - 198)) | (1 << (SqlBaseParser.IMPORT - 198)) | (1 << (SqlBaseParser.LOAD - 198)) | (1 << (SqlBaseParser.ROLE - 198)) | (1 << (SqlBaseParser.ROLES - 198)) | (1 << (SqlBaseParser.COMPACTIONS - 198)) | (1 << (SqlBaseParser.PRINCIPALS - 198)) | (1 << (SqlBaseParser.TRANSACTIONS - 198)) | (1 << (SqlBaseParser.INDEX - 198)) | (1 << (SqlBaseParser.INDEXES - 198)) | (1 << (SqlBaseParser.LOCKS - 198)) | (1 << (SqlBaseParser.OPTION - 198)) | (1 << (SqlBaseParser.ANTI - 198)) | (1 << (SqlBaseParser.LOCAL - 198)) | (1 << (SqlBaseParser.INPATH - 198)) | (1 << (SqlBaseParser.STRING - 198)) | (1 << (SqlBaseParser.IDENTIFIER - 198)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198)))) != 0):
                    self.state = 685
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        self.state = 684
                        self.match(SqlBaseParser.LIKE)


                    self.state = 689
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.IF, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.USING, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                        self.state = 687
                        self.qualifiedName()
                        pass
                    elif token in [SqlBaseParser.STRING]:
                        self.state = 688
                        localctx.pattern = self.match(SqlBaseParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 39:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 693
                self.match(SqlBaseParser.SHOW)
                self.state = 694
                self.match(SqlBaseParser.CREATE)
                self.state = 695
                self.match(SqlBaseParser.TABLE)
                self.state = 696
                self.tableIdentifier()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 697
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 698
                self.match(SqlBaseParser.FUNCTION)
                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 699
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 702
                self.describeFuncName()
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.DescribeDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 703
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 704
                self.match(SqlBaseParser.DATABASE)
                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 705
                    self.match(SqlBaseParser.EXTENDED)


                self.state = 708
                self.identifier()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.DescribeTableContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 709
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.DESC or _la==SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 710
                    self.match(SqlBaseParser.TABLE)


                self.state = 714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 713
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.EXTENDED or _la==SqlBaseParser.FORMATTED):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 716
                self.tableIdentifier()
                self.state = 718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 717
                    self.partitionSpec()


                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (SqlBaseParser.DIV - 134)) | (1 << (SqlBaseParser.PERCENTLIT - 134)) | (1 << (SqlBaseParser.BUCKET - 134)) | (1 << (SqlBaseParser.OUT - 134)) | (1 << (SqlBaseParser.OF - 134)) | (1 << (SqlBaseParser.SORT - 134)) | (1 << (SqlBaseParser.CLUSTER - 134)) | (1 << (SqlBaseParser.DISTRIBUTE - 134)) | (1 << (SqlBaseParser.OVERWRITE - 134)) | (1 << (SqlBaseParser.TRANSFORM - 134)) | (1 << (SqlBaseParser.REDUCE - 134)) | (1 << (SqlBaseParser.USING - 134)) | (1 << (SqlBaseParser.SERDE - 134)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 134)) | (1 << (SqlBaseParser.RECORDREADER - 134)) | (1 << (SqlBaseParser.RECORDWRITER - 134)) | (1 << (SqlBaseParser.DELIMITED - 134)) | (1 << (SqlBaseParser.FIELDS - 134)) | (1 << (SqlBaseParser.TERMINATED - 134)) | (1 << (SqlBaseParser.COLLECTION - 134)) | (1 << (SqlBaseParser.ITEMS - 134)) | (1 << (SqlBaseParser.KEYS - 134)) | (1 << (SqlBaseParser.ESCAPED - 134)) | (1 << (SqlBaseParser.LINES - 134)) | (1 << (SqlBaseParser.SEPARATED - 134)) | (1 << (SqlBaseParser.FUNCTION - 134)) | (1 << (SqlBaseParser.EXTENDED - 134)) | (1 << (SqlBaseParser.REFRESH - 134)) | (1 << (SqlBaseParser.CLEAR - 134)) | (1 << (SqlBaseParser.CACHE - 134)) | (1 << (SqlBaseParser.UNCACHE - 134)) | (1 << (SqlBaseParser.LAZY - 134)) | (1 << (SqlBaseParser.FORMATTED - 134)) | (1 << (SqlBaseParser.GLOBAL - 134)) | (1 << (SqlBaseParser.TEMPORARY - 134)) | (1 << (SqlBaseParser.OPTIONS - 134)) | (1 << (SqlBaseParser.UNSET - 134)) | (1 << (SqlBaseParser.TBLPROPERTIES - 134)) | (1 << (SqlBaseParser.DBPROPERTIES - 134)) | (1 << (SqlBaseParser.BUCKETS - 134)) | (1 << (SqlBaseParser.SKEWED - 134)) | (1 << (SqlBaseParser.STORED - 134)) | (1 << (SqlBaseParser.DIRECTORIES - 134)) | (1 << (SqlBaseParser.LOCATION - 134)) | (1 << (SqlBaseParser.EXCHANGE - 134)) | (1 << (SqlBaseParser.ARCHIVE - 134)) | (1 << (SqlBaseParser.UNARCHIVE - 134)) | (1 << (SqlBaseParser.FILEFORMAT - 134)) | (1 << (SqlBaseParser.TOUCH - 134)) | (1 << (SqlBaseParser.COMPACT - 134)) | (1 << (SqlBaseParser.CONCATENATE - 134)) | (1 << (SqlBaseParser.CHANGE - 134)) | (1 << (SqlBaseParser.CASCADE - 134)) | (1 << (SqlBaseParser.RESTRICT - 134)) | (1 << (SqlBaseParser.CLUSTERED - 134)) | (1 << (SqlBaseParser.SORTED - 134)) | (1 << (SqlBaseParser.PURGE - 134)) | (1 << (SqlBaseParser.INPUTFORMAT - 134)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 134)) | (1 << (SqlBaseParser.DATABASE - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (SqlBaseParser.DATABASES - 198)) | (1 << (SqlBaseParser.DFS - 198)) | (1 << (SqlBaseParser.TRUNCATE - 198)) | (1 << (SqlBaseParser.ANALYZE - 198)) | (1 << (SqlBaseParser.COMPUTE - 198)) | (1 << (SqlBaseParser.LIST - 198)) | (1 << (SqlBaseParser.STATISTICS - 198)) | (1 << (SqlBaseParser.PARTITIONED - 198)) | (1 << (SqlBaseParser.EXTERNAL - 198)) | (1 << (SqlBaseParser.DEFINED - 198)) | (1 << (SqlBaseParser.REVOKE - 198)) | (1 << (SqlBaseParser.GRANT - 198)) | (1 << (SqlBaseParser.LOCK - 198)) | (1 << (SqlBaseParser.UNLOCK - 198)) | (1 << (SqlBaseParser.MSCK - 198)) | (1 << (SqlBaseParser.REPAIR - 198)) | (1 << (SqlBaseParser.RECOVER - 198)) | (1 << (SqlBaseParser.EXPORT - 198)) | (1 << (SqlBaseParser.IMPORT - 198)) | (1 << (SqlBaseParser.LOAD - 198)) | (1 << (SqlBaseParser.ROLE - 198)) | (1 << (SqlBaseParser.ROLES - 198)) | (1 << (SqlBaseParser.COMPACTIONS - 198)) | (1 << (SqlBaseParser.PRINCIPALS - 198)) | (1 << (SqlBaseParser.TRANSACTIONS - 198)) | (1 << (SqlBaseParser.INDEX - 198)) | (1 << (SqlBaseParser.INDEXES - 198)) | (1 << (SqlBaseParser.LOCKS - 198)) | (1 << (SqlBaseParser.OPTION - 198)) | (1 << (SqlBaseParser.ANTI - 198)) | (1 << (SqlBaseParser.LOCAL - 198)) | (1 << (SqlBaseParser.INPATH - 198)) | (1 << (SqlBaseParser.IDENTIFIER - 198)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198)))) != 0):
                    self.state = 720
                    self.describeColName()


                pass

            elif la_ == 43:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 723
                self.match(SqlBaseParser.REFRESH)
                self.state = 724
                self.match(SqlBaseParser.TABLE)
                self.state = 725
                self.tableIdentifier()
                pass

            elif la_ == 44:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 726
                self.match(SqlBaseParser.REFRESH)
                self.state = 730
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 727
                        self.matchWildcard() 
                    self.state = 732
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                pass

            elif la_ == 45:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 733
                self.match(SqlBaseParser.CACHE)
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LAZY:
                    self.state = 734
                    self.match(SqlBaseParser.LAZY)


                self.state = 737
                self.match(SqlBaseParser.TABLE)
                self.state = 738
                self.tableIdentifier()
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.AS))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (SqlBaseParser.WITH - 74)) | (1 << (SqlBaseParser.VALUES - 74)) | (1 << (SqlBaseParser.TABLE - 74)) | (1 << (SqlBaseParser.INSERT - 74)) | (1 << (SqlBaseParser.MAP - 74)))) != 0) or _la==SqlBaseParser.REDUCE:
                    self.state = 740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.AS:
                        self.state = 739
                        self.match(SqlBaseParser.AS)


                    self.state = 742
                    self.query()


                pass

            elif la_ == 46:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 745
                self.match(SqlBaseParser.UNCACHE)
                self.state = 746
                self.match(SqlBaseParser.TABLE)
                self.state = 749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 747
                    self.match(SqlBaseParser.IF)
                    self.state = 748
                    self.match(SqlBaseParser.EXISTS)


                self.state = 751
                self.tableIdentifier()
                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 752
                self.match(SqlBaseParser.CLEAR)
                self.state = 753
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 48:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 754
                self.match(SqlBaseParser.LOAD)
                self.state = 755
                self.match(SqlBaseParser.DATA)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LOCAL:
                    self.state = 756
                    self.match(SqlBaseParser.LOCAL)


                self.state = 759
                self.match(SqlBaseParser.INPATH)
                self.state = 760
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OVERWRITE:
                    self.state = 761
                    self.match(SqlBaseParser.OVERWRITE)


                self.state = 764
                self.match(SqlBaseParser.INTO)
                self.state = 765
                self.match(SqlBaseParser.TABLE)
                self.state = 766
                self.tableIdentifier()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 767
                    self.partitionSpec()


                pass

            elif la_ == 49:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 770
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 771
                self.match(SqlBaseParser.TABLE)
                self.state = 772
                self.tableIdentifier()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 773
                    self.partitionSpec()


                pass

            elif la_ == 50:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 776
                self.match(SqlBaseParser.MSCK)
                self.state = 777
                self.match(SqlBaseParser.REPAIR)
                self.state = 778
                self.match(SqlBaseParser.TABLE)
                self.state = 779
                self.tableIdentifier()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 780
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ADD or _la==SqlBaseParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 781
                self.identifier()
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 782
                        self.matchWildcard() 
                    self.state = 787
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass

            elif la_ == 52:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 788
                self.match(SqlBaseParser.SET)
                self.state = 789
                self.match(SqlBaseParser.ROLE)
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 790
                        self.matchWildcard() 
                    self.state = 795
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                pass

            elif la_ == 53:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 796
                self.match(SqlBaseParser.SET)
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 797
                        self.matchWildcard() 
                    self.state = 802
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                pass

            elif la_ == 54:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 803
                self.match(SqlBaseParser.RESET)
                pass

            elif la_ == 55:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 804
                self.unsupportedHiveNativeCommands()
                self.state = 808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 805
                        self.matchWildcard() 
                    self.state = 810
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsupportedHiveNativeCommands" ):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsupportedHiveNativeCommands" ):
                listener.exitUnsupportedHiveNativeCommands(self)




    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 814
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 816
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 817
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 818
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 821
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 822
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 825
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 826
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 827
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 828
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 829
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 832
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 833
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 834
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 835
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 836
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 837
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 838
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 839
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 840
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 841
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 842
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 843
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 844
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 845
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 846
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 847
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 848
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 849
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 850
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 851
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 852
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 853
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 854
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 855
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 856
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 857
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 858
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 859
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 860
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 861
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 862
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 863
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 864
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 865
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 866
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 867
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 868
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 869
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 870
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 871
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 872
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 873
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 874
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 875
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 876
                self.tableIdentifier()
                self.state = 877
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 878
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 880
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 881
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 882
                self.tableIdentifier()
                self.state = 883
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 884
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 886
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 887
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 888
                self.tableIdentifier()
                self.state = 889
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 890
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 892
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 893
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 894
                self.tableIdentifier()
                self.state = 895
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 896
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 898
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 899
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 900
                self.tableIdentifier()
                self.state = 901
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 902
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 904
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 905
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 906
                self.tableIdentifier()
                self.state = 907
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 908
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 909
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 910
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 912
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 913
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 914
                self.tableIdentifier()
                self.state = 915
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 916
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 917
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 919
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 920
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 921
                self.tableIdentifier()
                self.state = 922
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 923
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 925
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 926
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 927
                self.tableIdentifier()
                self.state = 928
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 929
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 931
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 932
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 933
                self.tableIdentifier()
                self.state = 934
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 935
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 937
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 938
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 939
                self.tableIdentifier()
                self.state = 940
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 942
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 943
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 944
                self.tableIdentifier()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 945
                    self.partitionSpec()


                self.state = 948
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 950
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 951
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 952
                self.tableIdentifier()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 953
                    self.partitionSpec()


                self.state = 956
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 958
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 959
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 960
                self.tableIdentifier()
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 961
                    self.partitionSpec()


                self.state = 964
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 965
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 967
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 968
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 969
                self.tableIdentifier()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 970
                    self.partitionSpec()


                self.state = 973
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 974
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 976
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 977
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 978
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 979
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 980
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 981
                localctx.kw1 = self.match(SqlBaseParser.DELETE)
                self.state = 982
                localctx.kw2 = self.match(SqlBaseParser.FROM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableHeader" ):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableHeader" ):
                listener.exitCreateTableHeader(self)




    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(SqlBaseParser.CREATE)
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.TEMPORARY:
                self.state = 986
                self.match(SqlBaseParser.TEMPORARY)


            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.EXTERNAL:
                self.state = 989
                self.match(SqlBaseParser.EXTERNAL)


            self.state = 992
            self.match(SqlBaseParser.TABLE)
            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 993
                self.match(SqlBaseParser.IF)
                self.state = 994
                self.match(SqlBaseParser.NOT)
                self.state = 995
                self.match(SqlBaseParser.EXISTS)


            self.state = 998
            self.tableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBucketSpec" ):
                listener.enterBucketSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBucketSpec" ):
                listener.exitBucketSpec(self)




    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 1001
            self.match(SqlBaseParser.BY)
            self.state = 1002
            self.identifierList()
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.SORTED:
                self.state = 1003
                self.match(SqlBaseParser.SORTED)
                self.state = 1004
                self.match(SqlBaseParser.BY)
                self.state = 1005
                self.orderedIdentifierList()


            self.state = 1008
            self.match(SqlBaseParser.INTO)
            self.state = 1009
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 1010
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkewSpec" ):
                listener.enterSkewSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkewSpec" ):
                listener.exitSkewSpec(self)




    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(SqlBaseParser.SKEWED)
            self.state = 1013
            self.match(SqlBaseParser.BY)
            self.state = 1014
            self.identifierList()
            self.state = 1015
            self.match(SqlBaseParser.ON)
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 1016
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1017
                self.nestedConstantList()
                pass


            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1020
                self.match(SqlBaseParser.STORED)
                self.state = 1021
                self.match(SqlBaseParser.AS)
                self.state = 1022
                self.match(SqlBaseParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocationSpec" ):
                listener.enterLocationSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocationSpec" ):
                listener.exitLocationSpec(self)




    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(SqlBaseParser.LOCATION)
            self.state = 1026
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WITH:
                self.state = 1028
                self.ctes()


            self.state = 1031
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)




    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1033
                self.match(SqlBaseParser.INSERT)
                self.state = 1034
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1035
                self.match(SqlBaseParser.TABLE)
                self.state = 1036
                self.tableIdentifier()
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1037
                    self.partitionSpec()
                    self.state = 1041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.IF:
                        self.state = 1038
                        self.match(SqlBaseParser.IF)
                        self.state = 1039
                        self.match(SqlBaseParser.NOT)
                        self.state = 1040
                        self.match(SqlBaseParser.EXISTS)




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1045
                self.match(SqlBaseParser.INSERT)
                self.state = 1046
                self.match(SqlBaseParser.INTO)
                self.state = 1048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1047
                    self.match(SqlBaseParser.TABLE)


                self.state = 1050
                self.tableIdentifier()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PARTITION:
                    self.state = 1051
                    self.partitionSpec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpecLocation" ):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpecLocation" ):
                listener.exitPartitionSpecLocation(self)




    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.partitionSpec()
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.LOCATION:
                self.state = 1057
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSpec" ):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSpec" ):
                listener.exitPartitionSpec(self)




    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(SqlBaseParser.PARTITION)
            self.state = 1061
            self.match(SqlBaseParser.T__0)
            self.state = 1062
            self.partitionVal()
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1063
                self.match(SqlBaseParser.T__2)
                self.state = 1064
                self.partitionVal()
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1070
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionVal" ):
                listener.enterPartitionVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionVal" ):
                listener.exitPartitionVal(self)




    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.identifier()
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.EQ:
                self.state = 1073
                self.match(SqlBaseParser.EQ)
                self.state = 1074
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeFuncName" ):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeFuncName" ):
                listener.exitDescribeFuncName(self)




    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_describeFuncName)
        try:
            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1079
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1080
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1081
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeColName" ):
                listener.enterDescribeColName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeColName" ):
                listener.exitDescribeColName(self)




    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.identifier()
            self.state = 1092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__3:
                self.state = 1085
                self.match(SqlBaseParser.T__3)
                self.state = 1088
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.IF, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.USING, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                    self.state = 1086
                    self.identifier()
                    pass
                elif token in [SqlBaseParser.STRING]:
                    self.state = 1087
                    self.match(SqlBaseParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)




    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(SqlBaseParser.WITH)
            self.state = 1096
            self.namedQuery()
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1097
                self.match(SqlBaseParser.T__2)
                self.state = 1098
                self.namedQuery()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            localctx.name = self.identifier()
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.AS:
                self.state = 1105
                self.match(SqlBaseParser.AS)


            self.state = 1108
            self.match(SqlBaseParser.T__0)
            self.state = 1109
            self.query()
            self.state = 1110
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProvider" ):
                listener.enterTableProvider(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProvider" ):
                listener.exitTableProvider(self)




    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.match(SqlBaseParser.USING)
            self.state = 1113
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyList" ):
                listener.enterTablePropertyList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyList" ):
                listener.exitTablePropertyList(self)




    def tablePropertyList(self):

        localctx = SqlBaseParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(SqlBaseParser.T__0)
            self.state = 1116
            self.tableProperty()
            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1117
                self.match(SqlBaseParser.T__2)
                self.state = 1118
                self.tableProperty()
                self.state = 1123
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1124
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyValueContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProperty" ):
                listener.enterTableProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProperty" ):
                listener.exitTableProperty(self)




    def tableProperty(self):

        localctx = SqlBaseParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            localctx.key = self.tablePropertyKey()
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.TRUE or _la==SqlBaseParser.FALSE or _la==SqlBaseParser.EQ or ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (SqlBaseParser.STRING - 230)) | (1 << (SqlBaseParser.INTEGER_VALUE - 230)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 230)))) != 0):
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.EQ:
                    self.state = 1127
                    self.match(SqlBaseParser.EQ)


                self.state = 1130
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyKey" ):
                listener.enterTablePropertyKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyKey" ):
                listener.exitTablePropertyKey(self)




    def tablePropertyKey(self):

        localctx = SqlBaseParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 1142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.IF, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.USING, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1133
                self.identifier()
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__3:
                    self.state = 1134
                    self.match(SqlBaseParser.T__3)
                    self.state = 1135
                    self.identifier()
                    self.state = 1140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1141
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePropertyValue" ):
                listener.enterTablePropertyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePropertyValue" ):
                listener.exitTablePropertyValue(self)




    def tablePropertyValue(self):

        localctx = SqlBaseParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tablePropertyValue)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [SqlBaseParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass
            elif token in [SqlBaseParser.TRUE, SqlBaseParser.FALSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1146
                self.booleanValue()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1147
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantList" ):
                listener.enterConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantList" ):
                listener.exitConstantList(self)




    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(SqlBaseParser.T__0)
            self.state = 1151
            self.constant()
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1152
                self.match(SqlBaseParser.T__2)
                self.state = 1153
                self.constant()
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1159
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedConstantList" ):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedConstantList" ):
                listener.exitNestedConstantList(self)




    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(SqlBaseParser.T__0)
            self.state = 1162
            self.constantList()
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1163
                self.match(SqlBaseParser.T__2)
                self.state = 1164
                self.constantList()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1170
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFileFormat" ):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFileFormat" ):
                listener.exitCreateFileFormat(self)




    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_createFileFormat)
        try:
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.match(SqlBaseParser.STORED)
                self.state = 1173
                self.match(SqlBaseParser.AS)
                self.state = 1174
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1175
                self.match(SqlBaseParser.STORED)
                self.state = 1176
                self.match(SqlBaseParser.BY)
                self.state = 1177
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFileFormat" ):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFileFormat" ):
                listener.exitTableFileFormat(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericFileFormat" ):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericFileFormat" ):
                listener.exitGenericFileFormat(self)



    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fileFormat)
        try:
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1180
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1181
                localctx.inFmt = self.match(SqlBaseParser.STRING)
                self.state = 1182
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1183
                localctx.outFmt = self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageHandler" ):
                listener.enterStorageHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageHandler" ):
                listener.exitStorageHandler(self)




    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(SqlBaseParser.STRING)
            self.state = 1191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1188
                self.match(SqlBaseParser.WITH)
                self.state = 1189
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1190
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.identifier()
            self.state = 1194
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleInsertQueryContext(QueryNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleInsertQuery" ):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleInsertQuery" ):
                listener.exitSingleInsertQuery(self)


    class MultiInsertQueryContext(QueryNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MultiInsertQueryBodyContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQuery" ):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQuery" ):
                listener.exitMultiInsertQuery(self)



    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INSERT:
                    self.state = 1196
                    self.insertInto()


                self.state = 1199
                self.queryTerm(0)
                self.state = 1200
                self.queryOrganization()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.fromClause()
                self.state = 1204 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1203
                    self.multiInsertQueryBody()
                    self.state = 1206 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.SELECT or _la==SqlBaseParser.FROM or _la==SqlBaseParser.INSERT or _la==SqlBaseParser.MAP or _la==SqlBaseParser.REDUCE):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext,0)


        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOrganization" ):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOrganization" ):
                listener.exitQueryOrganization(self)




    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_queryOrganization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ORDER:
                self.state = 1210
                self.match(SqlBaseParser.ORDER)
                self.state = 1211
                self.match(SqlBaseParser.BY)
                self.state = 1212
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1213
                    self.match(SqlBaseParser.T__2)
                    self.state = 1214
                    localctx._sortItem = self.sortItem()
                    localctx.order.append(localctx._sortItem)
                    self.state = 1219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.CLUSTER:
                self.state = 1222
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1223
                self.match(SqlBaseParser.BY)
                self.state = 1224
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1225
                    self.match(SqlBaseParser.T__2)
                    self.state = 1226
                    localctx._expression = self.expression()
                    localctx.clusterBy.append(localctx._expression)
                    self.state = 1231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.DISTRIBUTE:
                self.state = 1234
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1235
                self.match(SqlBaseParser.BY)
                self.state = 1236
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1237
                    self.match(SqlBaseParser.T__2)
                    self.state = 1238
                    localctx._expression = self.expression()
                    localctx.distributeBy.append(localctx._expression)
                    self.state = 1243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.SORT:
                self.state = 1246
                self.match(SqlBaseParser.SORT)
                self.state = 1247
                self.match(SqlBaseParser.BY)
                self.state = 1248
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1249
                    self.match(SqlBaseParser.T__2)
                    self.state = 1250
                    localctx._sortItem = self.sortItem()
                    localctx.sort.append(localctx._sortItem)
                    self.state = 1255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.WINDOW:
                self.state = 1258
                self.windows()


            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.LIMIT:
                self.state = 1261
                self.match(SqlBaseParser.LIMIT)
                self.state = 1262
                localctx.limit = self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext,0)


        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiInsertQueryBody" ):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiInsertQueryBody" ):
                listener.exitMultiInsertQueryBody(self)




    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_multiInsertQueryBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.INSERT:
                self.state = 1265
                self.insertInto()


            self.state = 1268
            self.querySpecification()
            self.state = 1269
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1272
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1282
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                    self.state = 1274
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1275
                    localctx.operator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (SqlBaseParser.UNION - 98)) | (1 << (SqlBaseParser.EXCEPT - 98)) | (1 << (SqlBaseParser.SETMINUS - 98)) | (1 << (SqlBaseParser.INTERSECT - 98)))) != 0)):
                        localctx.operator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT:
                        self.state = 1276
                        self.setQuantifier()


                    self.state = 1279
                    localctx.right = self.queryTerm(2) 
                self.state = 1284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault1" ):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault1" ):
                listener.exitInlineTableDefault1(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)



    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_queryPrimary)
        try:
            self.state = 1293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.MAP, SqlBaseParser.REDUCE]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1285
                self.querySpecification()
                pass
            elif token in [SqlBaseParser.TABLE]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1286
                self.match(SqlBaseParser.TABLE)
                self.state = 1287
                self.tableIdentifier()
                pass
            elif token in [SqlBaseParser.VALUES]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1288
                self.inlineTable()
                pass
            elif token in [SqlBaseParser.T__0]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1289
                self.match(SqlBaseParser.T__0)
                self.state = 1290
                self.queryNoWith()
                self.state = 1291
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.expression()
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC:
                self.state = 1296
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.NULLS:
                self.state = 1299
                self.match(SqlBaseParser.NULLS)
                self.state = 1300
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.FIRST or _la==SqlBaseParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token
            self.where = None # BooleanExpressionContext
            self._hint = None # HintContext
            self.hints = list() # of HintContexts
            self.having = None # BooleanExpressionContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext,0)


        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext,0)


        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext,i)


        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)


        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def aggregation(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationContext,0)


        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 1396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1313
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT]:
                    self.state = 1303
                    self.match(SqlBaseParser.SELECT)
                    self.state = 1304
                    localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                    self.state = 1305
                    self.match(SqlBaseParser.T__0)
                    self.state = 1306
                    self.namedExpressionSeq()
                    self.state = 1307
                    self.match(SqlBaseParser.T__1)
                    pass
                elif token in [SqlBaseParser.MAP]:
                    self.state = 1309
                    localctx.kind = self.match(SqlBaseParser.MAP)
                    self.state = 1310
                    self.namedExpressionSeq()
                    pass
                elif token in [SqlBaseParser.REDUCE]:
                    self.state = 1311
                    localctx.kind = self.match(SqlBaseParser.REDUCE)
                    self.state = 1312
                    self.namedExpressionSeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ROW:
                    self.state = 1315
                    localctx.inRowFormat = self.rowFormat()


                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.RECORDWRITER:
                    self.state = 1318
                    self.match(SqlBaseParser.RECORDWRITER)
                    self.state = 1319
                    localctx.recordWriter = self.match(SqlBaseParser.STRING)


                self.state = 1322
                self.match(SqlBaseParser.USING)
                self.state = 1323
                localctx.script = self.match(SqlBaseParser.STRING)
                self.state = 1336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1324
                    self.match(SqlBaseParser.AS)
                    self.state = 1334
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                    if la_ == 1:
                        self.state = 1325
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 1326
                        self.colTypeList()
                        pass

                    elif la_ == 3:
                        self.state = 1327
                        self.match(SqlBaseParser.T__0)
                        self.state = 1330
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                        if la_ == 1:
                            self.state = 1328
                            self.identifierSeq()
                            pass

                        elif la_ == 2:
                            self.state = 1329
                            self.colTypeList()
                            pass


                        self.state = 1332
                        self.match(SqlBaseParser.T__1)
                        pass




                self.state = 1339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1338
                    localctx.outRowFormat = self.rowFormat()


                self.state = 1343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1341
                    self.match(SqlBaseParser.RECORDREADER)
                    self.state = 1342
                    localctx.recordReader = self.match(SqlBaseParser.STRING)


                self.state = 1346
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1345
                    self.fromClause()


                self.state = 1350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1348
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1349
                    localctx.where = self.booleanExpression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT]:
                    self.state = 1352
                    localctx.kind = self.match(SqlBaseParser.SELECT)
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__4:
                        self.state = 1353
                        localctx._hint = self.hint()
                        localctx.hints.append(localctx._hint)
                        self.state = 1358
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1360
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        self.state = 1359
                        self.setQuantifier()


                    self.state = 1362
                    self.namedExpressionSeq()
                    self.state = 1364
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        self.state = 1363
                        self.fromClause()


                    pass
                elif token in [SqlBaseParser.FROM]:
                    self.state = 1366
                    self.fromClause()
                    self.state = 1372
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        self.state = 1367
                        localctx.kind = self.match(SqlBaseParser.SELECT)
                        self.state = 1369
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                        if la_ == 1:
                            self.state = 1368
                            self.setQuantifier()


                        self.state = 1371
                        self.namedExpressionSeq()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1376
                        self.lateralView() 
                    self.state = 1381
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

                self.state = 1384
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1382
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1383
                    localctx.where = self.booleanExpression(0)


                self.state = 1387
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1386
                    self.aggregation()


                self.state = 1391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1389
                    self.match(SqlBaseParser.HAVING)
                    self.state = 1390
                    localctx.having = self.booleanExpression(0)


                self.state = 1394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1393
                    self.windows()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintStatementContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHint" ):
                listener.enterHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHint" ):
                listener.exitHint(self)




    def hint(self):

        localctx = SqlBaseParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(SqlBaseParser.T__4)
            self.state = 1399
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__2) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (SqlBaseParser.DIV - 134)) | (1 << (SqlBaseParser.PERCENTLIT - 134)) | (1 << (SqlBaseParser.BUCKET - 134)) | (1 << (SqlBaseParser.OUT - 134)) | (1 << (SqlBaseParser.OF - 134)) | (1 << (SqlBaseParser.SORT - 134)) | (1 << (SqlBaseParser.CLUSTER - 134)) | (1 << (SqlBaseParser.DISTRIBUTE - 134)) | (1 << (SqlBaseParser.OVERWRITE - 134)) | (1 << (SqlBaseParser.TRANSFORM - 134)) | (1 << (SqlBaseParser.REDUCE - 134)) | (1 << (SqlBaseParser.USING - 134)) | (1 << (SqlBaseParser.SERDE - 134)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 134)) | (1 << (SqlBaseParser.RECORDREADER - 134)) | (1 << (SqlBaseParser.RECORDWRITER - 134)) | (1 << (SqlBaseParser.DELIMITED - 134)) | (1 << (SqlBaseParser.FIELDS - 134)) | (1 << (SqlBaseParser.TERMINATED - 134)) | (1 << (SqlBaseParser.COLLECTION - 134)) | (1 << (SqlBaseParser.ITEMS - 134)) | (1 << (SqlBaseParser.KEYS - 134)) | (1 << (SqlBaseParser.ESCAPED - 134)) | (1 << (SqlBaseParser.LINES - 134)) | (1 << (SqlBaseParser.SEPARATED - 134)) | (1 << (SqlBaseParser.FUNCTION - 134)) | (1 << (SqlBaseParser.EXTENDED - 134)) | (1 << (SqlBaseParser.REFRESH - 134)) | (1 << (SqlBaseParser.CLEAR - 134)) | (1 << (SqlBaseParser.CACHE - 134)) | (1 << (SqlBaseParser.UNCACHE - 134)) | (1 << (SqlBaseParser.LAZY - 134)) | (1 << (SqlBaseParser.FORMATTED - 134)) | (1 << (SqlBaseParser.GLOBAL - 134)) | (1 << (SqlBaseParser.TEMPORARY - 134)) | (1 << (SqlBaseParser.OPTIONS - 134)) | (1 << (SqlBaseParser.UNSET - 134)) | (1 << (SqlBaseParser.TBLPROPERTIES - 134)) | (1 << (SqlBaseParser.DBPROPERTIES - 134)) | (1 << (SqlBaseParser.BUCKETS - 134)) | (1 << (SqlBaseParser.SKEWED - 134)) | (1 << (SqlBaseParser.STORED - 134)) | (1 << (SqlBaseParser.DIRECTORIES - 134)) | (1 << (SqlBaseParser.LOCATION - 134)) | (1 << (SqlBaseParser.EXCHANGE - 134)) | (1 << (SqlBaseParser.ARCHIVE - 134)) | (1 << (SqlBaseParser.UNARCHIVE - 134)) | (1 << (SqlBaseParser.FILEFORMAT - 134)) | (1 << (SqlBaseParser.TOUCH - 134)) | (1 << (SqlBaseParser.COMPACT - 134)) | (1 << (SqlBaseParser.CONCATENATE - 134)) | (1 << (SqlBaseParser.CHANGE - 134)) | (1 << (SqlBaseParser.CASCADE - 134)) | (1 << (SqlBaseParser.RESTRICT - 134)) | (1 << (SqlBaseParser.CLUSTERED - 134)) | (1 << (SqlBaseParser.SORTED - 134)) | (1 << (SqlBaseParser.PURGE - 134)) | (1 << (SqlBaseParser.INPUTFORMAT - 134)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 134)) | (1 << (SqlBaseParser.DATABASE - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (SqlBaseParser.DATABASES - 198)) | (1 << (SqlBaseParser.DFS - 198)) | (1 << (SqlBaseParser.TRUNCATE - 198)) | (1 << (SqlBaseParser.ANALYZE - 198)) | (1 << (SqlBaseParser.COMPUTE - 198)) | (1 << (SqlBaseParser.LIST - 198)) | (1 << (SqlBaseParser.STATISTICS - 198)) | (1 << (SqlBaseParser.PARTITIONED - 198)) | (1 << (SqlBaseParser.EXTERNAL - 198)) | (1 << (SqlBaseParser.DEFINED - 198)) | (1 << (SqlBaseParser.REVOKE - 198)) | (1 << (SqlBaseParser.GRANT - 198)) | (1 << (SqlBaseParser.LOCK - 198)) | (1 << (SqlBaseParser.UNLOCK - 198)) | (1 << (SqlBaseParser.MSCK - 198)) | (1 << (SqlBaseParser.REPAIR - 198)) | (1 << (SqlBaseParser.RECOVER - 198)) | (1 << (SqlBaseParser.EXPORT - 198)) | (1 << (SqlBaseParser.IMPORT - 198)) | (1 << (SqlBaseParser.LOAD - 198)) | (1 << (SqlBaseParser.ROLE - 198)) | (1 << (SqlBaseParser.ROLES - 198)) | (1 << (SqlBaseParser.COMPACTIONS - 198)) | (1 << (SqlBaseParser.PRINCIPALS - 198)) | (1 << (SqlBaseParser.TRANSACTIONS - 198)) | (1 << (SqlBaseParser.INDEX - 198)) | (1 << (SqlBaseParser.INDEXES - 198)) | (1 << (SqlBaseParser.LOCKS - 198)) | (1 << (SqlBaseParser.OPTION - 198)) | (1 << (SqlBaseParser.ANTI - 198)) | (1 << (SqlBaseParser.LOCAL - 198)) | (1 << (SqlBaseParser.INPATH - 198)) | (1 << (SqlBaseParser.IDENTIFIER - 198)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198)))) != 0):
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.T__2:
                    self.state = 1400
                    self.match(SqlBaseParser.T__2)


                self.state = 1403
                localctx._hintStatement = self.hintStatement()
                localctx.hintStatements.append(localctx._hintStatement)
                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1409
            self.match(SqlBaseParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_hintStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHintStatement" ):
                listener.enterHintStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHintStatement" ):
                listener.exitHintStatement(self)




    def hintStatement(self):

        localctx = SqlBaseParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 1424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1411
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1412
                localctx.hintName = self.identifier()
                self.state = 1413
                self.match(SqlBaseParser.T__0)
                self.state = 1414
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1415
                    self.match(SqlBaseParser.T__2)
                    self.state = 1416
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1422
                self.match(SqlBaseParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.match(SqlBaseParser.FROM)
            self.state = 1427
            self.relation()
            self.state = 1432
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,185,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1428
                    self.match(SqlBaseParser.T__2)
                    self.state = 1429
                    self.relation() 
                self.state = 1434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

            self.state = 1438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1435
                    self.lateralView() 
                self.state = 1440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregation" ):
                listener.enterAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregation" ):
                listener.exitAggregation(self)




    def aggregation(self):

        localctx = SqlBaseParser.AggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_aggregation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(SqlBaseParser.GROUP)
            self.state = 1442
            self.match(SqlBaseParser.BY)
            self.state = 1443
            localctx._expression = self.expression()
            localctx.groupingExpressions.append(localctx._expression)
            self.state = 1448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1444
                    self.match(SqlBaseParser.T__2)
                    self.state = 1445
                    localctx._expression = self.expression()
                    localctx.groupingExpressions.append(localctx._expression) 
                self.state = 1450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

            self.state = 1468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1451
                self.match(SqlBaseParser.WITH)
                self.state = 1452
                localctx.kind = self.match(SqlBaseParser.ROLLUP)

            elif la_ == 2:
                self.state = 1453
                self.match(SqlBaseParser.WITH)
                self.state = 1454
                localctx.kind = self.match(SqlBaseParser.CUBE)

            elif la_ == 3:
                self.state = 1455
                localctx.kind = self.match(SqlBaseParser.GROUPING)
                self.state = 1456
                self.match(SqlBaseParser.SETS)
                self.state = 1457
                self.match(SqlBaseParser.T__0)
                self.state = 1458
                self.groupingSet()
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1459
                    self.match(SqlBaseParser.T__2)
                    self.state = 1460
                    self.groupingSet()
                    self.state = 1465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1466
                self.match(SqlBaseParser.T__1)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)




    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1470
                self.match(SqlBaseParser.T__0)
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.PLUS - 129)) | (1 << (SqlBaseParser.MINUS - 129)) | (1 << (SqlBaseParser.ASTERISK - 129)) | (1 << (SqlBaseParser.DIV - 129)) | (1 << (SqlBaseParser.TILDE - 129)) | (1 << (SqlBaseParser.PERCENTLIT - 129)) | (1 << (SqlBaseParser.BUCKET - 129)) | (1 << (SqlBaseParser.OUT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.SORT - 129)) | (1 << (SqlBaseParser.CLUSTER - 129)) | (1 << (SqlBaseParser.DISTRIBUTE - 129)) | (1 << (SqlBaseParser.OVERWRITE - 129)) | (1 << (SqlBaseParser.TRANSFORM - 129)) | (1 << (SqlBaseParser.REDUCE - 129)) | (1 << (SqlBaseParser.USING - 129)) | (1 << (SqlBaseParser.SERDE - 129)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 129)) | (1 << (SqlBaseParser.RECORDREADER - 129)) | (1 << (SqlBaseParser.RECORDWRITER - 129)) | (1 << (SqlBaseParser.DELIMITED - 129)) | (1 << (SqlBaseParser.FIELDS - 129)) | (1 << (SqlBaseParser.TERMINATED - 129)) | (1 << (SqlBaseParser.COLLECTION - 129)) | (1 << (SqlBaseParser.ITEMS - 129)) | (1 << (SqlBaseParser.KEYS - 129)) | (1 << (SqlBaseParser.ESCAPED - 129)) | (1 << (SqlBaseParser.LINES - 129)) | (1 << (SqlBaseParser.SEPARATED - 129)) | (1 << (SqlBaseParser.FUNCTION - 129)) | (1 << (SqlBaseParser.EXTENDED - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.CLEAR - 129)) | (1 << (SqlBaseParser.CACHE - 129)) | (1 << (SqlBaseParser.UNCACHE - 129)) | (1 << (SqlBaseParser.LAZY - 129)) | (1 << (SqlBaseParser.FORMATTED - 129)) | (1 << (SqlBaseParser.GLOBAL - 129)) | (1 << (SqlBaseParser.TEMPORARY - 129)) | (1 << (SqlBaseParser.OPTIONS - 129)) | (1 << (SqlBaseParser.UNSET - 129)) | (1 << (SqlBaseParser.TBLPROPERTIES - 129)) | (1 << (SqlBaseParser.DBPROPERTIES - 129)) | (1 << (SqlBaseParser.BUCKETS - 129)) | (1 << (SqlBaseParser.SKEWED - 129)) | (1 << (SqlBaseParser.STORED - 129)) | (1 << (SqlBaseParser.DIRECTORIES - 129)) | (1 << (SqlBaseParser.LOCATION - 129)) | (1 << (SqlBaseParser.EXCHANGE - 129)) | (1 << (SqlBaseParser.ARCHIVE - 129)) | (1 << (SqlBaseParser.UNARCHIVE - 129)) | (1 << (SqlBaseParser.FILEFORMAT - 129)) | (1 << (SqlBaseParser.TOUCH - 129)) | (1 << (SqlBaseParser.COMPACT - 129)) | (1 << (SqlBaseParser.CONCATENATE - 129)) | (1 << (SqlBaseParser.CHANGE - 129)) | (1 << (SqlBaseParser.CASCADE - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.CLUSTERED - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.SORTED - 193)) | (1 << (SqlBaseParser.PURGE - 193)) | (1 << (SqlBaseParser.INPUTFORMAT - 193)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 193)) | (1 << (SqlBaseParser.DATABASE - 193)) | (1 << (SqlBaseParser.DATABASES - 193)) | (1 << (SqlBaseParser.DFS - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.ANALYZE - 193)) | (1 << (SqlBaseParser.COMPUTE - 193)) | (1 << (SqlBaseParser.LIST - 193)) | (1 << (SqlBaseParser.STATISTICS - 193)) | (1 << (SqlBaseParser.PARTITIONED - 193)) | (1 << (SqlBaseParser.EXTERNAL - 193)) | (1 << (SqlBaseParser.DEFINED - 193)) | (1 << (SqlBaseParser.REVOKE - 193)) | (1 << (SqlBaseParser.GRANT - 193)) | (1 << (SqlBaseParser.LOCK - 193)) | (1 << (SqlBaseParser.UNLOCK - 193)) | (1 << (SqlBaseParser.MSCK - 193)) | (1 << (SqlBaseParser.REPAIR - 193)) | (1 << (SqlBaseParser.RECOVER - 193)) | (1 << (SqlBaseParser.EXPORT - 193)) | (1 << (SqlBaseParser.IMPORT - 193)) | (1 << (SqlBaseParser.LOAD - 193)) | (1 << (SqlBaseParser.ROLE - 193)) | (1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.COMPACTIONS - 193)) | (1 << (SqlBaseParser.PRINCIPALS - 193)) | (1 << (SqlBaseParser.TRANSACTIONS - 193)) | (1 << (SqlBaseParser.INDEX - 193)) | (1 << (SqlBaseParser.INDEXES - 193)) | (1 << (SqlBaseParser.LOCKS - 193)) | (1 << (SqlBaseParser.OPTION - 193)) | (1 << (SqlBaseParser.ANTI - 193)) | (1 << (SqlBaseParser.LOCAL - 193)) | (1 << (SqlBaseParser.INPATH - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 193)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 193)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 193)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)))) != 0):
                    self.state = 1471
                    self.expression()
                    self.state = 1476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1472
                        self.match(SqlBaseParser.T__2)
                        self.state = 1473
                        self.expression()
                        self.state = 1478
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1481
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1482
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralView" ):
                listener.enterLateralView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralView" ):
                listener.exitLateralView(self)




    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(SqlBaseParser.LATERAL)
            self.state = 1486
            self.match(SqlBaseParser.VIEW)
            self.state = 1488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1487
                self.match(SqlBaseParser.OUTER)


            self.state = 1490
            self.qualifiedName()
            self.state = 1491
            self.match(SqlBaseParser.T__0)
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.PLUS - 129)) | (1 << (SqlBaseParser.MINUS - 129)) | (1 << (SqlBaseParser.ASTERISK - 129)) | (1 << (SqlBaseParser.DIV - 129)) | (1 << (SqlBaseParser.TILDE - 129)) | (1 << (SqlBaseParser.PERCENTLIT - 129)) | (1 << (SqlBaseParser.BUCKET - 129)) | (1 << (SqlBaseParser.OUT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.SORT - 129)) | (1 << (SqlBaseParser.CLUSTER - 129)) | (1 << (SqlBaseParser.DISTRIBUTE - 129)) | (1 << (SqlBaseParser.OVERWRITE - 129)) | (1 << (SqlBaseParser.TRANSFORM - 129)) | (1 << (SqlBaseParser.REDUCE - 129)) | (1 << (SqlBaseParser.USING - 129)) | (1 << (SqlBaseParser.SERDE - 129)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 129)) | (1 << (SqlBaseParser.RECORDREADER - 129)) | (1 << (SqlBaseParser.RECORDWRITER - 129)) | (1 << (SqlBaseParser.DELIMITED - 129)) | (1 << (SqlBaseParser.FIELDS - 129)) | (1 << (SqlBaseParser.TERMINATED - 129)) | (1 << (SqlBaseParser.COLLECTION - 129)) | (1 << (SqlBaseParser.ITEMS - 129)) | (1 << (SqlBaseParser.KEYS - 129)) | (1 << (SqlBaseParser.ESCAPED - 129)) | (1 << (SqlBaseParser.LINES - 129)) | (1 << (SqlBaseParser.SEPARATED - 129)) | (1 << (SqlBaseParser.FUNCTION - 129)) | (1 << (SqlBaseParser.EXTENDED - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.CLEAR - 129)) | (1 << (SqlBaseParser.CACHE - 129)) | (1 << (SqlBaseParser.UNCACHE - 129)) | (1 << (SqlBaseParser.LAZY - 129)) | (1 << (SqlBaseParser.FORMATTED - 129)) | (1 << (SqlBaseParser.GLOBAL - 129)) | (1 << (SqlBaseParser.TEMPORARY - 129)) | (1 << (SqlBaseParser.OPTIONS - 129)) | (1 << (SqlBaseParser.UNSET - 129)) | (1 << (SqlBaseParser.TBLPROPERTIES - 129)) | (1 << (SqlBaseParser.DBPROPERTIES - 129)) | (1 << (SqlBaseParser.BUCKETS - 129)) | (1 << (SqlBaseParser.SKEWED - 129)) | (1 << (SqlBaseParser.STORED - 129)) | (1 << (SqlBaseParser.DIRECTORIES - 129)) | (1 << (SqlBaseParser.LOCATION - 129)) | (1 << (SqlBaseParser.EXCHANGE - 129)) | (1 << (SqlBaseParser.ARCHIVE - 129)) | (1 << (SqlBaseParser.UNARCHIVE - 129)) | (1 << (SqlBaseParser.FILEFORMAT - 129)) | (1 << (SqlBaseParser.TOUCH - 129)) | (1 << (SqlBaseParser.COMPACT - 129)) | (1 << (SqlBaseParser.CONCATENATE - 129)) | (1 << (SqlBaseParser.CHANGE - 129)) | (1 << (SqlBaseParser.CASCADE - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.CLUSTERED - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.SORTED - 193)) | (1 << (SqlBaseParser.PURGE - 193)) | (1 << (SqlBaseParser.INPUTFORMAT - 193)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 193)) | (1 << (SqlBaseParser.DATABASE - 193)) | (1 << (SqlBaseParser.DATABASES - 193)) | (1 << (SqlBaseParser.DFS - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.ANALYZE - 193)) | (1 << (SqlBaseParser.COMPUTE - 193)) | (1 << (SqlBaseParser.LIST - 193)) | (1 << (SqlBaseParser.STATISTICS - 193)) | (1 << (SqlBaseParser.PARTITIONED - 193)) | (1 << (SqlBaseParser.EXTERNAL - 193)) | (1 << (SqlBaseParser.DEFINED - 193)) | (1 << (SqlBaseParser.REVOKE - 193)) | (1 << (SqlBaseParser.GRANT - 193)) | (1 << (SqlBaseParser.LOCK - 193)) | (1 << (SqlBaseParser.UNLOCK - 193)) | (1 << (SqlBaseParser.MSCK - 193)) | (1 << (SqlBaseParser.REPAIR - 193)) | (1 << (SqlBaseParser.RECOVER - 193)) | (1 << (SqlBaseParser.EXPORT - 193)) | (1 << (SqlBaseParser.IMPORT - 193)) | (1 << (SqlBaseParser.LOAD - 193)) | (1 << (SqlBaseParser.ROLE - 193)) | (1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.COMPACTIONS - 193)) | (1 << (SqlBaseParser.PRINCIPALS - 193)) | (1 << (SqlBaseParser.TRANSACTIONS - 193)) | (1 << (SqlBaseParser.INDEX - 193)) | (1 << (SqlBaseParser.INDEXES - 193)) | (1 << (SqlBaseParser.LOCKS - 193)) | (1 << (SqlBaseParser.OPTION - 193)) | (1 << (SqlBaseParser.ANTI - 193)) | (1 << (SqlBaseParser.LOCAL - 193)) | (1 << (SqlBaseParser.INPATH - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 193)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 193)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 193)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)))) != 0):
                self.state = 1492
                self.expression()
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1493
                    self.match(SqlBaseParser.T__2)
                    self.state = 1494
                    self.expression()
                    self.state = 1499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1502
            self.match(SqlBaseParser.T__1)
            self.state = 1503
            localctx.tblName = self.identifier()
            self.state = 1515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1504
                    self.match(SqlBaseParser.AS)


                self.state = 1507
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 1512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1508
                        self.match(SqlBaseParser.T__2)
                        self.state = 1509
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 1514
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)




    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.ALL or _la==SqlBaseParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)




    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.relationPrimary()
            self.state = 1523
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,199,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1520
                    self.joinRelation() 
                self.state = 1525
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,199,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)




    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_joinRelation)
        try:
            self.state = 1537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.ANTI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1526
                self.joinType()
                self.state = 1527
                self.match(SqlBaseParser.JOIN)
                self.state = 1528
                localctx.right = self.relationPrimary()
                self.state = 1530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1529
                    self.joinCriteria()


                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1532
                self.match(SqlBaseParser.NATURAL)
                self.state = 1533
                self.joinType()
                self.state = 1534
                self.match(SqlBaseParser.JOIN)
                self.state = 1535
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.INNER:
                    self.state = 1539
                    self.match(SqlBaseParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1542
                self.match(SqlBaseParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1543
                self.match(SqlBaseParser.LEFT)
                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1544
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1547
                self.match(SqlBaseParser.LEFT)
                self.state = 1548
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1549
                self.match(SqlBaseParser.RIGHT)
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1550
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1553
                self.match(SqlBaseParser.FULL)
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.OUTER:
                    self.state = 1554
                    self.match(SqlBaseParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.LEFT:
                    self.state = 1557
                    self.match(SqlBaseParser.LEFT)


                self.state = 1560
                self.match(SqlBaseParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1563
                self.match(SqlBaseParser.ON)
                self.state = 1564
                self.booleanExpression(0)
                pass
            elif token in [SqlBaseParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1565
                self.match(SqlBaseParser.USING)
                self.state = 1566
                self.match(SqlBaseParser.T__0)
                self.state = 1567
                self.identifier()
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1568
                    self.match(SqlBaseParser.T__2)
                    self.state = 1569
                    self.identifier()
                    self.state = 1574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1575
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # Token
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def BYTELENGTH_LITERAL(self):
            return self.getToken(SqlBaseParser.BYTELENGTH_LITERAL, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)




    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_sample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 1580
            self.match(SqlBaseParser.T__0)
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1581
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.INTEGER_VALUE or _la==SqlBaseParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1582
                localctx.sampleType = self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                self.state = 1583
                self.expression()
                self.state = 1584
                localctx.sampleType = self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                self.state = 1586
                localctx.sampleType = self.match(SqlBaseParser.BYTELENGTH_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1587
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 1588
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1589
                self.match(SqlBaseParser.OUT)
                self.state = 1590
                self.match(SqlBaseParser.OF)
                self.state = 1591
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ON:
                    self.state = 1592
                    self.match(SqlBaseParser.ON)
                    self.state = 1598
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                    if la_ == 1:
                        self.state = 1593
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 1594
                        self.qualifiedName()
                        self.state = 1595
                        self.match(SqlBaseParser.T__0)
                        self.state = 1596
                        self.match(SqlBaseParser.T__1)
                        pass




                pass


            self.state = 1604
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self.match(SqlBaseParser.T__0)
            self.state = 1607
            self.identifierSeq()
            self.state = 1608
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierSeq" ):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierSeq" ):
                listener.exitIdentifierSeq(self)




    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.identifier()
            self.state = 1615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1611
                    self.match(SqlBaseParser.T__2)
                    self.state = 1612
                    self.identifier() 
                self.state = 1617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifierList" ):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifierList" ):
                listener.exitOrderedIdentifierList(self)




    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.match(SqlBaseParser.T__0)
            self.state = 1619
            self.orderedIdentifier()
            self.state = 1624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1620
                self.match(SqlBaseParser.T__2)
                self.state = 1621
                self.orderedIdentifier()
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1627
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderedIdentifier" ):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderedIdentifier" ):
                listener.exitOrderedIdentifier(self)




    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.identifier()
            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC:
                self.state = 1630
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.ASC or _la==SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierCommentList" ):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierCommentList" ):
                listener.exitIdentifierCommentList(self)




    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(SqlBaseParser.T__0)
            self.state = 1634
            self.identifierComment()
            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 1635
                self.match(SqlBaseParser.T__2)
                self.state = 1636
                self.identifierComment()
                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1642
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierComment" ):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierComment" ):
                listener.exitIdentifierComment(self)




    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.identifier()
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 1645
                self.match(SqlBaseParser.COMMENT)
                self.state = 1646
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableValuedFunction" ):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableValuedFunction" ):
                listener.exitTableValuedFunction(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTableDefault2" ):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTableDefault2" ):
                listener.exitInlineTableDefault2(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuery" ):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuery" ):
                listener.exitAliasedQuery(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext,0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext,0)

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 1698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1649
                self.tableIdentifier()
                self.state = 1651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1650
                    self.sample()


                self.state = 1657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1654
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                    if la_ == 1:
                        self.state = 1653
                        self.match(SqlBaseParser.AS)


                    self.state = 1656
                    self.strictIdentifier()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1659
                self.match(SqlBaseParser.T__0)
                self.state = 1660
                self.queryNoWith()
                self.state = 1661
                self.match(SqlBaseParser.T__1)
                self.state = 1663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1662
                    self.sample()


                self.state = 1669
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 1666
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                    if la_ == 1:
                        self.state = 1665
                        self.match(SqlBaseParser.AS)


                    self.state = 1668
                    self.strictIdentifier()


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1671
                self.match(SqlBaseParser.T__0)
                self.state = 1672
                self.relation()
                self.state = 1673
                self.match(SqlBaseParser.T__1)
                self.state = 1675
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 1674
                    self.sample()


                self.state = 1681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1678
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                    if la_ == 1:
                        self.state = 1677
                        self.match(SqlBaseParser.AS)


                    self.state = 1680
                    self.strictIdentifier()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1683
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1684
                self.identifier()
                self.state = 1685
                self.match(SqlBaseParser.T__0)
                self.state = 1694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.PLUS - 129)) | (1 << (SqlBaseParser.MINUS - 129)) | (1 << (SqlBaseParser.ASTERISK - 129)) | (1 << (SqlBaseParser.DIV - 129)) | (1 << (SqlBaseParser.TILDE - 129)) | (1 << (SqlBaseParser.PERCENTLIT - 129)) | (1 << (SqlBaseParser.BUCKET - 129)) | (1 << (SqlBaseParser.OUT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.SORT - 129)) | (1 << (SqlBaseParser.CLUSTER - 129)) | (1 << (SqlBaseParser.DISTRIBUTE - 129)) | (1 << (SqlBaseParser.OVERWRITE - 129)) | (1 << (SqlBaseParser.TRANSFORM - 129)) | (1 << (SqlBaseParser.REDUCE - 129)) | (1 << (SqlBaseParser.USING - 129)) | (1 << (SqlBaseParser.SERDE - 129)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 129)) | (1 << (SqlBaseParser.RECORDREADER - 129)) | (1 << (SqlBaseParser.RECORDWRITER - 129)) | (1 << (SqlBaseParser.DELIMITED - 129)) | (1 << (SqlBaseParser.FIELDS - 129)) | (1 << (SqlBaseParser.TERMINATED - 129)) | (1 << (SqlBaseParser.COLLECTION - 129)) | (1 << (SqlBaseParser.ITEMS - 129)) | (1 << (SqlBaseParser.KEYS - 129)) | (1 << (SqlBaseParser.ESCAPED - 129)) | (1 << (SqlBaseParser.LINES - 129)) | (1 << (SqlBaseParser.SEPARATED - 129)) | (1 << (SqlBaseParser.FUNCTION - 129)) | (1 << (SqlBaseParser.EXTENDED - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.CLEAR - 129)) | (1 << (SqlBaseParser.CACHE - 129)) | (1 << (SqlBaseParser.UNCACHE - 129)) | (1 << (SqlBaseParser.LAZY - 129)) | (1 << (SqlBaseParser.FORMATTED - 129)) | (1 << (SqlBaseParser.GLOBAL - 129)) | (1 << (SqlBaseParser.TEMPORARY - 129)) | (1 << (SqlBaseParser.OPTIONS - 129)) | (1 << (SqlBaseParser.UNSET - 129)) | (1 << (SqlBaseParser.TBLPROPERTIES - 129)) | (1 << (SqlBaseParser.DBPROPERTIES - 129)) | (1 << (SqlBaseParser.BUCKETS - 129)) | (1 << (SqlBaseParser.SKEWED - 129)) | (1 << (SqlBaseParser.STORED - 129)) | (1 << (SqlBaseParser.DIRECTORIES - 129)) | (1 << (SqlBaseParser.LOCATION - 129)) | (1 << (SqlBaseParser.EXCHANGE - 129)) | (1 << (SqlBaseParser.ARCHIVE - 129)) | (1 << (SqlBaseParser.UNARCHIVE - 129)) | (1 << (SqlBaseParser.FILEFORMAT - 129)) | (1 << (SqlBaseParser.TOUCH - 129)) | (1 << (SqlBaseParser.COMPACT - 129)) | (1 << (SqlBaseParser.CONCATENATE - 129)) | (1 << (SqlBaseParser.CHANGE - 129)) | (1 << (SqlBaseParser.CASCADE - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.CLUSTERED - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.SORTED - 193)) | (1 << (SqlBaseParser.PURGE - 193)) | (1 << (SqlBaseParser.INPUTFORMAT - 193)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 193)) | (1 << (SqlBaseParser.DATABASE - 193)) | (1 << (SqlBaseParser.DATABASES - 193)) | (1 << (SqlBaseParser.DFS - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.ANALYZE - 193)) | (1 << (SqlBaseParser.COMPUTE - 193)) | (1 << (SqlBaseParser.LIST - 193)) | (1 << (SqlBaseParser.STATISTICS - 193)) | (1 << (SqlBaseParser.PARTITIONED - 193)) | (1 << (SqlBaseParser.EXTERNAL - 193)) | (1 << (SqlBaseParser.DEFINED - 193)) | (1 << (SqlBaseParser.REVOKE - 193)) | (1 << (SqlBaseParser.GRANT - 193)) | (1 << (SqlBaseParser.LOCK - 193)) | (1 << (SqlBaseParser.UNLOCK - 193)) | (1 << (SqlBaseParser.MSCK - 193)) | (1 << (SqlBaseParser.REPAIR - 193)) | (1 << (SqlBaseParser.RECOVER - 193)) | (1 << (SqlBaseParser.EXPORT - 193)) | (1 << (SqlBaseParser.IMPORT - 193)) | (1 << (SqlBaseParser.LOAD - 193)) | (1 << (SqlBaseParser.ROLE - 193)) | (1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.COMPACTIONS - 193)) | (1 << (SqlBaseParser.PRINCIPALS - 193)) | (1 << (SqlBaseParser.TRANSACTIONS - 193)) | (1 << (SqlBaseParser.INDEX - 193)) | (1 << (SqlBaseParser.INDEXES - 193)) | (1 << (SqlBaseParser.LOCKS - 193)) | (1 << (SqlBaseParser.OPTION - 193)) | (1 << (SqlBaseParser.ANTI - 193)) | (1 << (SqlBaseParser.LOCAL - 193)) | (1 << (SqlBaseParser.INPATH - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 193)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 193)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 193)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)))) != 0):
                    self.state = 1686
                    self.expression()
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1687
                        self.match(SqlBaseParser.T__2)
                        self.state = 1688
                        self.expression()
                        self.state = 1693
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1696
                self.match(SqlBaseParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)




    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.match(SqlBaseParser.VALUES)
            self.state = 1701
            self.expression()
            self.state = 1706
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1702
                    self.match(SqlBaseParser.T__2)
                    self.state = 1703
                    self.expression() 
                self.state = 1708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

            self.state = 1716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 1710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1709
                    self.match(SqlBaseParser.AS)


                self.state = 1712
                self.identifier()
                self.state = 1714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1713
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)
        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatSerde" ):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatSerde" ):
                listener.exitRowFormatSerde(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)
        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowFormatDelimited" ):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowFormatDelimited" ):
                listener.exitRowFormatDelimited(self)



    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_rowFormat)
        try:
            self.state = 1767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1718
                self.match(SqlBaseParser.ROW)
                self.state = 1719
                self.match(SqlBaseParser.FORMAT)
                self.state = 1720
                self.match(SqlBaseParser.SERDE)
                self.state = 1721
                localctx.name = self.match(SqlBaseParser.STRING)
                self.state = 1725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1722
                    self.match(SqlBaseParser.WITH)
                    self.state = 1723
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 1724
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1727
                self.match(SqlBaseParser.ROW)
                self.state = 1728
                self.match(SqlBaseParser.FORMAT)
                self.state = 1729
                self.match(SqlBaseParser.DELIMITED)
                self.state = 1739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1730
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 1731
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1732
                    self.match(SqlBaseParser.BY)
                    self.state = 1733
                    localctx.fieldsTerminatedBy = self.match(SqlBaseParser.STRING)
                    self.state = 1737
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                    if la_ == 1:
                        self.state = 1734
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 1735
                        self.match(SqlBaseParser.BY)
                        self.state = 1736
                        localctx.escapedBy = self.match(SqlBaseParser.STRING)




                self.state = 1746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1741
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 1742
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 1743
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1744
                    self.match(SqlBaseParser.BY)
                    self.state = 1745
                    localctx.collectionItemsTerminatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1748
                    self.match(SqlBaseParser.MAP)
                    self.state = 1749
                    self.match(SqlBaseParser.KEYS)
                    self.state = 1750
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1751
                    self.match(SqlBaseParser.BY)
                    self.state = 1752
                    localctx.keysTerminatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 1755
                    self.match(SqlBaseParser.LINES)
                    self.state = 1756
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1757
                    self.match(SqlBaseParser.BY)
                    self.state = 1758
                    localctx.linesSeparatedBy = self.match(SqlBaseParser.STRING)


                self.state = 1765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1761
                    self.match(SqlBaseParser.NULL)
                    self.state = 1762
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 1763
                    self.match(SqlBaseParser.AS)
                    self.state = 1764
                    localctx.nullDefinedAs = self.match(SqlBaseParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext
            self.table = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)




    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1769
                localctx.db = self.identifier()
                self.state = 1770
                self.match(SqlBaseParser.T__3)


            self.state = 1774
            localctx.table = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # IdentifierContext
            self.function = None # IdentifierContext

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)




    def functionIdentifier(self):

        localctx = SqlBaseParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 1776
                localctx.db = self.identifier()
                self.state = 1777
                self.match(SqlBaseParser.T__3)


            self.state = 1781
            localctx.function = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpression" ):
                listener.enterNamedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpression" ):
                listener.exitNamedExpression(self)




    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self.expression()
            self.state = 1791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 1785
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 1784
                    self.match(SqlBaseParser.AS)


                self.state = 1789
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.IF, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.USING, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                    self.state = 1787
                    self.identifier()
                    pass
                elif token in [SqlBaseParser.T__0]:
                    self.state = 1788
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedExpressionSeq" ):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedExpressionSeq" ):
                listener.exitNamedExpressionSeq(self)




    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1793
            self.namedExpression()
            self.state = 1798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1794
                    self.match(SqlBaseParser.T__2)
                    self.state = 1795
                    self.namedExpression() 
                self.state = 1800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class BooleanDefaultContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicated(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicatedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDefault" ):
                listener.enterBooleanDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDefault" ):
                listener.exitBooleanDefault(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1804
                self.match(SqlBaseParser.NOT)
                self.state = 1805
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1806
                self.match(SqlBaseParser.EXISTS)
                self.state = 1807
                self.match(SqlBaseParser.T__0)
                self.state = 1808
                self.query()
                self.state = 1809
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BooleanDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1811
                self.predicated()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1820
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1814
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1815
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 1816
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1817
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1818
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 1819
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 1824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)




    def predicated(self):

        localctx = SqlBaseParser.PredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_predicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.valueExpression(0)
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.state = 1826
                self.predicate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1829
                    self.match(SqlBaseParser.NOT)


                self.state = 1832
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 1833
                localctx.lower = self.valueExpression(0)
                self.state = 1834
                self.match(SqlBaseParser.AND)
                self.state = 1835
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1837
                    self.match(SqlBaseParser.NOT)


                self.state = 1840
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1841
                self.match(SqlBaseParser.T__0)
                self.state = 1842
                self.expression()
                self.state = 1847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SqlBaseParser.T__2:
                    self.state = 1843
                    self.match(SqlBaseParser.T__2)
                    self.state = 1844
                    self.expression()
                    self.state = 1849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1850
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1852
                    self.match(SqlBaseParser.NOT)


                self.state = 1855
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1856
                self.match(SqlBaseParser.T__0)
                self.state = 1857
                self.query()
                self.state = 1858
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1860
                    self.match(SqlBaseParser.NOT)


                self.state = 1863
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.LIKE or _la==SqlBaseParser.RLIKE):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1864
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1865
                self.match(SqlBaseParser.IS)
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.NOT:
                    self.state = 1866
                    self.match(SqlBaseParser.NOT)


                self.state = 1869
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)
        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1873
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1874
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.PLUS - 129)) | (1 << (SqlBaseParser.MINUS - 129)) | (1 << (SqlBaseParser.TILDE - 129)))) != 0)):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1875
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1899
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,261,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1897
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1878
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1879
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (SqlBaseParser.ASTERISK - 131)) | (1 << (SqlBaseParser.SLASH - 131)) | (1 << (SqlBaseParser.PERCENT - 131)) | (1 << (SqlBaseParser.DIV - 131)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1880
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1881
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1882
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1883
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1884
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1885
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 1886
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1887
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1888
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 1889
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1890
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1891
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 1892
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1893
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1894
                        self.comparisonOperator()
                        self.state = 1895
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 1901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast" ):
                listener.enterLast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast" ):
                listener.exitLast(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar" ):
                listener.enterStar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar" ):
                listener.exitStar(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDefault" ):
                listener.enterConstantDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDefault" ):
                listener.exitConstantDefault(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext,0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst" ):
                listener.enterFirst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst" ):
                listener.exitFirst(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1903
                self.match(SqlBaseParser.CASE)
                self.state = 1905 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1904
                    self.whenClause()
                    self.state = 1907 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 1909
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1910
                    localctx.elseExpression = self.expression()


                self.state = 1913
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1915
                self.match(SqlBaseParser.CASE)
                self.state = 1916
                localctx.value = self.expression()
                self.state = 1918 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1917
                    self.whenClause()
                    self.state = 1920 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.WHEN):
                        break

                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.ELSE:
                    self.state = 1922
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1923
                    localctx.elseExpression = self.expression()


                self.state = 1926
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1928
                self.match(SqlBaseParser.CAST)
                self.state = 1929
                self.match(SqlBaseParser.T__0)
                self.state = 1930
                self.expression()
                self.state = 1931
                self.match(SqlBaseParser.AS)
                self.state = 1932
                self.dataType()
                self.state = 1933
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1935
                self.match(SqlBaseParser.STRUCT)
                self.state = 1936
                self.match(SqlBaseParser.T__0)
                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.PLUS - 129)) | (1 << (SqlBaseParser.MINUS - 129)) | (1 << (SqlBaseParser.ASTERISK - 129)) | (1 << (SqlBaseParser.DIV - 129)) | (1 << (SqlBaseParser.TILDE - 129)) | (1 << (SqlBaseParser.PERCENTLIT - 129)) | (1 << (SqlBaseParser.BUCKET - 129)) | (1 << (SqlBaseParser.OUT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.SORT - 129)) | (1 << (SqlBaseParser.CLUSTER - 129)) | (1 << (SqlBaseParser.DISTRIBUTE - 129)) | (1 << (SqlBaseParser.OVERWRITE - 129)) | (1 << (SqlBaseParser.TRANSFORM - 129)) | (1 << (SqlBaseParser.REDUCE - 129)) | (1 << (SqlBaseParser.USING - 129)) | (1 << (SqlBaseParser.SERDE - 129)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 129)) | (1 << (SqlBaseParser.RECORDREADER - 129)) | (1 << (SqlBaseParser.RECORDWRITER - 129)) | (1 << (SqlBaseParser.DELIMITED - 129)) | (1 << (SqlBaseParser.FIELDS - 129)) | (1 << (SqlBaseParser.TERMINATED - 129)) | (1 << (SqlBaseParser.COLLECTION - 129)) | (1 << (SqlBaseParser.ITEMS - 129)) | (1 << (SqlBaseParser.KEYS - 129)) | (1 << (SqlBaseParser.ESCAPED - 129)) | (1 << (SqlBaseParser.LINES - 129)) | (1 << (SqlBaseParser.SEPARATED - 129)) | (1 << (SqlBaseParser.FUNCTION - 129)) | (1 << (SqlBaseParser.EXTENDED - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.CLEAR - 129)) | (1 << (SqlBaseParser.CACHE - 129)) | (1 << (SqlBaseParser.UNCACHE - 129)) | (1 << (SqlBaseParser.LAZY - 129)) | (1 << (SqlBaseParser.FORMATTED - 129)) | (1 << (SqlBaseParser.GLOBAL - 129)) | (1 << (SqlBaseParser.TEMPORARY - 129)) | (1 << (SqlBaseParser.OPTIONS - 129)) | (1 << (SqlBaseParser.UNSET - 129)) | (1 << (SqlBaseParser.TBLPROPERTIES - 129)) | (1 << (SqlBaseParser.DBPROPERTIES - 129)) | (1 << (SqlBaseParser.BUCKETS - 129)) | (1 << (SqlBaseParser.SKEWED - 129)) | (1 << (SqlBaseParser.STORED - 129)) | (1 << (SqlBaseParser.DIRECTORIES - 129)) | (1 << (SqlBaseParser.LOCATION - 129)) | (1 << (SqlBaseParser.EXCHANGE - 129)) | (1 << (SqlBaseParser.ARCHIVE - 129)) | (1 << (SqlBaseParser.UNARCHIVE - 129)) | (1 << (SqlBaseParser.FILEFORMAT - 129)) | (1 << (SqlBaseParser.TOUCH - 129)) | (1 << (SqlBaseParser.COMPACT - 129)) | (1 << (SqlBaseParser.CONCATENATE - 129)) | (1 << (SqlBaseParser.CHANGE - 129)) | (1 << (SqlBaseParser.CASCADE - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.CLUSTERED - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.SORTED - 193)) | (1 << (SqlBaseParser.PURGE - 193)) | (1 << (SqlBaseParser.INPUTFORMAT - 193)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 193)) | (1 << (SqlBaseParser.DATABASE - 193)) | (1 << (SqlBaseParser.DATABASES - 193)) | (1 << (SqlBaseParser.DFS - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.ANALYZE - 193)) | (1 << (SqlBaseParser.COMPUTE - 193)) | (1 << (SqlBaseParser.LIST - 193)) | (1 << (SqlBaseParser.STATISTICS - 193)) | (1 << (SqlBaseParser.PARTITIONED - 193)) | (1 << (SqlBaseParser.EXTERNAL - 193)) | (1 << (SqlBaseParser.DEFINED - 193)) | (1 << (SqlBaseParser.REVOKE - 193)) | (1 << (SqlBaseParser.GRANT - 193)) | (1 << (SqlBaseParser.LOCK - 193)) | (1 << (SqlBaseParser.UNLOCK - 193)) | (1 << (SqlBaseParser.MSCK - 193)) | (1 << (SqlBaseParser.REPAIR - 193)) | (1 << (SqlBaseParser.RECOVER - 193)) | (1 << (SqlBaseParser.EXPORT - 193)) | (1 << (SqlBaseParser.IMPORT - 193)) | (1 << (SqlBaseParser.LOAD - 193)) | (1 << (SqlBaseParser.ROLE - 193)) | (1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.COMPACTIONS - 193)) | (1 << (SqlBaseParser.PRINCIPALS - 193)) | (1 << (SqlBaseParser.TRANSACTIONS - 193)) | (1 << (SqlBaseParser.INDEX - 193)) | (1 << (SqlBaseParser.INDEXES - 193)) | (1 << (SqlBaseParser.LOCKS - 193)) | (1 << (SqlBaseParser.OPTION - 193)) | (1 << (SqlBaseParser.ANTI - 193)) | (1 << (SqlBaseParser.LOCAL - 193)) | (1 << (SqlBaseParser.INPATH - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 193)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 193)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 193)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)))) != 0):
                    self.state = 1937
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 1942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1938
                        self.match(SqlBaseParser.T__2)
                        self.state = 1939
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 1944
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1947
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1948
                self.match(SqlBaseParser.FIRST)
                self.state = 1949
                self.match(SqlBaseParser.T__0)
                self.state = 1950
                self.expression()
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IGNORE:
                    self.state = 1951
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 1952
                    self.match(SqlBaseParser.NULLS)


                self.state = 1955
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1957
                self.match(SqlBaseParser.LAST)
                self.state = 1958
                self.match(SqlBaseParser.T__0)
                self.state = 1959
                self.expression()
                self.state = 1962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.IGNORE:
                    self.state = 1960
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 1961
                    self.match(SqlBaseParser.NULLS)


                self.state = 1964
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1966
                self.constant()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1967
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1968
                self.qualifiedName()
                self.state = 1969
                self.match(SqlBaseParser.T__3)
                self.state = 1970
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1972
                self.match(SqlBaseParser.T__0)
                self.state = 1973
                self.namedExpression()
                self.state = 1976 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1974
                    self.match(SqlBaseParser.T__2)
                    self.state = 1975
                    self.namedExpression()
                    self.state = 1978 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SqlBaseParser.T__2):
                        break

                self.state = 1980
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1982
                self.match(SqlBaseParser.T__0)
                self.state = 1983
                self.query()
                self.state = 1984
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1986
                self.qualifiedName()
                self.state = 1987
                self.match(SqlBaseParser.T__0)
                self.state = 1999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.T__0) | (1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.PLUS - 129)) | (1 << (SqlBaseParser.MINUS - 129)) | (1 << (SqlBaseParser.ASTERISK - 129)) | (1 << (SqlBaseParser.DIV - 129)) | (1 << (SqlBaseParser.TILDE - 129)) | (1 << (SqlBaseParser.PERCENTLIT - 129)) | (1 << (SqlBaseParser.BUCKET - 129)) | (1 << (SqlBaseParser.OUT - 129)) | (1 << (SqlBaseParser.OF - 129)) | (1 << (SqlBaseParser.SORT - 129)) | (1 << (SqlBaseParser.CLUSTER - 129)) | (1 << (SqlBaseParser.DISTRIBUTE - 129)) | (1 << (SqlBaseParser.OVERWRITE - 129)) | (1 << (SqlBaseParser.TRANSFORM - 129)) | (1 << (SqlBaseParser.REDUCE - 129)) | (1 << (SqlBaseParser.USING - 129)) | (1 << (SqlBaseParser.SERDE - 129)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 129)) | (1 << (SqlBaseParser.RECORDREADER - 129)) | (1 << (SqlBaseParser.RECORDWRITER - 129)) | (1 << (SqlBaseParser.DELIMITED - 129)) | (1 << (SqlBaseParser.FIELDS - 129)) | (1 << (SqlBaseParser.TERMINATED - 129)) | (1 << (SqlBaseParser.COLLECTION - 129)) | (1 << (SqlBaseParser.ITEMS - 129)) | (1 << (SqlBaseParser.KEYS - 129)) | (1 << (SqlBaseParser.ESCAPED - 129)) | (1 << (SqlBaseParser.LINES - 129)) | (1 << (SqlBaseParser.SEPARATED - 129)) | (1 << (SqlBaseParser.FUNCTION - 129)) | (1 << (SqlBaseParser.EXTENDED - 129)) | (1 << (SqlBaseParser.REFRESH - 129)) | (1 << (SqlBaseParser.CLEAR - 129)) | (1 << (SqlBaseParser.CACHE - 129)) | (1 << (SqlBaseParser.UNCACHE - 129)) | (1 << (SqlBaseParser.LAZY - 129)) | (1 << (SqlBaseParser.FORMATTED - 129)) | (1 << (SqlBaseParser.GLOBAL - 129)) | (1 << (SqlBaseParser.TEMPORARY - 129)) | (1 << (SqlBaseParser.OPTIONS - 129)) | (1 << (SqlBaseParser.UNSET - 129)) | (1 << (SqlBaseParser.TBLPROPERTIES - 129)) | (1 << (SqlBaseParser.DBPROPERTIES - 129)) | (1 << (SqlBaseParser.BUCKETS - 129)) | (1 << (SqlBaseParser.SKEWED - 129)) | (1 << (SqlBaseParser.STORED - 129)) | (1 << (SqlBaseParser.DIRECTORIES - 129)) | (1 << (SqlBaseParser.LOCATION - 129)) | (1 << (SqlBaseParser.EXCHANGE - 129)) | (1 << (SqlBaseParser.ARCHIVE - 129)) | (1 << (SqlBaseParser.UNARCHIVE - 129)) | (1 << (SqlBaseParser.FILEFORMAT - 129)) | (1 << (SqlBaseParser.TOUCH - 129)) | (1 << (SqlBaseParser.COMPACT - 129)) | (1 << (SqlBaseParser.CONCATENATE - 129)) | (1 << (SqlBaseParser.CHANGE - 129)) | (1 << (SqlBaseParser.CASCADE - 129)) | (1 << (SqlBaseParser.RESTRICT - 129)) | (1 << (SqlBaseParser.CLUSTERED - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (SqlBaseParser.SORTED - 193)) | (1 << (SqlBaseParser.PURGE - 193)) | (1 << (SqlBaseParser.INPUTFORMAT - 193)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 193)) | (1 << (SqlBaseParser.DATABASE - 193)) | (1 << (SqlBaseParser.DATABASES - 193)) | (1 << (SqlBaseParser.DFS - 193)) | (1 << (SqlBaseParser.TRUNCATE - 193)) | (1 << (SqlBaseParser.ANALYZE - 193)) | (1 << (SqlBaseParser.COMPUTE - 193)) | (1 << (SqlBaseParser.LIST - 193)) | (1 << (SqlBaseParser.STATISTICS - 193)) | (1 << (SqlBaseParser.PARTITIONED - 193)) | (1 << (SqlBaseParser.EXTERNAL - 193)) | (1 << (SqlBaseParser.DEFINED - 193)) | (1 << (SqlBaseParser.REVOKE - 193)) | (1 << (SqlBaseParser.GRANT - 193)) | (1 << (SqlBaseParser.LOCK - 193)) | (1 << (SqlBaseParser.UNLOCK - 193)) | (1 << (SqlBaseParser.MSCK - 193)) | (1 << (SqlBaseParser.REPAIR - 193)) | (1 << (SqlBaseParser.RECOVER - 193)) | (1 << (SqlBaseParser.EXPORT - 193)) | (1 << (SqlBaseParser.IMPORT - 193)) | (1 << (SqlBaseParser.LOAD - 193)) | (1 << (SqlBaseParser.ROLE - 193)) | (1 << (SqlBaseParser.ROLES - 193)) | (1 << (SqlBaseParser.COMPACTIONS - 193)) | (1 << (SqlBaseParser.PRINCIPALS - 193)) | (1 << (SqlBaseParser.TRANSACTIONS - 193)) | (1 << (SqlBaseParser.INDEX - 193)) | (1 << (SqlBaseParser.INDEXES - 193)) | (1 << (SqlBaseParser.LOCKS - 193)) | (1 << (SqlBaseParser.OPTION - 193)) | (1 << (SqlBaseParser.ANTI - 193)) | (1 << (SqlBaseParser.LOCAL - 193)) | (1 << (SqlBaseParser.INPATH - 193)) | (1 << (SqlBaseParser.STRING - 193)) | (1 << (SqlBaseParser.BIGINT_LITERAL - 193)) | (1 << (SqlBaseParser.SMALLINT_LITERAL - 193)) | (1 << (SqlBaseParser.TINYINT_LITERAL - 193)) | (1 << (SqlBaseParser.INTEGER_VALUE - 193)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 193)) | (1 << (SqlBaseParser.DOUBLE_LITERAL - 193)) | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 193)) | (1 << (SqlBaseParser.IDENTIFIER - 193)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 193)))) != 0):
                    self.state = 1989
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                    if la_ == 1:
                        self.state = 1988
                        self.setQuantifier()


                    self.state = 1991
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 1996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 1992
                        self.match(SqlBaseParser.T__2)
                        self.state = 1993
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 1998
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2001
                self.match(SqlBaseParser.T__1)
                self.state = 2004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2002
                    self.match(SqlBaseParser.OVER)
                    self.state = 2003
                    self.windowSpec()


                pass

            elif la_ == 13:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2006
                self.identifier()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2007
                self.match(SqlBaseParser.T__0)
                self.state = 2008
                self.expression()
                self.state = 2009
                self.match(SqlBaseParser.T__1)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2023
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2021
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2013
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2014
                        self.match(SqlBaseParser.T__6)
                        self.state = 2015
                        localctx.index = self.valueExpression(0)
                        self.state = 2016
                        self.match(SqlBaseParser.T__7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 2018
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2019
                        self.match(SqlBaseParser.T__3)
                        self.state = 2020
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 2025
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)



    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_constant)
        try:
            self.state = 2038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2026
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2027
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2028
                self.identifier()
                self.state = 2029
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2031
                self.number()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2032
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2034 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2033
                        self.match(SqlBaseParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2036 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            _la = self._input.LA(1)
            if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (SqlBaseParser.EQ - 121)) | (1 << (SqlBaseParser.NSEQ - 121)) | (1 << (SqlBaseParser.NEQ - 121)) | (1 << (SqlBaseParser.NEQJ - 121)) | (1 << (SqlBaseParser.LT - 121)) | (1 << (SqlBaseParser.LTE - 121)) | (1 << (SqlBaseParser.GT - 121)) | (1 << (SqlBaseParser.GTE - 121)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOperator" ):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOperator" ):
                listener.exitArithmeticOperator(self)




    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            _la = self._input.LA(1)
            if not(((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (SqlBaseParser.PLUS - 129)) | (1 << (SqlBaseParser.MINUS - 129)) | (1 << (SqlBaseParser.ASTERISK - 129)) | (1 << (SqlBaseParser.SLASH - 129)) | (1 << (SqlBaseParser.PERCENT - 129)) | (1 << (SqlBaseParser.DIV - 129)) | (1 << (SqlBaseParser.TILDE - 129)) | (1 << (SqlBaseParser.AMPERSAND - 129)) | (1 << (SqlBaseParser.PIPE - 129)) | (1 << (SqlBaseParser.HAT - 129)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateOperator" ):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateOperator" ):
                listener.exitPredicateOperator(self)




    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)




    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2046
            _la = self._input.LA(1)
            if not(_la==SqlBaseParser.TRUE or _la==SqlBaseParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.match(SqlBaseParser.INTERVAL)
            self.state = 2052
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2049
                    self.intervalField() 
                self.state = 2054
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.unit = None # IdentifierContext
            self.to = None # IdentifierContext

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_intervalField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            localctx.value = self.intervalValue()
            self.state = 2056
            localctx.unit = self.identifier()
            self.state = 2059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2057
                self.match(SqlBaseParser.TO)
                self.state = 2058
                localctx.to = self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalValue" ):
                listener.enterIntervalValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalValue" ):
                listener.exitIntervalValue(self)




    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 2066
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.PLUS, SqlBaseParser.MINUS, SqlBaseParser.INTEGER_VALUE, SqlBaseParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS:
                    self.state = 2061
                    _la = self._input.LA(1)
                    if not(_la==SqlBaseParser.PLUS or _la==SqlBaseParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2064
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.INTEGER_VALUE or _la==SqlBaseParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2065
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colPosition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColPosition" ):
                listener.enterColPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColPosition" ):
                listener.exitColPosition(self)




    def colPosition(self):

        localctx = SqlBaseParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_colPosition)
        try:
            self.state = 2071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2068
                self.match(SqlBaseParser.FIRST)
                pass
            elif token in [SqlBaseParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2069
                self.match(SqlBaseParser.AFTER)
                self.state = 2070
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complex = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexDataType" ):
                listener.enterComplexDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexDataType" ):
                listener.exitComplexDataType(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveDataType" ):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveDataType" ):
                listener.exitPrimitiveDataType(self)



    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 2107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2073
                localctx.complex = self.match(SqlBaseParser.ARRAY)
                self.state = 2074
                self.match(SqlBaseParser.LT)
                self.state = 2075
                self.dataType()
                self.state = 2076
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2078
                localctx.complex = self.match(SqlBaseParser.MAP)
                self.state = 2079
                self.match(SqlBaseParser.LT)
                self.state = 2080
                self.dataType()
                self.state = 2081
                self.match(SqlBaseParser.T__2)
                self.state = 2082
                self.dataType()
                self.state = 2083
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2085
                localctx.complex = self.match(SqlBaseParser.STRUCT)
                self.state = 2092
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.LT]:
                    self.state = 2086
                    self.match(SqlBaseParser.LT)
                    self.state = 2088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.JOIN) | (1 << SqlBaseParser.CROSS) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.INNER) | (1 << SqlBaseParser.LEFT) | (1 << SqlBaseParser.SEMI) | (1 << SqlBaseParser.RIGHT) | (1 << SqlBaseParser.FULL) | (1 << SqlBaseParser.NATURAL) | (1 << SqlBaseParser.ON) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.UNION - 64)) | (1 << (SqlBaseParser.EXCEPT - 64)) | (1 << (SqlBaseParser.SETMINUS - 64)) | (1 << (SqlBaseParser.INTERSECT - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (SqlBaseParser.DIV - 134)) | (1 << (SqlBaseParser.PERCENTLIT - 134)) | (1 << (SqlBaseParser.BUCKET - 134)) | (1 << (SqlBaseParser.OUT - 134)) | (1 << (SqlBaseParser.OF - 134)) | (1 << (SqlBaseParser.SORT - 134)) | (1 << (SqlBaseParser.CLUSTER - 134)) | (1 << (SqlBaseParser.DISTRIBUTE - 134)) | (1 << (SqlBaseParser.OVERWRITE - 134)) | (1 << (SqlBaseParser.TRANSFORM - 134)) | (1 << (SqlBaseParser.REDUCE - 134)) | (1 << (SqlBaseParser.USING - 134)) | (1 << (SqlBaseParser.SERDE - 134)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 134)) | (1 << (SqlBaseParser.RECORDREADER - 134)) | (1 << (SqlBaseParser.RECORDWRITER - 134)) | (1 << (SqlBaseParser.DELIMITED - 134)) | (1 << (SqlBaseParser.FIELDS - 134)) | (1 << (SqlBaseParser.TERMINATED - 134)) | (1 << (SqlBaseParser.COLLECTION - 134)) | (1 << (SqlBaseParser.ITEMS - 134)) | (1 << (SqlBaseParser.KEYS - 134)) | (1 << (SqlBaseParser.ESCAPED - 134)) | (1 << (SqlBaseParser.LINES - 134)) | (1 << (SqlBaseParser.SEPARATED - 134)) | (1 << (SqlBaseParser.FUNCTION - 134)) | (1 << (SqlBaseParser.EXTENDED - 134)) | (1 << (SqlBaseParser.REFRESH - 134)) | (1 << (SqlBaseParser.CLEAR - 134)) | (1 << (SqlBaseParser.CACHE - 134)) | (1 << (SqlBaseParser.UNCACHE - 134)) | (1 << (SqlBaseParser.LAZY - 134)) | (1 << (SqlBaseParser.FORMATTED - 134)) | (1 << (SqlBaseParser.GLOBAL - 134)) | (1 << (SqlBaseParser.TEMPORARY - 134)) | (1 << (SqlBaseParser.OPTIONS - 134)) | (1 << (SqlBaseParser.UNSET - 134)) | (1 << (SqlBaseParser.TBLPROPERTIES - 134)) | (1 << (SqlBaseParser.DBPROPERTIES - 134)) | (1 << (SqlBaseParser.BUCKETS - 134)) | (1 << (SqlBaseParser.SKEWED - 134)) | (1 << (SqlBaseParser.STORED - 134)) | (1 << (SqlBaseParser.DIRECTORIES - 134)) | (1 << (SqlBaseParser.LOCATION - 134)) | (1 << (SqlBaseParser.EXCHANGE - 134)) | (1 << (SqlBaseParser.ARCHIVE - 134)) | (1 << (SqlBaseParser.UNARCHIVE - 134)) | (1 << (SqlBaseParser.FILEFORMAT - 134)) | (1 << (SqlBaseParser.TOUCH - 134)) | (1 << (SqlBaseParser.COMPACT - 134)) | (1 << (SqlBaseParser.CONCATENATE - 134)) | (1 << (SqlBaseParser.CHANGE - 134)) | (1 << (SqlBaseParser.CASCADE - 134)) | (1 << (SqlBaseParser.RESTRICT - 134)) | (1 << (SqlBaseParser.CLUSTERED - 134)) | (1 << (SqlBaseParser.SORTED - 134)) | (1 << (SqlBaseParser.PURGE - 134)) | (1 << (SqlBaseParser.INPUTFORMAT - 134)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 134)) | (1 << (SqlBaseParser.DATABASE - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (SqlBaseParser.DATABASES - 198)) | (1 << (SqlBaseParser.DFS - 198)) | (1 << (SqlBaseParser.TRUNCATE - 198)) | (1 << (SqlBaseParser.ANALYZE - 198)) | (1 << (SqlBaseParser.COMPUTE - 198)) | (1 << (SqlBaseParser.LIST - 198)) | (1 << (SqlBaseParser.STATISTICS - 198)) | (1 << (SqlBaseParser.PARTITIONED - 198)) | (1 << (SqlBaseParser.EXTERNAL - 198)) | (1 << (SqlBaseParser.DEFINED - 198)) | (1 << (SqlBaseParser.REVOKE - 198)) | (1 << (SqlBaseParser.GRANT - 198)) | (1 << (SqlBaseParser.LOCK - 198)) | (1 << (SqlBaseParser.UNLOCK - 198)) | (1 << (SqlBaseParser.MSCK - 198)) | (1 << (SqlBaseParser.REPAIR - 198)) | (1 << (SqlBaseParser.RECOVER - 198)) | (1 << (SqlBaseParser.EXPORT - 198)) | (1 << (SqlBaseParser.IMPORT - 198)) | (1 << (SqlBaseParser.LOAD - 198)) | (1 << (SqlBaseParser.ROLE - 198)) | (1 << (SqlBaseParser.ROLES - 198)) | (1 << (SqlBaseParser.COMPACTIONS - 198)) | (1 << (SqlBaseParser.PRINCIPALS - 198)) | (1 << (SqlBaseParser.TRANSACTIONS - 198)) | (1 << (SqlBaseParser.INDEX - 198)) | (1 << (SqlBaseParser.INDEXES - 198)) | (1 << (SqlBaseParser.LOCKS - 198)) | (1 << (SqlBaseParser.OPTION - 198)) | (1 << (SqlBaseParser.ANTI - 198)) | (1 << (SqlBaseParser.LOCAL - 198)) | (1 << (SqlBaseParser.INPATH - 198)) | (1 << (SqlBaseParser.IDENTIFIER - 198)) | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198)))) != 0):
                        self.state = 2087
                        self.complexColTypeList()


                    self.state = 2090
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [SqlBaseParser.NEQ]:
                    self.state = 2091
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2094
                self.identifier()
                self.state = 2105
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 2095
                    self.match(SqlBaseParser.T__0)
                    self.state = 2096
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 2097
                        self.match(SqlBaseParser.T__2)
                        self.state = 2098
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 2103
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2104
                    self.match(SqlBaseParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColTypeList" ):
                listener.enterColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColTypeList" ):
                listener.exitColTypeList(self)




    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.colType()
            self.state = 2114
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2110
                    self.match(SqlBaseParser.T__2)
                    self.state = 2111
                    self.colType() 
                self.state = 2116
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColType" ):
                listener.enterColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColType" ):
                listener.exitColType(self)




    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            self.identifier()
            self.state = 2118
            self.dataType()
            self.state = 2121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2119
                self.match(SqlBaseParser.COMMENT)
                self.state = 2120
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColTypeList" ):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColTypeList" ):
                listener.exitComplexColTypeList(self)




    def complexColTypeList(self):

        localctx = SqlBaseParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.complexColType()
            self.state = 2128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SqlBaseParser.T__2:
                self.state = 2124
                self.match(SqlBaseParser.T__2)
                self.state = 2125
                self.complexColType()
                self.state = 2130
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplexColType" ):
                listener.enterComplexColType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplexColType" ):
                listener.exitComplexColType(self)




    def complexColType(self):

        localctx = SqlBaseParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.identifier()
            self.state = 2132
            self.match(SqlBaseParser.T__8)
            self.state = 2133
            self.dataType()
            self.state = 2136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SqlBaseParser.COMMENT:
                self.state = 2134
                self.match(SqlBaseParser.COMMENT)
                self.state = 2135
                self.match(SqlBaseParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            self.match(SqlBaseParser.WHEN)
            self.state = 2139
            localctx.condition = self.expression()
            self.state = 2140
            self.match(SqlBaseParser.THEN)
            self.state = 2141
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindows" ):
                listener.enterWindows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindows" ):
                listener.exitWindows(self)




    def windows(self):

        localctx = SqlBaseParser.WindowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_windows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.match(SqlBaseParser.WINDOW)
            self.state = 2144
            self.namedWindow()
            self.state = 2149
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2145
                    self.match(SqlBaseParser.T__2)
                    self.state = 2146
                    self.namedWindow() 
                self.state = 2151
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2152
            self.identifier()
            self.state = 2153
            self.match(SqlBaseParser.AS)
            self.state = 2154
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowRef" ):
                listener.enterWindowRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowRef" ):
                listener.exitWindowRef(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)
        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDef" ):
                listener.enterWindowDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDef" ):
                listener.exitWindowDef(self)



    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 2198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.JOIN, SqlBaseParser.CROSS, SqlBaseParser.OUTER, SqlBaseParser.INNER, SqlBaseParser.LEFT, SqlBaseParser.SEMI, SqlBaseParser.RIGHT, SqlBaseParser.FULL, SqlBaseParser.NATURAL, SqlBaseParser.ON, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.UNION, SqlBaseParser.EXCEPT, SqlBaseParser.SETMINUS, SqlBaseParser.INTERSECT, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.IF, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.USING, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.ANTI, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2156
                localctx.name = self.identifier()
                pass
            elif token in [SqlBaseParser.T__0]:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2157
                self.match(SqlBaseParser.T__0)
                self.state = 2192
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CLUSTER]:
                    self.state = 2158
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 2159
                    self.match(SqlBaseParser.BY)
                    self.state = 2160
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 2165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SqlBaseParser.T__2:
                        self.state = 2161
                        self.match(SqlBaseParser.T__2)
                        self.state = 2162
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2167
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SqlBaseParser.T__1, SqlBaseParser.ORDER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.SORT, SqlBaseParser.DISTRIBUTE]:
                    self.state = 2178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.PARTITION or _la==SqlBaseParser.DISTRIBUTE:
                        self.state = 2168
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.PARTITION or _la==SqlBaseParser.DISTRIBUTE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2169
                        self.match(SqlBaseParser.BY)
                        self.state = 2170
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2175
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlBaseParser.T__2:
                            self.state = 2171
                            self.match(SqlBaseParser.T__2)
                            self.state = 2172
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 2177
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 2190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SqlBaseParser.ORDER or _la==SqlBaseParser.SORT:
                        self.state = 2180
                        _la = self._input.LA(1)
                        if not(_la==SqlBaseParser.ORDER or _la==SqlBaseParser.SORT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2181
                        self.match(SqlBaseParser.BY)
                        self.state = 2182
                        self.sortItem()
                        self.state = 2187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SqlBaseParser.T__2:
                            self.state = 2183
                            self.match(SqlBaseParser.T__2)
                            self.state = 2184
                            self.sortItem()
                            self.state = 2189
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.RANGE or _la==SqlBaseParser.ROWS:
                    self.state = 2194
                    self.windowFrame()


                self.state = 2197
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_windowFrame)
        try:
            self.state = 2216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2200
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2201
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2202
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2203
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2204
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2205
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2206
                localctx.start = self.frameBound()
                self.state = 2207
                self.match(SqlBaseParser.AND)
                self.state = 2208
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2210
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2211
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2212
                localctx.start = self.frameBound()
                self.state = 2213
                self.match(SqlBaseParser.AND)
                self.state = 2214
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBound" ):
                listener.enterFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBound" ):
                listener.exitFrameBound(self)




    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 2225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2218
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2219
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PRECEDING or _la==SqlBaseParser.FOLLOWING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2220
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 2221
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2222
                self.expression()
                self.state = 2223
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==SqlBaseParser.PRECEDING or _la==SqlBaseParser.FOLLOWING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2227
            self.identifier()
            self.state = 2232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2228
                    self.match(SqlBaseParser.T__3)
                    self.state = 2229
                    self.identifier() 
                self.state = 2234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext,0)


        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_identifier)
        try:
            self.state = 2250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.OUTER, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.IF, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.USING, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.LOCAL, SqlBaseParser.INPATH, SqlBaseParser.IDENTIFIER, SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2235
                self.strictIdentifier()
                pass
            elif token in [SqlBaseParser.ANTI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2236
                self.match(SqlBaseParser.ANTI)
                pass
            elif token in [SqlBaseParser.FULL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2237
                self.match(SqlBaseParser.FULL)
                pass
            elif token in [SqlBaseParser.INNER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2238
                self.match(SqlBaseParser.INNER)
                pass
            elif token in [SqlBaseParser.LEFT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2239
                self.match(SqlBaseParser.LEFT)
                pass
            elif token in [SqlBaseParser.SEMI]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2240
                self.match(SqlBaseParser.SEMI)
                pass
            elif token in [SqlBaseParser.RIGHT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2241
                self.match(SqlBaseParser.RIGHT)
                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2242
                self.match(SqlBaseParser.NATURAL)
                pass
            elif token in [SqlBaseParser.JOIN]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2243
                self.match(SqlBaseParser.JOIN)
                pass
            elif token in [SqlBaseParser.CROSS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2244
                self.match(SqlBaseParser.CROSS)
                pass
            elif token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2245
                self.match(SqlBaseParser.ON)
                pass
            elif token in [SqlBaseParser.UNION]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2246
                self.match(SqlBaseParser.UNION)
                pass
            elif token in [SqlBaseParser.INTERSECT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2247
                self.match(SqlBaseParser.INTERSECT)
                pass
            elif token in [SqlBaseParser.EXCEPT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2248
                self.match(SqlBaseParser.EXCEPT)
                pass
            elif token in [SqlBaseParser.SETMINUS]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2249
                self.match(SqlBaseParser.SETMINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifierAlternative" ):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifierAlternative" ):
                listener.exitQuotedIdentifierAlternative(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_strictIdentifier)
        try:
            self.state = 2255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IDENTIFIER]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2252
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2253
                self.quotedIdentifier()
                pass
            elif token in [SqlBaseParser.SELECT, SqlBaseParser.FROM, SqlBaseParser.ADD, SqlBaseParser.AS, SqlBaseParser.ALL, SqlBaseParser.DISTINCT, SqlBaseParser.WHERE, SqlBaseParser.GROUP, SqlBaseParser.BY, SqlBaseParser.GROUPING, SqlBaseParser.SETS, SqlBaseParser.CUBE, SqlBaseParser.ROLLUP, SqlBaseParser.ORDER, SqlBaseParser.HAVING, SqlBaseParser.LIMIT, SqlBaseParser.AT, SqlBaseParser.OR, SqlBaseParser.AND, SqlBaseParser.IN, SqlBaseParser.NOT, SqlBaseParser.NO, SqlBaseParser.EXISTS, SqlBaseParser.BETWEEN, SqlBaseParser.LIKE, SqlBaseParser.RLIKE, SqlBaseParser.IS, SqlBaseParser.NULL, SqlBaseParser.TRUE, SqlBaseParser.FALSE, SqlBaseParser.NULLS, SqlBaseParser.ASC, SqlBaseParser.DESC, SqlBaseParser.FOR, SqlBaseParser.INTERVAL, SqlBaseParser.CASE, SqlBaseParser.WHEN, SqlBaseParser.THEN, SqlBaseParser.ELSE, SqlBaseParser.END, SqlBaseParser.OUTER, SqlBaseParser.LATERAL, SqlBaseParser.WINDOW, SqlBaseParser.OVER, SqlBaseParser.PARTITION, SqlBaseParser.RANGE, SqlBaseParser.ROWS, SqlBaseParser.UNBOUNDED, SqlBaseParser.PRECEDING, SqlBaseParser.FOLLOWING, SqlBaseParser.CURRENT, SqlBaseParser.FIRST, SqlBaseParser.AFTER, SqlBaseParser.LAST, SqlBaseParser.ROW, SqlBaseParser.WITH, SqlBaseParser.VALUES, SqlBaseParser.CREATE, SqlBaseParser.TABLE, SqlBaseParser.VIEW, SqlBaseParser.REPLACE, SqlBaseParser.INSERT, SqlBaseParser.DELETE, SqlBaseParser.INTO, SqlBaseParser.DESCRIBE, SqlBaseParser.EXPLAIN, SqlBaseParser.FORMAT, SqlBaseParser.LOGICAL, SqlBaseParser.CODEGEN, SqlBaseParser.COST, SqlBaseParser.CAST, SqlBaseParser.SHOW, SqlBaseParser.TABLES, SqlBaseParser.COLUMNS, SqlBaseParser.COLUMN, SqlBaseParser.USE, SqlBaseParser.PARTITIONS, SqlBaseParser.FUNCTIONS, SqlBaseParser.DROP, SqlBaseParser.TO, SqlBaseParser.TABLESAMPLE, SqlBaseParser.STRATIFY, SqlBaseParser.ALTER, SqlBaseParser.RENAME, SqlBaseParser.ARRAY, SqlBaseParser.MAP, SqlBaseParser.STRUCT, SqlBaseParser.COMMENT, SqlBaseParser.SET, SqlBaseParser.RESET, SqlBaseParser.DATA, SqlBaseParser.START, SqlBaseParser.TRANSACTION, SqlBaseParser.COMMIT, SqlBaseParser.ROLLBACK, SqlBaseParser.MACRO, SqlBaseParser.IGNORE, SqlBaseParser.IF, SqlBaseParser.DIV, SqlBaseParser.PERCENTLIT, SqlBaseParser.BUCKET, SqlBaseParser.OUT, SqlBaseParser.OF, SqlBaseParser.SORT, SqlBaseParser.CLUSTER, SqlBaseParser.DISTRIBUTE, SqlBaseParser.OVERWRITE, SqlBaseParser.TRANSFORM, SqlBaseParser.REDUCE, SqlBaseParser.USING, SqlBaseParser.SERDE, SqlBaseParser.SERDEPROPERTIES, SqlBaseParser.RECORDREADER, SqlBaseParser.RECORDWRITER, SqlBaseParser.DELIMITED, SqlBaseParser.FIELDS, SqlBaseParser.TERMINATED, SqlBaseParser.COLLECTION, SqlBaseParser.ITEMS, SqlBaseParser.KEYS, SqlBaseParser.ESCAPED, SqlBaseParser.LINES, SqlBaseParser.SEPARATED, SqlBaseParser.FUNCTION, SqlBaseParser.EXTENDED, SqlBaseParser.REFRESH, SqlBaseParser.CLEAR, SqlBaseParser.CACHE, SqlBaseParser.UNCACHE, SqlBaseParser.LAZY, SqlBaseParser.FORMATTED, SqlBaseParser.GLOBAL, SqlBaseParser.TEMPORARY, SqlBaseParser.OPTIONS, SqlBaseParser.UNSET, SqlBaseParser.TBLPROPERTIES, SqlBaseParser.DBPROPERTIES, SqlBaseParser.BUCKETS, SqlBaseParser.SKEWED, SqlBaseParser.STORED, SqlBaseParser.DIRECTORIES, SqlBaseParser.LOCATION, SqlBaseParser.EXCHANGE, SqlBaseParser.ARCHIVE, SqlBaseParser.UNARCHIVE, SqlBaseParser.FILEFORMAT, SqlBaseParser.TOUCH, SqlBaseParser.COMPACT, SqlBaseParser.CONCATENATE, SqlBaseParser.CHANGE, SqlBaseParser.CASCADE, SqlBaseParser.RESTRICT, SqlBaseParser.CLUSTERED, SqlBaseParser.SORTED, SqlBaseParser.PURGE, SqlBaseParser.INPUTFORMAT, SqlBaseParser.OUTPUTFORMAT, SqlBaseParser.DATABASE, SqlBaseParser.DATABASES, SqlBaseParser.DFS, SqlBaseParser.TRUNCATE, SqlBaseParser.ANALYZE, SqlBaseParser.COMPUTE, SqlBaseParser.LIST, SqlBaseParser.STATISTICS, SqlBaseParser.PARTITIONED, SqlBaseParser.EXTERNAL, SqlBaseParser.DEFINED, SqlBaseParser.REVOKE, SqlBaseParser.GRANT, SqlBaseParser.LOCK, SqlBaseParser.UNLOCK, SqlBaseParser.MSCK, SqlBaseParser.REPAIR, SqlBaseParser.RECOVER, SqlBaseParser.EXPORT, SqlBaseParser.IMPORT, SqlBaseParser.LOAD, SqlBaseParser.ROLE, SqlBaseParser.ROLES, SqlBaseParser.COMPACTIONS, SqlBaseParser.PRINCIPALS, SqlBaseParser.TRANSACTIONS, SqlBaseParser.INDEX, SqlBaseParser.INDEXES, SqlBaseParser.LOCKS, SqlBaseParser.OPTION, SqlBaseParser.LOCAL, SqlBaseParser.INPATH]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2254
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)




    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2257
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigIntLiteral" ):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigIntLiteral" ):
                listener.exitBigIntLiteral(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTinyIntLiteral" ):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTinyIntLiteral" ):
                listener.exitTinyIntLiteral(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigDecimalLiteral" ):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigDecimalLiteral" ):
                listener.exitBigDecimalLiteral(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmallIntLiteral" ):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmallIntLiteral" ):
                listener.exitSmallIntLiteral(self)



    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 2287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2259
                    self.match(SqlBaseParser.MINUS)


                self.state = 2262
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2263
                    self.match(SqlBaseParser.MINUS)


                self.state = 2266
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2267
                    self.match(SqlBaseParser.MINUS)


                self.state = 2270
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2271
                    self.match(SqlBaseParser.MINUS)


                self.state = 2274
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2275
                    self.match(SqlBaseParser.MINUS)


                self.state = 2278
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2279
                    self.match(SqlBaseParser.MINUS)


                self.state = 2282
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SqlBaseParser.MINUS:
                    self.state = 2283
                    self.match(SqlBaseParser.MINUS)


                self.state = 2286
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2289
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SqlBaseParser.SELECT) | (1 << SqlBaseParser.FROM) | (1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.DISTINCT) | (1 << SqlBaseParser.WHERE) | (1 << SqlBaseParser.GROUP) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.GROUPING) | (1 << SqlBaseParser.SETS) | (1 << SqlBaseParser.CUBE) | (1 << SqlBaseParser.ROLLUP) | (1 << SqlBaseParser.ORDER) | (1 << SqlBaseParser.HAVING) | (1 << SqlBaseParser.LIMIT) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.OR) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.IN) | (1 << SqlBaseParser.NOT) | (1 << SqlBaseParser.NO) | (1 << SqlBaseParser.EXISTS) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.LIKE) | (1 << SqlBaseParser.RLIKE) | (1 << SqlBaseParser.IS) | (1 << SqlBaseParser.NULL) | (1 << SqlBaseParser.TRUE) | (1 << SqlBaseParser.FALSE) | (1 << SqlBaseParser.NULLS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.DESC) | (1 << SqlBaseParser.FOR) | (1 << SqlBaseParser.INTERVAL) | (1 << SqlBaseParser.CASE) | (1 << SqlBaseParser.WHEN) | (1 << SqlBaseParser.THEN) | (1 << SqlBaseParser.ELSE) | (1 << SqlBaseParser.END) | (1 << SqlBaseParser.OUTER) | (1 << SqlBaseParser.LATERAL) | (1 << SqlBaseParser.WINDOW) | (1 << SqlBaseParser.OVER) | (1 << SqlBaseParser.PARTITION))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SqlBaseParser.RANGE - 64)) | (1 << (SqlBaseParser.ROWS - 64)) | (1 << (SqlBaseParser.UNBOUNDED - 64)) | (1 << (SqlBaseParser.PRECEDING - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)) | (1 << (SqlBaseParser.CURRENT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.AFTER - 64)) | (1 << (SqlBaseParser.LAST - 64)) | (1 << (SqlBaseParser.ROW - 64)) | (1 << (SqlBaseParser.WITH - 64)) | (1 << (SqlBaseParser.VALUES - 64)) | (1 << (SqlBaseParser.CREATE - 64)) | (1 << (SqlBaseParser.TABLE - 64)) | (1 << (SqlBaseParser.VIEW - 64)) | (1 << (SqlBaseParser.REPLACE - 64)) | (1 << (SqlBaseParser.INSERT - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.INTO - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.FORMAT - 64)) | (1 << (SqlBaseParser.LOGICAL - 64)) | (1 << (SqlBaseParser.CODEGEN - 64)) | (1 << (SqlBaseParser.COST - 64)) | (1 << (SqlBaseParser.CAST - 64)) | (1 << (SqlBaseParser.SHOW - 64)) | (1 << (SqlBaseParser.TABLES - 64)) | (1 << (SqlBaseParser.COLUMNS - 64)) | (1 << (SqlBaseParser.COLUMN - 64)) | (1 << (SqlBaseParser.USE - 64)) | (1 << (SqlBaseParser.PARTITIONS - 64)) | (1 << (SqlBaseParser.FUNCTIONS - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.TO - 64)) | (1 << (SqlBaseParser.TABLESAMPLE - 64)) | (1 << (SqlBaseParser.STRATIFY - 64)) | (1 << (SqlBaseParser.ALTER - 64)) | (1 << (SqlBaseParser.RENAME - 64)) | (1 << (SqlBaseParser.ARRAY - 64)) | (1 << (SqlBaseParser.MAP - 64)) | (1 << (SqlBaseParser.STRUCT - 64)) | (1 << (SqlBaseParser.COMMENT - 64)) | (1 << (SqlBaseParser.SET - 64)) | (1 << (SqlBaseParser.RESET - 64)) | (1 << (SqlBaseParser.DATA - 64)) | (1 << (SqlBaseParser.START - 64)) | (1 << (SqlBaseParser.TRANSACTION - 64)) | (1 << (SqlBaseParser.COMMIT - 64)) | (1 << (SqlBaseParser.ROLLBACK - 64)) | (1 << (SqlBaseParser.MACRO - 64)) | (1 << (SqlBaseParser.IGNORE - 64)) | (1 << (SqlBaseParser.IF - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (SqlBaseParser.DIV - 134)) | (1 << (SqlBaseParser.PERCENTLIT - 134)) | (1 << (SqlBaseParser.BUCKET - 134)) | (1 << (SqlBaseParser.OUT - 134)) | (1 << (SqlBaseParser.OF - 134)) | (1 << (SqlBaseParser.SORT - 134)) | (1 << (SqlBaseParser.CLUSTER - 134)) | (1 << (SqlBaseParser.DISTRIBUTE - 134)) | (1 << (SqlBaseParser.OVERWRITE - 134)) | (1 << (SqlBaseParser.TRANSFORM - 134)) | (1 << (SqlBaseParser.REDUCE - 134)) | (1 << (SqlBaseParser.USING - 134)) | (1 << (SqlBaseParser.SERDE - 134)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 134)) | (1 << (SqlBaseParser.RECORDREADER - 134)) | (1 << (SqlBaseParser.RECORDWRITER - 134)) | (1 << (SqlBaseParser.DELIMITED - 134)) | (1 << (SqlBaseParser.FIELDS - 134)) | (1 << (SqlBaseParser.TERMINATED - 134)) | (1 << (SqlBaseParser.COLLECTION - 134)) | (1 << (SqlBaseParser.ITEMS - 134)) | (1 << (SqlBaseParser.KEYS - 134)) | (1 << (SqlBaseParser.ESCAPED - 134)) | (1 << (SqlBaseParser.LINES - 134)) | (1 << (SqlBaseParser.SEPARATED - 134)) | (1 << (SqlBaseParser.FUNCTION - 134)) | (1 << (SqlBaseParser.EXTENDED - 134)) | (1 << (SqlBaseParser.REFRESH - 134)) | (1 << (SqlBaseParser.CLEAR - 134)) | (1 << (SqlBaseParser.CACHE - 134)) | (1 << (SqlBaseParser.UNCACHE - 134)) | (1 << (SqlBaseParser.LAZY - 134)) | (1 << (SqlBaseParser.FORMATTED - 134)) | (1 << (SqlBaseParser.GLOBAL - 134)) | (1 << (SqlBaseParser.TEMPORARY - 134)) | (1 << (SqlBaseParser.OPTIONS - 134)) | (1 << (SqlBaseParser.UNSET - 134)) | (1 << (SqlBaseParser.TBLPROPERTIES - 134)) | (1 << (SqlBaseParser.DBPROPERTIES - 134)) | (1 << (SqlBaseParser.BUCKETS - 134)) | (1 << (SqlBaseParser.SKEWED - 134)) | (1 << (SqlBaseParser.STORED - 134)) | (1 << (SqlBaseParser.DIRECTORIES - 134)) | (1 << (SqlBaseParser.LOCATION - 134)) | (1 << (SqlBaseParser.EXCHANGE - 134)) | (1 << (SqlBaseParser.ARCHIVE - 134)) | (1 << (SqlBaseParser.UNARCHIVE - 134)) | (1 << (SqlBaseParser.FILEFORMAT - 134)) | (1 << (SqlBaseParser.TOUCH - 134)) | (1 << (SqlBaseParser.COMPACT - 134)) | (1 << (SqlBaseParser.CONCATENATE - 134)) | (1 << (SqlBaseParser.CHANGE - 134)) | (1 << (SqlBaseParser.CASCADE - 134)) | (1 << (SqlBaseParser.RESTRICT - 134)) | (1 << (SqlBaseParser.CLUSTERED - 134)) | (1 << (SqlBaseParser.SORTED - 134)) | (1 << (SqlBaseParser.PURGE - 134)) | (1 << (SqlBaseParser.INPUTFORMAT - 134)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 134)) | (1 << (SqlBaseParser.DATABASE - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (SqlBaseParser.DATABASES - 198)) | (1 << (SqlBaseParser.DFS - 198)) | (1 << (SqlBaseParser.TRUNCATE - 198)) | (1 << (SqlBaseParser.ANALYZE - 198)) | (1 << (SqlBaseParser.COMPUTE - 198)) | (1 << (SqlBaseParser.LIST - 198)) | (1 << (SqlBaseParser.STATISTICS - 198)) | (1 << (SqlBaseParser.PARTITIONED - 198)) | (1 << (SqlBaseParser.EXTERNAL - 198)) | (1 << (SqlBaseParser.DEFINED - 198)) | (1 << (SqlBaseParser.REVOKE - 198)) | (1 << (SqlBaseParser.GRANT - 198)) | (1 << (SqlBaseParser.LOCK - 198)) | (1 << (SqlBaseParser.UNLOCK - 198)) | (1 << (SqlBaseParser.MSCK - 198)) | (1 << (SqlBaseParser.REPAIR - 198)) | (1 << (SqlBaseParser.RECOVER - 198)) | (1 << (SqlBaseParser.EXPORT - 198)) | (1 << (SqlBaseParser.IMPORT - 198)) | (1 << (SqlBaseParser.LOAD - 198)) | (1 << (SqlBaseParser.ROLE - 198)) | (1 << (SqlBaseParser.ROLES - 198)) | (1 << (SqlBaseParser.COMPACTIONS - 198)) | (1 << (SqlBaseParser.PRINCIPALS - 198)) | (1 << (SqlBaseParser.TRANSACTIONS - 198)) | (1 << (SqlBaseParser.INDEX - 198)) | (1 << (SqlBaseParser.INDEXES - 198)) | (1 << (SqlBaseParser.LOCKS - 198)) | (1 << (SqlBaseParser.OPTION - 198)) | (1 << (SqlBaseParser.LOCAL - 198)) | (1 << (SqlBaseParser.INPATH - 198)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.queryTerm_sempred
        self._predicates[64] = self.booleanExpression_sempred
        self._predicates[67] = self.valueExpression_sempred
        self._predicates[68] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         




