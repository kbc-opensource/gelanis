# Generated from SqlBase.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00fc")
        buf.write("\u0930\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\3\2\3\2\3\2\3\3\3\3")
        buf.write("\3\3\3\4\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u00e3\n\b\3\b\3\b\3")
        buf.write("\b\5\b\u00e8\n\b\3\b\5\b\u00eb\n\b\3\b\3\b\3\b\5\b\u00f0")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u00fd")
        buf.write("\n\b\3\b\3\b\5\b\u0101\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0108")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7")
        buf.write("\b\u0116\n\b\f\b\16\b\u0119\13\b\3\b\5\b\u011c\n\b\3\b")
        buf.write("\5\b\u011f\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0126\n\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\7\b\u0137\n\b\f\b\16\b\u013a\13\b\3\b\5\b\u013d\n\b\3")
        buf.write("\b\5\b\u0140\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0147\n\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u014d\n\b\3\b\3\b\3\b\3\b\5\b\u0153\n")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u015b\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5")
        buf.write("\b\u017b\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0183\n\b\3\b")
        buf.write("\3\b\5\b\u0187\n\b\3\b\3\b\3\b\5\b\u018c\n\b\3\b\3\b\3")
        buf.write("\b\3\b\5\b\u0192\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u019a")
        buf.write("\n\b\3\b\3\b\3\b\3\b\5\b\u01a0\n\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01ad\n\b\3\b\6\b\u01b0\n")
        buf.write("\b\r\b\16\b\u01b1\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01bb")
        buf.write("\n\b\3\b\6\b\u01be\n\b\r\b\16\b\u01bf\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01d0\n\b")
        buf.write("\3\b\3\b\3\b\7\b\u01d5\n\b\f\b\16\b\u01d8\13\b\3\b\5\b")
        buf.write("\u01db\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01e3\n\b\3\b\3")
        buf.write("\b\3\b\7\b\u01e8\n\b\f\b\16\b\u01eb\13\b\3\b\3\b\3\b\3")
        buf.write("\b\5\b\u01f1\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\5\b\u0200\n\b\3\b\3\b\5\b\u0204\n\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u020a\n\b\3\b\3\b\3\b\3\b\5\b\u0210\n")
        buf.write("\b\3\b\5\b\u0213\n\b\3\b\5\b\u0216\n\b\3\b\3\b\3\b\3\b")
        buf.write("\5\b\u021c\n\b\3\b\3\b\5\b\u0220\n\b\3\b\3\b\5\b\u0224")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u0229\n\b\3\b\3\b\5\b\u022d\n\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\5\b\u0235\n\b\3\b\5\b\u0238\n\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0241\n\b\3\b\3\b\3\b")
        buf.write("\5\b\u0246\n\b\3\b\3\b\3\b\3\b\5\b\u024c\n\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\5\b\u0253\n\b\3\b\5\b\u0256\n\b\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u025c\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0265")
        buf.write("\n\b\f\b\16\b\u0268\13\b\5\b\u026a\n\b\3\b\3\b\5\b\u026e")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u0273\n\b\3\b\3\b\3\b\5\b\u0278\n")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\5\b\u027f\n\b\3\b\5\b\u0282\n\b")
        buf.write("\3\b\5\b\u0285\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u028c\n\b\3")
        buf.write("\b\3\b\3\b\5\b\u0291\n\b\3\b\3\b\3\b\5\b\u0296\n\b\3\b")
        buf.write("\5\b\u0299\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02a2\n")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02aa\n\b\3\b\3\b\3\b\3")
        buf.write("\b\5\b\u02b0\n\b\3\b\3\b\5\b\u02b4\n\b\3\b\3\b\5\b\u02b8")
        buf.write("\n\b\3\b\3\b\5\b\u02bc\n\b\5\b\u02be\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\5\b\u02c7\n\b\3\b\3\b\3\b\3\b\5\b\u02cd")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u02d2\n\b\3\b\5\b\u02d5\n\b\3\b\3")
        buf.write("\b\5\b\u02d9\n\b\3\b\5\b\u02dc\n\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\7\b\u02e4\n\b\f\b\16\b\u02e7\13\b\5\b\u02e9\n\b\3")
        buf.write("\b\3\b\5\b\u02ed\n\b\3\b\3\b\3\b\5\b\u02f2\n\b\3\b\5\b")
        buf.write("\u02f5\n\b\3\b\3\b\3\b\3\b\5\b\u02fb\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\5\b\u0303\n\b\3\b\3\b\3\b\5\b\u0308\n\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u030e\n\b\3\b\3\b\3\b\3\b\5\b\u0314\n")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u031d\n\b\f\b\16\b")
        buf.write("\u0320\13\b\3\b\3\b\3\b\7\b\u0325\n\b\f\b\16\b\u0328\13")
        buf.write("\b\3\b\3\b\7\b\u032c\n\b\f\b\16\b\u032f\13\b\3\b\3\b\3")
        buf.write("\b\7\b\u0334\n\b\f\b\16\b\u0337\13\b\5\b\u0339\n\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\5\t\u0341\n\t\3\t\3\t\5\t\u0345\n")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\5\t\u034c\n\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\5\t\u03c0\n\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u03c8")
        buf.write("\n\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u03d0\n\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u03d9\n\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\5\t\u03e5\n\t\3\n\3\n\5\n\u03e9\n\n\3")
        buf.write("\n\5\n\u03ec\n\n\3\n\3\n\3\n\3\n\5\n\u03f2\n\n\3\n\3\n")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u03fc\n\13\3\13\3")
        buf.write("\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0408\n\f\3")
        buf.write("\f\3\f\3\f\5\f\u040d\n\f\3\r\3\r\3\r\3\16\5\16\u0413\n")
        buf.write("\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u041f\n\17\5\17\u0421\n\17\3\17\3\17\3\17\5\17\u0426")
        buf.write("\n\17\3\17\3\17\5\17\u042a\n\17\3\17\3\17\3\17\5\17\u042f")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u0434\n\17\3\17\5\17\u0437\n")
        buf.write("\17\3\17\3\17\3\17\5\17\u043c\n\17\3\17\3\17\5\17\u0440")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u0445\n\17\5\17\u0447\n\17\3")
        buf.write("\20\3\20\5\20\u044b\n\20\3\21\3\21\3\21\3\21\3\21\7\21")
        buf.write("\u0452\n\21\f\21\16\21\u0455\13\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\5\22\u045c\n\22\3\23\3\23\3\23\3\23\3\23\5\23\u0463")
        buf.write("\n\23\3\24\3\24\3\24\7\24\u0468\n\24\f\24\16\24\u046b")
        buf.write("\13\24\3\25\3\25\3\25\3\25\7\25\u0471\n\25\f\25\16\25")
        buf.write("\u0474\13\25\3\26\3\26\5\26\u0478\n\26\3\26\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\7\30\u0485\n")
        buf.write("\30\f\30\16\30\u0488\13\30\3\30\3\30\3\31\3\31\5\31\u048e")
        buf.write("\n\31\3\31\5\31\u0491\n\31\3\32\3\32\3\32\7\32\u0496\n")
        buf.write("\32\f\32\16\32\u0499\13\32\3\32\5\32\u049c\n\32\3\33\3")
        buf.write("\33\3\33\3\33\5\33\u04a2\n\33\3\34\3\34\3\34\3\34\7\34")
        buf.write("\u04a8\n\34\f\34\16\34\u04ab\13\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\7\35\u04b3\n\35\f\35\16\35\u04b6\13\35\3\35")
        buf.write("\3\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u04c0\n\36\3")
        buf.write("\37\3\37\3\37\3\37\3\37\5\37\u04c7\n\37\3 \3 \3 \3 \5")
        buf.write(' \u04cd\n \3!\3!\3!\3"\5"\u04d3\n"\3"\3"\3"\3"')
        buf.write('\3"\6"\u04da\n"\r"\16"\u04db\5"\u04de\n"\3#\3#')
        buf.write("\3#\3#\3#\7#\u04e5\n#\f#\16#\u04e8\13#\5#\u04ea\n#\3#")
        buf.write("\3#\3#\3#\3#\7#\u04f1\n#\f#\16#\u04f4\13#\5#\u04f6\n#")
        buf.write("\3#\3#\3#\3#\3#\7#\u04fd\n#\f#\16#\u0500\13#\5#\u0502")
        buf.write("\n#\3#\3#\3#\3#\3#\7#\u0509\n#\f#\16#\u050c\13#\5#\u050e")
        buf.write("\n#\3#\5#\u0511\n#\3#\3#\3#\5#\u0516\n#\5#\u0518\n#\3")
        buf.write("$\5$\u051b\n$\3$\3$\3$\3%\3%\3%\3%\3%\3%\5%\u0526\n%\3")
        buf.write("%\7%\u0529\n%\f%\16%\u052c\13%\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\5&\u0536\n&\3'\3'\5'\u053a\n'\3'\3'\5'\u053e")
        buf.write("\n'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u054a\n(\3(\5(\u054d")
        buf.write("\n(\3(\3(\5(\u0551\n(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u055b")
        buf.write("\n(\3(\3(\5(\u055f\n(\5(\u0561\n(\3(\5(\u0564\n(\3(\3")
        buf.write("(\5(\u0568\n(\3(\5(\u056b\n(\3(\3(\5(\u056f\n(\3(\3(\7")
        buf.write("(\u0573\n(\f(\16(\u0576\13(\3(\5(\u0579\n(\3(\3(\5(\u057d")
        buf.write("\n(\3(\3(\3(\5(\u0582\n(\3(\5(\u0585\n(\5(\u0587\n(\3")
        buf.write("(\7(\u058a\n(\f(\16(\u058d\13(\3(\3(\5(\u0591\n(\3(\5")
        buf.write("(\u0594\n(\3(\3(\5(\u0598\n(\3(\5(\u059b\n(\5(\u059d\n")
        buf.write("(\3)\3)\3)\5)\u05a2\n)\3)\7)\u05a5\n)\f)\16)\u05a8\13")
        buf.write(")\3)\3)\3*\3*\3*\3*\3*\3*\7*\u05b2\n*\f*\16*\u05b5\13")
        buf.write("*\3*\3*\5*\u05b9\n*\3+\3+\3+\3+\7+\u05bf\n+\f+\16+\u05c2")
        buf.write("\13+\3+\7+\u05c5\n+\f+\16+\u05c8\13+\3,\3,\3,\3,\3,\7")
        buf.write(",\u05cf\n,\f,\16,\u05d2\13,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\7,\u05de\n,\f,\16,\u05e1\13,\3,\3,\5,\u05e5\n,\3")
        buf.write("-\3-\3-\3-\7-\u05eb\n-\f-\16-\u05ee\13-\5-\u05f0\n-\3")
        buf.write("-\3-\5-\u05f4\n-\3.\3.\3.\5.\u05f9\n.\3.\3.\3.\3.\3.\7")
        buf.write(".\u0600\n.\f.\16.\u0603\13.\5.\u0605\n.\3.\3.\3.\5.\u060a")
        buf.write("\n.\3.\3.\3.\7.\u060f\n.\f.\16.\u0612\13.\5.\u0614\n.")
        buf.write("\3/\3/\3\60\3\60\7\60\u061a\n\60\f\60\16\60\u061d\13\60")
        buf.write("\3\61\3\61\3\61\3\61\5\61\u0623\n\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\5\61\u062a\n\61\3\62\5\62\u062d\n\62\3\62\3\62")
        buf.write("\3\62\5\62\u0632\n\62\3\62\3\62\3\62\3\62\5\62\u0638\n")
        buf.write("\62\3\62\3\62\5\62\u063c\n\62\3\62\5\62\u063f\n\62\3\62")
        buf.write("\5\62\u0642\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\7")
        buf.write("\63\u064b\n\63\f\63\16\63\u064e\13\63\3\63\3\63\5\63\u0652")
        buf.write("\n\63\3\64\3\64\3\64\5\64\u0657\n\64\3\64\3\64\3\65\5")
        buf.write("\65\u065c\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u066e\n")
        buf.write("\65\5\65\u0670\n\65\3\65\5\65\u0673\n\65\3\66\3\66\3\66")
        buf.write("\3\66\3\67\3\67\3\67\7\67\u067c\n\67\f\67\16\67\u067f")
        buf.write("\13\67\38\38\38\38\78\u0685\n8\f8\168\u0688\138\38\38")
        buf.write("\39\39\59\u068e\n9\3:\3:\3:\3:\7:\u0694\n:\f:\16:\u0697")
        buf.write("\13:\3:\3:\3;\3;\3;\5;\u069e\n;\3<\3<\5<\u06a2\n<\3<\3")
        buf.write("<\3<\3<\3<\3<\5<\u06aa\n<\3<\3<\3<\3<\3<\3<\5<\u06b2\n")
        buf.write("<\3<\3<\3<\3<\5<\u06b8\n<\3=\3=\3=\3=\7=\u06be\n=\f=\16")
        buf.write("=\u06c1\13=\3=\3=\3>\3>\3>\3>\3>\7>\u06ca\n>\f>\16>\u06cd")
        buf.write("\13>\5>\u06cf\n>\3>\3>\3>\3?\5?\u06d5\n?\3?\3?\5?\u06d9")
        buf.write("\n?\5?\u06db\n?\3@\3@\3@\3@\3@\3@\3@\5@\u06e4\n@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u06f0\n@\5@\u06f2\n@\3@\3")
        buf.write("@\3@\3@\3@\5@\u06f9\n@\3@\3@\3@\3@\3@\5@\u0700\n@\3@\3")
        buf.write("@\3@\3@\5@\u0706\n@\3@\3@\3@\3@\5@\u070c\n@\5@\u070e\n")
        buf.write("@\3A\3A\3A\5A\u0713\nA\3A\3A\3B\3B\3B\5B\u071a\nB\3B\3")
        buf.write("B\3C\3C\5C\u0720\nC\3C\3C\5C\u0724\nC\5C\u0726\nC\3D\3")
        buf.write("D\3D\7D\u072b\nD\fD\16D\u072e\13D\3E\3E\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\5F\u073b\nF\3F\3F\3F\3F\3F\3F\7F\u0743\n")
        buf.write("F\fF\16F\u0746\13F\3G\3G\5G\u074a\nG\3H\5H\u074d\nH\3")
        buf.write("H\3H\3H\3H\3H\3H\5H\u0755\nH\3H\3H\3H\3H\3H\7H\u075c\n")
        buf.write("H\fH\16H\u075f\13H\3H\3H\3H\5H\u0764\nH\3H\3H\3H\3H\3")
        buf.write("H\3H\5H\u076c\nH\3H\3H\3H\3H\5H\u0772\nH\3H\3H\3H\5H\u0777")
        buf.write("\nH\3H\3H\3H\5H\u077c\nH\3I\3I\3I\3I\5I\u0782\nI\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\7")
        buf.write("I\u0797\nI\fI\16I\u079a\13I\3J\3J\3J\6J\u079f\nJ\rJ\16")
        buf.write("J\u07a0\3J\3J\5J\u07a5\nJ\3J\3J\3J\3J\3J\6J\u07ac\nJ\r")
        buf.write("J\16J\u07ad\3J\3J\5J\u07b2\nJ\3J\3J\3J\3J\3J\3J\3J\3J")
        buf.write("\3J\3J\3J\3J\3J\3J\7J\u07c2\nJ\fJ\16J\u07c5\13J\5J\u07c7")
        buf.write("\nJ\3J\3J\3J\3J\3J\3J\5J\u07cf\nJ\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\5J\u07d8\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\6J\u07ed\nJ\rJ\16J\u07ee\3J\3J\3J\3J")
        buf.write("\3J\3J\3J\3J\3J\5J\u07fa\nJ\3J\3J\3J\7J\u07ff\nJ\fJ\16")
        buf.write("J\u0802\13J\5J\u0804\nJ\3J\3J\3J\5J\u0809\nJ\3J\3J\3J")
        buf.write("\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u0818\nJ\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\7J\u0822\nJ\fJ\16J\u0825\13J\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\6K\u082f\nK\rK\16K\u0830\5K\u0833\nK\3L")
        buf.write("\3L\3M\3M\3N\3N\3O\3O\3P\3P\7P\u083f\nP\fP\16P\u0842\13")
        buf.write("P\3Q\3Q\3Q\3Q\5Q\u0848\nQ\3R\5R\u084b\nR\3R\3R\5R\u084f")
        buf.write("\nR\3S\3S\3S\5S\u0854\nS\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\5T\u0865\nT\3T\3T\5T\u0869\nT\3T\3T\3")
        buf.write("T\3T\3T\7T\u0870\nT\fT\16T\u0873\13T\3T\5T\u0876\nT\5")
        buf.write("T\u0878\nT\3U\3U\3U\7U\u087d\nU\fU\16U\u0880\13U\3V\3")
        buf.write("V\3V\3V\5V\u0886\nV\3W\3W\3W\7W\u088b\nW\fW\16W\u088e")
        buf.write("\13W\3X\3X\3X\3X\3X\5X\u0895\nX\3Y\3Y\3Y\3Y\3Y\3Z\3Z\3")
        buf.write("Z\3Z\7Z\u08a0\nZ\fZ\16Z\u08a3\13Z\3[\3[\3[\3[\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3\\\3\\\7\\\u08b0\n\\\f\\\16\\\u08b3\13\\")
        buf.write("\3\\\3\\\3\\\3\\\3\\\7\\\u08ba\n\\\f\\\16\\\u08bd\13\\")
        buf.write("\5\\\u08bf\n\\\3\\\3\\\3\\\3\\\3\\\7\\\u08c6\n\\\f\\\16")
        buf.write("\\\u08c9\13\\\5\\\u08cb\n\\\5\\\u08cd\n\\\3\\\5\\\u08d0")
        buf.write("\n\\\3\\\5\\\u08d3\n\\\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\3]\3]\5]\u08e5\n]\3^\3^\3^\3^\3^\3^\3^\5^\u08ee")
        buf.write("\n^\3_\3_\3_\7_\u08f3\n_\f_\16_\u08f6\13_\3`\3`\3`\3`")
        buf.write("\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0907\n`\3a\3a\3")
        buf.write("a\5a\u090c\na\3b\3b\3c\5c\u0911\nc\3c\3c\5c\u0915\nc\3")
        buf.write("c\3c\5c\u0919\nc\3c\3c\5c\u091d\nc\3c\3c\5c\u0921\nc\3")
        buf.write("c\3c\5c\u0925\nc\3c\3c\5c\u0929\nc\3c\5c\u092c\nc\3d\3")
        buf.write("d\3d\7\u02e5\u031e\u0326\u032d\u0335\6H\u008a\u0090\u0092")
        buf.write('e\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 "$&(*,.\60\62')
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\2\34\3\2\u00c6")
        buf.write("\u00c7\4\2OOQQ\5\2Y[\u00ac\u00ac\u00b2\u00b2\4\2\r\r\37")
        buf.write("\37\4\2,,VV\4\2\u00ac\u00ac\u00b2\u00b2\4\2\16\16\u00d3")
        buf.write("\u00d3\3\2eh\3\2+,\4\2HHJJ\3\2\20\21\3\2\u00f2\u00f3\3")
        buf.write("\2$%\4\2\u0088\u0089\u008e\u008e\3\2\u008a\u008d\4\2\u0088")
        buf.write("\u0089\u0091\u0091\3\2{}\3\2\u0080\u0087\3\2\u0088\u0092")
        buf.write("\3\2\35 \3\2()\3\2\u0088\u0089\4\2AA\u0099\u0099\4\2\31")
        buf.write("\31\u0097\u0097\3\2EF\n\2\f\63\66\66>di\177\u008d\u008d")
        buf.write("\u0093\u009c\u009e\u00ea\u00ec\u00ed\2\u0abb\2\u00c8\3")
        buf.write("\2\2\2\4\u00cb\3\2\2\2\6\u00ce\3\2\2\2\b\u00d1\3\2\2\2")
        buf.write("\n\u00d4\3\2\2\2\f\u00d7\3\2\2\2\16\u0338\3\2\2\2\20\u03e4")
        buf.write("\3\2\2\2\22\u03e6\3\2\2\2\24\u03f5\3\2\2\2\26\u0401\3")
        buf.write("\2\2\2\30\u040e\3\2\2\2\32\u0412\3\2\2\2\34\u0446\3\2")
        buf.write('\2\2\36\u0448\3\2\2\2 \u044c\3\2\2\2"\u0458\3\2\2\2$')
        buf.write("\u0462\3\2\2\2&\u0464\3\2\2\2(\u046c\3\2\2\2*\u0475\3")
        buf.write("\2\2\2,\u047d\3\2\2\2.\u0480\3\2\2\2\60\u048b\3\2\2\2")
        buf.write("\62\u049b\3\2\2\2\64\u04a1\3\2\2\2\66\u04a3\3\2\2\28\u04ae")
        buf.write("\3\2\2\2:\u04bf\3\2\2\2<\u04c6\3\2\2\2>\u04c8\3\2\2\2")
        buf.write("@\u04ce\3\2\2\2B\u04dd\3\2\2\2D\u04e9\3\2\2\2F\u051a\3")
        buf.write("\2\2\2H\u051f\3\2\2\2J\u0535\3\2\2\2L\u0537\3\2\2\2N\u059c")
        buf.write("\3\2\2\2P\u059e\3\2\2\2R\u05b8\3\2\2\2T\u05ba\3\2\2\2")
        buf.write("V\u05c9\3\2\2\2X\u05f3\3\2\2\2Z\u05f5\3\2\2\2\\\u0615")
        buf.write("\3\2\2\2^\u0617\3\2\2\2`\u0629\3\2\2\2b\u0641\3\2\2\2")
        buf.write("d\u0651\3\2\2\2f\u0653\3\2\2\2h\u0672\3\2\2\2j\u0674\3")
        buf.write("\2\2\2l\u0678\3\2\2\2n\u0680\3\2\2\2p\u068b\3\2\2\2r\u068f")
        buf.write("\3\2\2\2t\u069a\3\2\2\2v\u06b7\3\2\2\2x\u06b9\3\2\2\2")
        buf.write("z\u06c4\3\2\2\2|\u06da\3\2\2\2~\u070d\3\2\2\2\u0080\u0712")
        buf.write("\3\2\2\2\u0082\u0719\3\2\2\2\u0084\u071d\3\2\2\2\u0086")
        buf.write("\u0727\3\2\2\2\u0088\u072f\3\2\2\2\u008a\u073a\3\2\2\2")
        buf.write("\u008c\u0747\3\2\2\2\u008e\u077b\3\2\2\2\u0090\u0781\3")
        buf.write("\2\2\2\u0092\u0817\3\2\2\2\u0094\u0832\3\2\2\2\u0096\u0834")
        buf.write("\3\2\2\2\u0098\u0836\3\2\2\2\u009a\u0838\3\2\2\2\u009c")
        buf.write("\u083a\3\2\2\2\u009e\u083c\3\2\2\2\u00a0\u0843\3\2\2\2")
        buf.write("\u00a2\u084e\3\2\2\2\u00a4\u0853\3\2\2\2\u00a6\u0877\3")
        buf.write("\2\2\2\u00a8\u0879\3\2\2\2\u00aa\u0881\3\2\2\2\u00ac\u0887")
        buf.write("\3\2\2\2\u00ae\u088f\3\2\2\2\u00b0\u0896\3\2\2\2\u00b2")
        buf.write("\u089b\3\2\2\2\u00b4\u08a4\3\2\2\2\u00b6\u08d2\3\2\2\2")
        buf.write("\u00b8\u08e4\3\2\2\2\u00ba\u08ed\3\2\2\2\u00bc\u08ef\3")
        buf.write("\2\2\2\u00be\u0906\3\2\2\2\u00c0\u090b\3\2\2\2\u00c2\u090d")
        buf.write("\3\2\2\2\u00c4\u092b\3\2\2\2\u00c6\u092d\3\2\2\2\u00c8")
        buf.write("\u00c9\5\16\b\2\u00c9\u00ca\7\2\2\3\u00ca\3\3\2\2\2\u00cb")
        buf.write("\u00cc\5\u0084C\2\u00cc\u00cd\7\2\2\3\u00cd\5\3\2\2\2")
        buf.write("\u00ce\u00cf\5\u0080A\2\u00cf\u00d0\7\2\2\3\u00d0\7\3")
        buf.write("\2\2\2\u00d1\u00d2\5\u0082B\2\u00d2\u00d3\7\2\2\3\u00d3")
        buf.write("\t\3\2\2\2\u00d4\u00d5\5\u00a6T\2\u00d5\u00d6\7\2\2\3")
        buf.write("\u00d6\13\3\2\2\2\u00d7\u00d8\5\u00a8U\2\u00d8\u00d9\7")
        buf.write("\2\2\3\u00d9\r\3\2\2\2\u00da\u0339\5\32\16\2\u00db\u00dc")
        buf.write("\7a\2\2\u00dc\u0339\5\u00be`\2\u00dd\u00de\7N\2\2\u00de")
        buf.write("\u00e2\7\u00cd\2\2\u00df\u00e0\7~\2\2\u00e0\u00e1\7 \2")
        buf.write('\2\u00e1\u00e3\7"\2\2\u00e2\u00df\3\2\2\2\u00e2\u00e3')
        buf.write("\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e7\5\u00be`\2\u00e5")
        buf.write("\u00e6\7q\2\2\u00e6\u00e8\7\u00ee\2\2\u00e7\u00e5\3\2")
        buf.write("\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00ea\3\2\2\2\u00e9\u00eb")
        buf.write("\5\30\r\2\u00ea\u00e9\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb")
        buf.write("\u00ef\3\2\2\2\u00ec\u00ed\7L\2\2\u00ed\u00ee\7\u00b8")
        buf.write("\2\2\u00ee\u00f0\5.\30\2\u00ef\u00ec\3\2\2\2\u00ef\u00f0")
        buf.write("\3\2\2\2\u00f0\u0339\3\2\2\2\u00f1\u00f2\7l\2\2\u00f2")
        buf.write("\u00f3\7\u00cd\2\2\u00f3\u00f4\5\u00be`\2\u00f4\u00f5")
        buf.write("\7r\2\2\u00f5\u00f6\7\u00b8\2\2\u00f6\u00f7\5.\30\2\u00f7")
        buf.write("\u0339\3\2\2\2\u00f8\u00f9\7d\2\2\u00f9\u00fc\7\u00cd")
        buf.write('\2\2\u00fa\u00fb\7~\2\2\u00fb\u00fd\7"\2\2\u00fc\u00fa')
        buf.write("\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe")
        buf.write("\u0100\5\u00be`\2\u00ff\u0101\t\2\2\2\u0100\u00ff\3\2")
        buf.write("\2\2\u0100\u0101\3\2\2\2\u0101\u0339\3\2\2\2\u0102\u0107")
        buf.write("\5\22\n\2\u0103\u0104\7\3\2\2\u0104\u0105\5\u00a8U\2\u0105")
        buf.write("\u0106\7\4\2\2\u0106\u0108\3\2\2\2\u0107\u0103\3\2\2\2")
        buf.write("\u0107\u0108\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u0117\5")
        buf.write(",\27\2\u010a\u010b\7\u00b5\2\2\u010b\u0116\5.\30\2\u010c")
        buf.write("\u010d\7\u00d5\2\2\u010d\u010e\7\24\2\2\u010e\u0116\5")
        buf.write("j\66\2\u010f\u0116\5\24\13\2\u0110\u0116\5\30\r\2\u0111")
        buf.write("\u0112\7q\2\2\u0112\u0116\7\u00ee\2\2\u0113\u0114\7\u00b7")
        buf.write("\2\2\u0114\u0116\5.\30\2\u0115\u010a\3\2\2\2\u0115\u010c")
        buf.write("\3\2\2\2\u0115\u010f\3\2\2\2\u0115\u0110\3\2\2\2\u0115")
        buf.write("\u0111\3\2\2\2\u0115\u0113\3\2\2\2\u0116\u0119\3\2\2\2")
        buf.write("\u0117\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u011e\3")
        buf.write("\2\2\2\u0119\u0117\3\2\2\2\u011a\u011c\7\17\2\2\u011b")
        buf.write("\u011a\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d\3\2\2\2")
        buf.write("\u011d\u011f\5\32\16\2\u011e\u011b\3\2\2\2\u011e\u011f")
        buf.write("\3\2\2\2\u011f\u0339\3\2\2\2\u0120\u0125\5\22\n\2\u0121")
        buf.write("\u0122\7\3\2\2\u0122\u0123\5\u00a8U\2\u0123\u0124\7\4")
        buf.write("\2\2\u0124\u0126\3\2\2\2\u0125\u0121\3\2\2\2\u0125\u0126")
        buf.write("\3\2\2\2\u0126\u0138\3\2\2\2\u0127\u0128\7q\2\2\u0128")
        buf.write("\u0137\7\u00ee\2\2\u0129\u012a\7\u00d5\2\2\u012a\u012b")
        buf.write("\7\24\2\2\u012b\u012c\7\3\2\2\u012c\u012d\5\u00a8U\2\u012d")
        buf.write("\u012e\7\4\2\2\u012e\u0137\3\2\2\2\u012f\u0137\5\24\13")
        buf.write("\2\u0130\u0137\5\26\f\2\u0131\u0137\5~@\2\u0132\u0137")
        buf.write("\5:\36\2\u0133\u0137\5\30\r\2\u0134\u0135\7\u00b7\2\2")
        buf.write("\u0135\u0137\5.\30\2\u0136\u0127\3\2\2\2\u0136\u0129\3")
        buf.write("\2\2\2\u0136\u012f\3\2\2\2\u0136\u0130\3\2\2\2\u0136\u0131")
        buf.write("\3\2\2\2\u0136\u0132\3\2\2\2\u0136\u0133\3\2\2\2\u0136")
        buf.write("\u0134\3\2\2\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2")
        buf.write("\u0138\u0139\3\2\2\2\u0139\u013f\3\2\2\2\u013a\u0138\3")
        buf.write("\2\2\2\u013b\u013d\7\17\2\2\u013c\u013b\3\2\2\2\u013c")
        buf.write("\u013d\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0140\5\32\16")
        buf.write("\2\u013f\u013c\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0339")
        buf.write("\3\2\2\2\u0141\u0142\7N\2\2\u0142\u0146\7O\2\2\u0143\u0144")
        buf.write('\7~\2\2\u0144\u0145\7 \2\2\u0145\u0147\7"\2\2\u0146\u0143')
        buf.write("\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0148\3\2\2\2\u0148")
        buf.write("\u0149\5\u0080A\2\u0149\u014a\7$\2\2\u014a\u014c\5\u0080")
        buf.write("A\2\u014b\u014d\5\30\r\2\u014c\u014b\3\2\2\2\u014c\u014d")
        buf.write("\3\2\2\2\u014d\u0339\3\2\2\2\u014e\u014f\7\u00d1\2\2\u014f")
        buf.write("\u0150\7O\2\2\u0150\u0152\5\u0080A\2\u0151\u0153\5 \21")
        buf.write("\2\u0152\u0151\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0154")
        buf.write("\3\2\2\2\u0154\u0155\7\u00d2\2\2\u0155\u015a\7\u00d4\2")
        buf.write("\2\u0156\u015b\5\u00be`\2\u0157\u0158\7-\2\2\u0158\u0159")
        buf.write("\7_\2\2\u0159\u015b\5l\67\2\u015a\u0156\3\2\2\2\u015a")
        buf.write("\u0157\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u0339\3\2\2\2")
        buf.write("\u015c\u015d\7l\2\2\u015d\u015e\7O\2\2\u015e\u015f\5\u0080")
        buf.write("A\2\u015f\u0160\7\16\2\2\u0160\u0161\7_\2\2\u0161\u0162")
        buf.write("\7\3\2\2\u0162\u0163\5\u00a8U\2\u0163\u0164\7\4\2\2\u0164")
        buf.write("\u0339\3\2\2\2\u0165\u0166\7l\2\2\u0166\u0167\t\3\2\2")
        buf.write("\u0167\u0168\5\u0080A\2\u0168\u0169\7m\2\2\u0169\u016a")
        buf.write("\7i\2\2\u016a\u016b\5\u0080A\2\u016b\u0339\3\2\2\2\u016c")
        buf.write("\u016d\7l\2\2\u016d\u016e\t\3\2\2\u016e\u016f\5\u0080")
        buf.write("A\2\u016f\u0170\7r\2\2\u0170\u0171\7\u00b7\2\2\u0171\u0172")
        buf.write("\5.\30\2\u0172\u0339\3\2\2\2\u0173\u0174\7l\2\2\u0174")
        buf.write("\u0175\t\3\2\2\u0175\u0176\5\u0080A\2\u0176\u0177\7\u00b6")
        buf.write("\2\2\u0177\u017a\7\u00b7\2\2\u0178\u0179\7~\2\2\u0179")
        buf.write('\u017b\7"\2\2\u017a\u0178\3\2\2\2\u017a\u017b\3\2\2\2')
        buf.write("\u017b\u017c\3\2\2\2\u017c\u017d\5.\30\2\u017d\u0339\3")
        buf.write("\2\2\2\u017e\u017f\7l\2\2\u017f\u0180\7O\2\2\u0180\u0182")
        buf.write("\5\u0080A\2\u0181\u0183\5 \21\2\u0182\u0181\3\2\2\2\u0182")
        buf.write("\u0183\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0186\7\u00c5")
        buf.write("\2\2\u0185\u0187\7`\2\2\u0186\u0185\3\2\2\2\u0186\u0187")
        buf.write("\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\5\u00be`\2\u0189")
        buf.write("\u018b\5\u00aaV\2\u018a\u018c\5\u00a4S\2\u018b\u018a\3")
        buf.write("\2\2\2\u018b\u018c\3\2\2\2\u018c\u0339\3\2\2\2\u018d\u018e")
        buf.write("\7l\2\2\u018e\u018f\7O\2\2\u018f\u0191\5\u0080A\2\u0190")
        buf.write("\u0192\5 \21\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2\2\2")
        buf.write("\u0192\u0193\3\2\2\2\u0193\u0194\7r\2\2\u0194\u0195\7")
        buf.write("\u009e\2\2\u0195\u0199\7\u00ee\2\2\u0196\u0197\7L\2\2")
        buf.write("\u0197\u0198\7\u009f\2\2\u0198\u019a\5.\30\2\u0199\u0196")
        buf.write("\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u0339\3\2\2\2\u019b")
        buf.write("\u019c\7l\2\2\u019c\u019d\7O\2\2\u019d\u019f\5\u0080A")
        buf.write("\2\u019e\u01a0\5 \21\2\u019f\u019e\3\2\2\2\u019f\u01a0")
        buf.write("\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a2\7r\2\2\u01a2")
        buf.write("\u01a3\7\u009f\2\2\u01a3\u01a4\5.\30\2\u01a4\u0339\3\2")
        buf.write("\2\2\u01a5\u01a6\7l\2\2\u01a6\u01a7\7O\2\2\u01a7\u01a8")
        buf.write("\5\u0080A\2\u01a8\u01ac\7\16\2\2\u01a9\u01aa\7~\2\2\u01aa")
        buf.write('\u01ab\7 \2\2\u01ab\u01ad\7"\2\2\u01ac\u01a9\3\2\2\2')
        buf.write("\u01ac\u01ad\3\2\2\2\u01ad\u01af\3\2\2\2\u01ae\u01b0\5")
        buf.write("\36\20\2\u01af\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1")
        buf.write("\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u0339\3\2\2\2")
        buf.write("\u01b3\u01b4\7l\2\2\u01b4\u01b5\7Q\2\2\u01b5\u01b6\5\u0080")
        buf.write("A\2\u01b6\u01ba\7\16\2\2\u01b7\u01b8\7~\2\2\u01b8\u01b9")
        buf.write('\7 \2\2\u01b9\u01bb\7"\2\2\u01ba\u01b7\3\2\2\2\u01ba')
        buf.write("\u01bb\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01be\5 \21\2")
        buf.write("\u01bd\u01bc\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01bd\3")
        buf.write("\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u0339\3\2\2\2\u01c1\u01c2")
        buf.write("\7l\2\2\u01c2\u01c3\7O\2\2\u01c3\u01c4\5\u0080A\2\u01c4")
        buf.write("\u01c5\5 \21\2\u01c5\u01c6\7m\2\2\u01c6\u01c7\7i\2\2\u01c7")
        buf.write("\u01c8\5 \21\2\u01c8\u0339\3\2\2\2\u01c9\u01ca\7l\2\2")
        buf.write("\u01ca\u01cb\7O\2\2\u01cb\u01cc\5\u0080A\2\u01cc\u01cf")
        buf.write('\7d\2\2\u01cd\u01ce\7~\2\2\u01ce\u01d0\7"\2\2\u01cf\u01cd')
        buf.write("\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1")
        buf.write("\u01d6\5 \21\2\u01d2\u01d3\7\5\2\2\u01d3\u01d5\5 \21\2")
        buf.write("\u01d4\u01d2\3\2\2\2\u01d5\u01d8\3\2\2\2\u01d6\u01d4\3")
        buf.write("\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01da\3\2\2\2\u01d8\u01d6")
        buf.write("\3\2\2\2\u01d9\u01db\7\u00ca\2\2\u01da\u01d9\3\2\2\2\u01da")
        buf.write("\u01db\3\2\2\2\u01db\u0339\3\2\2\2\u01dc\u01dd\7l\2\2")
        buf.write("\u01dd\u01de\7Q\2\2\u01de\u01df\5\u0080A\2\u01df\u01e2")
        buf.write('\7d\2\2\u01e0\u01e1\7~\2\2\u01e1\u01e3\7"\2\2\u01e2\u01e0')
        buf.write("\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("\u01e9\5 \21\2\u01e5\u01e6\7\5\2\2\u01e6\u01e8\5 \21\2")
        buf.write("\u01e7\u01e5\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01e7\3")
        buf.write("\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u0339\3\2\2\2\u01eb\u01e9")
        buf.write("\3\2\2\2\u01ec\u01ed\7l\2\2\u01ed\u01ee\7O\2\2\u01ee\u01f0")
        buf.write("\5\u0080A\2\u01ef\u01f1\5 \21\2\u01f0\u01ef\3\2\2\2\u01f0")
        buf.write("\u01f1\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f3\7r\2\2")
        buf.write("\u01f3\u01f4\5\30\r\2\u01f4\u0339\3\2\2\2\u01f5\u01f6")
        buf.write("\7l\2\2\u01f6\u01f7\7O\2\2\u01f7\u01f8\5\u0080A\2\u01f8")
        buf.write("\u01f9\7\u00de\2\2\u01f9\u01fa\7b\2\2\u01fa\u0339\3\2")
        buf.write("\2\2\u01fb\u01fc\7d\2\2\u01fc\u01ff\7O\2\2\u01fd\u01fe")
        buf.write('\7~\2\2\u01fe\u0200\7"\2\2\u01ff\u01fd\3\2\2\2\u01ff')
        buf.write("\u0200\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0203\5\u0080")
        buf.write("A\2\u0202\u0204\7\u00ca\2\2\u0203\u0202\3\2\2\2\u0203")
        buf.write("\u0204\3\2\2\2\u0204\u0339\3\2\2\2\u0205\u0206\7d\2\2")
        buf.write('\u0206\u0209\7Q\2\2\u0207\u0208\7~\2\2\u0208\u020a\7"')
        buf.write("\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020b")
        buf.write("\3\2\2\2\u020b\u0339\5\u0080A\2\u020c\u020f\7N\2\2\u020d")
        buf.write("\u020e\7\35\2\2\u020e\u0210\7R\2\2\u020f\u020d\3\2\2\2")
        buf.write("\u020f\u0210\3\2\2\2\u0210\u0215\3\2\2\2\u0211\u0213\7")
        buf.write("\u00b3\2\2\u0212\u0211\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write("\u0214\3\2\2\2\u0214\u0216\7\u00b4\2\2\u0215\u0212\3\2")
        buf.write("\2\2\u0215\u0216\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u021b")
        buf.write("\7Q\2\2\u0218\u0219\7~\2\2\u0219\u021a\7 \2\2\u021a\u021c")
        buf.write('\7"\2\2\u021b\u0218\3\2\2\2\u021b\u021c\3\2\2\2\u021c')
        buf.write("\u021d\3\2\2\2\u021d\u021f\5\u0080A\2\u021e\u0220\5r:")
        buf.write("\2\u021f\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0223")
        buf.write("\3\2\2\2\u0221\u0222\7q\2\2\u0222\u0224\7\u00ee\2\2\u0223")
        buf.write("\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0228\3\2\2\2")
        buf.write("\u0225\u0226\7\u00d5\2\2\u0226\u0227\7=\2\2\u0227\u0229")
        buf.write("\5j\66\2\u0228\u0225\3\2\2\2\u0228\u0229\3\2\2\2\u0229")
        buf.write("\u022c\3\2\2\2\u022a\u022b\7\u00b7\2\2\u022b\u022d\5.")
        buf.write("\30\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022e")
        buf.write("\3\2\2\2\u022e\u022f\7\17\2\2\u022f\u0230\5\32\16\2\u0230")
        buf.write("\u0339\3\2\2\2\u0231\u0234\7N\2\2\u0232\u0233\7\35\2\2")
        buf.write("\u0233\u0235\7R\2\2\u0234\u0232\3\2\2\2\u0234\u0235\3")
        buf.write("\2\2\2\u0235\u0237\3\2\2\2\u0236\u0238\7\u00b3\2\2\u0237")
        buf.write("\u0236\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u0239\3\2\2\2")
        buf.write("\u0239\u023a\7\u00b4\2\2\u023a\u023b\7Q\2\2\u023b\u0240")
        buf.write("\5\u0080A\2\u023c\u023d\7\3\2\2\u023d\u023e\5\u00a8U\2")
        buf.write("\u023e\u023f\7\4\2\2\u023f\u0241\3\2\2\2\u0240\u023c\3")
        buf.write("\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0245")
        buf.write("\5,\27\2\u0243\u0244\7\u00b5\2\2\u0244\u0246\5.\30\2\u0245")
        buf.write("\u0243\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0339\3\2\2\2")
        buf.write("\u0247\u0248\7l\2\2\u0248\u0249\7Q\2\2\u0249\u024b\5\u0080")
        buf.write("A\2\u024a\u024c\7\17\2\2\u024b\u024a\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024e\5\32\16\2\u024e")
        buf.write("\u0339\3\2\2\2\u024f\u0252\7N\2\2\u0250\u0251\7\35\2\2")
        buf.write("\u0251\u0253\7R\2\2\u0252\u0250\3\2\2\2\u0252\u0253\3")
        buf.write("\2\2\2\u0253\u0255\3\2\2\2\u0254\u0256\7\u00b4\2\2\u0255")
        buf.write("\u0254\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257\3\2\2\2")
        buf.write("\u0257\u025b\7\u00ab\2\2\u0258\u0259\7~\2\2\u0259\u025a")
        buf.write('\7 \2\2\u025a\u025c\7"\2\2\u025b\u0258\3\2\2\2\u025b')
        buf.write("\u025c\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u025e\5\u00bc")
        buf.write("_\2\u025e\u025f\7\17\2\2\u025f\u0269\7\u00ee\2\2\u0260")
        buf.write("\u0261\7\u009d\2\2\u0261\u0266\5@!\2\u0262\u0263\7\5\2")
        buf.write("\2\u0263\u0265\5@!\2\u0264\u0262\3\2\2\2\u0265\u0268\3")
        buf.write("\2\2\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u026a")
        buf.write("\3\2\2\2\u0268\u0266\3\2\2\2\u0269\u0260\3\2\2\2\u0269")
        buf.write("\u026a\3\2\2\2\u026a\u0339\3\2\2\2\u026b\u026d\7d\2\2")
        buf.write("\u026c\u026e\7\u00b4\2\2\u026d\u026c\3\2\2\2\u026d\u026e")
        buf.write("\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0272\7\u00ab\2\2\u0270")
        buf.write('\u0271\7~\2\2\u0271\u0273\7"\2\2\u0272\u0270\3\2\2\2')
        buf.write("\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0339\5")
        buf.write("\u00bc_\2\u0275\u0277\7W\2\2\u0276\u0278\t\4\2\2\u0277")
        buf.write("\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279\3\2\2\2")
        buf.write("\u0279\u0339\5\16\b\2\u027a\u027b\7]\2\2\u027b\u027e\7")
        buf.write("^\2\2\u027c\u027d\t\5\2\2\u027d\u027f\5\u00be`\2\u027e")
        buf.write("\u027c\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0284\3\2\2\2")
        buf.write("\u0280\u0282\7$\2\2\u0281\u0280\3\2\2\2\u0281\u0282\3")
        buf.write("\2\2\2\u0282\u0283\3\2\2\2\u0283\u0285\7\u00ee\2\2\u0284")
        buf.write("\u0281\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0339\3\2\2\2")
        buf.write("\u0286\u0287\7]\2\2\u0287\u0288\7O\2\2\u0288\u028b\7\u00ac")
        buf.write("\2\2\u0289\u028a\t\5\2\2\u028a\u028c\5\u00be`\2\u028b")
        buf.write("\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u028d\3\2\2\2")
        buf.write("\u028d\u028e\7$\2\2\u028e\u0290\7\u00ee\2\2\u028f\u0291")
        buf.write("\5 \21\2\u0290\u028f\3\2\2\2\u0290\u0291\3\2\2\2\u0291")
        buf.write("\u0339\3\2\2\2\u0292\u0293\7]\2\2\u0293\u0298\7\u00ce")
        buf.write("\2\2\u0294\u0296\7$\2\2\u0295\u0294\3\2\2\2\u0295\u0296")
        buf.write("\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0299\7\u00ee\2\2\u0298")
        buf.write("\u0295\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u0339\3\2\2\2")
        buf.write("\u029a\u029b\7]\2\2\u029b\u029c\7\u00b7\2\2\u029c\u02a1")
        buf.write("\5\u0080A\2\u029d\u029e\7\3\2\2\u029e\u029f\5\62\32\2")
        buf.write("\u029f\u02a0\7\4\2\2\u02a0\u02a2\3\2\2\2\u02a1\u029d\3")
        buf.write("\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u0339\3\2\2\2\u02a3\u02a4")
        buf.write("\7]\2\2\u02a4\u02a5\7_\2\2\u02a5\u02a6\t\5\2\2\u02a6\u02a9")
        buf.write("\5\u0080A\2\u02a7\u02a8\t\5\2\2\u02a8\u02aa\5\u00be`\2")
        buf.write("\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u0339\3")
        buf.write("\2\2\2\u02ab\u02ac\7]\2\2\u02ac\u02ad\7b\2\2\u02ad\u02af")
        buf.write("\5\u0080A\2\u02ae\u02b0\5 \21\2\u02af\u02ae\3\2\2\2\u02af")
        buf.write("\u02b0\3\2\2\2\u02b0\u0339\3\2\2\2\u02b1\u02b3\7]\2\2")
        buf.write("\u02b2\u02b4\5\u00be`\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4")
        buf.write("\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02bd\7c\2\2\u02b6")
        buf.write("\u02b8\7$\2\2\u02b7\u02b6\3\2\2\2\u02b7\u02b8\3\2\2\2")
        buf.write("\u02b8\u02bb\3\2\2\2\u02b9\u02bc\5\u00bc_\2\u02ba\u02bc")
        buf.write("\7\u00ee\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02ba\3\2\2\2\u02bc")
        buf.write("\u02be\3\2\2\2\u02bd\u02b7\3\2\2\2\u02bd\u02be\3\2\2\2")
        buf.write("\u02be\u0339\3\2\2\2\u02bf\u02c0\7]\2\2\u02c0\u02c1\7")
        buf.write("N\2\2\u02c1\u02c2\7O\2\2\u02c2\u0339\5\u0080A\2\u02c3")
        buf.write("\u02c4\t\6\2\2\u02c4\u02c6\7\u00ab\2\2\u02c5\u02c7\7\u00ac")
        buf.write("\2\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c8")
        buf.write("\3\2\2\2\u02c8\u0339\5$\23\2\u02c9\u02ca\t\6\2\2\u02ca")
        buf.write("\u02cc\7\u00cd\2\2\u02cb\u02cd\7\u00ac\2\2\u02cc\u02cb")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u0339\5\u00be`\2\u02cf\u02d1\t\6\2\2\u02d0\u02d2\7O\2")
        buf.write("\2\u02d1\u02d0\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d4")
        buf.write("\3\2\2\2\u02d3\u02d5\t\7\2\2\u02d4\u02d3\3\2\2\2\u02d4")
        buf.write("\u02d5\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8\5\u0080")
        buf.write("A\2\u02d7\u02d9\5 \21\2\u02d8\u02d7\3\2\2\2\u02d8\u02d9")
        buf.write("\3\2\2\2\u02d9\u02db\3\2\2\2\u02da\u02dc\5&\24\2\u02db")
        buf.write("\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u0339\3\2\2\2")
        buf.write("\u02dd\u02de\7\u00ad\2\2\u02de\u02df\7O\2\2\u02df\u0339")
        buf.write("\5\u0080A\2\u02e0\u02e8\7\u00ad\2\2\u02e1\u02e9\7\u00ee")
        buf.write("\2\2\u02e2\u02e4\13\2\2\2\u02e3\u02e2\3\2\2\2\u02e4\u02e7")
        buf.write("\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e6")
        buf.write("\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e8\u02e1\3\2\2\2")
        buf.write("\u02e8\u02e5\3\2\2\2\u02e9\u0339\3\2\2\2\u02ea\u02ec\7")
        buf.write("\u00af\2\2\u02eb\u02ed\7\u00b1\2\2\u02ec\u02eb\3\2\2\2")
        buf.write("\u02ec\u02ed\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02ef\7")
        buf.write("O\2\2\u02ef\u02f4\5\u0080A\2\u02f0\u02f2\7\17\2\2\u02f1")
        buf.write("\u02f0\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2")
        buf.write("\u02f3\u02f5\5\32\16\2\u02f4\u02f1\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5\u0339\3\2\2\2\u02f6\u02f7\7\u00b0\2\2\u02f7")
        buf.write('\u02fa\7O\2\2\u02f8\u02f9\7~\2\2\u02f9\u02fb\7"\2\2\u02fa')
        buf.write("\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc\3\2\2\2")
        buf.write("\u02fc\u0339\5\u0080A\2\u02fd\u02fe\7\u00ae\2\2\u02fe")
        buf.write("\u0339\7\u00af\2\2\u02ff\u0300\7\u00e1\2\2\u0300\u0302")
        buf.write("\7t\2\2\u0301\u0303\7\u00ec\2\2\u0302\u0301\3\2\2\2\u0302")
        buf.write("\u0303\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0305\7\u00ed")
        buf.write("\2\2\u0305\u0307\7\u00ee\2\2\u0306\u0308\7\u009a\2\2\u0307")
        buf.write("\u0306\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0309\3\2\2\2")
        buf.write("\u0309\u030a\7U\2\2\u030a\u030b\7O\2\2\u030b\u030d\5\u0080")
        buf.write("A\2\u030c\u030e\5 \21\2\u030d\u030c\3\2\2\2\u030d\u030e")
        buf.write("\3\2\2\2\u030e\u0339\3\2\2\2\u030f\u0310\7\u00d0\2\2\u0310")
        buf.write("\u0311\7O\2\2\u0311\u0313\5\u0080A\2\u0312\u0314\5 \21")
        buf.write("\2\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0339")
        buf.write("\3\2\2\2\u0315\u0316\7\u00dc\2\2\u0316\u0317\7\u00dd\2")
        buf.write("\2\u0317\u0318\7O\2\2\u0318\u0339\5\u0080A\2\u0319\u031a")
        buf.write("\t\b\2\2\u031a\u031e\5\u00be`\2\u031b\u031d\13\2\2\2\u031c")
        buf.write("\u031b\3\2\2\2\u031d\u0320\3\2\2\2\u031e\u031f\3\2\2\2")
        buf.write("\u031e\u031c\3\2\2\2\u031f\u0339\3\2\2\2\u0320\u031e\3")
        buf.write("\2\2\2\u0321\u0322\7r\2\2\u0322\u0326\7\u00e2\2\2\u0323")
        buf.write("\u0325\13\2\2\2\u0324\u0323\3\2\2\2\u0325\u0328\3\2\2")
        buf.write("\2\u0326\u0327\3\2\2\2\u0326\u0324\3\2\2\2\u0327\u0339")
        buf.write("\3\2\2\2\u0328\u0326\3\2\2\2\u0329\u032d\7r\2\2\u032a")
        buf.write("\u032c\13\2\2\2\u032b\u032a\3\2\2\2\u032c\u032f\3\2\2")
        buf.write("\2\u032d\u032e\3\2\2\2\u032d\u032b\3\2\2\2\u032e\u0339")
        buf.write("\3\2\2\2\u032f\u032d\3\2\2\2\u0330\u0339\7s\2\2\u0331")
        buf.write("\u0335\5\20\t\2\u0332\u0334\13\2\2\2\u0333\u0332\3\2\2")
        buf.write("\2\u0334\u0337\3\2\2\2\u0335\u0336\3\2\2\2\u0335\u0333")
        buf.write("\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0338")
        buf.write("\u00da\3\2\2\2\u0338\u00db\3\2\2\2\u0338\u00dd\3\2\2\2")
        buf.write("\u0338\u00f1\3\2\2\2\u0338\u00f8\3\2\2\2\u0338\u0102\3")
        buf.write("\2\2\2\u0338\u0120\3\2\2\2\u0338\u0141\3\2\2\2\u0338\u014e")
        buf.write("\3\2\2\2\u0338\u015c\3\2\2\2\u0338\u0165\3\2\2\2\u0338")
        buf.write("\u016c\3\2\2\2\u0338\u0173\3\2\2\2\u0338\u017e\3\2\2\2")
        buf.write("\u0338\u018d\3\2\2\2\u0338\u019b\3\2\2\2\u0338\u01a5\3")
        buf.write("\2\2\2\u0338\u01b3\3\2\2\2\u0338\u01c1\3\2\2\2\u0338\u01c9")
        buf.write("\3\2\2\2\u0338\u01dc\3\2\2\2\u0338\u01ec\3\2\2\2\u0338")
        buf.write("\u01f5\3\2\2\2\u0338\u01fb\3\2\2\2\u0338\u0205\3\2\2\2")
        buf.write("\u0338\u020c\3\2\2\2\u0338\u0231\3\2\2\2\u0338\u0247\3")
        buf.write("\2\2\2\u0338\u024f\3\2\2\2\u0338\u026b\3\2\2\2\u0338\u0275")
        buf.write("\3\2\2\2\u0338\u027a\3\2\2\2\u0338\u0286\3\2\2\2\u0338")
        buf.write("\u0292\3\2\2\2\u0338\u029a\3\2\2\2\u0338\u02a3\3\2\2\2")
        buf.write("\u0338\u02ab\3\2\2\2\u0338\u02b1\3\2\2\2\u0338\u02bf\3")
        buf.write("\2\2\2\u0338\u02c3\3\2\2\2\u0338\u02c9\3\2\2\2\u0338\u02cf")
        buf.write("\3\2\2\2\u0338\u02dd\3\2\2\2\u0338\u02e0\3\2\2\2\u0338")
        buf.write("\u02ea\3\2\2\2\u0338\u02f6\3\2\2\2\u0338\u02fd\3\2\2\2")
        buf.write("\u0338\u02ff\3\2\2\2\u0338\u030f\3\2\2\2\u0338\u0315\3")
        buf.write("\2\2\2\u0338\u0319\3\2\2\2\u0338\u0321\3\2\2\2\u0338\u0329")
        buf.write("\3\2\2\2\u0338\u0330\3\2\2\2\u0338\u0331\3\2\2\2\u0339")
        buf.write("\17\3\2\2\2\u033a\u033b\7N\2\2\u033b\u03e5\7\u00e2\2\2")
        buf.write("\u033c\u033d\7d\2\2\u033d\u03e5\7\u00e2\2\2\u033e\u0340")
        buf.write("\7\u00d9\2\2\u033f\u0341\7\u00e2\2\2\u0340\u033f\3\2\2")
        buf.write("\2\u0340\u0341\3\2\2\2\u0341\u03e5\3\2\2\2\u0342\u0344")
        buf.write("\7\u00d8\2\2\u0343\u0345\7\u00e2\2\2\u0344\u0343\3\2\2")
        buf.write("\2\u0344\u0345\3\2\2\2\u0345\u03e5\3\2\2\2\u0346\u0347")
        buf.write("\7]\2\2\u0347\u03e5\7\u00d9\2\2\u0348\u0349\7]\2\2\u0349")
        buf.write("\u034b\7\u00e2\2\2\u034a\u034c\7\u00d9\2\2\u034b\u034a")
        buf.write("\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u03e5\3\2\2\2\u034d")
        buf.write("\u034e\7]\2\2\u034e\u03e5\7\u00e5\2\2\u034f\u0350\7]\2")
        buf.write("\2\u0350\u03e5\7\u00e3\2\2\u0351\u0352\7]\2\2\u0352\u0353")
        buf.write("\7G\2\2\u0353\u03e5\7\u00e3\2\2\u0354\u0355\7\u00df\2")
        buf.write("\2\u0355\u03e5\7O\2\2\u0356\u0357\7\u00e0\2\2\u0357\u03e5")
        buf.write("\7O\2\2\u0358\u0359\7]\2\2\u0359\u03e5\7\u00e4\2\2\u035a")
        buf.write("\u035b\7]\2\2\u035b\u035c\7N\2\2\u035c\u03e5\7O\2\2\u035d")
        buf.write("\u035e\7]\2\2\u035e\u03e5\7\u00e6\2\2\u035f\u0360\7]\2")
        buf.write("\2\u0360\u03e5\7\u00e8\2\2\u0361\u0362\7]\2\2\u0362\u03e5")
        buf.write("\7\u00e9\2\2\u0363\u0364\7N\2\2\u0364\u03e5\7\u00e7\2")
        buf.write("\2\u0365\u0366\7d\2\2\u0366\u03e5\7\u00e7\2\2\u0367\u0368")
        buf.write("\7l\2\2\u0368\u03e5\7\u00e7\2\2\u0369\u036a\7\u00da\2")
        buf.write("\2\u036a\u03e5\7O\2\2\u036b\u036c\7\u00da\2\2\u036c\u03e5")
        buf.write("\7\u00cd\2\2\u036d\u036e\7\u00db\2\2\u036e\u03e5\7O\2")
        buf.write("\2\u036f\u0370\7\u00db\2\2\u0370\u03e5\7\u00cd\2\2\u0371")
        buf.write("\u0372\7N\2\2\u0372\u0373\7\u00b4\2\2\u0373\u03e5\7y\2")
        buf.write("\2\u0374\u0375\7d\2\2\u0375\u0376\7\u00b4\2\2\u0376\u03e5")
        buf.write("\7y\2\2\u0377\u0378\7l\2\2\u0378\u0379\7O\2\2\u0379\u037a")
        buf.write("\5\u0080A\2\u037a\u037b\7 \2\2\u037b\u037c\7\u00c8\2\2")
        buf.write("\u037c\u03e5\3\2\2\2\u037d\u037e\7l\2\2\u037e\u037f\7")
        buf.write("O\2\2\u037f\u0380\5\u0080A\2\u0380\u0381\7\u00c8\2\2\u0381")
        buf.write("\u0382\7\24\2\2\u0382\u03e5\3\2\2\2\u0383\u0384\7l\2\2")
        buf.write("\u0384\u0385\7O\2\2\u0385\u0386\5\u0080A\2\u0386\u0387")
        buf.write("\7 \2\2\u0387\u0388\7\u00c9\2\2\u0388\u03e5\3\2\2\2\u0389")
        buf.write("\u038a\7l\2\2\u038a\u038b\7O\2\2\u038b\u038c\5\u0080A")
        buf.write("\2\u038c\u038d\7\u00ba\2\2\u038d\u038e\7\24\2\2\u038e")
        buf.write("\u03e5\3\2\2\2\u038f\u0390\7l\2\2\u0390\u0391\7O\2\2\u0391")
        buf.write("\u0392\5\u0080A\2\u0392\u0393\7 \2\2\u0393\u0394\7\u00ba")
        buf.write("\2\2\u0394\u03e5\3\2\2\2\u0395\u0396\7l\2\2\u0396\u0397")
        buf.write("\7O\2\2\u0397\u0398\5\u0080A\2\u0398\u0399\7 \2\2\u0399")
        buf.write("\u039a\7\u00bb\2\2\u039a\u039b\7\17\2\2\u039b\u039c\7")
        buf.write("\u00bc\2\2\u039c\u03e5\3\2\2\2\u039d\u039e\7l\2\2\u039e")
        buf.write("\u039f\7O\2\2\u039f\u03a0\5\u0080A\2\u03a0\u03a1\7r\2")
        buf.write("\2\u03a1\u03a2\7\u00ba\2\2\u03a2\u03a3\7\u00bd\2\2\u03a3")
        buf.write("\u03e5\3\2\2\2\u03a4\u03a5\7l\2\2\u03a5\u03a6\7O\2\2\u03a6")
        buf.write("\u03a7\5\u0080A\2\u03a7\u03a8\7\u00be\2\2\u03a8\u03a9")
        buf.write("\7A\2\2\u03a9\u03e5\3\2\2\2\u03aa\u03ab\7l\2\2\u03ab\u03ac")
        buf.write("\7O\2\2\u03ac\u03ad\5\u0080A\2\u03ad\u03ae\7\u00bf\2\2")
        buf.write("\u03ae\u03af\7A\2\2\u03af\u03e5\3\2\2\2\u03b0\u03b1\7")
        buf.write("l\2\2\u03b1\u03b2\7O\2\2\u03b2\u03b3\5\u0080A\2\u03b3")
        buf.write("\u03b4\7\u00c0\2\2\u03b4\u03b5\7A\2\2\u03b5\u03e5\3\2")
        buf.write("\2\2\u03b6\u03b7\7l\2\2\u03b7\u03b8\7O\2\2\u03b8\u03b9")
        buf.write("\5\u0080A\2\u03b9\u03ba\7\u00c2\2\2\u03ba\u03e5\3\2\2")
        buf.write("\2\u03bb\u03bc\7l\2\2\u03bc\u03bd\7O\2\2\u03bd\u03bf\5")
        buf.write("\u0080A\2\u03be\u03c0\5 \21\2\u03bf\u03be\3\2\2\2\u03bf")
        buf.write("\u03c0\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\7\u00c3")
        buf.write("\2\2\u03c2\u03e5\3\2\2\2\u03c3\u03c4\7l\2\2\u03c4\u03c5")
        buf.write("\7O\2\2\u03c5\u03c7\5\u0080A\2\u03c6\u03c8\5 \21\2\u03c7")
        buf.write("\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9\3\2\2\2")
        buf.write("\u03c9\u03ca\7\u00c4\2\2\u03ca\u03e5\3\2\2\2\u03cb\u03cc")
        buf.write("\7l\2\2\u03cc\u03cd\7O\2\2\u03cd\u03cf\5\u0080A\2\u03ce")
        buf.write("\u03d0\5 \21\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0\3\2\2\2")
        buf.write("\u03d0\u03d1\3\2\2\2\u03d1\u03d2\7r\2\2\u03d2\u03d3\7")
        buf.write("\u00c1\2\2\u03d3\u03e5\3\2\2\2\u03d4\u03d5\7l\2\2\u03d5")
        buf.write("\u03d6\7O\2\2\u03d6\u03d8\5\u0080A\2\u03d7\u03d9\5 \21")
        buf.write("\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da")
        buf.write("\3\2\2\2\u03da\u03db\7R\2\2\u03db\u03dc\7_\2\2\u03dc\u03e5")
        buf.write("\3\2\2\2\u03dd\u03de\7u\2\2\u03de\u03e5\7v\2\2\u03df\u03e5")
        buf.write("\7w\2\2\u03e0\u03e5\7x\2\2\u03e1\u03e5\7\u00cf\2\2\u03e2")
        buf.write("\u03e3\7T\2\2\u03e3\u03e5\7\r\2\2\u03e4\u033a\3\2\2\2")
        buf.write("\u03e4\u033c\3\2\2\2\u03e4\u033e\3\2\2\2\u03e4\u0342\3")
        buf.write("\2\2\2\u03e4\u0346\3\2\2\2\u03e4\u0348\3\2\2\2\u03e4\u034d")
        buf.write("\3\2\2\2\u03e4\u034f\3\2\2\2\u03e4\u0351\3\2\2\2\u03e4")
        buf.write("\u0354\3\2\2\2\u03e4\u0356\3\2\2\2\u03e4\u0358\3\2\2\2")
        buf.write("\u03e4\u035a\3\2\2\2\u03e4\u035d\3\2\2\2\u03e4\u035f\3")
        buf.write("\2\2\2\u03e4\u0361\3\2\2\2\u03e4\u0363\3\2\2\2\u03e4\u0365")
        buf.write("\3\2\2\2\u03e4\u0367\3\2\2\2\u03e4\u0369\3\2\2\2\u03e4")
        buf.write("\u036b\3\2\2\2\u03e4\u036d\3\2\2\2\u03e4\u036f\3\2\2\2")
        buf.write("\u03e4\u0371\3\2\2\2\u03e4\u0374\3\2\2\2\u03e4\u0377\3")
        buf.write("\2\2\2\u03e4\u037d\3\2\2\2\u03e4\u0383\3\2\2\2\u03e4\u0389")
        buf.write("\3\2\2\2\u03e4\u038f\3\2\2\2\u03e4\u0395\3\2\2\2\u03e4")
        buf.write("\u039d\3\2\2\2\u03e4\u03a4\3\2\2\2\u03e4\u03aa\3\2\2\2")
        buf.write("\u03e4\u03b0\3\2\2\2\u03e4\u03b6\3\2\2\2\u03e4\u03bb\3")
        buf.write("\2\2\2\u03e4\u03c3\3\2\2\2\u03e4\u03cb\3\2\2\2\u03e4\u03d4")
        buf.write("\3\2\2\2\u03e4\u03dd\3\2\2\2\u03e4\u03df\3\2\2\2\u03e4")
        buf.write("\u03e0\3\2\2\2\u03e4\u03e1\3\2\2\2\u03e4\u03e2\3\2\2\2")
        buf.write("\u03e5\21\3\2\2\2\u03e6\u03e8\7N\2\2\u03e7\u03e9\7\u00b4")
        buf.write("\2\2\u03e8\u03e7\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03eb")
        buf.write("\3\2\2\2\u03ea\u03ec\7\u00d6\2\2\u03eb\u03ea\3\2\2\2\u03eb")
        buf.write("\u03ec\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03f1\7O\2\2")
        buf.write('\u03ee\u03ef\7~\2\2\u03ef\u03f0\7 \2\2\u03f0\u03f2\7"')
        buf.write("\2\2\u03f1\u03ee\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3")
        buf.write("\3\2\2\2\u03f3\u03f4\5\u0080A\2\u03f4\23\3\2\2\2\u03f5")
        buf.write("\u03f6\7\u00c8\2\2\u03f6\u03f7\7\24\2\2\u03f7\u03fb\5")
        buf.write("j\66\2\u03f8\u03f9\7\u00c9\2\2\u03f9\u03fa\7\24\2\2\u03fa")
        buf.write("\u03fc\5n8\2\u03fb\u03f8\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc")
        buf.write("\u03fd\3\2\2\2\u03fd\u03fe\7U\2\2\u03fe\u03ff\7\u00f2")
        buf.write("\2\2\u03ff\u0400\7\u00b9\2\2\u0400\25\3\2\2\2\u0401\u0402")
        buf.write("\7\u00ba\2\2\u0402\u0403\7\24\2\2\u0403\u0404\5j\66\2")
        buf.write("\u0404\u0407\7=\2\2\u0405\u0408\5\66\34\2\u0406\u0408")
        buf.write("\58\35\2\u0407\u0405\3\2\2\2\u0407\u0406\3\2\2\2\u0408")
        buf.write("\u040c\3\2\2\2\u0409\u040a\7\u00bb\2\2\u040a\u040b\7\17")
        buf.write("\2\2\u040b\u040d\7\u00bc\2\2\u040c\u0409\3\2\2\2\u040c")
        buf.write("\u040d\3\2\2\2\u040d\27\3\2\2\2\u040e\u040f\7\u00bd\2")
        buf.write("\2\u040f\u0410\7\u00ee\2\2\u0410\31\3\2\2\2\u0411\u0413")
        buf.write("\5(\25\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413")
        buf.write('\u0414\3\2\2\2\u0414\u0415\5B"\2\u0415\33\3\2\2\2\u0416')
        buf.write("\u0417\7S\2\2\u0417\u0418\7\u009a\2\2\u0418\u0419\7O\2")
        buf.write("\2\u0419\u0420\5\u0080A\2\u041a\u041e\5 \21\2\u041b\u041c")
        buf.write('\7~\2\2\u041c\u041d\7 \2\2\u041d\u041f\7"\2\2\u041e\u041b')
        buf.write("\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421\3\2\2\2\u0420")
        buf.write("\u041a\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0447\3\2\2\2")
        buf.write("\u0422\u0423\7S\2\2\u0423\u0425\7U\2\2\u0424\u0426\7O")
        buf.write("\2\2\u0425\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427")
        buf.write("\3\2\2\2\u0427\u0429\5\u0080A\2\u0428\u042a\5 \21\2\u0429")
        buf.write("\u0428\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u0447\3\2\2\2")
        buf.write("\u042b\u042c\7S\2\2\u042c\u042e\7\u009a\2\2\u042d\u042f")
        buf.write("\7\u00ec\2\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2\u042f")
        buf.write("\u0430\3\2\2\2\u0430\u0431\7P\2\2\u0431\u0433\7\u00ee")
        buf.write("\2\2\u0432\u0434\5~@\2\u0433\u0432\3\2\2\2\u0433\u0434")
        buf.write("\3\2\2\2\u0434\u0436\3\2\2\2\u0435\u0437\5:\36\2\u0436")
        buf.write("\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0447\3\2\2\2")
        buf.write("\u0438\u0439\7S\2\2\u0439\u043b\7\u009a\2\2\u043a\u043c")
        buf.write("\7\u00ec\2\2\u043b\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c")
        buf.write("\u043d\3\2\2\2\u043d\u043f\7P\2\2\u043e\u0440\7\u00ee")
        buf.write("\2\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0441")
        buf.write("\3\2\2\2\u0441\u0444\5,\27\2\u0442\u0443\7\u00b5\2\2\u0443")
        buf.write("\u0445\5.\30\2\u0444\u0442\3\2\2\2\u0444\u0445\3\2\2\2")
        buf.write("\u0445\u0447\3\2\2\2\u0446\u0416\3\2\2\2\u0446\u0422\3")
        buf.write("\2\2\2\u0446\u042b\3\2\2\2\u0446\u0438\3\2\2\2\u0447\35")
        buf.write("\3\2\2\2\u0448\u044a\5 \21\2\u0449\u044b\5\30\r\2\u044a")
        buf.write("\u0449\3\2\2\2\u044a\u044b\3\2\2\2\u044b\37\3\2\2\2\u044c")
        buf.write('\u044d\7A\2\2\u044d\u044e\7\3\2\2\u044e\u0453\5"\22\2')
        buf.write('\u044f\u0450\7\5\2\2\u0450\u0452\5"\22\2\u0451\u044f')
        buf.write("\3\2\2\2\u0452\u0455\3\2\2\2\u0453\u0451\3\2\2\2\u0453")
        buf.write("\u0454\3\2\2\2\u0454\u0456\3\2\2\2\u0455\u0453\3\2\2\2")
        buf.write("\u0456\u0457\7\4\2\2\u0457!\3\2\2\2\u0458\u045b\5\u00be")
        buf.write("`\2\u0459\u045a\7\u0080\2\2\u045a\u045c\5\u0094K\2\u045b")
        buf.write("\u0459\3\2\2\2\u045b\u045c\3\2\2\2\u045c#\3\2\2\2\u045d")
        buf.write("\u0463\5\u00bc_\2\u045e\u0463\7\u00ee\2\2\u045f\u0463")
        buf.write("\5\u0096L\2\u0460\u0463\5\u0098M\2\u0461\u0463\5\u009a")
        buf.write("N\2\u0462\u045d\3\2\2\2\u0462\u045e\3\2\2\2\u0462\u045f")
        buf.write("\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0461\3\2\2\2\u0463")
        buf.write("%\3\2\2\2\u0464\u0469\5\u00be`\2\u0465\u0466\7\6\2\2\u0466")
        buf.write("\u0468\5\u00be`\2\u0467\u0465\3\2\2\2\u0468\u046b\3\2")
        buf.write("\2\2\u0469\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a'\3")
        buf.write("\2\2\2\u046b\u0469\3\2\2\2\u046c\u046d\7L\2\2\u046d\u0472")
        buf.write("\5*\26\2\u046e\u046f\7\5\2\2\u046f\u0471\5*\26\2\u0470")
        buf.write("\u046e\3\2\2\2\u0471\u0474\3\2\2\2\u0472\u0470\3\2\2\2")
        buf.write("\u0472\u0473\3\2\2\2\u0473)\3\2\2\2\u0474\u0472\3\2\2")
        buf.write("\2\u0475\u0477\5\u00be`\2\u0476\u0478\7\17\2\2\u0477\u0476")
        buf.write("\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0479\3\2\2\2\u0479")
        buf.write("\u047a\7\3\2\2\u047a\u047b\5\32\16\2\u047b\u047c\7\4\2")
        buf.write("\2\u047c+\3\2\2\2\u047d\u047e\7\u009d\2\2\u047e\u047f")
        buf.write("\5\u00bc_\2\u047f-\3\2\2\2\u0480\u0481\7\3\2\2\u0481\u0486")
        buf.write("\5\60\31\2\u0482\u0483\7\5\2\2\u0483\u0485\5\60\31\2\u0484")
        buf.write("\u0482\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484\3\2\2\2")
        buf.write("\u0486\u0487\3\2\2\2\u0487\u0489\3\2\2\2\u0488\u0486\3")
        buf.write("\2\2\2\u0489\u048a\7\4\2\2\u048a/\3\2\2\2\u048b\u0490")
        buf.write("\5\62\32\2\u048c\u048e\7\u0080\2\2\u048d\u048c\3\2\2\2")
        buf.write("\u048d\u048e\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0491\5")
        buf.write("\64\33\2\u0490\u048d\3\2\2\2\u0490\u0491\3\2\2\2\u0491")
        buf.write("\61\3\2\2\2\u0492\u0497\5\u00be`\2\u0493\u0494\7\6\2\2")
        buf.write("\u0494\u0496\5\u00be`\2\u0495\u0493\3\2\2\2\u0496\u0499")
        buf.write("\3\2\2\2\u0497\u0495\3\2\2\2\u0497\u0498\3\2\2\2\u0498")
        buf.write("\u049c\3\2\2\2\u0499\u0497\3\2\2\2\u049a\u049c\7\u00ee")
        buf.write("\2\2\u049b\u0492\3\2\2\2\u049b\u049a\3\2\2\2\u049c\63")
        buf.write("\3\2\2\2\u049d\u04a2\7\u00f2\2\2\u049e\u04a2\7\u00f3\2")
        buf.write("\2\u049f\u04a2\5\u009cO\2\u04a0\u04a2\7\u00ee\2\2\u04a1")
        buf.write("\u049d\3\2\2\2\u04a1\u049e\3\2\2\2\u04a1\u049f\3\2\2\2")
        buf.write("\u04a1\u04a0\3\2\2\2\u04a2\65\3\2\2\2\u04a3\u04a4\7\3")
        buf.write("\2\2\u04a4\u04a9\5\u0094K\2\u04a5\u04a6\7\5\2\2\u04a6")
        buf.write("\u04a8\5\u0094K\2\u04a7\u04a5\3\2\2\2\u04a8\u04ab\3\2")
        buf.write("\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ac")
        buf.write("\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac\u04ad\7\4\2\2\u04ad")
        buf.write("\67\3\2\2\2\u04ae\u04af\7\3\2\2\u04af\u04b4\5\66\34\2")
        buf.write("\u04b0\u04b1\7\5\2\2\u04b1\u04b3\5\66\34\2\u04b2\u04b0")
        buf.write("\3\2\2\2\u04b3\u04b6\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b4")
        buf.write("\u04b5\3\2\2\2\u04b5\u04b7\3\2\2\2\u04b6\u04b4\3\2\2\2")
        buf.write("\u04b7\u04b8\7\4\2\2\u04b89\3\2\2\2\u04b9\u04ba\7\u00bb")
        buf.write("\2\2\u04ba\u04bb\7\17\2\2\u04bb\u04c0\5<\37\2\u04bc\u04bd")
        buf.write("\7\u00bb\2\2\u04bd\u04be\7\24\2\2\u04be\u04c0\5> \2\u04bf")
        buf.write("\u04b9\3\2\2\2\u04bf\u04bc\3\2\2\2\u04c0;\3\2\2\2\u04c1")
        buf.write("\u04c2\7\u00cb\2\2\u04c2\u04c3\7\u00ee\2\2\u04c3\u04c4")
        buf.write("\7\u00cc\2\2\u04c4\u04c7\7\u00ee\2\2\u04c5\u04c7\5\u00be")
        buf.write("`\2\u04c6\u04c1\3\2\2\2\u04c6\u04c5\3\2\2\2\u04c7=\3\2")
        buf.write("\2\2\u04c8\u04cc\7\u00ee\2\2\u04c9\u04ca\7L\2\2\u04ca")
        buf.write("\u04cb\7\u009f\2\2\u04cb\u04cd\5.\30\2\u04cc\u04c9\3\2")
        buf.write("\2\2\u04cc\u04cd\3\2\2\2\u04cd?\3\2\2\2\u04ce\u04cf\5")
        buf.write("\u00be`\2\u04cf\u04d0\7\u00ee\2\2\u04d0A\3\2\2\2\u04d1")
        buf.write("\u04d3\5\34\17\2\u04d2\u04d1\3\2\2\2\u04d2\u04d3\3\2\2")
        buf.write("\2\u04d3\u04d4\3\2\2\2\u04d4\u04d5\5H%\2\u04d5\u04d6\5")
        buf.write("D#\2\u04d6\u04de\3\2\2\2\u04d7\u04d9\5T+\2\u04d8\u04da")
        buf.write("\5F$\2\u04d9\u04d8\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04d9")
        buf.write("\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04de\3\2\2\2\u04dd")
        buf.write("\u04d2\3\2\2\2\u04dd\u04d7\3\2\2\2\u04deC\3\2\2\2\u04df")
        buf.write("\u04e0\7\31\2\2\u04e0\u04e1\7\24\2\2\u04e1\u04e6\5L'")
        buf.write("\2\u04e2\u04e3\7\5\2\2\u04e3\u04e5\5L'\2\u04e4\u04e2")
        buf.write("\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e6")
        buf.write("\u04e7\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2")
        buf.write("\u04e9\u04df\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04f5\3")
        buf.write("\2\2\2\u04eb\u04ec\7\u0098\2\2\u04ec\u04ed\7\24\2\2\u04ed")
        buf.write("\u04f2\5\u0088E\2\u04ee\u04ef\7\5\2\2\u04ef\u04f1\5\u0088")
        buf.write("E\2\u04f0\u04ee\3\2\2\2\u04f1\u04f4\3\2\2\2\u04f2\u04f0")
        buf.write("\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f6\3\2\2\2\u04f4")
        buf.write("\u04f2\3\2\2\2\u04f5\u04eb\3\2\2\2\u04f5\u04f6\3\2\2\2")
        buf.write("\u04f6\u0501\3\2\2\2\u04f7\u04f8\7\u0099\2\2\u04f8\u04f9")
        buf.write("\7\24\2\2\u04f9\u04fe\5\u0088E\2\u04fa\u04fb\7\5\2\2\u04fb")
        buf.write("\u04fd\5\u0088E\2\u04fc\u04fa\3\2\2\2\u04fd\u0500\3\2")
        buf.write("\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0502")
        buf.write("\3\2\2\2\u0500\u04fe\3\2\2\2\u0501\u04f7\3\2\2\2\u0501")
        buf.write("\u0502\3\2\2\2\u0502\u050d\3\2\2\2\u0503\u0504\7\u0097")
        buf.write("\2\2\u0504\u0505\7\24\2\2\u0505\u050a\5L'\2\u0506\u0507")
        buf.write("\7\5\2\2\u0507\u0509\5L'\2\u0508\u0506\3\2\2\2\u0509")
        buf.write("\u050c\3\2\2\2\u050a\u0508\3\2\2\2\u050a\u050b\3\2\2\2")
        buf.write("\u050b\u050e\3\2\2\2\u050c\u050a\3\2\2\2\u050d\u0503\3")
        buf.write("\2\2\2\u050d\u050e\3\2\2\2\u050e\u0510\3\2\2\2\u050f\u0511")
        buf.write("\5\u00b2Z\2\u0510\u050f\3\2\2\2\u0510\u0511\3\2\2\2\u0511")
        buf.write("\u0517\3\2\2\2\u0512\u0515\7\33\2\2\u0513\u0516\7\20\2")
        buf.write("\2\u0514\u0516\5\u0088E\2\u0515\u0513\3\2\2\2\u0515\u0514")
        buf.write("\3\2\2\2\u0516\u0518\3\2\2\2\u0517\u0512\3\2\2\2\u0517")
        buf.write("\u0518\3\2\2\2\u0518E\3\2\2\2\u0519\u051b\5\34\17\2\u051a")
        buf.write("\u0519\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u051c\3\2\2\2")
        buf.write("\u051c\u051d\5N(\2\u051d\u051e\5D#\2\u051eG\3\2\2\2\u051f")
        buf.write("\u0520\b%\1\2\u0520\u0521\5J&\2\u0521\u052a\3\2\2\2\u0522")
        buf.write("\u0523\f\3\2\2\u0523\u0525\t\t\2\2\u0524\u0526\5\\/\2")
        buf.write("\u0525\u0524\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0527\3")
        buf.write("\2\2\2\u0527\u0529\5H%\4\u0528\u0522\3\2\2\2\u0529\u052c")
        buf.write("\3\2\2\2\u052a\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b")
        buf.write("I\3\2\2\2\u052c\u052a\3\2\2\2\u052d\u0536\5N(\2\u052e")
        buf.write("\u052f\7O\2\2\u052f\u0536\5\u0080A\2\u0530\u0536\5x=\2")
        buf.write('\u0531\u0532\7\3\2\2\u0532\u0533\5B"\2\u0533\u0534\7')
        buf.write("\4\2\2\u0534\u0536\3\2\2\2\u0535\u052d\3\2\2\2\u0535\u052e")
        buf.write("\3\2\2\2\u0535\u0530\3\2\2\2\u0535\u0531\3\2\2\2\u0536")
        buf.write("K\3\2\2\2\u0537\u0539\5\u0088E\2\u0538\u053a\t\n\2\2\u0539")
        buf.write("\u0538\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053d\3\2\2\2")
        buf.write("\u053b\u053c\7*\2\2\u053c\u053e\t\13\2\2\u053d\u053b\3")
        buf.write("\2\2\2\u053d\u053e\3\2\2\2\u053eM\3\2\2\2\u053f\u0540")
        buf.write("\7\f\2\2\u0540\u0541\7\u009b\2\2\u0541\u0542\7\3\2\2\u0542")
        buf.write("\u0543\5\u0086D\2\u0543\u0544\7\4\2\2\u0544\u054a\3\2")
        buf.write("\2\2\u0545\u0546\7o\2\2\u0546\u054a\5\u0086D\2\u0547\u0548")
        buf.write("\7\u009c\2\2\u0548\u054a\5\u0086D\2\u0549\u053f\3\2\2")
        buf.write("\2\u0549\u0545\3\2\2\2\u0549\u0547\3\2\2\2\u054a\u054c")
        buf.write("\3\2\2\2\u054b\u054d\5~@\2\u054c\u054b\3\2\2\2\u054c\u054d")
        buf.write("\3\2\2\2\u054d\u0550\3\2\2\2\u054e\u054f\7\u00a1\2\2\u054f")
        buf.write("\u0551\7\u00ee\2\2\u0550\u054e\3\2\2\2\u0550\u0551\3\2")
        buf.write("\2\2\u0551\u0552\3\2\2\2\u0552\u0553\7\u009d\2\2\u0553")
        buf.write("\u0560\7\u00ee\2\2\u0554\u055e\7\17\2\2\u0555\u055f\5")
        buf.write("l\67\2\u0556\u055f\5\u00a8U\2\u0557\u055a\7\3\2\2\u0558")
        buf.write("\u055b\5l\67\2\u0559\u055b\5\u00a8U\2\u055a\u0558\3\2")
        buf.write("\2\2\u055a\u0559\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055d")
        buf.write("\7\4\2\2\u055d\u055f\3\2\2\2\u055e\u0555\3\2\2\2\u055e")
        buf.write("\u0556\3\2\2\2\u055e\u0557\3\2\2\2\u055f\u0561\3\2\2\2")
        buf.write("\u0560\u0554\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0563\3")
        buf.write("\2\2\2\u0562\u0564\5~@\2\u0563\u0562\3\2\2\2\u0563\u0564")
        buf.write("\3\2\2\2\u0564\u0567\3\2\2\2\u0565\u0566\7\u00a0\2\2\u0566")
        buf.write("\u0568\7\u00ee\2\2\u0567\u0565\3\2\2\2\u0567\u0568\3\2")
        buf.write("\2\2\u0568\u056a\3\2\2\2\u0569\u056b\5T+\2\u056a\u0569")
        buf.write("\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056e\3\2\2\2\u056c")
        buf.write("\u056d\7\22\2\2\u056d\u056f\5\u008aF\2\u056e\u056c\3\2")
        buf.write("\2\2\u056e\u056f\3\2\2\2\u056f\u059d\3\2\2\2\u0570\u0574")
        buf.write("\7\f\2\2\u0571\u0573\5P)\2\u0572\u0571\3\2\2\2\u0573\u0576")
        buf.write("\3\2\2\2\u0574\u0572\3\2\2\2\u0574\u0575\3\2\2\2\u0575")
        buf.write("\u0578\3\2\2\2\u0576\u0574\3\2\2\2\u0577\u0579\5\\/\2")
        buf.write("\u0578\u0577\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u057a\3")
        buf.write("\2\2\2\u057a\u057c\5\u0086D\2\u057b\u057d\5T+\2\u057c")
        buf.write("\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u0587\3\2\2\2")
        buf.write("\u057e\u0584\5T+\2\u057f\u0581\7\f\2\2\u0580\u0582\5\\")
        buf.write("/\2\u0581\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583")
        buf.write("\3\2\2\2\u0583\u0585\5\u0086D\2\u0584\u057f\3\2\2\2\u0584")
        buf.write("\u0585\3\2\2\2\u0585\u0587\3\2\2\2\u0586\u0570\3\2\2\2")
        buf.write("\u0586\u057e\3\2\2\2\u0587\u058b\3\2\2\2\u0588\u058a\5")
        buf.write("Z.\2\u0589\u0588\3\2\2\2\u058a\u058d\3\2\2\2\u058b\u0589")
        buf.write("\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u0590\3\2\2\2\u058d")
        buf.write("\u058b\3\2\2\2\u058e\u058f\7\22\2\2\u058f\u0591\5\u008a")
        buf.write("F\2\u0590\u058e\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0593")
        buf.write("\3\2\2\2\u0592\u0594\5V,\2\u0593\u0592\3\2\2\2\u0593\u0594")
        buf.write("\3\2\2\2\u0594\u0597\3\2\2\2\u0595\u0596\7\32\2\2\u0596")
        buf.write("\u0598\5\u008aF\2\u0597\u0595\3\2\2\2\u0597\u0598\3\2")
        buf.write("\2\2\u0598\u059a\3\2\2\2\u0599\u059b\5\u00b2Z\2\u059a")
        buf.write("\u0599\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u059d\3\2\2\2")
        buf.write("\u059c\u0549\3\2\2\2\u059c\u0586\3\2\2\2\u059dO\3\2\2")
        buf.write("\2\u059e\u059f\7\7\2\2\u059f\u05a6\5R*\2\u05a0\u05a2\7")
        buf.write("\5\2\2\u05a1\u05a0\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3")
        buf.write("\3\2\2\2\u05a3\u05a5\5R*\2\u05a4\u05a1\3\2\2\2\u05a5\u05a8")
        buf.write("\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7")
        buf.write("\u05a9\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a9\u05aa\7\b\2\2")
        buf.write("\u05aaQ\3\2\2\2\u05ab\u05b9\5\u00be`\2\u05ac\u05ad\5\u00be")
        buf.write("`\2\u05ad\u05ae\7\3\2\2\u05ae\u05b3\5\u0092J\2\u05af\u05b0")
        buf.write("\7\5\2\2\u05b0\u05b2\5\u0092J\2\u05b1\u05af\3\2\2\2\u05b2")
        buf.write("\u05b5\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b4\3\2\2\2")
        buf.write("\u05b4\u05b6\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b6\u05b7\7")
        buf.write("\4\2\2\u05b7\u05b9\3\2\2\2\u05b8\u05ab\3\2\2\2\u05b8\u05ac")
        buf.write("\3\2\2\2\u05b9S\3\2\2\2\u05ba\u05bb\7\r\2\2\u05bb\u05c0")
        buf.write("\5^\60\2\u05bc\u05bd\7\5\2\2\u05bd\u05bf\5^\60\2\u05be")
        buf.write("\u05bc\3\2\2\2\u05bf\u05c2\3\2\2\2\u05c0\u05be\3\2\2\2")
        buf.write("\u05c0\u05c1\3\2\2\2\u05c1\u05c6\3\2\2\2\u05c2\u05c0\3")
        buf.write("\2\2\2\u05c3\u05c5\5Z.\2\u05c4\u05c3\3\2\2\2\u05c5\u05c8")
        buf.write("\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7")
        buf.write("U\3\2\2\2\u05c8\u05c6\3\2\2\2\u05c9\u05ca\7\23\2\2\u05ca")
        buf.write("\u05cb\7\24\2\2\u05cb\u05d0\5\u0088E\2\u05cc\u05cd\7\5")
        buf.write("\2\2\u05cd\u05cf\5\u0088E\2\u05ce\u05cc\3\2\2\2\u05cf")
        buf.write("\u05d2\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d0\u05d1\3\2\2\2")
        buf.write("\u05d1\u05e4\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d3\u05d4\7")
        buf.write("L\2\2\u05d4\u05e5\7\30\2\2\u05d5\u05d6\7L\2\2\u05d6\u05e5")
        buf.write("\7\27\2\2\u05d7\u05d8\7\25\2\2\u05d8\u05d9\7\26\2\2\u05d9")
        buf.write("\u05da\7\3\2\2\u05da\u05df\5X-\2\u05db\u05dc\7\5\2\2\u05dc")
        buf.write("\u05de\5X-\2\u05dd\u05db\3\2\2\2\u05de\u05e1\3\2\2\2\u05df")
        buf.write("\u05dd\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e2\3\2\2\2")
        buf.write("\u05e1\u05df\3\2\2\2\u05e2\u05e3\7\4\2\2\u05e3\u05e5\3")
        buf.write("\2\2\2\u05e4\u05d3\3\2\2\2\u05e4\u05d5\3\2\2\2\u05e4\u05d7")
        buf.write("\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5W\3\2\2\2\u05e6\u05ef")
        buf.write("\7\3\2\2\u05e7\u05ec\5\u0088E\2\u05e8\u05e9\7\5\2\2\u05e9")
        buf.write("\u05eb\5\u0088E\2\u05ea\u05e8\3\2\2\2\u05eb\u05ee\3\2")
        buf.write("\2\2\u05ec\u05ea\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05f0")
        buf.write("\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef\u05e7\3\2\2\2\u05ef")
        buf.write("\u05f0\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f4\7\4\2\2")
        buf.write("\u05f2\u05f4\5\u0088E\2\u05f3\u05e6\3\2\2\2\u05f3\u05f2")
        buf.write("\3\2\2\2\u05f4Y\3\2\2\2\u05f5\u05f6\7>\2\2\u05f6\u05f8")
        buf.write("\7Q\2\2\u05f7\u05f9\7\66\2\2\u05f8\u05f7\3\2\2\2\u05f8")
        buf.write("\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\5\u00bc")
        buf.write("_\2\u05fb\u0604\7\3\2\2\u05fc\u0601\5\u0088E\2\u05fd\u05fe")
        buf.write("\7\5\2\2\u05fe\u0600\5\u0088E\2\u05ff\u05fd\3\2\2\2\u0600")
        buf.write("\u0603\3\2\2\2\u0601\u05ff\3\2\2\2\u0601\u0602\3\2\2\2")
        buf.write("\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0604\u05fc\3")
        buf.write("\2\2\2\u0604\u0605\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0607")
        buf.write("\7\4\2\2\u0607\u0613\5\u00be`\2\u0608\u060a\7\17\2\2\u0609")
        buf.write("\u0608\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060b\3\2\2\2")
        buf.write("\u060b\u0610\5\u00be`\2\u060c\u060d\7\5\2\2\u060d\u060f")
        buf.write("\5\u00be`\2\u060e\u060c\3\2\2\2\u060f\u0612\3\2\2\2\u0610")
        buf.write("\u060e\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0614\3\2\2\2")
        buf.write("\u0612\u0610\3\2\2\2\u0613\u0609\3\2\2\2\u0613\u0614\3")
        buf.write("\2\2\2\u0614[\3\2\2\2\u0615\u0616\t\f\2\2\u0616]\3\2\2")
        buf.write("\2\u0617\u061b\5v<\2\u0618\u061a\5`\61\2\u0619\u0618\3")
        buf.write("\2\2\2\u061a\u061d\3\2\2\2\u061b\u0619\3\2\2\2\u061b\u061c")
        buf.write("\3\2\2\2\u061c_\3\2\2\2\u061d\u061b\3\2\2\2\u061e\u061f")
        buf.write("\5b\62\2\u061f\u0620\7\64\2\2\u0620\u0622\5v<\2\u0621")
        buf.write("\u0623\5d\63\2\u0622\u0621\3\2\2\2\u0622\u0623\3\2\2\2")
        buf.write("\u0623\u062a\3\2\2\2\u0624\u0625\7<\2\2\u0625\u0626\5")
        buf.write("b\62\2\u0626\u0627\7\64\2\2\u0627\u0628\5v<\2\u0628\u062a")
        buf.write("\3\2\2\2\u0629\u061e\3\2\2\2\u0629\u0624\3\2\2\2\u062a")
        buf.write("a\3\2\2\2\u062b\u062d\7\67\2\2\u062c\u062b\3\2\2\2\u062c")
        buf.write("\u062d\3\2\2\2\u062d\u0642\3\2\2\2\u062e\u0642\7\65\2")
        buf.write("\2\u062f\u0631\78\2\2\u0630\u0632\7\66\2\2\u0631\u0630")
        buf.write("\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0642\3\2\2\2\u0633")
        buf.write("\u0634\78\2\2\u0634\u0642\79\2\2\u0635\u0637\7:\2\2\u0636")
        buf.write("\u0638\7\66\2\2\u0637\u0636\3\2\2\2\u0637\u0638\3\2\2")
        buf.write("\2\u0638\u0642\3\2\2\2\u0639\u063b\7;\2\2\u063a\u063c")
        buf.write("\7\66\2\2\u063b\u063a\3\2\2\2\u063b\u063c\3\2\2\2\u063c")
        buf.write("\u0642\3\2\2\2\u063d\u063f\78\2\2\u063e\u063d\3\2\2\2")
        buf.write("\u063e\u063f\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0642\7")
        buf.write("\u00eb\2\2\u0641\u062c\3\2\2\2\u0641\u062e\3\2\2\2\u0641")
        buf.write("\u062f\3\2\2\2\u0641\u0633\3\2\2\2\u0641\u0635\3\2\2\2")
        buf.write("\u0641\u0639\3\2\2\2\u0641\u063e\3\2\2\2\u0642c\3\2\2")
        buf.write("\2\u0643\u0644\7=\2\2\u0644\u0652\5\u008aF\2\u0645\u0646")
        buf.write("\7\u009d\2\2\u0646\u0647\7\3\2\2\u0647\u064c\5\u00be`")
        buf.write("\2\u0648\u0649\7\5\2\2\u0649\u064b\5\u00be`\2\u064a\u0648")
        buf.write("\3\2\2\2\u064b\u064e\3\2\2\2\u064c\u064a\3\2\2\2\u064c")
        buf.write("\u064d\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u064c\3\2\2\2")
        buf.write("\u064f\u0650\7\4\2\2\u0650\u0652\3\2\2\2\u0651\u0643\3")
        buf.write("\2\2\2\u0651\u0645\3\2\2\2\u0652e\3\2\2\2\u0653\u0654")
        buf.write("\7j\2\2\u0654\u0656\7\3\2\2\u0655\u0657\5h\65\2\u0656")
        buf.write("\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0658\3\2\2\2")
        buf.write("\u0658\u0659\7\4\2\2\u0659g\3\2\2\2\u065a\u065c\7\u0089")
        buf.write("\2\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u065d")
        buf.write("\3\2\2\2\u065d\u065e\t\r\2\2\u065e\u0673\7\u0093\2\2\u065f")
        buf.write("\u0660\5\u0088E\2\u0660\u0661\7C\2\2\u0661\u0673\3\2\2")
        buf.write("\2\u0662\u0663\7\u0094\2\2\u0663\u0664\7\u00f2\2\2\u0664")
        buf.write("\u0665\7\u0095\2\2\u0665\u0666\7\u0096\2\2\u0666\u066f")
        buf.write("\7\u00f2\2\2\u0667\u066d\7=\2\2\u0668\u066e\5\u00be`\2")
        buf.write("\u0669\u066a\5\u00bc_\2\u066a\u066b\7\3\2\2\u066b\u066c")
        buf.write("\7\4\2\2\u066c\u066e\3\2\2\2\u066d\u0668\3\2\2\2\u066d")
        buf.write("\u0669\3\2\2\2\u066e\u0670\3\2\2\2\u066f\u0667\3\2\2\2")
        buf.write("\u066f\u0670\3\2\2\2\u0670\u0673\3\2\2\2\u0671\u0673\5")
        buf.write("\u0088E\2\u0672\u065b\3\2\2\2\u0672\u065f\3\2\2\2\u0672")
        buf.write("\u0662\3\2\2\2\u0672\u0671\3\2\2\2\u0673i\3\2\2\2\u0674")
        buf.write("\u0675\7\3\2\2\u0675\u0676\5l\67\2\u0676\u0677\7\4\2\2")
        buf.write("\u0677k\3\2\2\2\u0678\u067d\5\u00be`\2\u0679\u067a\7\5")
        buf.write("\2\2\u067a\u067c\5\u00be`\2\u067b\u0679\3\2\2\2\u067c")
        buf.write("\u067f\3\2\2\2\u067d\u067b\3\2\2\2\u067d\u067e\3\2\2\2")
        buf.write("\u067em\3\2\2\2\u067f\u067d\3\2\2\2\u0680\u0681\7\3\2")
        buf.write("\2\u0681\u0686\5p9\2\u0682\u0683\7\5\2\2\u0683\u0685\5")
        buf.write("p9\2\u0684\u0682\3\2\2\2\u0685\u0688\3\2\2\2\u0686\u0684")
        buf.write("\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u0689\3\2\2\2\u0688")
        buf.write("\u0686\3\2\2\2\u0689\u068a\7\4\2\2\u068ao\3\2\2\2\u068b")
        buf.write("\u068d\5\u00be`\2\u068c\u068e\t\n\2\2\u068d\u068c\3\2")
        buf.write("\2\2\u068d\u068e\3\2\2\2\u068eq\3\2\2\2\u068f\u0690\7")
        buf.write("\3\2\2\u0690\u0695\5t;\2\u0691\u0692\7\5\2\2\u0692\u0694")
        buf.write("\5t;\2\u0693\u0691\3\2\2\2\u0694\u0697\3\2\2\2\u0695\u0693")
        buf.write("\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u0698\3\2\2\2\u0697")
        buf.write("\u0695\3\2\2\2\u0698\u0699\7\4\2\2\u0699s\3\2\2\2\u069a")
        buf.write("\u069d\5\u00be`\2\u069b\u069c\7q\2\2\u069c\u069e\7\u00ee")
        buf.write("\2\2\u069d\u069b\3\2\2\2\u069d\u069e\3\2\2\2\u069eu\3")
        buf.write("\2\2\2\u069f\u06a1\5\u0080A\2\u06a0\u06a2\5f\64\2\u06a1")
        buf.write("\u06a0\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a3\3\2\2\2")
        buf.write("\u06a3\u06a4\5|?\2\u06a4\u06b8\3\2\2\2\u06a5\u06a6\7\3")
        buf.write('\2\2\u06a6\u06a7\5B"\2\u06a7\u06a9\7\4\2\2\u06a8\u06aa')
        buf.write("\5f\64\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa")
        buf.write("\u06ab\3\2\2\2\u06ab\u06ac\5|?\2\u06ac\u06b8\3\2\2\2\u06ad")
        buf.write("\u06ae\7\3\2\2\u06ae\u06af\5^\60\2\u06af\u06b1\7\4\2\2")
        buf.write("\u06b0\u06b2\5f\64\2\u06b1\u06b0\3\2\2\2\u06b1\u06b2\3")
        buf.write("\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b4\5|?\2\u06b4\u06b8")
        buf.write("\3\2\2\2\u06b5\u06b8\5x=\2\u06b6\u06b8\5z>\2\u06b7\u069f")
        buf.write("\3\2\2\2\u06b7\u06a5\3\2\2\2\u06b7\u06ad\3\2\2\2\u06b7")
        buf.write("\u06b5\3\2\2\2\u06b7\u06b6\3\2\2\2\u06b8w\3\2\2\2\u06b9")
        buf.write("\u06ba\7M\2\2\u06ba\u06bf\5\u0088E\2\u06bb\u06bc\7\5\2")
        buf.write("\2\u06bc\u06be\5\u0088E\2\u06bd\u06bb\3\2\2\2\u06be\u06c1")
        buf.write("\3\2\2\2\u06bf\u06bd\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0")
        buf.write("\u06c2\3\2\2\2\u06c1\u06bf\3\2\2\2\u06c2\u06c3\5|?\2\u06c3")
        buf.write("y\3\2\2\2\u06c4\u06c5\5\u00be`\2\u06c5\u06ce\7\3\2\2\u06c6")
        buf.write("\u06cb\5\u0088E\2\u06c7\u06c8\7\5\2\2\u06c8\u06ca\5\u0088")
        buf.write("E\2\u06c9\u06c7\3\2\2\2\u06ca\u06cd\3\2\2\2\u06cb\u06c9")
        buf.write("\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06cf\3\2\2\2\u06cd")
        buf.write("\u06cb\3\2\2\2\u06ce\u06c6\3\2\2\2\u06ce\u06cf\3\2\2\2")
        buf.write("\u06cf\u06d0\3\2\2\2\u06d0\u06d1\7\4\2\2\u06d1\u06d2\5")
        buf.write("|?\2\u06d2{\3\2\2\2\u06d3\u06d5\7\17\2\2\u06d4\u06d3\3")
        buf.write("\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d8")
        buf.write("\5\u00c0a\2\u06d7\u06d9\5j\66\2\u06d8\u06d7\3\2\2\2\u06d8")
        buf.write("\u06d9\3\2\2\2\u06d9\u06db\3\2\2\2\u06da\u06d4\3\2\2\2")
        buf.write("\u06da\u06db\3\2\2\2\u06db}\3\2\2\2\u06dc\u06dd\7K\2\2")
        buf.write("\u06dd\u06de\7X\2\2\u06de\u06df\7\u009e\2\2\u06df\u06e3")
        buf.write("\7\u00ee\2\2\u06e0\u06e1\7L\2\2\u06e1\u06e2\7\u009f\2")
        buf.write("\2\u06e2\u06e4\5.\30\2\u06e3\u06e0\3\2\2\2\u06e3\u06e4")
        buf.write("\3\2\2\2\u06e4\u070e\3\2\2\2\u06e5\u06e6\7K\2\2\u06e6")
        buf.write("\u06e7\7X\2\2\u06e7\u06f1\7\u00a2\2\2\u06e8\u06e9\7\u00a3")
        buf.write("\2\2\u06e9\u06ea\7\u00a4\2\2\u06ea\u06eb\7\24\2\2\u06eb")
        buf.write("\u06ef\7\u00ee\2\2\u06ec\u06ed\7\u00a8\2\2\u06ed\u06ee")
        buf.write("\7\24\2\2\u06ee\u06f0\7\u00ee\2\2\u06ef\u06ec\3\2\2\2")
        buf.write("\u06ef\u06f0\3\2\2\2\u06f0\u06f2\3\2\2\2\u06f1\u06e8\3")
        buf.write("\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f8\3\2\2\2\u06f3\u06f4")
        buf.write("\7\u00a5\2\2\u06f4\u06f5\7\u00a6\2\2\u06f5\u06f6\7\u00a4")
        buf.write("\2\2\u06f6\u06f7\7\24\2\2\u06f7\u06f9\7\u00ee\2\2\u06f8")
        buf.write("\u06f3\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06ff\3\2\2\2")
        buf.write("\u06fa\u06fb\7o\2\2\u06fb\u06fc\7\u00a7\2\2\u06fc\u06fd")
        buf.write("\7\u00a4\2\2\u06fd\u06fe\7\24\2\2\u06fe\u0700\7\u00ee")
        buf.write("\2\2\u06ff\u06fa\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0705")
        buf.write("\3\2\2\2\u0701\u0702\7\u00a9\2\2\u0702\u0703\7\u00a4\2")
        buf.write("\2\u0703\u0704\7\24\2\2\u0704\u0706\7\u00ee\2\2\u0705")
        buf.write("\u0701\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u070b\3\2\2\2")
        buf.write("\u0707\u0708\7'\2\2\u0708\u0709\7\u00d7\2\2\u0709\u070a")
        buf.write("\7\17\2\2\u070a\u070c\7\u00ee\2\2\u070b\u0707\3\2\2\2")
        buf.write("\u070b\u070c\3\2\2\2\u070c\u070e\3\2\2\2\u070d\u06dc\3")
        buf.write("\2\2\2\u070d\u06e5\3\2\2\2\u070e\177\3\2\2\2\u070f\u0710")
        buf.write("\5\u00be`\2\u0710\u0711\7\6\2\2\u0711\u0713\3\2\2\2\u0712")
        buf.write("\u070f\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0714\3\2\2\2")
        buf.write("\u0714\u0715\5\u00be`\2\u0715\u0081\3\2\2\2\u0716\u0717")
        buf.write("\5\u00be`\2\u0717\u0718\7\6\2\2\u0718\u071a\3\2\2\2\u0719")
        buf.write("\u0716\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071b\3\2\2\2")
        buf.write("\u071b\u071c\5\u00be`\2\u071c\u0083\3\2\2\2\u071d\u0725")
        buf.write("\5\u0088E\2\u071e\u0720\7\17\2\2\u071f\u071e\3\2\2\2\u071f")
        buf.write("\u0720\3\2\2\2\u0720\u0723\3\2\2\2\u0721\u0724\5\u00be")
        buf.write("`\2\u0722\u0724\5j\66\2\u0723\u0721\3\2\2\2\u0723\u0722")
        buf.write("\3\2\2\2\u0724\u0726\3\2\2\2\u0725\u071f\3\2\2\2\u0725")
        buf.write("\u0726\3\2\2\2\u0726\u0085\3\2\2\2\u0727\u072c\5\u0084")
        buf.write("C\2\u0728\u0729\7\5\2\2\u0729\u072b\5\u0084C\2\u072a\u0728")
        buf.write("\3\2\2\2\u072b\u072e\3\2\2\2\u072c\u072a\3\2\2\2\u072c")
        buf.write("\u072d\3\2\2\2\u072d\u0087\3\2\2\2\u072e\u072c\3\2\2\2")
        buf.write("\u072f\u0730\5\u008aF\2\u0730\u0089\3\2\2\2\u0731\u0732")
        buf.write("\bF\1\2\u0732\u0733\7 \2\2\u0733\u073b\5\u008aF\7\u0734")
        buf.write('\u0735\7"\2\2\u0735\u0736\7\3\2\2\u0736\u0737\5\32\16')
        buf.write("\2\u0737\u0738\7\4\2\2\u0738\u073b\3\2\2\2\u0739\u073b")
        buf.write("\5\u008cG\2\u073a\u0731\3\2\2\2\u073a\u0734\3\2\2\2\u073a")
        buf.write("\u0739\3\2\2\2\u073b\u0744\3\2\2\2\u073c\u073d\f\4\2\2")
        buf.write("\u073d\u073e\7\36\2\2\u073e\u0743\5\u008aF\5\u073f\u0740")
        buf.write("\f\3\2\2\u0740\u0741\7\35\2\2\u0741\u0743\5\u008aF\4\u0742")
        buf.write("\u073c\3\2\2\2\u0742\u073f\3\2\2\2\u0743\u0746\3\2\2\2")
        buf.write("\u0744\u0742\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u008b\3")
        buf.write("\2\2\2\u0746\u0744\3\2\2\2\u0747\u0749\5\u0090I\2\u0748")
        buf.write("\u074a\5\u008eH\2\u0749\u0748\3\2\2\2\u0749\u074a\3\2")
        buf.write("\2\2\u074a\u008d\3\2\2\2\u074b\u074d\7 \2\2\u074c\u074b")
        buf.write("\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074e\3\2\2\2\u074e")
        buf.write("\u074f\7#\2\2\u074f\u0750\5\u0090I\2\u0750\u0751\7\36")
        buf.write("\2\2\u0751\u0752\5\u0090I\2\u0752\u077c\3\2\2\2\u0753")
        buf.write("\u0755\7 \2\2\u0754\u0753\3\2\2\2\u0754\u0755\3\2\2\2")
        buf.write("\u0755\u0756\3\2\2\2\u0756\u0757\7\37\2\2\u0757\u0758")
        buf.write("\7\3\2\2\u0758\u075d\5\u0088E\2\u0759\u075a\7\5\2\2\u075a")
        buf.write("\u075c\5\u0088E\2\u075b\u0759\3\2\2\2\u075c\u075f\3\2")
        buf.write("\2\2\u075d\u075b\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0760")
        buf.write("\3\2\2\2\u075f\u075d\3\2\2\2\u0760\u0761\7\4\2\2\u0761")
        buf.write("\u077c\3\2\2\2\u0762\u0764\7 \2\2\u0763\u0762\3\2\2\2")
        buf.write("\u0763\u0764\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0766\7")
        buf.write("\37\2\2\u0766\u0767\7\3\2\2\u0767\u0768\5\32\16\2\u0768")
        buf.write("\u0769\7\4\2\2\u0769\u077c\3\2\2\2\u076a\u076c\7 \2\2")
        buf.write("\u076b\u076a\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d\3")
        buf.write("\2\2\2\u076d\u076e\t\16\2\2\u076e\u077c\5\u0090I\2\u076f")
        buf.write("\u0771\7&\2\2\u0770\u0772\7 \2\2\u0771\u0770\3\2\2\2\u0771")
        buf.write("\u0772\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u077c\7'\2\2")
        buf.write("\u0774\u0776\7&\2\2\u0775\u0777\7 \2\2\u0776\u0775\3\2")
        buf.write("\2\2\u0776\u0777\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u0779")
        buf.write("\7\21\2\2\u0779\u077a\7\r\2\2\u077a\u077c\5\u0090I\2\u077b")
        buf.write("\u074c\3\2\2\2\u077b\u0754\3\2\2\2\u077b\u0763\3\2\2\2")
        buf.write("\u077b\u076b\3\2\2\2\u077b\u076f\3\2\2\2\u077b\u0774\3")
        buf.write("\2\2\2\u077c\u008f\3\2\2\2\u077d\u077e\bI\1\2\u077e\u0782")
        buf.write("\5\u0092J\2\u077f\u0780\t\17\2\2\u0780\u0782\5\u0090I")
        buf.write("\t\u0781\u077d\3\2\2\2\u0781\u077f\3\2\2\2\u0782\u0798")
        buf.write("\3\2\2\2\u0783\u0784\f\b\2\2\u0784\u0785\t\20\2\2\u0785")
        buf.write("\u0797\5\u0090I\t\u0786\u0787\f\7\2\2\u0787\u0788\t\21")
        buf.write("\2\2\u0788\u0797\5\u0090I\b\u0789\u078a\f\6\2\2\u078a")
        buf.write("\u078b\7\u008f\2\2\u078b\u0797\5\u0090I\7\u078c\u078d")
        buf.write("\f\5\2\2\u078d\u078e\7\u0092\2\2\u078e\u0797\5\u0090I")
        buf.write("\6\u078f\u0790\f\4\2\2\u0790\u0791\7\u0090\2\2\u0791\u0797")
        buf.write("\5\u0090I\5\u0792\u0793\f\3\2\2\u0793\u0794\5\u0096L\2")
        buf.write("\u0794\u0795\5\u0090I\4\u0795\u0797\3\2\2\2\u0796\u0783")
        buf.write("\3\2\2\2\u0796\u0786\3\2\2\2\u0796\u0789\3\2\2\2\u0796")
        buf.write("\u078c\3\2\2\2\u0796\u078f\3\2\2\2\u0796\u0792\3\2\2\2")
        buf.write("\u0797\u079a\3\2\2\2\u0798\u0796\3\2\2\2\u0798\u0799\3")
        buf.write("\2\2\2\u0799\u0091\3\2\2\2\u079a\u0798\3\2\2\2\u079b\u079c")
        buf.write("\bJ\1\2\u079c\u079e\7/\2\2\u079d\u079f\5\u00b0Y\2\u079e")
        buf.write("\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u079e\3\2\2\2")
        buf.write("\u07a0\u07a1\3\2\2\2\u07a1\u07a4\3\2\2\2\u07a2\u07a3\7")
        buf.write("\62\2\2\u07a3\u07a5\5\u0088E\2\u07a4\u07a2\3\2\2\2\u07a4")
        buf.write("\u07a5\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a7\7\63\2")
        buf.write("\2\u07a7\u0818\3\2\2\2\u07a8\u07a9\7/\2\2\u07a9\u07ab")
        buf.write("\5\u0088E\2\u07aa\u07ac\5\u00b0Y\2\u07ab\u07aa\3\2\2\2")
        buf.write("\u07ac\u07ad\3\2\2\2\u07ad\u07ab\3\2\2\2\u07ad\u07ae\3")
        buf.write("\2\2\2\u07ae\u07b1\3\2\2\2\u07af\u07b0\7\62\2\2\u07b0")
        buf.write("\u07b2\5\u0088E\2\u07b1\u07af\3\2\2\2\u07b1\u07b2\3\2")
        buf.write("\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b4\7\63\2\2\u07b4\u0818")
        buf.write("\3\2\2\2\u07b5\u07b6\7\\\2\2\u07b6\u07b7\7\3\2\2\u07b7")
        buf.write("\u07b8\5\u0088E\2\u07b8\u07b9\7\17\2\2\u07b9\u07ba\5\u00a6")
        buf.write("T\2\u07ba\u07bb\7\4\2\2\u07bb\u0818\3\2\2\2\u07bc\u07bd")
        buf.write("\7p\2\2\u07bd\u07c6\7\3\2\2\u07be\u07c3\5\u0084C\2\u07bf")
        buf.write("\u07c0\7\5\2\2\u07c0\u07c2\5\u0084C\2\u07c1\u07bf\3\2")
        buf.write("\2\2\u07c2\u07c5\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c3\u07c4")
        buf.write("\3\2\2\2\u07c4\u07c7\3\2\2\2\u07c5\u07c3\3\2\2\2\u07c6")
        buf.write("\u07be\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c8\3\2\2\2")
        buf.write("\u07c8\u0818\7\4\2\2\u07c9\u07ca\7H\2\2\u07ca\u07cb\7")
        buf.write("\3\2\2\u07cb\u07ce\5\u0088E\2\u07cc\u07cd\7z\2\2\u07cd")
        buf.write("\u07cf\7*\2\2\u07ce\u07cc\3\2\2\2\u07ce\u07cf\3\2\2\2")
        buf.write("\u07cf\u07d0\3\2\2\2\u07d0\u07d1\7\4\2\2\u07d1\u0818\3")
        buf.write("\2\2\2\u07d2\u07d3\7J\2\2\u07d3\u07d4\7\3\2\2\u07d4\u07d7")
        buf.write("\5\u0088E\2\u07d5\u07d6\7z\2\2\u07d6\u07d8\7*\2\2\u07d7")
        buf.write("\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07d9\3\2\2\2")
        buf.write("\u07d9\u07da\7\4\2\2\u07da\u0818\3\2\2\2\u07db\u07dc\7")
        buf.write("\177\2\2\u07dc\u07dd\7\3\2\2\u07dd\u07de\5\u0090I\2\u07de")
        buf.write("\u07df\7\37\2\2\u07df\u07e0\5\u0090I\2\u07e0\u07e1\7\4")
        buf.write("\2\2\u07e1\u0818\3\2\2\2\u07e2\u0818\5\u0094K\2\u07e3")
        buf.write("\u0818\7\u008a\2\2\u07e4\u07e5\5\u00bc_\2\u07e5\u07e6")
        buf.write("\7\6\2\2\u07e6\u07e7\7\u008a\2\2\u07e7\u0818\3\2\2\2\u07e8")
        buf.write("\u07e9\7\3\2\2\u07e9\u07ec\5\u0084C\2\u07ea\u07eb\7\5")
        buf.write("\2\2\u07eb\u07ed\5\u0084C\2\u07ec\u07ea\3\2\2\2\u07ed")
        buf.write("\u07ee\3\2\2\2\u07ee\u07ec\3\2\2\2\u07ee\u07ef\3\2\2\2")
        buf.write("\u07ef\u07f0\3\2\2\2\u07f0\u07f1\7\4\2\2\u07f1\u0818\3")
        buf.write("\2\2\2\u07f2\u07f3\7\3\2\2\u07f3\u07f4\5\32\16\2\u07f4")
        buf.write("\u07f5\7\4\2\2\u07f5\u0818\3\2\2\2\u07f6\u07f7\5\u00bc")
        buf.write("_\2\u07f7\u0803\7\3\2\2\u07f8\u07fa\5\\/\2\u07f9\u07f8")
        buf.write("\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb")
        buf.write("\u0800\5\u0088E\2\u07fc\u07fd\7\5\2\2\u07fd\u07ff\5\u0088")
        buf.write("E\2\u07fe\u07fc\3\2\2\2\u07ff\u0802\3\2\2\2\u0800\u07fe")
        buf.write("\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0804\3\2\2\2\u0802")
        buf.write("\u0800\3\2\2\2\u0803\u07f9\3\2\2\2\u0803\u0804\3\2\2\2")
        buf.write("\u0804\u0805\3\2\2\2\u0805\u0808\7\4\2\2\u0806\u0807\7")
        buf.write("@\2\2\u0807\u0809\5\u00b6\\\2\u0808\u0806\3\2\2\2\u0808")
        buf.write("\u0809\3\2\2\2\u0809\u0818\3\2\2\2\u080a\u080b\5\u00bc")
        buf.write("_\2\u080b\u080c\7\3\2\2\u080c\u080d\t\22\2\2\u080d\u080e")
        buf.write("\5\u0088E\2\u080e\u080f\7\r\2\2\u080f\u0810\5\u0088E\2")
        buf.write("\u0810\u0811\7\4\2\2\u0811\u0818\3\2\2\2\u0812\u0818\5")
        buf.write("\u00be`\2\u0813\u0814\7\3\2\2\u0814\u0815\5\u0088E\2\u0815")
        buf.write("\u0816\7\4\2\2\u0816\u0818\3\2\2\2\u0817\u079b\3\2\2\2")
        buf.write("\u0817\u07a8\3\2\2\2\u0817\u07b5\3\2\2\2\u0817\u07bc\3")
        buf.write("\2\2\2\u0817\u07c9\3\2\2\2\u0817\u07d2\3\2\2\2\u0817\u07db")
        buf.write("\3\2\2\2\u0817\u07e2\3\2\2\2\u0817\u07e3\3\2\2\2\u0817")
        buf.write("\u07e4\3\2\2\2\u0817\u07e8\3\2\2\2\u0817\u07f2\3\2\2\2")
        buf.write("\u0817\u07f6\3\2\2\2\u0817\u080a\3\2\2\2\u0817\u0812\3")
        buf.write("\2\2\2\u0817\u0813\3\2\2\2\u0818\u0823\3\2\2\2\u0819\u081a")
        buf.write("\f\6\2\2\u081a\u081b\7\t\2\2\u081b\u081c\5\u0090I\2\u081c")
        buf.write("\u081d\7\n\2\2\u081d\u0822\3\2\2\2\u081e\u081f\f\4\2\2")
        buf.write("\u081f\u0820\7\6\2\2\u0820\u0822\5\u00be`\2\u0821\u0819")
        buf.write("\3\2\2\2\u0821\u081e\3\2\2\2\u0822\u0825\3\2\2\2\u0823")
        buf.write("\u0821\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u0093\3\2\2\2")
        buf.write("\u0825\u0823\3\2\2\2\u0826\u0833\7'\2\2\u0827\u0833\5")
        buf.write("\u009eP\2\u0828\u0829\5\u00be`\2\u0829\u082a\7\u00ee\2")
        buf.write("\2\u082a\u0833\3\2\2\2\u082b\u0833\5\u00c4c\2\u082c\u0833")
        buf.write("\5\u009cO\2\u082d\u082f\7\u00ee\2\2\u082e\u082d\3\2\2")
        buf.write("\2\u082f\u0830\3\2\2\2\u0830\u082e\3\2\2\2\u0830\u0831")
        buf.write("\3\2\2\2\u0831\u0833\3\2\2\2\u0832\u0826\3\2\2\2\u0832")
        buf.write("\u0827\3\2\2\2\u0832\u0828\3\2\2\2\u0832\u082b\3\2\2\2")
        buf.write("\u0832\u082c\3\2\2\2\u0832\u082e\3\2\2\2\u0833\u0095\3")
        buf.write("\2\2\2\u0834\u0835\t\23\2\2\u0835\u0097\3\2\2\2\u0836")
        buf.write("\u0837\t\24\2\2\u0837\u0099\3\2\2\2\u0838\u0839\t\25\2")
        buf.write("\2\u0839\u009b\3\2\2\2\u083a\u083b\t\26\2\2\u083b\u009d")
        buf.write("\3\2\2\2\u083c\u0840\7.\2\2\u083d\u083f\5\u00a0Q\2\u083e")
        buf.write("\u083d\3\2\2\2\u083f\u0842\3\2\2\2\u0840\u083e\3\2\2\2")
        buf.write("\u0840\u0841\3\2\2\2\u0841\u009f\3\2\2\2\u0842\u0840\3")
        buf.write("\2\2\2\u0843\u0844\5\u00a2R\2\u0844\u0847\5\u00be`\2\u0845")
        buf.write("\u0846\7i\2\2\u0846\u0848\5\u00be`\2\u0847\u0845\3\2\2")
        buf.write("\2\u0847\u0848\3\2\2\2\u0848\u00a1\3\2\2\2\u0849\u084b")
        buf.write("\t\27\2\2\u084a\u0849\3\2\2\2\u084a\u084b\3\2\2\2\u084b")
        buf.write("\u084c\3\2\2\2\u084c\u084f\t\r\2\2\u084d\u084f\7\u00ee")
        buf.write("\2\2\u084e\u084a\3\2\2\2\u084e\u084d\3\2\2\2\u084f\u00a3")
        buf.write("\3\2\2\2\u0850\u0854\7H\2\2\u0851\u0852\7I\2\2\u0852\u0854")
        buf.write("\5\u00be`\2\u0853\u0850\3\2\2\2\u0853\u0851\3\2\2\2\u0854")
        buf.write("\u00a5\3\2\2\2\u0855\u0856\7n\2\2\u0856\u0857\7\u0084")
        buf.write("\2\2\u0857\u0858\5\u00a6T\2\u0858\u0859\7\u0086\2\2\u0859")
        buf.write("\u0878\3\2\2\2\u085a\u085b\7o\2\2\u085b\u085c\7\u0084")
        buf.write("\2\2\u085c\u085d\5\u00a6T\2\u085d\u085e\7\5\2\2\u085e")
        buf.write("\u085f\5\u00a6T\2\u085f\u0860\7\u0086\2\2\u0860\u0878")
        buf.write("\3\2\2\2\u0861\u0868\7p\2\2\u0862\u0864\7\u0084\2\2\u0863")
        buf.write("\u0865\5\u00acW\2\u0864\u0863\3\2\2\2\u0864\u0865\3\2")
        buf.write("\2\2\u0865\u0866\3\2\2\2\u0866\u0869\7\u0086\2\2\u0867")
        buf.write("\u0869\7\u0082\2\2\u0868\u0862\3\2\2\2\u0868\u0867\3\2")
        buf.write("\2\2\u0869\u0878\3\2\2\2\u086a\u0875\5\u00be`\2\u086b")
        buf.write("\u086c\7\3\2\2\u086c\u0871\7\u00f2\2\2\u086d\u086e\7\5")
        buf.write("\2\2\u086e\u0870\7\u00f2\2\2\u086f\u086d\3\2\2\2\u0870")
        buf.write("\u0873\3\2\2\2\u0871\u086f\3\2\2\2\u0871\u0872\3\2\2\2")
        buf.write("\u0872\u0874\3\2\2\2\u0873\u0871\3\2\2\2\u0874\u0876\7")
        buf.write("\4\2\2\u0875\u086b\3\2\2\2\u0875\u0876\3\2\2\2\u0876\u0878")
        buf.write("\3\2\2\2\u0877\u0855\3\2\2\2\u0877\u085a\3\2\2\2\u0877")
        buf.write("\u0861\3\2\2\2\u0877\u086a\3\2\2\2\u0878\u00a7\3\2\2\2")
        buf.write("\u0879\u087e\5\u00aaV\2\u087a\u087b\7\5\2\2\u087b\u087d")
        buf.write("\5\u00aaV\2\u087c\u087a\3\2\2\2\u087d\u0880\3\2\2\2\u087e")
        buf.write("\u087c\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u00a9\3\2\2\2")
        buf.write("\u0880\u087e\3\2\2\2\u0881\u0882\5\u00be`\2\u0882\u0885")
        buf.write("\5\u00a6T\2\u0883\u0884\7q\2\2\u0884\u0886\7\u00ee\2\2")
        buf.write("\u0885\u0883\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u00ab\3")
        buf.write("\2\2\2\u0887\u088c\5\u00aeX\2\u0888\u0889\7\5\2\2\u0889")
        buf.write("\u088b\5\u00aeX\2\u088a\u0888\3\2\2\2\u088b\u088e\3\2")
        buf.write("\2\2\u088c\u088a\3\2\2\2\u088c\u088d\3\2\2\2\u088d\u00ad")
        buf.write("\3\2\2\2\u088e\u088c\3\2\2\2\u088f\u0890\5\u00be`\2\u0890")
        buf.write("\u0891\7\13\2\2\u0891\u0894\5\u00a6T\2\u0892\u0893\7q")
        buf.write("\2\2\u0893\u0895\7\u00ee\2\2\u0894\u0892\3\2\2\2\u0894")
        buf.write("\u0895\3\2\2\2\u0895\u00af\3\2\2\2\u0896\u0897\7\60\2")
        buf.write("\2\u0897\u0898\5\u0088E\2\u0898\u0899\7\61\2\2\u0899\u089a")
        buf.write("\5\u0088E\2\u089a\u00b1\3\2\2\2\u089b\u089c\7?\2\2\u089c")
        buf.write("\u08a1\5\u00b4[\2\u089d\u089e\7\5\2\2\u089e\u08a0\5\u00b4")
        buf.write("[\2\u089f\u089d\3\2\2\2\u08a0\u08a3\3\2\2\2\u08a1\u089f")
        buf.write("\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2\u00b3\3\2\2\2\u08a3")
        buf.write("\u08a1\3\2\2\2\u08a4\u08a5\5\u00be`\2\u08a5\u08a6\7\17")
        buf.write("\2\2\u08a6\u08a7\5\u00b6\\\2\u08a7\u00b5\3\2\2\2\u08a8")
        buf.write("\u08d3\5\u00be`\2\u08a9\u08cc\7\3\2\2\u08aa\u08ab\7\u0098")
        buf.write("\2\2\u08ab\u08ac\7\24\2\2\u08ac\u08b1\5\u0088E\2\u08ad")
        buf.write("\u08ae\7\5\2\2\u08ae\u08b0\5\u0088E\2\u08af\u08ad\3\2")
        buf.write("\2\2\u08b0\u08b3\3\2\2\2\u08b1\u08af\3\2\2\2\u08b1\u08b2")
        buf.write("\3\2\2\2\u08b2\u08cd\3\2\2\2\u08b3\u08b1\3\2\2\2\u08b4")
        buf.write("\u08b5\t\30\2\2\u08b5\u08b6\7\24\2\2\u08b6\u08bb\5\u0088")
        buf.write("E\2\u08b7\u08b8\7\5\2\2\u08b8\u08ba\5\u0088E\2\u08b9\u08b7")
        buf.write("\3\2\2\2\u08ba\u08bd\3\2\2\2\u08bb\u08b9\3\2\2\2\u08bb")
        buf.write("\u08bc\3\2\2\2\u08bc\u08bf\3\2\2\2\u08bd\u08bb\3\2\2\2")
        buf.write("\u08be\u08b4\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08ca\3")
        buf.write("\2\2\2\u08c0\u08c1\t\31\2\2\u08c1\u08c2\7\24\2\2\u08c2")
        buf.write("\u08c7\5L'\2\u08c3\u08c4\7\5\2\2\u08c4\u08c6\5L'\2\u08c5")
        buf.write("\u08c3\3\2\2\2\u08c6\u08c9\3\2\2\2\u08c7\u08c5\3\2\2\2")
        buf.write("\u08c7\u08c8\3\2\2\2\u08c8\u08cb\3\2\2\2\u08c9\u08c7\3")
        buf.write("\2\2\2\u08ca\u08c0\3\2\2\2\u08ca\u08cb\3\2\2\2\u08cb\u08cd")
        buf.write("\3\2\2\2\u08cc\u08aa\3\2\2\2\u08cc\u08be\3\2\2\2\u08cd")
        buf.write("\u08cf\3\2\2\2\u08ce\u08d0\5\u00b8]\2\u08cf\u08ce\3\2")
        buf.write("\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d3")
        buf.write("\7\4\2\2\u08d2\u08a8\3\2\2\2\u08d2\u08a9\3\2\2\2\u08d3")
        buf.write("\u00b7\3\2\2\2\u08d4\u08d5\7B\2\2\u08d5\u08e5\5\u00ba")
        buf.write("^\2\u08d6\u08d7\7C\2\2\u08d7\u08e5\5\u00ba^\2\u08d8\u08d9")
        buf.write("\7B\2\2\u08d9\u08da\7#\2\2\u08da\u08db\5\u00ba^\2\u08db")
        buf.write("\u08dc\7\36\2\2\u08dc\u08dd\5\u00ba^\2\u08dd\u08e5\3\2")
        buf.write("\2\2\u08de\u08df\7C\2\2\u08df\u08e0\7#\2\2\u08e0\u08e1")
        buf.write("\5\u00ba^\2\u08e1\u08e2\7\36\2\2\u08e2\u08e3\5\u00ba^")
        buf.write("\2\u08e3\u08e5\3\2\2\2\u08e4\u08d4\3\2\2\2\u08e4\u08d6")
        buf.write("\3\2\2\2\u08e4\u08d8\3\2\2\2\u08e4\u08de\3\2\2\2\u08e5")
        buf.write("\u00b9\3\2\2\2\u08e6\u08e7\7D\2\2\u08e7\u08ee\t\32\2\2")
        buf.write("\u08e8\u08e9\7G\2\2\u08e9\u08ee\7K\2\2\u08ea\u08eb\5\u0088")
        buf.write("E\2\u08eb\u08ec\t\32\2\2\u08ec\u08ee\3\2\2\2\u08ed\u08e6")
        buf.write("\3\2\2\2\u08ed\u08e8\3\2\2\2\u08ed\u08ea\3\2\2\2\u08ee")
        buf.write("\u00bb\3\2\2\2\u08ef\u08f4\5\u00be`\2\u08f0\u08f1\7\6")
        buf.write("\2\2\u08f1\u08f3\5\u00be`\2\u08f2\u08f0\3\2\2\2\u08f3")
        buf.write("\u08f6\3\2\2\2\u08f4\u08f2\3\2\2\2\u08f4\u08f5\3\2\2\2")
        buf.write("\u08f5\u00bd\3\2\2\2\u08f6\u08f4\3\2\2\2\u08f7\u0907\5")
        buf.write("\u00c0a\2\u08f8\u0907\7\u00eb\2\2\u08f9\u0907\7;\2\2\u08fa")
        buf.write("\u0907\7\67\2\2\u08fb\u0907\78\2\2\u08fc\u0907\79\2\2")
        buf.write("\u08fd\u0907\7:\2\2\u08fe\u0907\7<\2\2\u08ff\u0907\7\64")
        buf.write("\2\2\u0900\u0907\7\65\2\2\u0901\u0907\7=\2\2\u0902\u0907")
        buf.write("\7e\2\2\u0903\u0907\7h\2\2\u0904\u0907\7f\2\2\u0905\u0907")
        buf.write("\7g\2\2\u0906\u08f7\3\2\2\2\u0906\u08f8\3\2\2\2\u0906")
        buf.write("\u08f9\3\2\2\2\u0906\u08fa\3\2\2\2\u0906\u08fb\3\2\2\2")
        buf.write("\u0906\u08fc\3\2\2\2\u0906\u08fd\3\2\2\2\u0906\u08fe\3")
        buf.write("\2\2\2\u0906\u08ff\3\2\2\2\u0906\u0900\3\2\2\2\u0906\u0901")
        buf.write("\3\2\2\2\u0906\u0902\3\2\2\2\u0906\u0903\3\2\2\2\u0906")
        buf.write("\u0904\3\2\2\2\u0906\u0905\3\2\2\2\u0907\u00bf\3\2\2\2")
        buf.write("\u0908\u090c\7\u00f6\2\2\u0909\u090c\5\u00c2b\2\u090a")
        buf.write("\u090c\5\u00c6d\2\u090b\u0908\3\2\2\2\u090b\u0909\3\2")
        buf.write("\2\2\u090b\u090a\3\2\2\2\u090c\u00c1\3\2\2\2\u090d\u090e")
        buf.write("\7\u00f7\2\2\u090e\u00c3\3\2\2\2\u090f\u0911\7\u0089\2")
        buf.write("\2\u0910\u090f\3\2\2\2\u0910\u0911\3\2\2\2\u0911\u0912")
        buf.write("\3\2\2\2\u0912\u092c\7\u00f3\2\2\u0913\u0915\7\u0089\2")
        buf.write("\2\u0914\u0913\3\2\2\2\u0914\u0915\3\2\2\2\u0915\u0916")
        buf.write("\3\2\2\2\u0916\u092c\7\u00f2\2\2\u0917\u0919\7\u0089\2")
        buf.write("\2\u0918\u0917\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u091a")
        buf.write("\3\2\2\2\u091a\u092c\7\u00ef\2\2\u091b\u091d\7\u0089\2")
        buf.write("\2\u091c\u091b\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091e")
        buf.write("\3\2\2\2\u091e\u092c\7\u00f0\2\2\u091f\u0921\7\u0089\2")
        buf.write("\2\u0920\u091f\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0922")
        buf.write("\3\2\2\2\u0922\u092c\7\u00f1\2\2\u0923\u0925\7\u0089\2")
        buf.write("\2\u0924\u0923\3\2\2\2\u0924\u0925\3\2\2\2\u0925\u0926")
        buf.write("\3\2\2\2\u0926\u092c\7\u00f4\2\2\u0927\u0929\7\u0089\2")
        buf.write("\2\u0928\u0927\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u092a")
        buf.write("\3\2\2\2\u092a\u092c\7\u00f5\2\2\u092b\u0910\3\2\2\2\u092b")
        buf.write("\u0914\3\2\2\2\u092b\u0918\3\2\2\2\u092b\u091c\3\2\2\2")
        buf.write("\u092b\u0920\3\2\2\2\u092b\u0924\3\2\2\2\u092b\u0928\3")
        buf.write("\2\2\2\u092c\u00c5\3\2\2\2\u092d\u092e\t\33\2\2\u092e")
        buf.write("\u00c7\3\2\2\2\u013c\u00e2\u00e7\u00ea\u00ef\u00fc\u0100")
        buf.write("\u0107\u0115\u0117\u011b\u011e\u0125\u0136\u0138\u013c")
        buf.write("\u013f\u0146\u014c\u0152\u015a\u017a\u0182\u0186\u018b")
        buf.write("\u0191\u0199\u019f\u01ac\u01b1\u01ba\u01bf\u01cf\u01d6")
        buf.write("\u01da\u01e2\u01e9\u01f0\u01ff\u0203\u0209\u020f\u0212")
        buf.write("\u0215\u021b\u021f\u0223\u0228\u022c\u0234\u0237\u0240")
        buf.write("\u0245\u024b\u0252\u0255\u025b\u0266\u0269\u026d\u0272")
        buf.write("\u0277\u027e\u0281\u0284\u028b\u0290\u0295\u0298\u02a1")
        buf.write("\u02a9\u02af\u02b3\u02b7\u02bb\u02bd\u02c6\u02cc\u02d1")
        buf.write("\u02d4\u02d8\u02db\u02e5\u02e8\u02ec\u02f1\u02f4\u02fa")
        buf.write("\u0302\u0307\u030d\u0313\u031e\u0326\u032d\u0335\u0338")
        buf.write("\u0340\u0344\u034b\u03bf\u03c7\u03cf\u03d8\u03e4\u03e8")
        buf.write("\u03eb\u03f1\u03fb\u0407\u040c\u0412\u041e\u0420\u0425")
        buf.write("\u0429\u042e\u0433\u0436\u043b\u043f\u0444\u0446\u044a")
        buf.write("\u0453\u045b\u0462\u0469\u0472\u0477\u0486\u048d\u0490")
        buf.write("\u0497\u049b\u04a1\u04a9\u04b4\u04bf\u04c6\u04cc\u04d2")
        buf.write("\u04db\u04dd\u04e6\u04e9\u04f2\u04f5\u04fe\u0501\u050a")
        buf.write("\u050d\u0510\u0515\u0517\u051a\u0525\u052a\u0535\u0539")
        buf.write("\u053d\u0549\u054c\u0550\u055a\u055e\u0560\u0563\u0567")
        buf.write("\u056a\u056e\u0574\u0578\u057c\u0581\u0584\u0586\u058b")
        buf.write("\u0590\u0593\u0597\u059a\u059c\u05a1\u05a6\u05b3\u05b8")
        buf.write("\u05c0\u05c6\u05d0\u05df\u05e4\u05ec\u05ef\u05f3\u05f8")
        buf.write("\u0601\u0604\u0609\u0610\u0613\u061b\u0622\u0629\u062c")
        buf.write("\u0631\u0637\u063b\u063e\u0641\u064c\u0651\u0656\u065b")
        buf.write("\u066d\u066f\u0672\u067d\u0686\u068d\u0695\u069d\u06a1")
        buf.write("\u06a9\u06b1\u06b7\u06bf\u06cb\u06ce\u06d4\u06d8\u06da")
        buf.write("\u06e3\u06ef\u06f1\u06f8\u06ff\u0705\u070b\u070d\u0712")
        buf.write("\u0719\u071f\u0723\u0725\u072c\u073a\u0742\u0744\u0749")
        buf.write("\u074c\u0754\u075d\u0763\u076b\u0771\u0776\u077b\u0781")
        buf.write("\u0796\u0798\u07a0\u07a4\u07ad\u07b1\u07c3\u07c6\u07ce")
        buf.write("\u07d7\u07ee\u07f9\u0800\u0803\u0808\u0817\u0821\u0823")
        buf.write("\u0830\u0832\u0840\u0847\u084a\u084e\u0853\u0864\u0868")
        buf.write("\u0871\u0875\u0877\u087e\u0885\u088c\u0894\u08a1\u08b1")
        buf.write("\u08bb\u08be\u08c7\u08ca\u08cc\u08cf\u08d2\u08e4\u08ed")
        buf.write("\u08f4\u0906\u090b\u0910\u0914\u0918\u091c\u0920\u0924")
        buf.write("\u0928\u092b")
        return buf.getvalue()


class SqlBaseParser(Parser):

    grammarFileName = "SqlBase.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'('",
        "')'",
        "','",
        "'.'",
        "'/*+'",
        "'*/'",
        "'['",
        "']'",
        "':'",
        "'SELECT'",
        "'FROM'",
        "'ADD'",
        "'AS'",
        "'ALL'",
        "'DISTINCT'",
        "'WHERE'",
        "'GROUP'",
        "'BY'",
        "'GROUPING'",
        "'SETS'",
        "'CUBE'",
        "'ROLLUP'",
        "'ORDER'",
        "'HAVING'",
        "'LIMIT'",
        "'AT'",
        "'OR'",
        "'AND'",
        "'IN'",
        "<INVALID>",
        "'NO'",
        "'EXISTS'",
        "'BETWEEN'",
        "'LIKE'",
        "<INVALID>",
        "'IS'",
        "'NULL'",
        "'TRUE'",
        "'FALSE'",
        "'NULLS'",
        "'ASC'",
        "'DESC'",
        "'FOR'",
        "'INTERVAL'",
        "'CASE'",
        "'WHEN'",
        "'THEN'",
        "'ELSE'",
        "'END'",
        "'JOIN'",
        "'CROSS'",
        "'OUTER'",
        "'INNER'",
        "'LEFT'",
        "'SEMI'",
        "'RIGHT'",
        "'FULL'",
        "'NATURAL'",
        "'ON'",
        "'LATERAL'",
        "'WINDOW'",
        "'OVER'",
        "'PARTITION'",
        "'RANGE'",
        "'ROWS'",
        "'UNBOUNDED'",
        "'PRECEDING'",
        "'FOLLOWING'",
        "'CURRENT'",
        "'FIRST'",
        "'AFTER'",
        "'LAST'",
        "'ROW'",
        "'WITH'",
        "'VALUES'",
        "'CREATE'",
        "'TABLE'",
        "'DIRECTORY'",
        "'VIEW'",
        "'REPLACE'",
        "'INSERT'",
        "'DELETE'",
        "'INTO'",
        "'DESCRIBE'",
        "'EXPLAIN'",
        "'FORMAT'",
        "'LOGICAL'",
        "'CODEGEN'",
        "'COST'",
        "'CAST'",
        "'SHOW'",
        "'TABLES'",
        "'COLUMNS'",
        "'COLUMN'",
        "'USE'",
        "'PARTITIONS'",
        "'FUNCTIONS'",
        "'DROP'",
        "'UNION'",
        "'EXCEPT'",
        "'MINUS'",
        "'INTERSECT'",
        "'TO'",
        "'TABLESAMPLE'",
        "'STRATIFY'",
        "'ALTER'",
        "'RENAME'",
        "'ARRAY'",
        "'MAP'",
        "'STRUCT'",
        "'COMMENT'",
        "'SET'",
        "'RESET'",
        "'DATA'",
        "'START'",
        "'TRANSACTION'",
        "'COMMIT'",
        "'ROLLBACK'",
        "'MACRO'",
        "'IGNORE'",
        "'BOTH'",
        "'LEADING'",
        "'TRAILING'",
        "'IF'",
        "'POSITION'",
        "<INVALID>",
        "'<=>'",
        "'<>'",
        "'!='",
        "'<'",
        "<INVALID>",
        "'>'",
        "<INVALID>",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'DIV'",
        "'~'",
        "'&'",
        "'|'",
        "'||'",
        "'^'",
        "'PERCENT'",
        "'BUCKET'",
        "'OUT'",
        "'OF'",
        "'SORT'",
        "'CLUSTER'",
        "'DISTRIBUTE'",
        "'OVERWRITE'",
        "'TRANSFORM'",
        "'REDUCE'",
        "'USING'",
        "'SERDE'",
        "'SERDEPROPERTIES'",
        "'RECORDREADER'",
        "'RECORDWRITER'",
        "'DELIMITED'",
        "'FIELDS'",
        "'TERMINATED'",
        "'COLLECTION'",
        "'ITEMS'",
        "'KEYS'",
        "'ESCAPED'",
        "'LINES'",
        "'SEPARATED'",
        "'FUNCTION'",
        "'EXTENDED'",
        "'REFRESH'",
        "'CLEAR'",
        "'CACHE'",
        "'UNCACHE'",
        "'LAZY'",
        "'FORMATTED'",
        "'GLOBAL'",
        "<INVALID>",
        "'OPTIONS'",
        "'UNSET'",
        "'TBLPROPERTIES'",
        "'DBPROPERTIES'",
        "'BUCKETS'",
        "'SKEWED'",
        "'STORED'",
        "'DIRECTORIES'",
        "'LOCATION'",
        "'EXCHANGE'",
        "'ARCHIVE'",
        "'UNARCHIVE'",
        "'FILEFORMAT'",
        "'TOUCH'",
        "'COMPACT'",
        "'CONCATENATE'",
        "'CHANGE'",
        "'CASCADE'",
        "'RESTRICT'",
        "'CLUSTERED'",
        "'SORTED'",
        "'PURGE'",
        "'INPUTFORMAT'",
        "'OUTPUTFORMAT'",
        "<INVALID>",
        "<INVALID>",
        "'DFS'",
        "'TRUNCATE'",
        "'ANALYZE'",
        "'COMPUTE'",
        "'LIST'",
        "'STATISTICS'",
        "'PARTITIONED'",
        "'EXTERNAL'",
        "'DEFINED'",
        "'REVOKE'",
        "'GRANT'",
        "'LOCK'",
        "'UNLOCK'",
        "'MSCK'",
        "'REPAIR'",
        "'RECOVER'",
        "'EXPORT'",
        "'IMPORT'",
        "'LOAD'",
        "'ROLE'",
        "'ROLES'",
        "'COMPACTIONS'",
        "'PRINCIPALS'",
        "'TRANSACTIONS'",
        "'INDEX'",
        "'INDEXES'",
        "'LOCKS'",
        "'OPTION'",
        "'ANTI'",
        "'LOCAL'",
        "'INPATH'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'/**/'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "SELECT",
        "FROM",
        "ADD",
        "AS",
        "ALL",
        "DISTINCT",
        "WHERE",
        "GROUP",
        "BY",
        "GROUPING",
        "SETS",
        "CUBE",
        "ROLLUP",
        "ORDER",
        "HAVING",
        "LIMIT",
        "AT",
        "OR",
        "AND",
        "IN",
        "NOT",
        "NO",
        "EXISTS",
        "BETWEEN",
        "LIKE",
        "RLIKE",
        "IS",
        "NULL",
        "TRUE",
        "FALSE",
        "NULLS",
        "ASC",
        "DESC",
        "FOR",
        "INTERVAL",
        "CASE",
        "WHEN",
        "THEN",
        "ELSE",
        "END",
        "JOIN",
        "CROSS",
        "OUTER",
        "INNER",
        "LEFT",
        "SEMI",
        "RIGHT",
        "FULL",
        "NATURAL",
        "ON",
        "LATERAL",
        "WINDOW",
        "OVER",
        "PARTITION",
        "RANGE",
        "ROWS",
        "UNBOUNDED",
        "PRECEDING",
        "FOLLOWING",
        "CURRENT",
        "FIRST",
        "AFTER",
        "LAST",
        "ROW",
        "WITH",
        "VALUES",
        "CREATE",
        "TABLE",
        "DIRECTORY",
        "VIEW",
        "REPLACE",
        "INSERT",
        "DELETE",
        "INTO",
        "DESCRIBE",
        "EXPLAIN",
        "FORMAT",
        "LOGICAL",
        "CODEGEN",
        "COST",
        "CAST",
        "SHOW",
        "TABLES",
        "COLUMNS",
        "COLUMN",
        "USE",
        "PARTITIONS",
        "FUNCTIONS",
        "DROP",
        "UNION",
        "EXCEPT",
        "SETMINUS",
        "INTERSECT",
        "TO",
        "TABLESAMPLE",
        "STRATIFY",
        "ALTER",
        "RENAME",
        "ARRAY",
        "MAP",
        "STRUCT",
        "COMMENT",
        "SET",
        "RESET",
        "DATA",
        "START",
        "TRANSACTION",
        "COMMIT",
        "ROLLBACK",
        "MACRO",
        "IGNORE",
        "BOTH",
        "LEADING",
        "TRAILING",
        "IF",
        "POSITION",
        "EQ",
        "NSEQ",
        "NEQ",
        "NEQJ",
        "LT",
        "LTE",
        "GT",
        "GTE",
        "PLUS",
        "MINUS",
        "ASTERISK",
        "SLASH",
        "PERCENT",
        "DIV",
        "TILDE",
        "AMPERSAND",
        "PIPE",
        "CONCAT_PIPE",
        "HAT",
        "PERCENTLIT",
        "BUCKET",
        "OUT",
        "OF",
        "SORT",
        "CLUSTER",
        "DISTRIBUTE",
        "OVERWRITE",
        "TRANSFORM",
        "REDUCE",
        "USING",
        "SERDE",
        "SERDEPROPERTIES",
        "RECORDREADER",
        "RECORDWRITER",
        "DELIMITED",
        "FIELDS",
        "TERMINATED",
        "COLLECTION",
        "ITEMS",
        "KEYS",
        "ESCAPED",
        "LINES",
        "SEPARATED",
        "FUNCTION",
        "EXTENDED",
        "REFRESH",
        "CLEAR",
        "CACHE",
        "UNCACHE",
        "LAZY",
        "FORMATTED",
        "GLOBAL",
        "TEMPORARY",
        "OPTIONS",
        "UNSET",
        "TBLPROPERTIES",
        "DBPROPERTIES",
        "BUCKETS",
        "SKEWED",
        "STORED",
        "DIRECTORIES",
        "LOCATION",
        "EXCHANGE",
        "ARCHIVE",
        "UNARCHIVE",
        "FILEFORMAT",
        "TOUCH",
        "COMPACT",
        "CONCATENATE",
        "CHANGE",
        "CASCADE",
        "RESTRICT",
        "CLUSTERED",
        "SORTED",
        "PURGE",
        "INPUTFORMAT",
        "OUTPUTFORMAT",
        "DATABASE",
        "DATABASES",
        "DFS",
        "TRUNCATE",
        "ANALYZE",
        "COMPUTE",
        "LIST",
        "STATISTICS",
        "PARTITIONED",
        "EXTERNAL",
        "DEFINED",
        "REVOKE",
        "GRANT",
        "LOCK",
        "UNLOCK",
        "MSCK",
        "REPAIR",
        "RECOVER",
        "EXPORT",
        "IMPORT",
        "LOAD",
        "ROLE",
        "ROLES",
        "COMPACTIONS",
        "PRINCIPALS",
        "TRANSACTIONS",
        "INDEX",
        "INDEXES",
        "LOCKS",
        "OPTION",
        "ANTI",
        "LOCAL",
        "INPATH",
        "STRING",
        "BIGINT_LITERAL",
        "SMALLINT_LITERAL",
        "TINYINT_LITERAL",
        "INTEGER_VALUE",
        "DECIMAL_VALUE",
        "DOUBLE_LITERAL",
        "BIGDECIMAL_LITERAL",
        "IDENTIFIER",
        "BACKQUOTED_IDENTIFIER",
        "SIMPLE_COMMENT",
        "BRACKETED_EMPTY_COMMENT",
        "BRACKETED_COMMENT",
        "WS",
        "UNRECOGNIZED",
    ]

    RULE_singleStatement = 0
    RULE_singleExpression = 1
    RULE_singleTableIdentifier = 2
    RULE_singleFunctionIdentifier = 3
    RULE_singleDataType = 4
    RULE_singleTableSchema = 5
    RULE_statement = 6
    RULE_unsupportedHiveNativeCommands = 7
    RULE_createTableHeader = 8
    RULE_bucketSpec = 9
    RULE_skewSpec = 10
    RULE_locationSpec = 11
    RULE_query = 12
    RULE_insertInto = 13
    RULE_partitionSpecLocation = 14
    RULE_partitionSpec = 15
    RULE_partitionVal = 16
    RULE_describeFuncName = 17
    RULE_describeColName = 18
    RULE_ctes = 19
    RULE_namedQuery = 20
    RULE_tableProvider = 21
    RULE_tablePropertyList = 22
    RULE_tableProperty = 23
    RULE_tablePropertyKey = 24
    RULE_tablePropertyValue = 25
    RULE_constantList = 26
    RULE_nestedConstantList = 27
    RULE_createFileFormat = 28
    RULE_fileFormat = 29
    RULE_storageHandler = 30
    RULE_resource = 31
    RULE_queryNoWith = 32
    RULE_queryOrganization = 33
    RULE_multiInsertQueryBody = 34
    RULE_queryTerm = 35
    RULE_queryPrimary = 36
    RULE_sortItem = 37
    RULE_querySpecification = 38
    RULE_hint = 39
    RULE_hintStatement = 40
    RULE_fromClause = 41
    RULE_aggregation = 42
    RULE_groupingSet = 43
    RULE_lateralView = 44
    RULE_setQuantifier = 45
    RULE_relation = 46
    RULE_joinRelation = 47
    RULE_joinType = 48
    RULE_joinCriteria = 49
    RULE_sample = 50
    RULE_sampleMethod = 51
    RULE_identifierList = 52
    RULE_identifierSeq = 53
    RULE_orderedIdentifierList = 54
    RULE_orderedIdentifier = 55
    RULE_identifierCommentList = 56
    RULE_identifierComment = 57
    RULE_relationPrimary = 58
    RULE_inlineTable = 59
    RULE_functionTable = 60
    RULE_tableAlias = 61
    RULE_rowFormat = 62
    RULE_tableIdentifier = 63
    RULE_functionIdentifier = 64
    RULE_namedExpression = 65
    RULE_namedExpressionSeq = 66
    RULE_expression = 67
    RULE_booleanExpression = 68
    RULE_predicated = 69
    RULE_predicate = 70
    RULE_valueExpression = 71
    RULE_primaryExpression = 72
    RULE_constant = 73
    RULE_comparisonOperator = 74
    RULE_arithmeticOperator = 75
    RULE_predicateOperator = 76
    RULE_booleanValue = 77
    RULE_interval = 78
    RULE_intervalField = 79
    RULE_intervalValue = 80
    RULE_colPosition = 81
    RULE_dataType = 82
    RULE_colTypeList = 83
    RULE_colType = 84
    RULE_complexColTypeList = 85
    RULE_complexColType = 86
    RULE_whenClause = 87
    RULE_windows = 88
    RULE_namedWindow = 89
    RULE_windowSpec = 90
    RULE_windowFrame = 91
    RULE_frameBound = 92
    RULE_qualifiedName = 93
    RULE_identifier = 94
    RULE_strictIdentifier = 95
    RULE_quotedIdentifier = 96
    RULE_number = 97
    RULE_nonReserved = 98

    ruleNames = [
        "singleStatement",
        "singleExpression",
        "singleTableIdentifier",
        "singleFunctionIdentifier",
        "singleDataType",
        "singleTableSchema",
        "statement",
        "unsupportedHiveNativeCommands",
        "createTableHeader",
        "bucketSpec",
        "skewSpec",
        "locationSpec",
        "query",
        "insertInto",
        "partitionSpecLocation",
        "partitionSpec",
        "partitionVal",
        "describeFuncName",
        "describeColName",
        "ctes",
        "namedQuery",
        "tableProvider",
        "tablePropertyList",
        "tableProperty",
        "tablePropertyKey",
        "tablePropertyValue",
        "constantList",
        "nestedConstantList",
        "createFileFormat",
        "fileFormat",
        "storageHandler",
        "resource",
        "queryNoWith",
        "queryOrganization",
        "multiInsertQueryBody",
        "queryTerm",
        "queryPrimary",
        "sortItem",
        "querySpecification",
        "hint",
        "hintStatement",
        "fromClause",
        "aggregation",
        "groupingSet",
        "lateralView",
        "setQuantifier",
        "relation",
        "joinRelation",
        "joinType",
        "joinCriteria",
        "sample",
        "sampleMethod",
        "identifierList",
        "identifierSeq",
        "orderedIdentifierList",
        "orderedIdentifier",
        "identifierCommentList",
        "identifierComment",
        "relationPrimary",
        "inlineTable",
        "functionTable",
        "tableAlias",
        "rowFormat",
        "tableIdentifier",
        "functionIdentifier",
        "namedExpression",
        "namedExpressionSeq",
        "expression",
        "booleanExpression",
        "predicated",
        "predicate",
        "valueExpression",
        "primaryExpression",
        "constant",
        "comparisonOperator",
        "arithmeticOperator",
        "predicateOperator",
        "booleanValue",
        "interval",
        "intervalField",
        "intervalValue",
        "colPosition",
        "dataType",
        "colTypeList",
        "colType",
        "complexColTypeList",
        "complexColType",
        "whenClause",
        "windows",
        "namedWindow",
        "windowSpec",
        "windowFrame",
        "frameBound",
        "qualifiedName",
        "identifier",
        "strictIdentifier",
        "quotedIdentifier",
        "number",
        "nonReserved",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    SELECT = 10
    FROM = 11
    ADD = 12
    AS = 13
    ALL = 14
    DISTINCT = 15
    WHERE = 16
    GROUP = 17
    BY = 18
    GROUPING = 19
    SETS = 20
    CUBE = 21
    ROLLUP = 22
    ORDER = 23
    HAVING = 24
    LIMIT = 25
    AT = 26
    OR = 27
    AND = 28
    IN = 29
    NOT = 30
    NO = 31
    EXISTS = 32
    BETWEEN = 33
    LIKE = 34
    RLIKE = 35
    IS = 36
    NULL = 37
    TRUE = 38
    FALSE = 39
    NULLS = 40
    ASC = 41
    DESC = 42
    FOR = 43
    INTERVAL = 44
    CASE = 45
    WHEN = 46
    THEN = 47
    ELSE = 48
    END = 49
    JOIN = 50
    CROSS = 51
    OUTER = 52
    INNER = 53
    LEFT = 54
    SEMI = 55
    RIGHT = 56
    FULL = 57
    NATURAL = 58
    ON = 59
    LATERAL = 60
    WINDOW = 61
    OVER = 62
    PARTITION = 63
    RANGE = 64
    ROWS = 65
    UNBOUNDED = 66
    PRECEDING = 67
    FOLLOWING = 68
    CURRENT = 69
    FIRST = 70
    AFTER = 71
    LAST = 72
    ROW = 73
    WITH = 74
    VALUES = 75
    CREATE = 76
    TABLE = 77
    DIRECTORY = 78
    VIEW = 79
    REPLACE = 80
    INSERT = 81
    DELETE = 82
    INTO = 83
    DESCRIBE = 84
    EXPLAIN = 85
    FORMAT = 86
    LOGICAL = 87
    CODEGEN = 88
    COST = 89
    CAST = 90
    SHOW = 91
    TABLES = 92
    COLUMNS = 93
    COLUMN = 94
    USE = 95
    PARTITIONS = 96
    FUNCTIONS = 97
    DROP = 98
    UNION = 99
    EXCEPT = 100
    SETMINUS = 101
    INTERSECT = 102
    TO = 103
    TABLESAMPLE = 104
    STRATIFY = 105
    ALTER = 106
    RENAME = 107
    ARRAY = 108
    MAP = 109
    STRUCT = 110
    COMMENT = 111
    SET = 112
    RESET = 113
    DATA = 114
    START = 115
    TRANSACTION = 116
    COMMIT = 117
    ROLLBACK = 118
    MACRO = 119
    IGNORE = 120
    BOTH = 121
    LEADING = 122
    TRAILING = 123
    IF = 124
    POSITION = 125
    EQ = 126
    NSEQ = 127
    NEQ = 128
    NEQJ = 129
    LT = 130
    LTE = 131
    GT = 132
    GTE = 133
    PLUS = 134
    MINUS = 135
    ASTERISK = 136
    SLASH = 137
    PERCENT = 138
    DIV = 139
    TILDE = 140
    AMPERSAND = 141
    PIPE = 142
    CONCAT_PIPE = 143
    HAT = 144
    PERCENTLIT = 145
    BUCKET = 146
    OUT = 147
    OF = 148
    SORT = 149
    CLUSTER = 150
    DISTRIBUTE = 151
    OVERWRITE = 152
    TRANSFORM = 153
    REDUCE = 154
    USING = 155
    SERDE = 156
    SERDEPROPERTIES = 157
    RECORDREADER = 158
    RECORDWRITER = 159
    DELIMITED = 160
    FIELDS = 161
    TERMINATED = 162
    COLLECTION = 163
    ITEMS = 164
    KEYS = 165
    ESCAPED = 166
    LINES = 167
    SEPARATED = 168
    FUNCTION = 169
    EXTENDED = 170
    REFRESH = 171
    CLEAR = 172
    CACHE = 173
    UNCACHE = 174
    LAZY = 175
    FORMATTED = 176
    GLOBAL = 177
    TEMPORARY = 178
    OPTIONS = 179
    UNSET = 180
    TBLPROPERTIES = 181
    DBPROPERTIES = 182
    BUCKETS = 183
    SKEWED = 184
    STORED = 185
    DIRECTORIES = 186
    LOCATION = 187
    EXCHANGE = 188
    ARCHIVE = 189
    UNARCHIVE = 190
    FILEFORMAT = 191
    TOUCH = 192
    COMPACT = 193
    CONCATENATE = 194
    CHANGE = 195
    CASCADE = 196
    RESTRICT = 197
    CLUSTERED = 198
    SORTED = 199
    PURGE = 200
    INPUTFORMAT = 201
    OUTPUTFORMAT = 202
    DATABASE = 203
    DATABASES = 204
    DFS = 205
    TRUNCATE = 206
    ANALYZE = 207
    COMPUTE = 208
    LIST = 209
    STATISTICS = 210
    PARTITIONED = 211
    EXTERNAL = 212
    DEFINED = 213
    REVOKE = 214
    GRANT = 215
    LOCK = 216
    UNLOCK = 217
    MSCK = 218
    REPAIR = 219
    RECOVER = 220
    EXPORT = 221
    IMPORT = 222
    LOAD = 223
    ROLE = 224
    ROLES = 225
    COMPACTIONS = 226
    PRINCIPALS = 227
    TRANSACTIONS = 228
    INDEX = 229
    INDEXES = 230
    LOCKS = 231
    OPTION = 232
    ANTI = 233
    LOCAL = 234
    INPATH = 235
    STRING = 236
    BIGINT_LITERAL = 237
    SMALLINT_LITERAL = 238
    TINYINT_LITERAL = 239
    INTEGER_VALUE = 240
    DECIMAL_VALUE = 241
    DOUBLE_LITERAL = 242
    BIGDECIMAL_LITERAL = 243
    IDENTIFIER = 244
    BACKQUOTED_IDENTIFIER = 245
    SIMPLE_COMMENT = 246
    BRACKETED_EMPTY_COMMENT = 247
    BRACKETED_COMMENT = 248
    WS = 249
    UNRECOGNIZED = 250

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    """
    Verify whether current token is a valid decimal token (which contains dot).
    Returns true if the character that follows the token is not a digit or letter or underscore.

    For example:
    For char stream "2.3", "2." is not a valid decimal token, because it is followed by digit '3'.
    For char stream "2.3_", "2.3" is not a valid decimal token, because it is followed by '_'.
    For char stream "2.3W", "2.3" is not a valid decimal token, because it is followed by 'W'.
    For char stream "12.0D 34.E2+0.12 "  12.0D is a valid decimal token because it is followed
    by a space. 34.E2 is a valid decimal token because it is followed by symbol '+'
    which is not a digit or letter or underscore.
    """

    def isValidDecimal(self):
        nextChar = self._input.LA(1)
        return not ("A" <= nextChar <= "Z" or "0" <= nextChar <= "9" or nextChar == "_")

    class SingleStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleStatement"):
                listener.enterSingleStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleStatement"):
                listener.exitSingleStatement(self)

    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.statement()
            self.state = 199
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleExpression"):
                listener.enterSingleExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleExpression"):
                listener.exitSingleExpression(self)

    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.namedExpression()
            self.state = 202
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleTableIdentifier"):
                listener.enterSingleTableIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleTableIdentifier"):
                listener.exitSingleTableIdentifier(self)

    def singleTableIdentifier(self):

        localctx = SqlBaseParser.SingleTableIdentifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 4, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.tableIdentifier()
            self.state = 205
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionIdentifierContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleFunctionIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleFunctionIdentifier"):
                listener.enterSingleFunctionIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleFunctionIdentifier"):
                listener.exitSingleFunctionIdentifier(self)

    def singleFunctionIdentifier(self):

        localctx = SqlBaseParser.SingleFunctionIdentifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 6, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self.functionIdentifier()
            self.state = 208
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleDataType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleDataType"):
                listener.enterSingleDataType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleDataType"):
                listener.exitSingleDataType(self)

    def singleDataType(self):

        localctx = SqlBaseParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.dataType()
            self.state = 211
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleTableSchema

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleTableSchema"):
                listener.enterSingleTableSchema(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleTableSchema"):
                listener.exitSingleTableSchema(self)

    def singleTableSchema(self):

        localctx = SqlBaseParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.colTypeList()
            self.state = 214
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ExplainContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExplain"):
                listener.enterExplain(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExplain"):
                listener.exitExplain(self)

    class DropDatabaseContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropDatabase"):
                listener.enterDropDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropDatabase"):
                listener.exitDropDatabase(self)

    class ResetConfigurationContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResetConfiguration"):
                listener.enterResetConfiguration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResetConfiguration"):
                listener.exitResetConfiguration(self)

    class DescribeDatabaseContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeDatabase"):
                listener.enterDescribeDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeDatabase"):
                listener.exitDescribeDatabase(self)

    class AlterViewQueryContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlterViewQuery"):
                listener.enterAlterViewQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlterViewQuery"):
                listener.exitAlterViewQuery(self)

    class UseContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None  # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUse"):
                listener.enterUse(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUse"):
                listener.exitUse(self)

    class CreateTempViewUsingContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTempViewUsing"):
                listener.enterCreateTempViewUsing(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTempViewUsing"):
                listener.exitCreateTempViewUsing(self)

    class RenameTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None  # TableIdentifierContext
            self.to = None  # TableIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def tableIdentifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRenameTable"):
                listener.enterRenameTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRenameTable"):
                listener.exitRenameTable(self)

    class FailNativeCommandContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(
                SqlBaseParser.UnsupportedHiveNativeCommandsContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFailNativeCommand"):
                listener.enterFailNativeCommand(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFailNativeCommand"):
                listener.exitFailNativeCommand(self)

    class ClearCacheContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClearCache"):
                listener.enterClearCache(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClearCache"):
                listener.exitClearCache(self)

    class ShowTablesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None  # IdentifierContext
            self.pattern = None  # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowTables"):
                listener.enterShowTables(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowTables"):
                listener.exitShowTables(self)

    class RecoverPartitionsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecoverPartitions"):
                listener.enterRecoverPartitions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecoverPartitions"):
                listener.exitRecoverPartitions(self)

    class RenameTablePartitionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.from_ = None  # PartitionSpecContext
            self.to = None  # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def partitionSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRenameTablePartition"):
                listener.enterRenameTablePartition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRenameTablePartition"):
                listener.exitRenameTablePartition(self)

    class RepairTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRepairTable"):
                listener.enterRepairTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRepairTable"):
                listener.exitRepairTable(self)

    class RefreshResourceContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRefreshResource"):
                listener.enterRefreshResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRefreshResource"):
                listener.exitRefreshResource(self)

    class ShowCreateTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowCreateTable"):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowCreateTable"):
                listener.exitShowCreateTable(self)

    class ShowColumnsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None  # IdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def FROM(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)

        def IN(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowColumns"):
                listener.enterShowColumns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowColumns"):
                listener.exitShowColumns(self)

    class AddTablePartitionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def partitionSpecLocation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SqlBaseParser.PartitionSpecLocationContext
                )
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.PartitionSpecLocationContext, i
                )

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def partitionSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAddTablePartition"):
                listener.enterAddTablePartition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAddTablePartition"):
                listener.exitAddTablePartition(self)

    class RefreshTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRefreshTable"):
                listener.enterRefreshTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRefreshTable"):
                listener.exitRefreshTable(self)

    class ManageResourceContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.op = None  # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterManageResource"):
                listener.enterManageResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitManageResource"):
                listener.exitManageResource(self)

    class CreateDatabaseContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.comment = None  # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateDatabase"):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateDatabase"):
                listener.exitCreateDatabase(self)

    class AnalyzeContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAnalyze"):
                listener.enterAnalyze(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAnalyze"):
                listener.exitAnalyze(self)

    class CreateHiveTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None  # ColTypeListContext
            self.comment = None  # Token
            self.partitionColumns = None  # ColTypeListContext
            self.tableProps = None  # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext, 0)

        def bucketSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext, i)

        def skewSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SkewSpecContext, i)

        def rowFormat(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext, i)

        def createFileFormat(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.CreateFileFormatContext, i
                )

        def locationSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, i)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def colTypeList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, i)

        def COMMENT(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMENT)
            else:
                return self.getToken(SqlBaseParser.COMMENT, i)

        def PARTITIONED(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def TBLPROPERTIES(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def tablePropertyList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.TablePropertyListContext, i
                )

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateHiveTable"):
                listener.enterCreateHiveTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateHiveTable"):
                listener.exitCreateHiveTable(self)

    class CreateFunctionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.className = None  # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def resource(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ResourceContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ResourceContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateFunction"):
                listener.enterCreateFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateFunction"):
                listener.exitCreateFunction(self)

    class ShowTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.db = None  # IdentifierContext
            self.pattern = None  # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowTable"):
                listener.enterShowTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowTable"):
                listener.exitShowTable(self)

    class SetDatabasePropertiesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetDatabaseProperties"):
                listener.enterSetDatabaseProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetDatabaseProperties"):
                listener.exitSetDatabaseProperties(self)

    class CreateTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.options = None  # TablePropertyListContext
            self.partitionColumnNames = None  # IdentifierListContext
            self.comment = None  # Token
            self.tableProps = None  # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateTableHeaderContext, 0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def bucketSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BucketSpecContext, i)

        def locationSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, i)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def OPTIONS(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.OPTIONS)
            else:
                return self.getToken(SqlBaseParser.OPTIONS, i)

        def PARTITIONED(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.PARTITIONED)
            else:
                return self.getToken(SqlBaseParser.PARTITIONED, i)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def COMMENT(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMENT)
            else:
                return self.getToken(SqlBaseParser.COMMENT, i)

        def TBLPROPERTIES(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.TBLPROPERTIES)
            else:
                return self.getToken(SqlBaseParser.TBLPROPERTIES, i)

        def tablePropertyList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.TablePropertyListContext, i
                )

        def identifierList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, i)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTable"):
                listener.enterCreateTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTable"):
                listener.exitCreateTable(self)

    class DescribeTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.option = None  # Token
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def describeColName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeColNameContext, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeTable"):
                listener.enterDescribeTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeTable"):
                listener.exitDescribeTable(self)

    class CreateTableLikeContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.target = None  # TableIdentifierContext
            self.source = None  # TableIdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def tableIdentifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTableLike"):
                listener.enterCreateTableLike(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTableLike"):
                listener.exitCreateTableLike(self)

    class UncacheTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUncacheTable"):
                listener.enterUncacheTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUncacheTable"):
                listener.exitUncacheTable(self)

    class DropFunctionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropFunction"):
                listener.enterDropFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropFunction"):
                listener.exitDropFunction(self)

    class LoadDataContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None  # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLoadData"):
                listener.enterLoadData(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLoadData"):
                listener.exitLoadData(self)

    class ShowPartitionsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowPartitions"):
                listener.enterShowPartitions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowPartitions"):
                listener.exitShowPartitions(self)

    class DescribeFunctionContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def describeFuncName(self):
            return self.getTypedRuleContext(SqlBaseParser.DescribeFuncNameContext, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeFunction"):
                listener.enterDescribeFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeFunction"):
                listener.exitDescribeFunction(self)

    class ChangeColumnContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def colType(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def colPosition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColPositionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterChangeColumn"):
                listener.enterChangeColumn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitChangeColumn"):
                listener.exitChangeColumn(self)

    class StatementDefaultContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatementDefault"):
                listener.enterStatementDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatementDefault"):
                listener.exitStatementDefault(self)

    class TruncateTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTruncateTable"):
                listener.enterTruncateTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTruncateTable"):
                listener.exitTruncateTable(self)

    class SetTableSerDeContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetTableSerDe"):
                listener.enterSetTableSerDe(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetTableSerDe"):
                listener.exitSetTableSerDe(self)

    class CreateViewContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def identifierCommentList(self):
            return self.getTypedRuleContext(
                SqlBaseParser.IdentifierCommentListContext, 0
            )

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateView"):
                listener.enterCreateView(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateView"):
                listener.exitCreateView(self)

    class DropTablePartitionsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def partitionSpec(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, i)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropTablePartitions"):
                listener.enterDropTablePartitions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropTablePartitions"):
                listener.exitDropTablePartitions(self)

    class SetConfigurationContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetConfiguration"):
                listener.enterSetConfiguration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetConfiguration"):
                listener.exitSetConfiguration(self)

    class DropTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDropTable"):
                listener.enterDropTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDropTable"):
                listener.exitDropTable(self)

    class ShowDatabasesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None  # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowDatabases"):
                listener.enterShowDatabases(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowDatabases"):
                listener.exitShowDatabases(self)

    class ShowTblPropertiesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.table = None  # TableIdentifierContext
            self.key = None  # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowTblProperties"):
                listener.enterShowTblProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowTblProperties"):
                listener.exitShowTblProperties(self)

    class UnsetTablePropertiesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsetTableProperties"):
                listener.enterUnsetTableProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsetTableProperties"):
                listener.exitUnsetTableProperties(self)

    class SetTableLocationContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetTableLocation"):
                listener.enterSetTableLocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetTableLocation"):
                listener.exitSetTableLocation(self)

    class ShowFunctionsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None  # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterShowFunctions"):
                listener.enterShowFunctions(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitShowFunctions"):
                listener.exitShowFunctions(self)

    class CacheTableContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCacheTable"):
                listener.enterCacheTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCacheTable"):
                listener.exitCacheTable(self)

    class AddTableColumnsContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.columns = None  # ColTypeListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAddTableColumns"):
                listener.enterAddTableColumns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAddTableColumns"):
                listener.exitAddTableColumns(self)

    class SetTablePropertiesContext(StatementContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetTableProperties"):
                listener.enterSetTableProperties(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetTableProperties"):
                listener.exitSetTableProperties(self)

    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 216
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self.match(SqlBaseParser.USE)
                self.state = 218
                localctx.db = self.identifier()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CreateDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 219
                self.match(SqlBaseParser.CREATE)
                self.state = 220
                self.match(SqlBaseParser.DATABASE)
                self.state = 224
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
                if la_ == 1:
                    self.state = 221
                    self.match(SqlBaseParser.IF)
                    self.state = 222
                    self.match(SqlBaseParser.NOT)
                    self.state = 223
                    self.match(SqlBaseParser.EXISTS)

                self.state = 226
                self.identifier()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.COMMENT:
                    self.state = 227
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 228
                    localctx.comment = self.match(SqlBaseParser.STRING)

                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LOCATION:
                    self.state = 231
                    self.locationSpec()

                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.WITH:
                    self.state = 234
                    self.match(SqlBaseParser.WITH)
                    self.state = 235
                    self.match(SqlBaseParser.DBPROPERTIES)
                    self.state = 236
                    self.tablePropertyList()

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SetDatabasePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 239
                self.match(SqlBaseParser.ALTER)
                self.state = 240
                self.match(SqlBaseParser.DATABASE)
                self.state = 241
                self.identifier()
                self.state = 242
                self.match(SqlBaseParser.SET)
                self.state = 243
                self.match(SqlBaseParser.DBPROPERTIES)
                self.state = 244
                self.tablePropertyList()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 246
                self.match(SqlBaseParser.DROP)
                self.state = 247
                self.match(SqlBaseParser.DATABASE)
                self.state = 250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
                if la_ == 1:
                    self.state = 248
                    self.match(SqlBaseParser.IF)
                    self.state = 249
                    self.match(SqlBaseParser.EXISTS)

                self.state = 252
                self.identifier()
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.CASCADE or _la == SqlBaseParser.RESTRICT:
                    self.state = 253
                    _la = self._input.LA(1)
                    if not (
                        _la == SqlBaseParser.CASCADE or _la == SqlBaseParser.RESTRICT
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 256
                self.createTableHeader()
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__0:
                    self.state = 257
                    self.match(SqlBaseParser.T__0)
                    self.state = 258
                    self.colTypeList()
                    self.state = 259
                    self.match(SqlBaseParser.T__1)

                self.state = 263
                self.tableProvider()
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.COMMENT or (
                    (((_la - 179)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 179))
                        & (
                            (1 << (SqlBaseParser.OPTIONS - 179))
                            | (1 << (SqlBaseParser.TBLPROPERTIES - 179))
                            | (1 << (SqlBaseParser.LOCATION - 179))
                            | (1 << (SqlBaseParser.CLUSTERED - 179))
                            | (1 << (SqlBaseParser.PARTITIONED - 179))
                        )
                    )
                    != 0
                ):
                    self.state = 275
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.OPTIONS]:
                        self.state = 264
                        self.match(SqlBaseParser.OPTIONS)
                        self.state = 265
                        localctx.options = self.tablePropertyList()
                        pass
                    elif token in [SqlBaseParser.PARTITIONED]:
                        self.state = 266
                        self.match(SqlBaseParser.PARTITIONED)
                        self.state = 267
                        self.match(SqlBaseParser.BY)
                        self.state = 268
                        localctx.partitionColumnNames = self.identifierList()
                        pass
                    elif token in [SqlBaseParser.CLUSTERED]:
                        self.state = 269
                        self.bucketSpec()
                        pass
                    elif token in [SqlBaseParser.LOCATION]:
                        self.state = 270
                        self.locationSpec()
                        pass
                    elif token in [SqlBaseParser.COMMENT]:
                        self.state = 271
                        self.match(SqlBaseParser.COMMENT)
                        self.state = 272
                        localctx.comment = self.match(SqlBaseParser.STRING)
                        pass
                    elif token in [SqlBaseParser.TBLPROPERTIES]:
                        self.state = 273
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 274
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.AS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 74)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 74))
                            & (
                                (1 << (SqlBaseParser.WITH - 74))
                                | (1 << (SqlBaseParser.VALUES - 74))
                                | (1 << (SqlBaseParser.TABLE - 74))
                                | (1 << (SqlBaseParser.INSERT - 74))
                                | (1 << (SqlBaseParser.MAP - 74))
                            )
                        )
                        != 0
                    )
                    or _la == SqlBaseParser.REDUCE
                ):
                    self.state = 281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.AS:
                        self.state = 280
                        self.match(SqlBaseParser.AS)

                    self.state = 283
                    self.query()

                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 286
                self.createTableHeader()
                self.state = 291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
                if la_ == 1:
                    self.state = 287
                    self.match(SqlBaseParser.T__0)
                    self.state = 288
                    localctx.columns = self.colTypeList()
                    self.state = 289
                    self.match(SqlBaseParser.T__1)

                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    _la == SqlBaseParser.ROW
                    or _la == SqlBaseParser.COMMENT
                    or (
                        (((_la - 181)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 181))
                            & (
                                (1 << (SqlBaseParser.TBLPROPERTIES - 181))
                                | (1 << (SqlBaseParser.SKEWED - 181))
                                | (1 << (SqlBaseParser.STORED - 181))
                                | (1 << (SqlBaseParser.LOCATION - 181))
                                | (1 << (SqlBaseParser.CLUSTERED - 181))
                                | (1 << (SqlBaseParser.PARTITIONED - 181))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 308
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SqlBaseParser.COMMENT]:
                        self.state = 293
                        self.match(SqlBaseParser.COMMENT)
                        self.state = 294
                        localctx.comment = self.match(SqlBaseParser.STRING)
                        pass
                    elif token in [SqlBaseParser.PARTITIONED]:
                        self.state = 295
                        self.match(SqlBaseParser.PARTITIONED)
                        self.state = 296
                        self.match(SqlBaseParser.BY)
                        self.state = 297
                        self.match(SqlBaseParser.T__0)
                        self.state = 298
                        localctx.partitionColumns = self.colTypeList()
                        self.state = 299
                        self.match(SqlBaseParser.T__1)
                        pass
                    elif token in [SqlBaseParser.CLUSTERED]:
                        self.state = 301
                        self.bucketSpec()
                        pass
                    elif token in [SqlBaseParser.SKEWED]:
                        self.state = 302
                        self.skewSpec()
                        pass
                    elif token in [SqlBaseParser.ROW]:
                        self.state = 303
                        self.rowFormat()
                        pass
                    elif token in [SqlBaseParser.STORED]:
                        self.state = 304
                        self.createFileFormat()
                        pass
                    elif token in [SqlBaseParser.LOCATION]:
                        self.state = 305
                        self.locationSpec()
                        pass
                    elif token in [SqlBaseParser.TBLPROPERTIES]:
                        self.state = 306
                        self.match(SqlBaseParser.TBLPROPERTIES)
                        self.state = 307
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.AS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 74)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 74))
                            & (
                                (1 << (SqlBaseParser.WITH - 74))
                                | (1 << (SqlBaseParser.VALUES - 74))
                                | (1 << (SqlBaseParser.TABLE - 74))
                                | (1 << (SqlBaseParser.INSERT - 74))
                                | (1 << (SqlBaseParser.MAP - 74))
                            )
                        )
                        != 0
                    )
                    or _la == SqlBaseParser.REDUCE
                ):
                    self.state = 314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.AS:
                        self.state = 313
                        self.match(SqlBaseParser.AS)

                    self.state = 316
                    self.query()

                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 319
                self.match(SqlBaseParser.CREATE)
                self.state = 320
                self.match(SqlBaseParser.TABLE)
                self.state = 324
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
                if la_ == 1:
                    self.state = 321
                    self.match(SqlBaseParser.IF)
                    self.state = 322
                    self.match(SqlBaseParser.NOT)
                    self.state = 323
                    self.match(SqlBaseParser.EXISTS)

                self.state = 326
                localctx.target = self.tableIdentifier()
                self.state = 327
                self.match(SqlBaseParser.LIKE)
                self.state = 328
                localctx.source = self.tableIdentifier()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LOCATION:
                    self.state = 329
                    self.locationSpec()

                pass

            elif la_ == 9:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 332
                self.match(SqlBaseParser.ANALYZE)
                self.state = 333
                self.match(SqlBaseParser.TABLE)
                self.state = 334
                self.tableIdentifier()
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 335
                    self.partitionSpec()

                self.state = 338
                self.match(SqlBaseParser.COMPUTE)
                self.state = 339
                self.match(SqlBaseParser.STATISTICS)
                self.state = 344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
                if la_ == 1:
                    self.state = 340
                    self.identifier()

                elif la_ == 2:
                    self.state = 341
                    self.match(SqlBaseParser.FOR)
                    self.state = 342
                    self.match(SqlBaseParser.COLUMNS)
                    self.state = 343
                    self.identifierSeq()

                pass

            elif la_ == 10:
                localctx = SqlBaseParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 346
                self.match(SqlBaseParser.ALTER)
                self.state = 347
                self.match(SqlBaseParser.TABLE)
                self.state = 348
                self.tableIdentifier()
                self.state = 349
                self.match(SqlBaseParser.ADD)
                self.state = 350
                self.match(SqlBaseParser.COLUMNS)
                self.state = 351
                self.match(SqlBaseParser.T__0)
                self.state = 352
                localctx.columns = self.colTypeList()
                self.state = 353
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 355
                self.match(SqlBaseParser.ALTER)
                self.state = 356
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.TABLE or _la == SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 357
                localctx.from_ = self.tableIdentifier()
                self.state = 358
                self.match(SqlBaseParser.RENAME)
                self.state = 359
                self.match(SqlBaseParser.TO)
                self.state = 360
                localctx.to = self.tableIdentifier()
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 362
                self.match(SqlBaseParser.ALTER)
                self.state = 363
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.TABLE or _la == SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 364
                self.tableIdentifier()
                self.state = 365
                self.match(SqlBaseParser.SET)
                self.state = 366
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 367
                self.tablePropertyList()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 369
                self.match(SqlBaseParser.ALTER)
                self.state = 370
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.TABLE or _la == SqlBaseParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 371
                self.tableIdentifier()
                self.state = 372
                self.match(SqlBaseParser.UNSET)
                self.state = 373
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 374
                    self.match(SqlBaseParser.IF)
                    self.state = 375
                    self.match(SqlBaseParser.EXISTS)

                self.state = 378
                self.tablePropertyList()
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 380
                self.match(SqlBaseParser.ALTER)
                self.state = 381
                self.match(SqlBaseParser.TABLE)
                self.state = 382
                self.tableIdentifier()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 383
                    self.partitionSpec()

                self.state = 386
                self.match(SqlBaseParser.CHANGE)
                self.state = 388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 22, self._ctx)
                if la_ == 1:
                    self.state = 387
                    self.match(SqlBaseParser.COLUMN)

                self.state = 390
                self.identifier()
                self.state = 391
                self.colType()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.FIRST or _la == SqlBaseParser.AFTER:
                    self.state = 392
                    self.colPosition()

                pass

            elif la_ == 15:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 395
                self.match(SqlBaseParser.ALTER)
                self.state = 396
                self.match(SqlBaseParser.TABLE)
                self.state = 397
                self.tableIdentifier()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 398
                    self.partitionSpec()

                self.state = 401
                self.match(SqlBaseParser.SET)
                self.state = 402
                self.match(SqlBaseParser.SERDE)
                self.state = 403
                self.match(SqlBaseParser.STRING)
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.WITH:
                    self.state = 404
                    self.match(SqlBaseParser.WITH)
                    self.state = 405
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 406
                    self.tablePropertyList()

                pass

            elif la_ == 16:
                localctx = SqlBaseParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 409
                self.match(SqlBaseParser.ALTER)
                self.state = 410
                self.match(SqlBaseParser.TABLE)
                self.state = 411
                self.tableIdentifier()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 412
                    self.partitionSpec()

                self.state = 415
                self.match(SqlBaseParser.SET)
                self.state = 416
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 417
                self.tablePropertyList()
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 419
                self.match(SqlBaseParser.ALTER)
                self.state = 420
                self.match(SqlBaseParser.TABLE)
                self.state = 421
                self.tableIdentifier()
                self.state = 422
                self.match(SqlBaseParser.ADD)
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 423
                    self.match(SqlBaseParser.IF)
                    self.state = 424
                    self.match(SqlBaseParser.NOT)
                    self.state = 425
                    self.match(SqlBaseParser.EXISTS)

                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 428
                    self.partitionSpecLocation()
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 18:
                localctx = SqlBaseParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 433
                self.match(SqlBaseParser.ALTER)
                self.state = 434
                self.match(SqlBaseParser.VIEW)
                self.state = 435
                self.tableIdentifier()
                self.state = 436
                self.match(SqlBaseParser.ADD)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 437
                    self.match(SqlBaseParser.IF)
                    self.state = 438
                    self.match(SqlBaseParser.NOT)
                    self.state = 439
                    self.match(SqlBaseParser.EXISTS)

                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 442
                    self.partitionSpec()
                    self.state = 445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.PARTITION):
                        break

                pass

            elif la_ == 19:
                localctx = SqlBaseParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 447
                self.match(SqlBaseParser.ALTER)
                self.state = 448
                self.match(SqlBaseParser.TABLE)
                self.state = 449
                self.tableIdentifier()
                self.state = 450
                localctx.from_ = self.partitionSpec()
                self.state = 451
                self.match(SqlBaseParser.RENAME)
                self.state = 452
                self.match(SqlBaseParser.TO)
                self.state = 453
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 20:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 455
                self.match(SqlBaseParser.ALTER)
                self.state = 456
                self.match(SqlBaseParser.TABLE)
                self.state = 457
                self.tableIdentifier()
                self.state = 458
                self.match(SqlBaseParser.DROP)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 459
                    self.match(SqlBaseParser.IF)
                    self.state = 460
                    self.match(SqlBaseParser.EXISTS)

                self.state = 463
                self.partitionSpec()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 464
                    self.match(SqlBaseParser.T__2)
                    self.state = 465
                    self.partitionSpec()
                    self.state = 470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PURGE:
                    self.state = 471
                    self.match(SqlBaseParser.PURGE)

                pass

            elif la_ == 21:
                localctx = SqlBaseParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 474
                self.match(SqlBaseParser.ALTER)
                self.state = 475
                self.match(SqlBaseParser.VIEW)
                self.state = 476
                self.tableIdentifier()
                self.state = 477
                self.match(SqlBaseParser.DROP)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IF:
                    self.state = 478
                    self.match(SqlBaseParser.IF)
                    self.state = 479
                    self.match(SqlBaseParser.EXISTS)

                self.state = 482
                self.partitionSpec()
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 483
                    self.match(SqlBaseParser.T__2)
                    self.state = 484
                    self.partitionSpec()
                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 490
                self.match(SqlBaseParser.ALTER)
                self.state = 491
                self.match(SqlBaseParser.TABLE)
                self.state = 492
                self.tableIdentifier()
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 493
                    self.partitionSpec()

                self.state = 496
                self.match(SqlBaseParser.SET)
                self.state = 497
                self.locationSpec()
                pass

            elif la_ == 23:
                localctx = SqlBaseParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 499
                self.match(SqlBaseParser.ALTER)
                self.state = 500
                self.match(SqlBaseParser.TABLE)
                self.state = 501
                self.tableIdentifier()
                self.state = 502
                self.match(SqlBaseParser.RECOVER)
                self.state = 503
                self.match(SqlBaseParser.PARTITIONS)
                pass

            elif la_ == 24:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 505
                self.match(SqlBaseParser.DROP)
                self.state = 506
                self.match(SqlBaseParser.TABLE)
                self.state = 509
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.match(SqlBaseParser.IF)
                    self.state = 508
                    self.match(SqlBaseParser.EXISTS)

                self.state = 511
                self.tableIdentifier()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PURGE:
                    self.state = 512
                    self.match(SqlBaseParser.PURGE)

                pass

            elif la_ == 25:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 515
                self.match(SqlBaseParser.DROP)
                self.state = 516
                self.match(SqlBaseParser.VIEW)
                self.state = 519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
                if la_ == 1:
                    self.state = 517
                    self.match(SqlBaseParser.IF)
                    self.state = 518
                    self.match(SqlBaseParser.EXISTS)

                self.state = 521
                self.tableIdentifier()
                pass

            elif la_ == 26:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 522
                self.match(SqlBaseParser.CREATE)
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OR:
                    self.state = 523
                    self.match(SqlBaseParser.OR)
                    self.state = 524
                    self.match(SqlBaseParser.REPLACE)

                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.GLOBAL or _la == SqlBaseParser.TEMPORARY:
                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.GLOBAL:
                        self.state = 527
                        self.match(SqlBaseParser.GLOBAL)

                    self.state = 530
                    self.match(SqlBaseParser.TEMPORARY)

                self.state = 533
                self.match(SqlBaseParser.VIEW)
                self.state = 537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
                if la_ == 1:
                    self.state = 534
                    self.match(SqlBaseParser.IF)
                    self.state = 535
                    self.match(SqlBaseParser.NOT)
                    self.state = 536
                    self.match(SqlBaseParser.EXISTS)

                self.state = 539
                self.tableIdentifier()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__0:
                    self.state = 540
                    self.identifierCommentList()

                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.COMMENT:
                    self.state = 543
                    self.match(SqlBaseParser.COMMENT)
                    self.state = 544
                    self.match(SqlBaseParser.STRING)

                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITIONED:
                    self.state = 547
                    self.match(SqlBaseParser.PARTITIONED)
                    self.state = 548
                    self.match(SqlBaseParser.ON)
                    self.state = 549
                    self.identifierList()

                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.TBLPROPERTIES:
                    self.state = 552
                    self.match(SqlBaseParser.TBLPROPERTIES)
                    self.state = 553
                    self.tablePropertyList()

                self.state = 556
                self.match(SqlBaseParser.AS)
                self.state = 557
                self.query()
                pass

            elif la_ == 27:
                localctx = SqlBaseParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 559
                self.match(SqlBaseParser.CREATE)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OR:
                    self.state = 560
                    self.match(SqlBaseParser.OR)
                    self.state = 561
                    self.match(SqlBaseParser.REPLACE)

                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.GLOBAL:
                    self.state = 564
                    self.match(SqlBaseParser.GLOBAL)

                self.state = 567
                self.match(SqlBaseParser.TEMPORARY)
                self.state = 568
                self.match(SqlBaseParser.VIEW)
                self.state = 569
                self.tableIdentifier()
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__0:
                    self.state = 570
                    self.match(SqlBaseParser.T__0)
                    self.state = 571
                    self.colTypeList()
                    self.state = 572
                    self.match(SqlBaseParser.T__1)

                self.state = 576
                self.tableProvider()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OPTIONS:
                    self.state = 577
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 578
                    self.tablePropertyList()

                pass

            elif la_ == 28:
                localctx = SqlBaseParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 581
                self.match(SqlBaseParser.ALTER)
                self.state = 582
                self.match(SqlBaseParser.VIEW)
                self.state = 583
                self.tableIdentifier()
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.AS:
                    self.state = 584
                    self.match(SqlBaseParser.AS)

                self.state = 587
                self.query()
                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 589
                self.match(SqlBaseParser.CREATE)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OR:
                    self.state = 590
                    self.match(SqlBaseParser.OR)
                    self.state = 591
                    self.match(SqlBaseParser.REPLACE)

                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.TEMPORARY:
                    self.state = 594
                    self.match(SqlBaseParser.TEMPORARY)

                self.state = 597
                self.match(SqlBaseParser.FUNCTION)
                self.state = 601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 55, self._ctx)
                if la_ == 1:
                    self.state = 598
                    self.match(SqlBaseParser.IF)
                    self.state = 599
                    self.match(SqlBaseParser.NOT)
                    self.state = 600
                    self.match(SqlBaseParser.EXISTS)

                self.state = 603
                self.qualifiedName()
                self.state = 604
                self.match(SqlBaseParser.AS)
                self.state = 605
                localctx.className = self.match(SqlBaseParser.STRING)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.USING:
                    self.state = 606
                    self.match(SqlBaseParser.USING)
                    self.state = 607
                    self.resource()
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 608
                        self.match(SqlBaseParser.T__2)
                        self.state = 609
                        self.resource()
                        self.state = 614
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                pass

            elif la_ == 30:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 617
                self.match(SqlBaseParser.DROP)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.TEMPORARY:
                    self.state = 618
                    self.match(SqlBaseParser.TEMPORARY)

                self.state = 621
                self.match(SqlBaseParser.FUNCTION)
                self.state = 624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
                if la_ == 1:
                    self.state = 622
                    self.match(SqlBaseParser.IF)
                    self.state = 623
                    self.match(SqlBaseParser.EXISTS)

                self.state = 626
                self.qualifiedName()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 627
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        (((_la - 87)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 87))
                            & (
                                (1 << (SqlBaseParser.LOGICAL - 87))
                                | (1 << (SqlBaseParser.CODEGEN - 87))
                                | (1 << (SqlBaseParser.COST - 87))
                            )
                        )
                        != 0
                    )
                    or _la == SqlBaseParser.EXTENDED
                    or _la == SqlBaseParser.FORMATTED
                ):
                    self.state = 628
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 87)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 87))
                                & (
                                    (1 << (SqlBaseParser.LOGICAL - 87))
                                    | (1 << (SqlBaseParser.CODEGEN - 87))
                                    | (1 << (SqlBaseParser.COST - 87))
                                )
                            )
                            != 0
                        )
                        or _la == SqlBaseParser.EXTENDED
                        or _la == SqlBaseParser.FORMATTED
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 631
                self.statement()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 632
                self.match(SqlBaseParser.SHOW)
                self.state = 633
                self.match(SqlBaseParser.TABLES)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.FROM or _la == SqlBaseParser.IN:
                    self.state = 634
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.FROM or _la == SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 635
                    localctx.db = self.identifier()

                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LIKE or _la == SqlBaseParser.STRING:
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.LIKE:
                        self.state = 638
                        self.match(SqlBaseParser.LIKE)

                    self.state = 641
                    localctx.pattern = self.match(SqlBaseParser.STRING)

                pass

            elif la_ == 33:
                localctx = SqlBaseParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 644
                self.match(SqlBaseParser.SHOW)
                self.state = 645
                self.match(SqlBaseParser.TABLE)
                self.state = 646
                self.match(SqlBaseParser.EXTENDED)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.FROM or _la == SqlBaseParser.IN:
                    self.state = 647
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.FROM or _la == SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 648
                    localctx.db = self.identifier()

                self.state = 651
                self.match(SqlBaseParser.LIKE)
                self.state = 652
                localctx.pattern = self.match(SqlBaseParser.STRING)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 653
                    self.partitionSpec()

                pass

            elif la_ == 34:
                localctx = SqlBaseParser.ShowDatabasesContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 656
                self.match(SqlBaseParser.SHOW)
                self.state = 657
                self.match(SqlBaseParser.DATABASES)
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LIKE or _la == SqlBaseParser.STRING:
                    self.state = 659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.LIKE:
                        self.state = 658
                        self.match(SqlBaseParser.LIKE)

                    self.state = 661
                    localctx.pattern = self.match(SqlBaseParser.STRING)

                pass

            elif la_ == 35:
                localctx = SqlBaseParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 664
                self.match(SqlBaseParser.SHOW)
                self.state = 665
                self.match(SqlBaseParser.TBLPROPERTIES)
                self.state = 666
                localctx.table = self.tableIdentifier()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__0:
                    self.state = 667
                    self.match(SqlBaseParser.T__0)
                    self.state = 668
                    localctx.key = self.tablePropertyKey()
                    self.state = 669
                    self.match(SqlBaseParser.T__1)

                pass

            elif la_ == 36:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 673
                self.match(SqlBaseParser.SHOW)
                self.state = 674
                self.match(SqlBaseParser.COLUMNS)
                self.state = 675
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.FROM or _la == SqlBaseParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 676
                self.tableIdentifier()
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.FROM or _la == SqlBaseParser.IN:
                    self.state = 677
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.FROM or _la == SqlBaseParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 678
                    localctx.db = self.identifier()

                pass

            elif la_ == 37:
                localctx = SqlBaseParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 681
                self.match(SqlBaseParser.SHOW)
                self.state = 682
                self.match(SqlBaseParser.PARTITIONS)
                self.state = 683
                self.tableIdentifier()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 684
                    self.partitionSpec()

                pass

            elif la_ == 38:
                localctx = SqlBaseParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 687
                self.match(SqlBaseParser.SHOW)
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.identifier()

                self.state = 691
                self.match(SqlBaseParser.FUNCTIONS)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.RANGE - 64))
                                | (1 << (SqlBaseParser.ROWS - 64))
                                | (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.FIRST - 64))
                                | (1 << (SqlBaseParser.AFTER - 64))
                                | (1 << (SqlBaseParser.LAST - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.DIRECTORY - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.COST - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.SETMINUS - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IGNORE - 64))
                                | (1 << (SqlBaseParser.BOTH - 64))
                                | (1 << (SqlBaseParser.LEADING - 64))
                                | (1 << (SqlBaseParser.TRAILING - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.POSITION - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 139)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 139))
                            & (
                                (1 << (SqlBaseParser.DIV - 139))
                                | (1 << (SqlBaseParser.PERCENTLIT - 139))
                                | (1 << (SqlBaseParser.BUCKET - 139))
                                | (1 << (SqlBaseParser.OUT - 139))
                                | (1 << (SqlBaseParser.OF - 139))
                                | (1 << (SqlBaseParser.SORT - 139))
                                | (1 << (SqlBaseParser.CLUSTER - 139))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 139))
                                | (1 << (SqlBaseParser.OVERWRITE - 139))
                                | (1 << (SqlBaseParser.TRANSFORM - 139))
                                | (1 << (SqlBaseParser.REDUCE - 139))
                                | (1 << (SqlBaseParser.SERDE - 139))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 139))
                                | (1 << (SqlBaseParser.RECORDREADER - 139))
                                | (1 << (SqlBaseParser.RECORDWRITER - 139))
                                | (1 << (SqlBaseParser.DELIMITED - 139))
                                | (1 << (SqlBaseParser.FIELDS - 139))
                                | (1 << (SqlBaseParser.TERMINATED - 139))
                                | (1 << (SqlBaseParser.COLLECTION - 139))
                                | (1 << (SqlBaseParser.ITEMS - 139))
                                | (1 << (SqlBaseParser.KEYS - 139))
                                | (1 << (SqlBaseParser.ESCAPED - 139))
                                | (1 << (SqlBaseParser.LINES - 139))
                                | (1 << (SqlBaseParser.SEPARATED - 139))
                                | (1 << (SqlBaseParser.FUNCTION - 139))
                                | (1 << (SqlBaseParser.EXTENDED - 139))
                                | (1 << (SqlBaseParser.REFRESH - 139))
                                | (1 << (SqlBaseParser.CLEAR - 139))
                                | (1 << (SqlBaseParser.CACHE - 139))
                                | (1 << (SqlBaseParser.UNCACHE - 139))
                                | (1 << (SqlBaseParser.LAZY - 139))
                                | (1 << (SqlBaseParser.FORMATTED - 139))
                                | (1 << (SqlBaseParser.GLOBAL - 139))
                                | (1 << (SqlBaseParser.TEMPORARY - 139))
                                | (1 << (SqlBaseParser.OPTIONS - 139))
                                | (1 << (SqlBaseParser.UNSET - 139))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 139))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 139))
                                | (1 << (SqlBaseParser.BUCKETS - 139))
                                | (1 << (SqlBaseParser.SKEWED - 139))
                                | (1 << (SqlBaseParser.STORED - 139))
                                | (1 << (SqlBaseParser.DIRECTORIES - 139))
                                | (1 << (SqlBaseParser.LOCATION - 139))
                                | (1 << (SqlBaseParser.EXCHANGE - 139))
                                | (1 << (SqlBaseParser.ARCHIVE - 139))
                                | (1 << (SqlBaseParser.UNARCHIVE - 139))
                                | (1 << (SqlBaseParser.FILEFORMAT - 139))
                                | (1 << (SqlBaseParser.TOUCH - 139))
                                | (1 << (SqlBaseParser.COMPACT - 139))
                                | (1 << (SqlBaseParser.CONCATENATE - 139))
                                | (1 << (SqlBaseParser.CHANGE - 139))
                                | (1 << (SqlBaseParser.CASCADE - 139))
                                | (1 << (SqlBaseParser.RESTRICT - 139))
                                | (1 << (SqlBaseParser.CLUSTERED - 139))
                                | (1 << (SqlBaseParser.SORTED - 139))
                                | (1 << (SqlBaseParser.PURGE - 139))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 139))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 139))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 203)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 203))
                            & (
                                (1 << (SqlBaseParser.DATABASE - 203))
                                | (1 << (SqlBaseParser.DATABASES - 203))
                                | (1 << (SqlBaseParser.DFS - 203))
                                | (1 << (SqlBaseParser.TRUNCATE - 203))
                                | (1 << (SqlBaseParser.ANALYZE - 203))
                                | (1 << (SqlBaseParser.COMPUTE - 203))
                                | (1 << (SqlBaseParser.LIST - 203))
                                | (1 << (SqlBaseParser.STATISTICS - 203))
                                | (1 << (SqlBaseParser.PARTITIONED - 203))
                                | (1 << (SqlBaseParser.EXTERNAL - 203))
                                | (1 << (SqlBaseParser.DEFINED - 203))
                                | (1 << (SqlBaseParser.REVOKE - 203))
                                | (1 << (SqlBaseParser.GRANT - 203))
                                | (1 << (SqlBaseParser.LOCK - 203))
                                | (1 << (SqlBaseParser.UNLOCK - 203))
                                | (1 << (SqlBaseParser.MSCK - 203))
                                | (1 << (SqlBaseParser.REPAIR - 203))
                                | (1 << (SqlBaseParser.RECOVER - 203))
                                | (1 << (SqlBaseParser.EXPORT - 203))
                                | (1 << (SqlBaseParser.IMPORT - 203))
                                | (1 << (SqlBaseParser.LOAD - 203))
                                | (1 << (SqlBaseParser.ROLE - 203))
                                | (1 << (SqlBaseParser.ROLES - 203))
                                | (1 << (SqlBaseParser.COMPACTIONS - 203))
                                | (1 << (SqlBaseParser.PRINCIPALS - 203))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 203))
                                | (1 << (SqlBaseParser.INDEX - 203))
                                | (1 << (SqlBaseParser.INDEXES - 203))
                                | (1 << (SqlBaseParser.LOCKS - 203))
                                | (1 << (SqlBaseParser.OPTION - 203))
                                | (1 << (SqlBaseParser.ANTI - 203))
                                | (1 << (SqlBaseParser.LOCAL - 203))
                                | (1 << (SqlBaseParser.INPATH - 203))
                                | (1 << (SqlBaseParser.STRING - 203))
                                | (1 << (SqlBaseParser.IDENTIFIER - 203))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 203))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 693
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
                    if la_ == 1:
                        self.state = 692
                        self.match(SqlBaseParser.LIKE)

                    self.state = 697
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        SqlBaseParser.SELECT,
                        SqlBaseParser.FROM,
                        SqlBaseParser.ADD,
                        SqlBaseParser.AS,
                        SqlBaseParser.ALL,
                        SqlBaseParser.DISTINCT,
                        SqlBaseParser.WHERE,
                        SqlBaseParser.GROUP,
                        SqlBaseParser.BY,
                        SqlBaseParser.GROUPING,
                        SqlBaseParser.SETS,
                        SqlBaseParser.CUBE,
                        SqlBaseParser.ROLLUP,
                        SqlBaseParser.ORDER,
                        SqlBaseParser.HAVING,
                        SqlBaseParser.LIMIT,
                        SqlBaseParser.AT,
                        SqlBaseParser.OR,
                        SqlBaseParser.AND,
                        SqlBaseParser.IN,
                        SqlBaseParser.NOT,
                        SqlBaseParser.NO,
                        SqlBaseParser.EXISTS,
                        SqlBaseParser.BETWEEN,
                        SqlBaseParser.LIKE,
                        SqlBaseParser.RLIKE,
                        SqlBaseParser.IS,
                        SqlBaseParser.NULL,
                        SqlBaseParser.TRUE,
                        SqlBaseParser.FALSE,
                        SqlBaseParser.NULLS,
                        SqlBaseParser.ASC,
                        SqlBaseParser.DESC,
                        SqlBaseParser.FOR,
                        SqlBaseParser.INTERVAL,
                        SqlBaseParser.CASE,
                        SqlBaseParser.WHEN,
                        SqlBaseParser.THEN,
                        SqlBaseParser.ELSE,
                        SqlBaseParser.END,
                        SqlBaseParser.JOIN,
                        SqlBaseParser.CROSS,
                        SqlBaseParser.OUTER,
                        SqlBaseParser.INNER,
                        SqlBaseParser.LEFT,
                        SqlBaseParser.SEMI,
                        SqlBaseParser.RIGHT,
                        SqlBaseParser.FULL,
                        SqlBaseParser.NATURAL,
                        SqlBaseParser.ON,
                        SqlBaseParser.LATERAL,
                        SqlBaseParser.WINDOW,
                        SqlBaseParser.OVER,
                        SqlBaseParser.PARTITION,
                        SqlBaseParser.RANGE,
                        SqlBaseParser.ROWS,
                        SqlBaseParser.UNBOUNDED,
                        SqlBaseParser.PRECEDING,
                        SqlBaseParser.FOLLOWING,
                        SqlBaseParser.CURRENT,
                        SqlBaseParser.FIRST,
                        SqlBaseParser.AFTER,
                        SqlBaseParser.LAST,
                        SqlBaseParser.ROW,
                        SqlBaseParser.WITH,
                        SqlBaseParser.VALUES,
                        SqlBaseParser.CREATE,
                        SqlBaseParser.TABLE,
                        SqlBaseParser.DIRECTORY,
                        SqlBaseParser.VIEW,
                        SqlBaseParser.REPLACE,
                        SqlBaseParser.INSERT,
                        SqlBaseParser.DELETE,
                        SqlBaseParser.INTO,
                        SqlBaseParser.DESCRIBE,
                        SqlBaseParser.EXPLAIN,
                        SqlBaseParser.FORMAT,
                        SqlBaseParser.LOGICAL,
                        SqlBaseParser.CODEGEN,
                        SqlBaseParser.COST,
                        SqlBaseParser.CAST,
                        SqlBaseParser.SHOW,
                        SqlBaseParser.TABLES,
                        SqlBaseParser.COLUMNS,
                        SqlBaseParser.COLUMN,
                        SqlBaseParser.USE,
                        SqlBaseParser.PARTITIONS,
                        SqlBaseParser.FUNCTIONS,
                        SqlBaseParser.DROP,
                        SqlBaseParser.UNION,
                        SqlBaseParser.EXCEPT,
                        SqlBaseParser.SETMINUS,
                        SqlBaseParser.INTERSECT,
                        SqlBaseParser.TO,
                        SqlBaseParser.TABLESAMPLE,
                        SqlBaseParser.STRATIFY,
                        SqlBaseParser.ALTER,
                        SqlBaseParser.RENAME,
                        SqlBaseParser.ARRAY,
                        SqlBaseParser.MAP,
                        SqlBaseParser.STRUCT,
                        SqlBaseParser.COMMENT,
                        SqlBaseParser.SET,
                        SqlBaseParser.RESET,
                        SqlBaseParser.DATA,
                        SqlBaseParser.START,
                        SqlBaseParser.TRANSACTION,
                        SqlBaseParser.COMMIT,
                        SqlBaseParser.ROLLBACK,
                        SqlBaseParser.MACRO,
                        SqlBaseParser.IGNORE,
                        SqlBaseParser.BOTH,
                        SqlBaseParser.LEADING,
                        SqlBaseParser.TRAILING,
                        SqlBaseParser.IF,
                        SqlBaseParser.POSITION,
                        SqlBaseParser.DIV,
                        SqlBaseParser.PERCENTLIT,
                        SqlBaseParser.BUCKET,
                        SqlBaseParser.OUT,
                        SqlBaseParser.OF,
                        SqlBaseParser.SORT,
                        SqlBaseParser.CLUSTER,
                        SqlBaseParser.DISTRIBUTE,
                        SqlBaseParser.OVERWRITE,
                        SqlBaseParser.TRANSFORM,
                        SqlBaseParser.REDUCE,
                        SqlBaseParser.SERDE,
                        SqlBaseParser.SERDEPROPERTIES,
                        SqlBaseParser.RECORDREADER,
                        SqlBaseParser.RECORDWRITER,
                        SqlBaseParser.DELIMITED,
                        SqlBaseParser.FIELDS,
                        SqlBaseParser.TERMINATED,
                        SqlBaseParser.COLLECTION,
                        SqlBaseParser.ITEMS,
                        SqlBaseParser.KEYS,
                        SqlBaseParser.ESCAPED,
                        SqlBaseParser.LINES,
                        SqlBaseParser.SEPARATED,
                        SqlBaseParser.FUNCTION,
                        SqlBaseParser.EXTENDED,
                        SqlBaseParser.REFRESH,
                        SqlBaseParser.CLEAR,
                        SqlBaseParser.CACHE,
                        SqlBaseParser.UNCACHE,
                        SqlBaseParser.LAZY,
                        SqlBaseParser.FORMATTED,
                        SqlBaseParser.GLOBAL,
                        SqlBaseParser.TEMPORARY,
                        SqlBaseParser.OPTIONS,
                        SqlBaseParser.UNSET,
                        SqlBaseParser.TBLPROPERTIES,
                        SqlBaseParser.DBPROPERTIES,
                        SqlBaseParser.BUCKETS,
                        SqlBaseParser.SKEWED,
                        SqlBaseParser.STORED,
                        SqlBaseParser.DIRECTORIES,
                        SqlBaseParser.LOCATION,
                        SqlBaseParser.EXCHANGE,
                        SqlBaseParser.ARCHIVE,
                        SqlBaseParser.UNARCHIVE,
                        SqlBaseParser.FILEFORMAT,
                        SqlBaseParser.TOUCH,
                        SqlBaseParser.COMPACT,
                        SqlBaseParser.CONCATENATE,
                        SqlBaseParser.CHANGE,
                        SqlBaseParser.CASCADE,
                        SqlBaseParser.RESTRICT,
                        SqlBaseParser.CLUSTERED,
                        SqlBaseParser.SORTED,
                        SqlBaseParser.PURGE,
                        SqlBaseParser.INPUTFORMAT,
                        SqlBaseParser.OUTPUTFORMAT,
                        SqlBaseParser.DATABASE,
                        SqlBaseParser.DATABASES,
                        SqlBaseParser.DFS,
                        SqlBaseParser.TRUNCATE,
                        SqlBaseParser.ANALYZE,
                        SqlBaseParser.COMPUTE,
                        SqlBaseParser.LIST,
                        SqlBaseParser.STATISTICS,
                        SqlBaseParser.PARTITIONED,
                        SqlBaseParser.EXTERNAL,
                        SqlBaseParser.DEFINED,
                        SqlBaseParser.REVOKE,
                        SqlBaseParser.GRANT,
                        SqlBaseParser.LOCK,
                        SqlBaseParser.UNLOCK,
                        SqlBaseParser.MSCK,
                        SqlBaseParser.REPAIR,
                        SqlBaseParser.RECOVER,
                        SqlBaseParser.EXPORT,
                        SqlBaseParser.IMPORT,
                        SqlBaseParser.LOAD,
                        SqlBaseParser.ROLE,
                        SqlBaseParser.ROLES,
                        SqlBaseParser.COMPACTIONS,
                        SqlBaseParser.PRINCIPALS,
                        SqlBaseParser.TRANSACTIONS,
                        SqlBaseParser.INDEX,
                        SqlBaseParser.INDEXES,
                        SqlBaseParser.LOCKS,
                        SqlBaseParser.OPTION,
                        SqlBaseParser.ANTI,
                        SqlBaseParser.LOCAL,
                        SqlBaseParser.INPATH,
                        SqlBaseParser.IDENTIFIER,
                        SqlBaseParser.BACKQUOTED_IDENTIFIER,
                    ]:
                        self.state = 695
                        self.qualifiedName()
                        pass
                    elif token in [SqlBaseParser.STRING]:
                        self.state = 696
                        localctx.pattern = self.match(SqlBaseParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)

                pass

            elif la_ == 39:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 701
                self.match(SqlBaseParser.SHOW)
                self.state = 702
                self.match(SqlBaseParser.CREATE)
                self.state = 703
                self.match(SqlBaseParser.TABLE)
                self.state = 704
                self.tableIdentifier()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 705
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.DESC or _la == SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 706
                self.match(SqlBaseParser.FUNCTION)
                self.state = 708
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
                if la_ == 1:
                    self.state = 707
                    self.match(SqlBaseParser.EXTENDED)

                self.state = 710
                self.describeFuncName()
                pass

            elif la_ == 41:
                localctx = SqlBaseParser.DescribeDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 711
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.DESC or _la == SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 712
                self.match(SqlBaseParser.DATABASE)
                self.state = 714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                if la_ == 1:
                    self.state = 713
                    self.match(SqlBaseParser.EXTENDED)

                self.state = 716
                self.identifier()
                pass

            elif la_ == 42:
                localctx = SqlBaseParser.DescribeTableContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 717
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.DESC or _la == SqlBaseParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 77, self._ctx)
                if la_ == 1:
                    self.state = 718
                    self.match(SqlBaseParser.TABLE)

                self.state = 722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
                if la_ == 1:
                    self.state = 721
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (
                        _la == SqlBaseParser.EXTENDED or _la == SqlBaseParser.FORMATTED
                    ):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 724
                self.tableIdentifier()
                self.state = 726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 79, self._ctx)
                if la_ == 1:
                    self.state = 725
                    self.partitionSpec()

                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.RANGE - 64))
                                | (1 << (SqlBaseParser.ROWS - 64))
                                | (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.FIRST - 64))
                                | (1 << (SqlBaseParser.AFTER - 64))
                                | (1 << (SqlBaseParser.LAST - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.DIRECTORY - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.COST - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.SETMINUS - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IGNORE - 64))
                                | (1 << (SqlBaseParser.BOTH - 64))
                                | (1 << (SqlBaseParser.LEADING - 64))
                                | (1 << (SqlBaseParser.TRAILING - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.POSITION - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 139)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 139))
                            & (
                                (1 << (SqlBaseParser.DIV - 139))
                                | (1 << (SqlBaseParser.PERCENTLIT - 139))
                                | (1 << (SqlBaseParser.BUCKET - 139))
                                | (1 << (SqlBaseParser.OUT - 139))
                                | (1 << (SqlBaseParser.OF - 139))
                                | (1 << (SqlBaseParser.SORT - 139))
                                | (1 << (SqlBaseParser.CLUSTER - 139))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 139))
                                | (1 << (SqlBaseParser.OVERWRITE - 139))
                                | (1 << (SqlBaseParser.TRANSFORM - 139))
                                | (1 << (SqlBaseParser.REDUCE - 139))
                                | (1 << (SqlBaseParser.SERDE - 139))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 139))
                                | (1 << (SqlBaseParser.RECORDREADER - 139))
                                | (1 << (SqlBaseParser.RECORDWRITER - 139))
                                | (1 << (SqlBaseParser.DELIMITED - 139))
                                | (1 << (SqlBaseParser.FIELDS - 139))
                                | (1 << (SqlBaseParser.TERMINATED - 139))
                                | (1 << (SqlBaseParser.COLLECTION - 139))
                                | (1 << (SqlBaseParser.ITEMS - 139))
                                | (1 << (SqlBaseParser.KEYS - 139))
                                | (1 << (SqlBaseParser.ESCAPED - 139))
                                | (1 << (SqlBaseParser.LINES - 139))
                                | (1 << (SqlBaseParser.SEPARATED - 139))
                                | (1 << (SqlBaseParser.FUNCTION - 139))
                                | (1 << (SqlBaseParser.EXTENDED - 139))
                                | (1 << (SqlBaseParser.REFRESH - 139))
                                | (1 << (SqlBaseParser.CLEAR - 139))
                                | (1 << (SqlBaseParser.CACHE - 139))
                                | (1 << (SqlBaseParser.UNCACHE - 139))
                                | (1 << (SqlBaseParser.LAZY - 139))
                                | (1 << (SqlBaseParser.FORMATTED - 139))
                                | (1 << (SqlBaseParser.GLOBAL - 139))
                                | (1 << (SqlBaseParser.TEMPORARY - 139))
                                | (1 << (SqlBaseParser.OPTIONS - 139))
                                | (1 << (SqlBaseParser.UNSET - 139))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 139))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 139))
                                | (1 << (SqlBaseParser.BUCKETS - 139))
                                | (1 << (SqlBaseParser.SKEWED - 139))
                                | (1 << (SqlBaseParser.STORED - 139))
                                | (1 << (SqlBaseParser.DIRECTORIES - 139))
                                | (1 << (SqlBaseParser.LOCATION - 139))
                                | (1 << (SqlBaseParser.EXCHANGE - 139))
                                | (1 << (SqlBaseParser.ARCHIVE - 139))
                                | (1 << (SqlBaseParser.UNARCHIVE - 139))
                                | (1 << (SqlBaseParser.FILEFORMAT - 139))
                                | (1 << (SqlBaseParser.TOUCH - 139))
                                | (1 << (SqlBaseParser.COMPACT - 139))
                                | (1 << (SqlBaseParser.CONCATENATE - 139))
                                | (1 << (SqlBaseParser.CHANGE - 139))
                                | (1 << (SqlBaseParser.CASCADE - 139))
                                | (1 << (SqlBaseParser.RESTRICT - 139))
                                | (1 << (SqlBaseParser.CLUSTERED - 139))
                                | (1 << (SqlBaseParser.SORTED - 139))
                                | (1 << (SqlBaseParser.PURGE - 139))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 139))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 139))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 203)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 203))
                            & (
                                (1 << (SqlBaseParser.DATABASE - 203))
                                | (1 << (SqlBaseParser.DATABASES - 203))
                                | (1 << (SqlBaseParser.DFS - 203))
                                | (1 << (SqlBaseParser.TRUNCATE - 203))
                                | (1 << (SqlBaseParser.ANALYZE - 203))
                                | (1 << (SqlBaseParser.COMPUTE - 203))
                                | (1 << (SqlBaseParser.LIST - 203))
                                | (1 << (SqlBaseParser.STATISTICS - 203))
                                | (1 << (SqlBaseParser.PARTITIONED - 203))
                                | (1 << (SqlBaseParser.EXTERNAL - 203))
                                | (1 << (SqlBaseParser.DEFINED - 203))
                                | (1 << (SqlBaseParser.REVOKE - 203))
                                | (1 << (SqlBaseParser.GRANT - 203))
                                | (1 << (SqlBaseParser.LOCK - 203))
                                | (1 << (SqlBaseParser.UNLOCK - 203))
                                | (1 << (SqlBaseParser.MSCK - 203))
                                | (1 << (SqlBaseParser.REPAIR - 203))
                                | (1 << (SqlBaseParser.RECOVER - 203))
                                | (1 << (SqlBaseParser.EXPORT - 203))
                                | (1 << (SqlBaseParser.IMPORT - 203))
                                | (1 << (SqlBaseParser.LOAD - 203))
                                | (1 << (SqlBaseParser.ROLE - 203))
                                | (1 << (SqlBaseParser.ROLES - 203))
                                | (1 << (SqlBaseParser.COMPACTIONS - 203))
                                | (1 << (SqlBaseParser.PRINCIPALS - 203))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 203))
                                | (1 << (SqlBaseParser.INDEX - 203))
                                | (1 << (SqlBaseParser.INDEXES - 203))
                                | (1 << (SqlBaseParser.LOCKS - 203))
                                | (1 << (SqlBaseParser.OPTION - 203))
                                | (1 << (SqlBaseParser.ANTI - 203))
                                | (1 << (SqlBaseParser.LOCAL - 203))
                                | (1 << (SqlBaseParser.INPATH - 203))
                                | (1 << (SqlBaseParser.IDENTIFIER - 203))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 203))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 728
                    self.describeColName()

                pass

            elif la_ == 43:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 731
                self.match(SqlBaseParser.REFRESH)
                self.state = 732
                self.match(SqlBaseParser.TABLE)
                self.state = 733
                self.tableIdentifier()
                pass

            elif la_ == 44:
                localctx = SqlBaseParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 734
                self.match(SqlBaseParser.REFRESH)
                self.state = 742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
                if la_ == 1:
                    self.state = 735
                    self.match(SqlBaseParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 739
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)
                    while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1 + 1:
                            self.state = 736
                            self.matchWildcard()
                        self.state = 741
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 81, self._ctx)

                    pass

                pass

            elif la_ == 45:
                localctx = SqlBaseParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 744
                self.match(SqlBaseParser.CACHE)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LAZY:
                    self.state = 745
                    self.match(SqlBaseParser.LAZY)

                self.state = 748
                self.match(SqlBaseParser.TABLE)
                self.state = 749
                self.tableIdentifier()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.AS)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 74)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 74))
                            & (
                                (1 << (SqlBaseParser.WITH - 74))
                                | (1 << (SqlBaseParser.VALUES - 74))
                                | (1 << (SqlBaseParser.TABLE - 74))
                                | (1 << (SqlBaseParser.INSERT - 74))
                                | (1 << (SqlBaseParser.MAP - 74))
                            )
                        )
                        != 0
                    )
                    or _la == SqlBaseParser.REDUCE
                ):
                    self.state = 751
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.AS:
                        self.state = 750
                        self.match(SqlBaseParser.AS)

                    self.state = 753
                    self.query()

                pass

            elif la_ == 46:
                localctx = SqlBaseParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 756
                self.match(SqlBaseParser.UNCACHE)
                self.state = 757
                self.match(SqlBaseParser.TABLE)
                self.state = 760
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
                if la_ == 1:
                    self.state = 758
                    self.match(SqlBaseParser.IF)
                    self.state = 759
                    self.match(SqlBaseParser.EXISTS)

                self.state = 762
                self.tableIdentifier()
                pass

            elif la_ == 47:
                localctx = SqlBaseParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 763
                self.match(SqlBaseParser.CLEAR)
                self.state = 764
                self.match(SqlBaseParser.CACHE)
                pass

            elif la_ == 48:
                localctx = SqlBaseParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 765
                self.match(SqlBaseParser.LOAD)
                self.state = 766
                self.match(SqlBaseParser.DATA)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LOCAL:
                    self.state = 767
                    self.match(SqlBaseParser.LOCAL)

                self.state = 770
                self.match(SqlBaseParser.INPATH)
                self.state = 771
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OVERWRITE:
                    self.state = 772
                    self.match(SqlBaseParser.OVERWRITE)

                self.state = 775
                self.match(SqlBaseParser.INTO)
                self.state = 776
                self.match(SqlBaseParser.TABLE)
                self.state = 777
                self.tableIdentifier()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 778
                    self.partitionSpec()

                pass

            elif la_ == 49:
                localctx = SqlBaseParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 781
                self.match(SqlBaseParser.TRUNCATE)
                self.state = 782
                self.match(SqlBaseParser.TABLE)
                self.state = 783
                self.tableIdentifier()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 784
                    self.partitionSpec()

                pass

            elif la_ == 50:
                localctx = SqlBaseParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 787
                self.match(SqlBaseParser.MSCK)
                self.state = 788
                self.match(SqlBaseParser.REPAIR)
                self.state = 789
                self.match(SqlBaseParser.TABLE)
                self.state = 790
                self.tableIdentifier()
                pass

            elif la_ == 51:
                localctx = SqlBaseParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 791
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.ADD or _la == SqlBaseParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 792
                self.identifier()
                self.state = 796
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 793
                        self.matchWildcard()
                    self.state = 798
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)

                pass

            elif la_ == 52:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 799
                self.match(SqlBaseParser.SET)
                self.state = 800
                self.match(SqlBaseParser.ROLE)
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 92, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 801
                        self.matchWildcard()
                    self.state = 806
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 92, self._ctx)

                pass

            elif la_ == 53:
                localctx = SqlBaseParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 807
                self.match(SqlBaseParser.SET)
                self.state = 811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 808
                        self.matchWildcard()
                    self.state = 813
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 93, self._ctx)

                pass

            elif la_ == 54:
                localctx = SqlBaseParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 814
                self.match(SqlBaseParser.RESET)
                pass

            elif la_ == 55:
                localctx = SqlBaseParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 815
                self.unsupportedHiveNativeCommands()
                self.state = 819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 94, self._ctx)
                while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1 + 1:
                        self.state = 816
                        self.matchWildcard()
                    self.state = 821
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 94, self._ctx)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None  # Token
            self.kw2 = None  # Token
            self.kw3 = None  # Token
            self.kw4 = None  # Token
            self.kw5 = None  # Token
            self.kw6 = None  # Token

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_unsupportedHiveNativeCommands

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnsupportedHiveNativeCommands"):
                listener.enterUnsupportedHiveNativeCommands(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnsupportedHiveNativeCommands"):
                listener.exitUnsupportedHiveNativeCommands(self)

    def unsupportedHiveNativeCommands(self):

        localctx = SqlBaseParser.UnsupportedHiveNativeCommandsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 14, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0  # Token type
        try:
            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 825
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 827
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                localctx.kw1 = self.match(SqlBaseParser.GRANT)
                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 96, self._ctx)
                if la_ == 1:
                    self.state = 829
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 832
                localctx.kw1 = self.match(SqlBaseParser.REVOKE)
                self.state = 834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
                if la_ == 1:
                    self.state = 833
                    localctx.kw2 = self.match(SqlBaseParser.ROLE)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 836
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 837
                localctx.kw2 = self.match(SqlBaseParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 838
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 839
                localctx.kw2 = self.match(SqlBaseParser.ROLE)
                self.state = 841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 98, self._ctx)
                if la_ == 1:
                    self.state = 840
                    localctx.kw3 = self.match(SqlBaseParser.GRANT)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 843
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 844
                localctx.kw2 = self.match(SqlBaseParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 845
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 846
                localctx.kw2 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 847
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 848
                localctx.kw2 = self.match(SqlBaseParser.CURRENT)
                self.state = 849
                localctx.kw3 = self.match(SqlBaseParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 850
                localctx.kw1 = self.match(SqlBaseParser.EXPORT)
                self.state = 851
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 852
                localctx.kw1 = self.match(SqlBaseParser.IMPORT)
                self.state = 853
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 854
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 855
                localctx.kw2 = self.match(SqlBaseParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 856
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 857
                localctx.kw2 = self.match(SqlBaseParser.CREATE)
                self.state = 858
                localctx.kw3 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 859
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 860
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 861
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 862
                localctx.kw2 = self.match(SqlBaseParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 863
                localctx.kw1 = self.match(SqlBaseParser.SHOW)
                self.state = 864
                localctx.kw2 = self.match(SqlBaseParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 865
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 866
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 867
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 868
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 869
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 870
                localctx.kw2 = self.match(SqlBaseParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 871
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 872
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 873
                localctx.kw1 = self.match(SqlBaseParser.LOCK)
                self.state = 874
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 875
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 876
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 877
                localctx.kw1 = self.match(SqlBaseParser.UNLOCK)
                self.state = 878
                localctx.kw2 = self.match(SqlBaseParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 879
                localctx.kw1 = self.match(SqlBaseParser.CREATE)
                self.state = 880
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 881
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 882
                localctx.kw1 = self.match(SqlBaseParser.DROP)
                self.state = 883
                localctx.kw2 = self.match(SqlBaseParser.TEMPORARY)
                self.state = 884
                localctx.kw3 = self.match(SqlBaseParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 885
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 886
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 887
                self.tableIdentifier()
                self.state = 888
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 889
                localctx.kw4 = self.match(SqlBaseParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 891
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 892
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 893
                self.tableIdentifier()
                self.state = 894
                localctx.kw3 = self.match(SqlBaseParser.CLUSTERED)
                self.state = 895
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 897
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 898
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 899
                self.tableIdentifier()
                self.state = 900
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 901
                localctx.kw4 = self.match(SqlBaseParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 903
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 904
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 905
                self.tableIdentifier()
                self.state = 906
                localctx.kw3 = self.match(SqlBaseParser.SKEWED)
                self.state = 907
                localctx.kw4 = self.match(SqlBaseParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 909
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 910
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 911
                self.tableIdentifier()
                self.state = 912
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 913
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 915
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 916
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 917
                self.tableIdentifier()
                self.state = 918
                localctx.kw3 = self.match(SqlBaseParser.NOT)
                self.state = 919
                localctx.kw4 = self.match(SqlBaseParser.STORED)
                self.state = 920
                localctx.kw5 = self.match(SqlBaseParser.AS)
                self.state = 921
                localctx.kw6 = self.match(SqlBaseParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 923
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 924
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 925
                self.tableIdentifier()
                self.state = 926
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 927
                localctx.kw4 = self.match(SqlBaseParser.SKEWED)
                self.state = 928
                localctx.kw5 = self.match(SqlBaseParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 930
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 931
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 932
                self.tableIdentifier()
                self.state = 933
                localctx.kw3 = self.match(SqlBaseParser.EXCHANGE)
                self.state = 934
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 936
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 937
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 938
                self.tableIdentifier()
                self.state = 939
                localctx.kw3 = self.match(SqlBaseParser.ARCHIVE)
                self.state = 940
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 942
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 943
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 944
                self.tableIdentifier()
                self.state = 945
                localctx.kw3 = self.match(SqlBaseParser.UNARCHIVE)
                self.state = 946
                localctx.kw4 = self.match(SqlBaseParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 948
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 949
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 950
                self.tableIdentifier()
                self.state = 951
                localctx.kw3 = self.match(SqlBaseParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 953
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 954
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 955
                self.tableIdentifier()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 956
                    self.partitionSpec()

                self.state = 959
                localctx.kw3 = self.match(SqlBaseParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 961
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 962
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 963
                self.tableIdentifier()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 964
                    self.partitionSpec()

                self.state = 967
                localctx.kw3 = self.match(SqlBaseParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 969
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 970
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 971
                self.tableIdentifier()
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 972
                    self.partitionSpec()

                self.state = 975
                localctx.kw3 = self.match(SqlBaseParser.SET)
                self.state = 976
                localctx.kw4 = self.match(SqlBaseParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 978
                localctx.kw1 = self.match(SqlBaseParser.ALTER)
                self.state = 979
                localctx.kw2 = self.match(SqlBaseParser.TABLE)
                self.state = 980
                self.tableIdentifier()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 981
                    self.partitionSpec()

                self.state = 984
                localctx.kw3 = self.match(SqlBaseParser.REPLACE)
                self.state = 985
                localctx.kw4 = self.match(SqlBaseParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 987
                localctx.kw1 = self.match(SqlBaseParser.START)
                self.state = 988
                localctx.kw2 = self.match(SqlBaseParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 989
                localctx.kw1 = self.match(SqlBaseParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 990
                localctx.kw1 = self.match(SqlBaseParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 991
                localctx.kw1 = self.match(SqlBaseParser.DFS)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 992
                localctx.kw1 = self.match(SqlBaseParser.DELETE)
                self.state = 993
                localctx.kw2 = self.match(SqlBaseParser.FROM)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createTableHeader

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateTableHeader"):
                listener.enterCreateTableHeader(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateTableHeader"):
                listener.exitCreateTableHeader(self)

    def createTableHeader(self):

        localctx = SqlBaseParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_createTableHeader)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(SqlBaseParser.CREATE)
            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.TEMPORARY:
                self.state = 997
                self.match(SqlBaseParser.TEMPORARY)

            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.EXTERNAL:
                self.state = 1000
                self.match(SqlBaseParser.EXTERNAL)

            self.state = 1003
            self.match(SqlBaseParser.TABLE)
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
            if la_ == 1:
                self.state = 1004
                self.match(SqlBaseParser.IF)
                self.state = 1005
                self.match(SqlBaseParser.NOT)
                self.state = 1006
                self.match(SqlBaseParser.EXISTS)

            self.state = 1009
            self.tableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BucketSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(
                SqlBaseParser.OrderedIdentifierListContext, 0
            )

        def getRuleIndex(self):
            return SqlBaseParser.RULE_bucketSpec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBucketSpec"):
                listener.enterBucketSpec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBucketSpec"):
                listener.exitBucketSpec(self)

    def bucketSpec(self):

        localctx = SqlBaseParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_bucketSpec)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 1012
            self.match(SqlBaseParser.BY)
            self.state = 1013
            self.identifierList()
            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.SORTED:
                self.state = 1014
                self.match(SqlBaseParser.SORTED)
                self.state = 1015
                self.match(SqlBaseParser.BY)
                self.state = 1016
                self.orderedIdentifierList()

            self.state = 1019
            self.match(SqlBaseParser.INTO)
            self.state = 1020
            self.match(SqlBaseParser.INTEGER_VALUE)
            self.state = 1021
            self.match(SqlBaseParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SkewSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantListContext, 0)

        def nestedConstantList(self):
            return self.getTypedRuleContext(SqlBaseParser.NestedConstantListContext, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_skewSpec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSkewSpec"):
                listener.enterSkewSpec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSkewSpec"):
                listener.exitSkewSpec(self)

    def skewSpec(self):

        localctx = SqlBaseParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(SqlBaseParser.SKEWED)
            self.state = 1024
            self.match(SqlBaseParser.BY)
            self.state = 1025
            self.identifierList()
            self.state = 1026
            self.match(SqlBaseParser.ON)
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
            if la_ == 1:
                self.state = 1027
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 1028
                self.nestedConstantList()
                pass

            self.state = 1034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
            if la_ == 1:
                self.state = 1031
                self.match(SqlBaseParser.STORED)
                self.state = 1032
                self.match(SqlBaseParser.AS)
                self.state = 1033
                self.match(SqlBaseParser.DIRECTORIES)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocationSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_locationSpec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLocationSpec"):
                listener.enterLocationSpec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLocationSpec"):
                listener.exitLocationSpec(self)

    def locationSpec(self):

        localctx = SqlBaseParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(SqlBaseParser.LOCATION)
            self.state = 1037
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext, 0)

        def ctes(self):
            return self.getTypedRuleContext(SqlBaseParser.CtesContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuery"):
                listener.enterQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuery"):
                listener.exitQuery(self)

    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_query)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.WITH:
                self.state = 1039
                self.ctes()

            self.state = 1042
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertIntoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertInto

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class InsertOverwriteHiveDirContext(InsertIntoContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None  # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def rowFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.RowFormatContext, 0)

        def createFileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateFileFormatContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertOverwriteHiveDir"):
                listener.enterInsertOverwriteHiveDir(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertOverwriteHiveDir"):
                listener.exitInsertOverwriteHiveDir(self)

    class InsertOverwriteDirContext(InsertIntoContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.path = None  # Token
            self.options = None  # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def tableProvider(self):
            return self.getTypedRuleContext(SqlBaseParser.TableProviderContext, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertOverwriteDir"):
                listener.enterInsertOverwriteDir(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertOverwriteDir"):
                listener.exitInsertOverwriteDir(self)

    class InsertOverwriteTableContext(InsertIntoContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertOverwriteTable"):
                listener.enterInsertOverwriteTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertOverwriteTable"):
                listener.exitInsertOverwriteTable(self)

    class InsertIntoTableContext(InsertIntoContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInsertIntoTable"):
                listener.enterInsertIntoTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInsertIntoTable"):
                listener.exitInsertIntoTable(self)

    def insertInto(self):

        localctx = SqlBaseParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_insertInto)
        self._la = 0  # Token type
        try:
            self.state = 1092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 121, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.match(SqlBaseParser.INSERT)
                self.state = 1045
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1046
                self.match(SqlBaseParser.TABLE)
                self.state = 1047
                self.tableIdentifier()
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 1048
                    self.partitionSpec()
                    self.state = 1052
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.IF:
                        self.state = 1049
                        self.match(SqlBaseParser.IF)
                        self.state = 1050
                        self.match(SqlBaseParser.NOT)
                        self.state = 1051
                        self.match(SqlBaseParser.EXISTS)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.match(SqlBaseParser.INSERT)
                self.state = 1057
                self.match(SqlBaseParser.INTO)
                self.state = 1059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 113, self._ctx)
                if la_ == 1:
                    self.state = 1058
                    self.match(SqlBaseParser.TABLE)

                self.state = 1061
                self.tableIdentifier()
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PARTITION:
                    self.state = 1062
                    self.partitionSpec()

                pass

            elif la_ == 3:
                localctx = SqlBaseParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.match(SqlBaseParser.INSERT)
                self.state = 1066
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LOCAL:
                    self.state = 1067
                    self.match(SqlBaseParser.LOCAL)

                self.state = 1070
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1071
                localctx.path = self.match(SqlBaseParser.STRING)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ROW:
                    self.state = 1072
                    self.rowFormat()

                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.STORED:
                    self.state = 1075
                    self.createFileFormat()

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1078
                self.match(SqlBaseParser.INSERT)
                self.state = 1079
                self.match(SqlBaseParser.OVERWRITE)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LOCAL:
                    self.state = 1080
                    self.match(SqlBaseParser.LOCAL)

                self.state = 1083
                self.match(SqlBaseParser.DIRECTORY)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.STRING:
                    self.state = 1084
                    localctx.path = self.match(SqlBaseParser.STRING)

                self.state = 1087
                self.tableProvider()
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OPTIONS:
                    self.state = 1088
                    self.match(SqlBaseParser.OPTIONS)
                    self.state = 1089
                    localctx.options = self.tablePropertyList()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionSpecContext, 0)

        def locationSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.LocationSpecContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpecLocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPartitionSpecLocation"):
                listener.enterPartitionSpecLocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPartitionSpecLocation"):
                listener.exitPartitionSpecLocation(self)

    def partitionSpecLocation(self):

        localctx = SqlBaseParser.PartitionSpecLocationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 28, self.RULE_partitionSpecLocation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.partitionSpec()
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.LOCATION:
                self.state = 1095
                self.locationSpec()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def partitionVal(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PartitionValContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionSpec

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPartitionSpec"):
                listener.enterPartitionSpec(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPartitionSpec"):
                listener.exitPartitionSpec(self)

    def partitionSpec(self):

        localctx = SqlBaseParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_partitionSpec)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(SqlBaseParser.PARTITION)
            self.state = 1099
            self.match(SqlBaseParser.T__0)
            self.state = 1100
            self.partitionVal()
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1101
                self.match(SqlBaseParser.T__2)
                self.state = 1102
                self.partitionVal()
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1108
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionValContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionVal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPartitionVal"):
                listener.enterPartitionVal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPartitionVal"):
                listener.exitPartitionVal(self)

    def partitionVal(self):

        localctx = SqlBaseParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_partitionVal)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.identifier()
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.EQ:
                self.state = 1111
                self.match(SqlBaseParser.EQ)
                self.state = 1112
                self.constant()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext, 0)

        def arithmeticOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ArithmeticOperatorContext, 0)

        def predicateOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateOperatorContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeFuncName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeFuncName"):
                listener.enterDescribeFuncName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeFuncName"):
                listener.exitDescribeFuncName(self)

    def describeFuncName(self):

        localctx = SqlBaseParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_describeFuncName)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1115
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1116
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1117
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1118
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1119
                self.predicateOperator()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescribeColNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None  # IdentifierContext
            self.nameParts = list()  # of IdentifierContexts

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_describeColName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDescribeColName"):
                listener.enterDescribeColName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDescribeColName"):
                listener.exitDescribeColName(self)

    def describeColName(self):

        localctx = SqlBaseParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_describeColName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__3:
                self.state = 1123
                self.match(SqlBaseParser.T__3)
                self.state = 1124
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CtesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_ctes

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtes"):
                listener.enterCtes(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtes"):
                listener.exitCtes(self)

    def ctes(self):

        localctx = SqlBaseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_ctes)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(SqlBaseParser.WITH)
            self.state = 1131
            self.namedQuery()
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1132
                self.match(SqlBaseParser.T__2)
                self.state = 1133
                self.namedQuery()
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedQueryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None  # IdentifierContext

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedQuery"):
                listener.enterNamedQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedQuery"):
                listener.exitNamedQuery(self)

    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_namedQuery)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            localctx.name = self.identifier()
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.AS:
                self.state = 1140
                self.match(SqlBaseParser.AS)

            self.state = 1143
            self.match(SqlBaseParser.T__0)
            self.state = 1144
            self.query()
            self.state = 1145
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableProviderContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProvider

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableProvider"):
                listener.enterTableProvider(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableProvider"):
                listener.exitTableProvider(self)

    def tableProvider(self):

        localctx = SqlBaseParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.match(SqlBaseParser.USING)
            self.state = 1148
            self.qualifiedName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablePropertyListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TablePropertyContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTablePropertyList"):
                listener.enterTablePropertyList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTablePropertyList"):
                listener.exitTablePropertyList(self)

    def tablePropertyList(self):

        localctx = SqlBaseParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_tablePropertyList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(SqlBaseParser.T__0)
            self.state = 1151
            self.tableProperty()
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1152
                self.match(SqlBaseParser.T__2)
                self.state = 1153
                self.tableProperty()
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1159
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablePropertyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None  # TablePropertyKeyContext
            self.value = None  # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyKeyContext, 0)

        def tablePropertyValue(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyValueContext, 0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableProperty

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableProperty"):
                listener.enterTableProperty(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableProperty"):
                listener.exitTableProperty(self)

    def tableProperty(self):

        localctx = SqlBaseParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_tableProperty)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            localctx.key = self.tablePropertyKey()
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                _la == SqlBaseParser.TRUE
                or _la == SqlBaseParser.FALSE
                or _la == SqlBaseParser.EQ
                or (
                    (((_la - 236)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 236))
                        & (
                            (1 << (SqlBaseParser.STRING - 236))
                            | (1 << (SqlBaseParser.INTEGER_VALUE - 236))
                            | (1 << (SqlBaseParser.DECIMAL_VALUE - 236))
                        )
                    )
                    != 0
                )
            ):
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.EQ:
                    self.state = 1162
                    self.match(SqlBaseParser.EQ)

                self.state = 1165
                localctx.value = self.tablePropertyValue()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyKey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTablePropertyKey"):
                listener.enterTablePropertyKey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTablePropertyKey"):
                listener.exitTablePropertyKey(self)

    def tablePropertyKey(self):

        localctx = SqlBaseParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tablePropertyKey)
        self._la = 0  # Token type
        try:
            self.state = 1177
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.ADD,
                SqlBaseParser.AS,
                SqlBaseParser.ALL,
                SqlBaseParser.DISTINCT,
                SqlBaseParser.WHERE,
                SqlBaseParser.GROUP,
                SqlBaseParser.BY,
                SqlBaseParser.GROUPING,
                SqlBaseParser.SETS,
                SqlBaseParser.CUBE,
                SqlBaseParser.ROLLUP,
                SqlBaseParser.ORDER,
                SqlBaseParser.HAVING,
                SqlBaseParser.LIMIT,
                SqlBaseParser.AT,
                SqlBaseParser.OR,
                SqlBaseParser.AND,
                SqlBaseParser.IN,
                SqlBaseParser.NOT,
                SqlBaseParser.NO,
                SqlBaseParser.EXISTS,
                SqlBaseParser.BETWEEN,
                SqlBaseParser.LIKE,
                SqlBaseParser.RLIKE,
                SqlBaseParser.IS,
                SqlBaseParser.NULL,
                SqlBaseParser.TRUE,
                SqlBaseParser.FALSE,
                SqlBaseParser.NULLS,
                SqlBaseParser.ASC,
                SqlBaseParser.DESC,
                SqlBaseParser.FOR,
                SqlBaseParser.INTERVAL,
                SqlBaseParser.CASE,
                SqlBaseParser.WHEN,
                SqlBaseParser.THEN,
                SqlBaseParser.ELSE,
                SqlBaseParser.END,
                SqlBaseParser.JOIN,
                SqlBaseParser.CROSS,
                SqlBaseParser.OUTER,
                SqlBaseParser.INNER,
                SqlBaseParser.LEFT,
                SqlBaseParser.SEMI,
                SqlBaseParser.RIGHT,
                SqlBaseParser.FULL,
                SqlBaseParser.NATURAL,
                SqlBaseParser.ON,
                SqlBaseParser.LATERAL,
                SqlBaseParser.WINDOW,
                SqlBaseParser.OVER,
                SqlBaseParser.PARTITION,
                SqlBaseParser.RANGE,
                SqlBaseParser.ROWS,
                SqlBaseParser.UNBOUNDED,
                SqlBaseParser.PRECEDING,
                SqlBaseParser.FOLLOWING,
                SqlBaseParser.CURRENT,
                SqlBaseParser.FIRST,
                SqlBaseParser.AFTER,
                SqlBaseParser.LAST,
                SqlBaseParser.ROW,
                SqlBaseParser.WITH,
                SqlBaseParser.VALUES,
                SqlBaseParser.CREATE,
                SqlBaseParser.TABLE,
                SqlBaseParser.DIRECTORY,
                SqlBaseParser.VIEW,
                SqlBaseParser.REPLACE,
                SqlBaseParser.INSERT,
                SqlBaseParser.DELETE,
                SqlBaseParser.INTO,
                SqlBaseParser.DESCRIBE,
                SqlBaseParser.EXPLAIN,
                SqlBaseParser.FORMAT,
                SqlBaseParser.LOGICAL,
                SqlBaseParser.CODEGEN,
                SqlBaseParser.COST,
                SqlBaseParser.CAST,
                SqlBaseParser.SHOW,
                SqlBaseParser.TABLES,
                SqlBaseParser.COLUMNS,
                SqlBaseParser.COLUMN,
                SqlBaseParser.USE,
                SqlBaseParser.PARTITIONS,
                SqlBaseParser.FUNCTIONS,
                SqlBaseParser.DROP,
                SqlBaseParser.UNION,
                SqlBaseParser.EXCEPT,
                SqlBaseParser.SETMINUS,
                SqlBaseParser.INTERSECT,
                SqlBaseParser.TO,
                SqlBaseParser.TABLESAMPLE,
                SqlBaseParser.STRATIFY,
                SqlBaseParser.ALTER,
                SqlBaseParser.RENAME,
                SqlBaseParser.ARRAY,
                SqlBaseParser.MAP,
                SqlBaseParser.STRUCT,
                SqlBaseParser.COMMENT,
                SqlBaseParser.SET,
                SqlBaseParser.RESET,
                SqlBaseParser.DATA,
                SqlBaseParser.START,
                SqlBaseParser.TRANSACTION,
                SqlBaseParser.COMMIT,
                SqlBaseParser.ROLLBACK,
                SqlBaseParser.MACRO,
                SqlBaseParser.IGNORE,
                SqlBaseParser.BOTH,
                SqlBaseParser.LEADING,
                SqlBaseParser.TRAILING,
                SqlBaseParser.IF,
                SqlBaseParser.POSITION,
                SqlBaseParser.DIV,
                SqlBaseParser.PERCENTLIT,
                SqlBaseParser.BUCKET,
                SqlBaseParser.OUT,
                SqlBaseParser.OF,
                SqlBaseParser.SORT,
                SqlBaseParser.CLUSTER,
                SqlBaseParser.DISTRIBUTE,
                SqlBaseParser.OVERWRITE,
                SqlBaseParser.TRANSFORM,
                SqlBaseParser.REDUCE,
                SqlBaseParser.SERDE,
                SqlBaseParser.SERDEPROPERTIES,
                SqlBaseParser.RECORDREADER,
                SqlBaseParser.RECORDWRITER,
                SqlBaseParser.DELIMITED,
                SqlBaseParser.FIELDS,
                SqlBaseParser.TERMINATED,
                SqlBaseParser.COLLECTION,
                SqlBaseParser.ITEMS,
                SqlBaseParser.KEYS,
                SqlBaseParser.ESCAPED,
                SqlBaseParser.LINES,
                SqlBaseParser.SEPARATED,
                SqlBaseParser.FUNCTION,
                SqlBaseParser.EXTENDED,
                SqlBaseParser.REFRESH,
                SqlBaseParser.CLEAR,
                SqlBaseParser.CACHE,
                SqlBaseParser.UNCACHE,
                SqlBaseParser.LAZY,
                SqlBaseParser.FORMATTED,
                SqlBaseParser.GLOBAL,
                SqlBaseParser.TEMPORARY,
                SqlBaseParser.OPTIONS,
                SqlBaseParser.UNSET,
                SqlBaseParser.TBLPROPERTIES,
                SqlBaseParser.DBPROPERTIES,
                SqlBaseParser.BUCKETS,
                SqlBaseParser.SKEWED,
                SqlBaseParser.STORED,
                SqlBaseParser.DIRECTORIES,
                SqlBaseParser.LOCATION,
                SqlBaseParser.EXCHANGE,
                SqlBaseParser.ARCHIVE,
                SqlBaseParser.UNARCHIVE,
                SqlBaseParser.FILEFORMAT,
                SqlBaseParser.TOUCH,
                SqlBaseParser.COMPACT,
                SqlBaseParser.CONCATENATE,
                SqlBaseParser.CHANGE,
                SqlBaseParser.CASCADE,
                SqlBaseParser.RESTRICT,
                SqlBaseParser.CLUSTERED,
                SqlBaseParser.SORTED,
                SqlBaseParser.PURGE,
                SqlBaseParser.INPUTFORMAT,
                SqlBaseParser.OUTPUTFORMAT,
                SqlBaseParser.DATABASE,
                SqlBaseParser.DATABASES,
                SqlBaseParser.DFS,
                SqlBaseParser.TRUNCATE,
                SqlBaseParser.ANALYZE,
                SqlBaseParser.COMPUTE,
                SqlBaseParser.LIST,
                SqlBaseParser.STATISTICS,
                SqlBaseParser.PARTITIONED,
                SqlBaseParser.EXTERNAL,
                SqlBaseParser.DEFINED,
                SqlBaseParser.REVOKE,
                SqlBaseParser.GRANT,
                SqlBaseParser.LOCK,
                SqlBaseParser.UNLOCK,
                SqlBaseParser.MSCK,
                SqlBaseParser.REPAIR,
                SqlBaseParser.RECOVER,
                SqlBaseParser.EXPORT,
                SqlBaseParser.IMPORT,
                SqlBaseParser.LOAD,
                SqlBaseParser.ROLE,
                SqlBaseParser.ROLES,
                SqlBaseParser.COMPACTIONS,
                SqlBaseParser.PRINCIPALS,
                SqlBaseParser.TRANSACTIONS,
                SqlBaseParser.INDEX,
                SqlBaseParser.INDEXES,
                SqlBaseParser.LOCKS,
                SqlBaseParser.OPTION,
                SqlBaseParser.ANTI,
                SqlBaseParser.LOCAL,
                SqlBaseParser.INPATH,
                SqlBaseParser.IDENTIFIER,
                SqlBaseParser.BACKQUOTED_IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.identifier()
                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__3:
                    self.state = 1169
                    self.match(SqlBaseParser.T__3)
                    self.state = 1170
                    self.identifier()
                    self.state = 1175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1176
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablePropertyValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tablePropertyValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTablePropertyValue"):
                listener.enterTablePropertyValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTablePropertyValue"):
                listener.exitTablePropertyValue(self)

    def tablePropertyValue(self):

        localctx = SqlBaseParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_tablePropertyValue)
        try:
            self.state = 1183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1179
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass
            elif token in [SqlBaseParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1180
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass
            elif token in [SqlBaseParser.TRUE, SqlBaseParser.FALSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1181
                self.booleanValue()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1182
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_constantList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantList"):
                listener.enterConstantList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantList"):
                listener.exitConstantList(self)

    def constantList(self):

        localctx = SqlBaseParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constantList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(SqlBaseParser.T__0)
            self.state = 1186
            self.constant()
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1187
                self.match(SqlBaseParser.T__2)
                self.state = 1188
                self.constant()
                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1194
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedConstantListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ConstantListContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nestedConstantList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestedConstantList"):
                listener.enterNestedConstantList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestedConstantList"):
                listener.exitNestedConstantList(self)

    def nestedConstantList(self):

        localctx = SqlBaseParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_nestedConstantList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(SqlBaseParser.T__0)
            self.state = 1197
            self.constantList()
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1198
                self.match(SqlBaseParser.T__2)
                self.state = 1199
                self.constantList()
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1205
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(SqlBaseParser.FileFormatContext, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(SqlBaseParser.StorageHandlerContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_createFileFormat

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCreateFileFormat"):
                listener.enterCreateFileFormat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCreateFileFormat"):
                listener.exitCreateFileFormat(self)

    def createFileFormat(self):

        localctx = SqlBaseParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_createFileFormat)
        try:
            self.state = 1213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 137, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1207
                self.match(SqlBaseParser.STORED)
                self.state = 1208
                self.match(SqlBaseParser.AS)
                self.state = 1209
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.match(SqlBaseParser.STORED)
                self.state = 1211
                self.match(SqlBaseParser.BY)
                self.state = 1212
                self.storageHandler()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileFormatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_fileFormat

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class TableFileFormatContext(FileFormatContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None  # Token
            self.outFmt = None  # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableFileFormat"):
                listener.enterTableFileFormat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableFileFormat"):
                listener.exitTableFileFormat(self)

    class GenericFileFormatContext(FileFormatContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGenericFileFormat"):
                listener.enterGenericFileFormat(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGenericFileFormat"):
                listener.exitGenericFileFormat(self)

    def fileFormat(self):

        localctx = SqlBaseParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fileFormat)
        try:
            self.state = 1220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 138, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self.match(SqlBaseParser.INPUTFORMAT)
                self.state = 1216
                localctx.inFmt = self.match(SqlBaseParser.STRING)
                self.state = 1217
                self.match(SqlBaseParser.OUTPUTFORMAT)
                self.state = 1218
                localctx.outFmt = self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1219
                self.identifier()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageHandlerContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_storageHandler

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStorageHandler"):
                listener.enterStorageHandler(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStorageHandler"):
                listener.exitStorageHandler(self)

    def storageHandler(self):

        localctx = SqlBaseParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1222
            self.match(SqlBaseParser.STRING)
            self.state = 1226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 139, self._ctx)
            if la_ == 1:
                self.state = 1223
                self.match(SqlBaseParser.WITH)
                self.state = 1224
                self.match(SqlBaseParser.SERDEPROPERTIES)
                self.state = 1225
                self.tablePropertyList()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResourceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_resource

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResource"):
                listener.enterResource(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResource"):
                listener.exitResource(self)

    def resource(self):

        localctx = SqlBaseParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.identifier()
            self.state = 1229
            self.match(SqlBaseParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryNoWithContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SingleInsertQueryContext(QueryNoWithContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext, 0)

        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext, 0)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleInsertQuery"):
                listener.enterSingleInsertQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleInsertQuery"):
                listener.exitSingleInsertQuery(self)

    class MultiInsertQueryContext(QueryNoWithContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext, 0)

        def multiInsertQueryBody(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SqlBaseParser.MultiInsertQueryBodyContext
                )
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.MultiInsertQueryBodyContext, i
                )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiInsertQuery"):
                listener.enterMultiInsertQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiInsertQuery"):
                listener.exitMultiInsertQuery(self)

    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_queryNoWith)
        self._la = 0  # Token type
        try:
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 142, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.INSERT:
                    self.state = 1231
                    self.insertInto()

                self.state = 1234
                self.queryTerm(0)
                self.state = 1235
                self.queryOrganization()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1237
                self.fromClause()
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1238
                    self.multiInsertQueryBody()
                    self.state = 1241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (
                        _la == SqlBaseParser.SELECT
                        or _la == SqlBaseParser.FROM
                        or _la == SqlBaseParser.INSERT
                        or _la == SqlBaseParser.MAP
                        or _la == SqlBaseParser.REDUCE
                    ):
                        break

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None  # SortItemContext
            self.order = list()  # of SortItemContexts
            self._expression = None  # ExpressionContext
            self.clusterBy = list()  # of ExpressionContexts
            self.distributeBy = list()  # of ExpressionContexts
            self.sort = list()  # of SortItemContexts
            self.limit = None  # ExpressionContext

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def sortItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOrganization

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQueryOrganization"):
                listener.enterQueryOrganization(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQueryOrganization"):
                listener.exitQueryOrganization(self)

    def queryOrganization(self):

        localctx = SqlBaseParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_queryOrganization)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.ORDER:
                self.state = 1245
                self.match(SqlBaseParser.ORDER)
                self.state = 1246
                self.match(SqlBaseParser.BY)
                self.state = 1247
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1248
                    self.match(SqlBaseParser.T__2)
                    self.state = 1249
                    localctx._sortItem = self.sortItem()
                    localctx.order.append(localctx._sortItem)
                    self.state = 1254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.CLUSTER:
                self.state = 1257
                self.match(SqlBaseParser.CLUSTER)
                self.state = 1258
                self.match(SqlBaseParser.BY)
                self.state = 1259
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1260
                    self.match(SqlBaseParser.T__2)
                    self.state = 1261
                    localctx._expression = self.expression()
                    localctx.clusterBy.append(localctx._expression)
                    self.state = 1266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.DISTRIBUTE:
                self.state = 1269
                self.match(SqlBaseParser.DISTRIBUTE)
                self.state = 1270
                self.match(SqlBaseParser.BY)
                self.state = 1271
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1272
                    self.match(SqlBaseParser.T__2)
                    self.state = 1273
                    localctx._expression = self.expression()
                    localctx.distributeBy.append(localctx._expression)
                    self.state = 1278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.SORT:
                self.state = 1281
                self.match(SqlBaseParser.SORT)
                self.state = 1282
                self.match(SqlBaseParser.BY)
                self.state = 1283
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1284
                    self.match(SqlBaseParser.T__2)
                    self.state = 1285
                    localctx._sortItem = self.sortItem()
                    localctx.sort.append(localctx._sortItem)
                    self.state = 1290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.WINDOW:
                self.state = 1293
                self.windows()

            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.LIMIT:
                self.state = 1296
                self.match(SqlBaseParser.LIMIT)
                self.state = 1299
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 152, self._ctx)
                if la_ == 1:
                    self.state = 1297
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 1298
                    localctx.limit = self.expression()
                    pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext, 0)

        def queryOrganization(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOrganizationContext, 0)

        def insertInto(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertIntoContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_multiInsertQueryBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiInsertQueryBody"):
                listener.enterMultiInsertQueryBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiInsertQueryBody"):
                listener.exitMultiInsertQueryBody(self)

    def multiInsertQueryBody(self):

        localctx = SqlBaseParser.MultiInsertQueryBodyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 68, self.RULE_multiInsertQueryBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.INSERT:
                self.state = 1303
                self.insertInto()

            self.state = 1306
            self.querySpecification()
            self.state = 1307
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryTermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class QueryTermDefaultContext(QueryTermContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryPrimaryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQueryTermDefault"):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQueryTermDefault"):
                listener.exitQueryTermDefault(self)

    class SetOperationContext(QueryTermContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None  # QueryTermContext
            self.operator = None  # Token
            self.right = None  # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext, i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetOperation"):
                listener.enterSetOperation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetOperation"):
                listener.exitSetOperation(self)

    def queryTerm(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_queryTerm, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1310
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.SetOperationContext(
                        self,
                        SqlBaseParser.QueryTermContext(self, _parentctx, _parentState),
                    )
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_queryTerm
                    )
                    self.state = 1312
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 1)"
                        )
                    self.state = 1313
                    localctx.operator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 99)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 99))
                                & (
                                    (1 << (SqlBaseParser.UNION - 99))
                                    | (1 << (SqlBaseParser.EXCEPT - 99))
                                    | (1 << (SqlBaseParser.SETMINUS - 99))
                                    | (1 << (SqlBaseParser.INTERSECT - 99))
                                )
                            )
                            != 0
                        )
                    ):
                        localctx.operator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.ALL or _la == SqlBaseParser.DISTINCT:
                        self.state = 1314
                        self.setQuantifier()

                    self.state = 1317
                    localctx.right = self.queryTerm(2)
                self.state = 1322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 156, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryPrimary

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SubqueryContext(QueryPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubquery"):
                listener.enterSubquery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubquery"):
                listener.exitSubquery(self)

    class QueryPrimaryDefaultContext(QueryPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecificationContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQueryPrimaryDefault"):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQueryPrimaryDefault"):
                listener.exitQueryPrimaryDefault(self)

    class InlineTableDefault1Context(QueryPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineTableDefault1"):
                listener.enterInlineTableDefault1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineTableDefault1"):
                listener.exitInlineTableDefault1(self)

    class TableContext(QueryPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTable"):
                listener.enterTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTable"):
                listener.exitTable(self)

    def queryPrimary(self):

        localctx = SqlBaseParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_queryPrimary)
        try:
            self.state = 1331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.MAP,
                SqlBaseParser.REDUCE,
            ]:
                localctx = SqlBaseParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1323
                self.querySpecification()
                pass
            elif token in [SqlBaseParser.TABLE]:
                localctx = SqlBaseParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1324
                self.match(SqlBaseParser.TABLE)
                self.state = 1325
                self.tableIdentifier()
                pass
            elif token in [SqlBaseParser.VALUES]:
                localctx = SqlBaseParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1326
                self.inlineTable()
                pass
            elif token in [SqlBaseParser.T__0]:
                localctx = SqlBaseParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1327
                self.match(SqlBaseParser.T__0)
                self.state = 1328
                self.queryNoWith()
                self.state = 1329
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortItemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None  # Token
            self.nullOrder = None  # Token

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSortItem"):
                listener.enterSortItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSortItem"):
                listener.exitSortItem(self)

    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_sortItem)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.expression()
            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.ASC or _la == SqlBaseParser.DESC:
                self.state = 1334
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.ASC or _la == SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.NULLS:
                self.state = 1337
                self.match(SqlBaseParser.NULLS)
                self.state = 1338
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.FIRST or _la == SqlBaseParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None  # Token
            self.inRowFormat = None  # RowFormatContext
            self.recordWriter = None  # Token
            self.script = None  # Token
            self.outRowFormat = None  # RowFormatContext
            self.recordReader = None  # Token
            self.where = None  # BooleanExpressionContext
            self._hint = None  # HintContext
            self.hints = list()  # of HintContexts
            self.having = None  # BooleanExpressionContext

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def fromClause(self):
            return self.getTypedRuleContext(SqlBaseParser.FromClauseContext, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedExpressionSeqContext, 0)

        def rowFormat(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RowFormatContext, i)

        def booleanExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.BooleanExpressionContext, i
                )

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext, 0)

        def colTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ColTypeListContext, 0)

        def lateralView(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext, i)

        def aggregation(self):
            return self.getTypedRuleContext(SqlBaseParser.AggregationContext, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def windows(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowsContext, 0)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext, 0)

        def hint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuerySpecification"):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuerySpecification"):
                listener.exitQuerySpecification(self)

    def querySpecification(self):

        localctx = SqlBaseParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_querySpecification)
        self._la = 0  # Token type
        try:
            self.state = 1434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 181, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT]:
                    self.state = 1341
                    self.match(SqlBaseParser.SELECT)
                    self.state = 1342
                    localctx.kind = self.match(SqlBaseParser.TRANSFORM)
                    self.state = 1343
                    self.match(SqlBaseParser.T__0)
                    self.state = 1344
                    self.namedExpressionSeq()
                    self.state = 1345
                    self.match(SqlBaseParser.T__1)
                    pass
                elif token in [SqlBaseParser.MAP]:
                    self.state = 1347
                    localctx.kind = self.match(SqlBaseParser.MAP)
                    self.state = 1348
                    self.namedExpressionSeq()
                    pass
                elif token in [SqlBaseParser.REDUCE]:
                    self.state = 1349
                    localctx.kind = self.match(SqlBaseParser.REDUCE)
                    self.state = 1350
                    self.namedExpressionSeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ROW:
                    self.state = 1353
                    localctx.inRowFormat = self.rowFormat()

                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.RECORDWRITER:
                    self.state = 1356
                    self.match(SqlBaseParser.RECORDWRITER)
                    self.state = 1357
                    localctx.recordWriter = self.match(SqlBaseParser.STRING)

                self.state = 1360
                self.match(SqlBaseParser.USING)
                self.state = 1361
                localctx.script = self.match(SqlBaseParser.STRING)
                self.state = 1374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 165, self._ctx)
                if la_ == 1:
                    self.state = 1362
                    self.match(SqlBaseParser.AS)
                    self.state = 1372
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 164, self._ctx)
                    if la_ == 1:
                        self.state = 1363
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 1364
                        self.colTypeList()
                        pass

                    elif la_ == 3:
                        self.state = 1365
                        self.match(SqlBaseParser.T__0)
                        self.state = 1368
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 163, self._ctx)
                        if la_ == 1:
                            self.state = 1366
                            self.identifierSeq()
                            pass

                        elif la_ == 2:
                            self.state = 1367
                            self.colTypeList()
                            pass

                        self.state = 1370
                        self.match(SqlBaseParser.T__1)
                        pass

                self.state = 1377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 166, self._ctx)
                if la_ == 1:
                    self.state = 1376
                    localctx.outRowFormat = self.rowFormat()

                self.state = 1381
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 167, self._ctx)
                if la_ == 1:
                    self.state = 1379
                    self.match(SqlBaseParser.RECORDREADER)
                    self.state = 1380
                    localctx.recordReader = self.match(SqlBaseParser.STRING)

                self.state = 1384
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 168, self._ctx)
                if la_ == 1:
                    self.state = 1383
                    self.fromClause()

                self.state = 1388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 169, self._ctx)
                if la_ == 1:
                    self.state = 1386
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1387
                    localctx.where = self.booleanExpression(0)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1412
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.SELECT]:
                    self.state = 1390
                    localctx.kind = self.match(SqlBaseParser.SELECT)
                    self.state = 1394
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__4:
                        self.state = 1391
                        localctx._hint = self.hint()
                        localctx.hints.append(localctx._hint)
                        self.state = 1396
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1398
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 171, self._ctx)
                    if la_ == 1:
                        self.state = 1397
                        self.setQuantifier()

                    self.state = 1400
                    self.namedExpressionSeq()
                    self.state = 1402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 172, self._ctx)
                    if la_ == 1:
                        self.state = 1401
                        self.fromClause()

                    pass
                elif token in [SqlBaseParser.FROM]:
                    self.state = 1404
                    self.fromClause()
                    self.state = 1410
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 174, self._ctx)
                    if la_ == 1:
                        self.state = 1405
                        localctx.kind = self.match(SqlBaseParser.SELECT)
                        self.state = 1407
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 173, self._ctx)
                        if la_ == 1:
                            self.state = 1406
                            self.setQuantifier()

                        self.state = 1409
                        self.namedExpressionSeq()

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 176, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1414
                        self.lateralView()
                    self.state = 1419
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 176, self._ctx)

                self.state = 1422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 177, self._ctx)
                if la_ == 1:
                    self.state = 1420
                    self.match(SqlBaseParser.WHERE)
                    self.state = 1421
                    localctx.where = self.booleanExpression(0)

                self.state = 1425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 178, self._ctx)
                if la_ == 1:
                    self.state = 1424
                    self.aggregation()

                self.state = 1429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 179, self._ctx)
                if la_ == 1:
                    self.state = 1427
                    self.match(SqlBaseParser.HAVING)
                    self.state = 1428
                    localctx.having = self.booleanExpression(0)

                self.state = 1432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 180, self._ctx)
                if la_ == 1:
                    self.state = 1431
                    self.windows()

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None  # HintStatementContext
            self.hintStatements = list()  # of HintStatementContexts

        def hintStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.HintStatementContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_hint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHint"):
                listener.enterHint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHint"):
                listener.exitHint(self)

    def hint(self):

        localctx = SqlBaseParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_hint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.match(SqlBaseParser.T__4)
            self.state = 1437
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 1444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.T__2)
                            | (1 << SqlBaseParser.SELECT)
                            | (1 << SqlBaseParser.FROM)
                            | (1 << SqlBaseParser.ADD)
                            | (1 << SqlBaseParser.AS)
                            | (1 << SqlBaseParser.ALL)
                            | (1 << SqlBaseParser.DISTINCT)
                            | (1 << SqlBaseParser.WHERE)
                            | (1 << SqlBaseParser.GROUP)
                            | (1 << SqlBaseParser.BY)
                            | (1 << SqlBaseParser.GROUPING)
                            | (1 << SqlBaseParser.SETS)
                            | (1 << SqlBaseParser.CUBE)
                            | (1 << SqlBaseParser.ROLLUP)
                            | (1 << SqlBaseParser.ORDER)
                            | (1 << SqlBaseParser.HAVING)
                            | (1 << SqlBaseParser.LIMIT)
                            | (1 << SqlBaseParser.AT)
                            | (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                            | (1 << SqlBaseParser.NO)
                            | (1 << SqlBaseParser.EXISTS)
                            | (1 << SqlBaseParser.BETWEEN)
                            | (1 << SqlBaseParser.LIKE)
                            | (1 << SqlBaseParser.RLIKE)
                            | (1 << SqlBaseParser.IS)
                            | (1 << SqlBaseParser.NULL)
                            | (1 << SqlBaseParser.TRUE)
                            | (1 << SqlBaseParser.FALSE)
                            | (1 << SqlBaseParser.NULLS)
                            | (1 << SqlBaseParser.ASC)
                            | (1 << SqlBaseParser.DESC)
                            | (1 << SqlBaseParser.FOR)
                            | (1 << SqlBaseParser.INTERVAL)
                            | (1 << SqlBaseParser.CASE)
                            | (1 << SqlBaseParser.WHEN)
                            | (1 << SqlBaseParser.THEN)
                            | (1 << SqlBaseParser.ELSE)
                            | (1 << SqlBaseParser.END)
                            | (1 << SqlBaseParser.JOIN)
                            | (1 << SqlBaseParser.CROSS)
                            | (1 << SqlBaseParser.OUTER)
                            | (1 << SqlBaseParser.INNER)
                            | (1 << SqlBaseParser.LEFT)
                            | (1 << SqlBaseParser.SEMI)
                            | (1 << SqlBaseParser.RIGHT)
                            | (1 << SqlBaseParser.FULL)
                            | (1 << SqlBaseParser.NATURAL)
                            | (1 << SqlBaseParser.ON)
                            | (1 << SqlBaseParser.LATERAL)
                            | (1 << SqlBaseParser.WINDOW)
                            | (1 << SqlBaseParser.OVER)
                            | (1 << SqlBaseParser.PARTITION)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (SqlBaseParser.RANGE - 64))
                            | (1 << (SqlBaseParser.ROWS - 64))
                            | (1 << (SqlBaseParser.UNBOUNDED - 64))
                            | (1 << (SqlBaseParser.PRECEDING - 64))
                            | (1 << (SqlBaseParser.FOLLOWING - 64))
                            | (1 << (SqlBaseParser.CURRENT - 64))
                            | (1 << (SqlBaseParser.FIRST - 64))
                            | (1 << (SqlBaseParser.AFTER - 64))
                            | (1 << (SqlBaseParser.LAST - 64))
                            | (1 << (SqlBaseParser.ROW - 64))
                            | (1 << (SqlBaseParser.WITH - 64))
                            | (1 << (SqlBaseParser.VALUES - 64))
                            | (1 << (SqlBaseParser.CREATE - 64))
                            | (1 << (SqlBaseParser.TABLE - 64))
                            | (1 << (SqlBaseParser.DIRECTORY - 64))
                            | (1 << (SqlBaseParser.VIEW - 64))
                            | (1 << (SqlBaseParser.REPLACE - 64))
                            | (1 << (SqlBaseParser.INSERT - 64))
                            | (1 << (SqlBaseParser.DELETE - 64))
                            | (1 << (SqlBaseParser.INTO - 64))
                            | (1 << (SqlBaseParser.DESCRIBE - 64))
                            | (1 << (SqlBaseParser.EXPLAIN - 64))
                            | (1 << (SqlBaseParser.FORMAT - 64))
                            | (1 << (SqlBaseParser.LOGICAL - 64))
                            | (1 << (SqlBaseParser.CODEGEN - 64))
                            | (1 << (SqlBaseParser.COST - 64))
                            | (1 << (SqlBaseParser.CAST - 64))
                            | (1 << (SqlBaseParser.SHOW - 64))
                            | (1 << (SqlBaseParser.TABLES - 64))
                            | (1 << (SqlBaseParser.COLUMNS - 64))
                            | (1 << (SqlBaseParser.COLUMN - 64))
                            | (1 << (SqlBaseParser.USE - 64))
                            | (1 << (SqlBaseParser.PARTITIONS - 64))
                            | (1 << (SqlBaseParser.FUNCTIONS - 64))
                            | (1 << (SqlBaseParser.DROP - 64))
                            | (1 << (SqlBaseParser.UNION - 64))
                            | (1 << (SqlBaseParser.EXCEPT - 64))
                            | (1 << (SqlBaseParser.SETMINUS - 64))
                            | (1 << (SqlBaseParser.INTERSECT - 64))
                            | (1 << (SqlBaseParser.TO - 64))
                            | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                            | (1 << (SqlBaseParser.STRATIFY - 64))
                            | (1 << (SqlBaseParser.ALTER - 64))
                            | (1 << (SqlBaseParser.RENAME - 64))
                            | (1 << (SqlBaseParser.ARRAY - 64))
                            | (1 << (SqlBaseParser.MAP - 64))
                            | (1 << (SqlBaseParser.STRUCT - 64))
                            | (1 << (SqlBaseParser.COMMENT - 64))
                            | (1 << (SqlBaseParser.SET - 64))
                            | (1 << (SqlBaseParser.RESET - 64))
                            | (1 << (SqlBaseParser.DATA - 64))
                            | (1 << (SqlBaseParser.START - 64))
                            | (1 << (SqlBaseParser.TRANSACTION - 64))
                            | (1 << (SqlBaseParser.COMMIT - 64))
                            | (1 << (SqlBaseParser.ROLLBACK - 64))
                            | (1 << (SqlBaseParser.MACRO - 64))
                            | (1 << (SqlBaseParser.IGNORE - 64))
                            | (1 << (SqlBaseParser.BOTH - 64))
                            | (1 << (SqlBaseParser.LEADING - 64))
                            | (1 << (SqlBaseParser.TRAILING - 64))
                            | (1 << (SqlBaseParser.IF - 64))
                            | (1 << (SqlBaseParser.POSITION - 64))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 139)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 139))
                        & (
                            (1 << (SqlBaseParser.DIV - 139))
                            | (1 << (SqlBaseParser.PERCENTLIT - 139))
                            | (1 << (SqlBaseParser.BUCKET - 139))
                            | (1 << (SqlBaseParser.OUT - 139))
                            | (1 << (SqlBaseParser.OF - 139))
                            | (1 << (SqlBaseParser.SORT - 139))
                            | (1 << (SqlBaseParser.CLUSTER - 139))
                            | (1 << (SqlBaseParser.DISTRIBUTE - 139))
                            | (1 << (SqlBaseParser.OVERWRITE - 139))
                            | (1 << (SqlBaseParser.TRANSFORM - 139))
                            | (1 << (SqlBaseParser.REDUCE - 139))
                            | (1 << (SqlBaseParser.SERDE - 139))
                            | (1 << (SqlBaseParser.SERDEPROPERTIES - 139))
                            | (1 << (SqlBaseParser.RECORDREADER - 139))
                            | (1 << (SqlBaseParser.RECORDWRITER - 139))
                            | (1 << (SqlBaseParser.DELIMITED - 139))
                            | (1 << (SqlBaseParser.FIELDS - 139))
                            | (1 << (SqlBaseParser.TERMINATED - 139))
                            | (1 << (SqlBaseParser.COLLECTION - 139))
                            | (1 << (SqlBaseParser.ITEMS - 139))
                            | (1 << (SqlBaseParser.KEYS - 139))
                            | (1 << (SqlBaseParser.ESCAPED - 139))
                            | (1 << (SqlBaseParser.LINES - 139))
                            | (1 << (SqlBaseParser.SEPARATED - 139))
                            | (1 << (SqlBaseParser.FUNCTION - 139))
                            | (1 << (SqlBaseParser.EXTENDED - 139))
                            | (1 << (SqlBaseParser.REFRESH - 139))
                            | (1 << (SqlBaseParser.CLEAR - 139))
                            | (1 << (SqlBaseParser.CACHE - 139))
                            | (1 << (SqlBaseParser.UNCACHE - 139))
                            | (1 << (SqlBaseParser.LAZY - 139))
                            | (1 << (SqlBaseParser.FORMATTED - 139))
                            | (1 << (SqlBaseParser.GLOBAL - 139))
                            | (1 << (SqlBaseParser.TEMPORARY - 139))
                            | (1 << (SqlBaseParser.OPTIONS - 139))
                            | (1 << (SqlBaseParser.UNSET - 139))
                            | (1 << (SqlBaseParser.TBLPROPERTIES - 139))
                            | (1 << (SqlBaseParser.DBPROPERTIES - 139))
                            | (1 << (SqlBaseParser.BUCKETS - 139))
                            | (1 << (SqlBaseParser.SKEWED - 139))
                            | (1 << (SqlBaseParser.STORED - 139))
                            | (1 << (SqlBaseParser.DIRECTORIES - 139))
                            | (1 << (SqlBaseParser.LOCATION - 139))
                            | (1 << (SqlBaseParser.EXCHANGE - 139))
                            | (1 << (SqlBaseParser.ARCHIVE - 139))
                            | (1 << (SqlBaseParser.UNARCHIVE - 139))
                            | (1 << (SqlBaseParser.FILEFORMAT - 139))
                            | (1 << (SqlBaseParser.TOUCH - 139))
                            | (1 << (SqlBaseParser.COMPACT - 139))
                            | (1 << (SqlBaseParser.CONCATENATE - 139))
                            | (1 << (SqlBaseParser.CHANGE - 139))
                            | (1 << (SqlBaseParser.CASCADE - 139))
                            | (1 << (SqlBaseParser.RESTRICT - 139))
                            | (1 << (SqlBaseParser.CLUSTERED - 139))
                            | (1 << (SqlBaseParser.SORTED - 139))
                            | (1 << (SqlBaseParser.PURGE - 139))
                            | (1 << (SqlBaseParser.INPUTFORMAT - 139))
                            | (1 << (SqlBaseParser.OUTPUTFORMAT - 139))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 203)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 203))
                        & (
                            (1 << (SqlBaseParser.DATABASE - 203))
                            | (1 << (SqlBaseParser.DATABASES - 203))
                            | (1 << (SqlBaseParser.DFS - 203))
                            | (1 << (SqlBaseParser.TRUNCATE - 203))
                            | (1 << (SqlBaseParser.ANALYZE - 203))
                            | (1 << (SqlBaseParser.COMPUTE - 203))
                            | (1 << (SqlBaseParser.LIST - 203))
                            | (1 << (SqlBaseParser.STATISTICS - 203))
                            | (1 << (SqlBaseParser.PARTITIONED - 203))
                            | (1 << (SqlBaseParser.EXTERNAL - 203))
                            | (1 << (SqlBaseParser.DEFINED - 203))
                            | (1 << (SqlBaseParser.REVOKE - 203))
                            | (1 << (SqlBaseParser.GRANT - 203))
                            | (1 << (SqlBaseParser.LOCK - 203))
                            | (1 << (SqlBaseParser.UNLOCK - 203))
                            | (1 << (SqlBaseParser.MSCK - 203))
                            | (1 << (SqlBaseParser.REPAIR - 203))
                            | (1 << (SqlBaseParser.RECOVER - 203))
                            | (1 << (SqlBaseParser.EXPORT - 203))
                            | (1 << (SqlBaseParser.IMPORT - 203))
                            | (1 << (SqlBaseParser.LOAD - 203))
                            | (1 << (SqlBaseParser.ROLE - 203))
                            | (1 << (SqlBaseParser.ROLES - 203))
                            | (1 << (SqlBaseParser.COMPACTIONS - 203))
                            | (1 << (SqlBaseParser.PRINCIPALS - 203))
                            | (1 << (SqlBaseParser.TRANSACTIONS - 203))
                            | (1 << (SqlBaseParser.INDEX - 203))
                            | (1 << (SqlBaseParser.INDEXES - 203))
                            | (1 << (SqlBaseParser.LOCKS - 203))
                            | (1 << (SqlBaseParser.OPTION - 203))
                            | (1 << (SqlBaseParser.ANTI - 203))
                            | (1 << (SqlBaseParser.LOCAL - 203))
                            | (1 << (SqlBaseParser.INPATH - 203))
                            | (1 << (SqlBaseParser.IDENTIFIER - 203))
                            | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 203))
                        )
                    )
                    != 0
                )
            ):
                self.state = 1439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.T__2:
                    self.state = 1438
                    self.match(SqlBaseParser.T__2)

                self.state = 1441
                localctx._hintStatement = self.hintStatement()
                localctx.hintStatements.append(localctx._hintStatement)
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1447
            self.match(SqlBaseParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HintStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None  # IdentifierContext
            self._primaryExpression = None  # PrimaryExpressionContext
            self.parameters = list()  # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def primaryExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.PrimaryExpressionContext, i
                )

        def getRuleIndex(self):
            return SqlBaseParser.RULE_hintStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHintStatement"):
                listener.enterHintStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHintStatement"):
                listener.exitHintStatement(self)

    def hintStatement(self):

        localctx = SqlBaseParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_hintStatement)
        self._la = 0  # Token type
        try:
            self.state = 1462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 185, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1449
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1450
                localctx.hintName = self.identifier()
                self.state = 1451
                self.match(SqlBaseParser.T__0)
                self.state = 1452
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1453
                    self.match(SqlBaseParser.T__2)
                    self.state = 1454
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 1459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1460
                self.match(SqlBaseParser.T__1)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def relation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext, i)

        def lateralView(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.LateralViewContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_fromClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFromClause"):
                listener.enterFromClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFromClause"):
                listener.exitFromClause(self)

    def fromClause(self):

        localctx = SqlBaseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(SqlBaseParser.FROM)
            self.state = 1465
            self.relation()
            self.state = 1470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 186, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1466
                    self.match(SqlBaseParser.T__2)
                    self.state = 1467
                    self.relation()
                self.state = 1472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 186, self._ctx)

            self.state = 1476
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 187, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1473
                    self.lateralView()
                self.state = 1478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 187, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None  # ExpressionContext
            self.groupingExpressions = list()  # of ExpressionContexts
            self.kind = None  # Token

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def groupingSet(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GroupingSetContext, i)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aggregation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAggregation"):
                listener.enterAggregation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAggregation"):
                listener.exitAggregation(self)

    def aggregation(self):

        localctx = SqlBaseParser.AggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_aggregation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.match(SqlBaseParser.GROUP)
            self.state = 1480
            self.match(SqlBaseParser.BY)
            self.state = 1481
            localctx._expression = self.expression()
            localctx.groupingExpressions.append(localctx._expression)
            self.state = 1486
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 188, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1482
                    self.match(SqlBaseParser.T__2)
                    self.state = 1483
                    localctx._expression = self.expression()
                    localctx.groupingExpressions.append(localctx._expression)
                self.state = 1488
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 188, self._ctx)

            self.state = 1506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 190, self._ctx)
            if la_ == 1:
                self.state = 1489
                self.match(SqlBaseParser.WITH)
                self.state = 1490
                localctx.kind = self.match(SqlBaseParser.ROLLUP)

            elif la_ == 2:
                self.state = 1491
                self.match(SqlBaseParser.WITH)
                self.state = 1492
                localctx.kind = self.match(SqlBaseParser.CUBE)

            elif la_ == 3:
                self.state = 1493
                localctx.kind = self.match(SqlBaseParser.GROUPING)
                self.state = 1494
                self.match(SqlBaseParser.SETS)
                self.state = 1495
                self.match(SqlBaseParser.T__0)
                self.state = 1496
                self.groupingSet()
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1497
                    self.match(SqlBaseParser.T__2)
                    self.state = 1498
                    self.groupingSet()
                    self.state = 1503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1504
                self.match(SqlBaseParser.T__1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupingSetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_groupingSet

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupingSet"):
                listener.enterGroupingSet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupingSet"):
                listener.exitGroupingSet(self)

    def groupingSet(self):

        localctx = SqlBaseParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_groupingSet)
        self._la = 0  # Token type
        try:
            self.state = 1521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 193, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1508
                self.match(SqlBaseParser.T__0)
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.RANGE - 64))
                                | (1 << (SqlBaseParser.ROWS - 64))
                                | (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.FIRST - 64))
                                | (1 << (SqlBaseParser.AFTER - 64))
                                | (1 << (SqlBaseParser.LAST - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.DIRECTORY - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.COST - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.SETMINUS - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IGNORE - 64))
                                | (1 << (SqlBaseParser.BOTH - 64))
                                | (1 << (SqlBaseParser.LEADING - 64))
                                | (1 << (SqlBaseParser.TRAILING - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.POSITION - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 134)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 134))
                            & (
                                (1 << (SqlBaseParser.PLUS - 134))
                                | (1 << (SqlBaseParser.MINUS - 134))
                                | (1 << (SqlBaseParser.ASTERISK - 134))
                                | (1 << (SqlBaseParser.DIV - 134))
                                | (1 << (SqlBaseParser.TILDE - 134))
                                | (1 << (SqlBaseParser.PERCENTLIT - 134))
                                | (1 << (SqlBaseParser.BUCKET - 134))
                                | (1 << (SqlBaseParser.OUT - 134))
                                | (1 << (SqlBaseParser.OF - 134))
                                | (1 << (SqlBaseParser.SORT - 134))
                                | (1 << (SqlBaseParser.CLUSTER - 134))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 134))
                                | (1 << (SqlBaseParser.OVERWRITE - 134))
                                | (1 << (SqlBaseParser.TRANSFORM - 134))
                                | (1 << (SqlBaseParser.REDUCE - 134))
                                | (1 << (SqlBaseParser.SERDE - 134))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 134))
                                | (1 << (SqlBaseParser.RECORDREADER - 134))
                                | (1 << (SqlBaseParser.RECORDWRITER - 134))
                                | (1 << (SqlBaseParser.DELIMITED - 134))
                                | (1 << (SqlBaseParser.FIELDS - 134))
                                | (1 << (SqlBaseParser.TERMINATED - 134))
                                | (1 << (SqlBaseParser.COLLECTION - 134))
                                | (1 << (SqlBaseParser.ITEMS - 134))
                                | (1 << (SqlBaseParser.KEYS - 134))
                                | (1 << (SqlBaseParser.ESCAPED - 134))
                                | (1 << (SqlBaseParser.LINES - 134))
                                | (1 << (SqlBaseParser.SEPARATED - 134))
                                | (1 << (SqlBaseParser.FUNCTION - 134))
                                | (1 << (SqlBaseParser.EXTENDED - 134))
                                | (1 << (SqlBaseParser.REFRESH - 134))
                                | (1 << (SqlBaseParser.CLEAR - 134))
                                | (1 << (SqlBaseParser.CACHE - 134))
                                | (1 << (SqlBaseParser.UNCACHE - 134))
                                | (1 << (SqlBaseParser.LAZY - 134))
                                | (1 << (SqlBaseParser.FORMATTED - 134))
                                | (1 << (SqlBaseParser.GLOBAL - 134))
                                | (1 << (SqlBaseParser.TEMPORARY - 134))
                                | (1 << (SqlBaseParser.OPTIONS - 134))
                                | (1 << (SqlBaseParser.UNSET - 134))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 134))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 134))
                                | (1 << (SqlBaseParser.BUCKETS - 134))
                                | (1 << (SqlBaseParser.SKEWED - 134))
                                | (1 << (SqlBaseParser.STORED - 134))
                                | (1 << (SqlBaseParser.DIRECTORIES - 134))
                                | (1 << (SqlBaseParser.LOCATION - 134))
                                | (1 << (SqlBaseParser.EXCHANGE - 134))
                                | (1 << (SqlBaseParser.ARCHIVE - 134))
                                | (1 << (SqlBaseParser.UNARCHIVE - 134))
                                | (1 << (SqlBaseParser.FILEFORMAT - 134))
                                | (1 << (SqlBaseParser.TOUCH - 134))
                                | (1 << (SqlBaseParser.COMPACT - 134))
                                | (1 << (SqlBaseParser.CONCATENATE - 134))
                                | (1 << (SqlBaseParser.CHANGE - 134))
                                | (1 << (SqlBaseParser.CASCADE - 134))
                                | (1 << (SqlBaseParser.RESTRICT - 134))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 198)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 198))
                            & (
                                (1 << (SqlBaseParser.CLUSTERED - 198))
                                | (1 << (SqlBaseParser.SORTED - 198))
                                | (1 << (SqlBaseParser.PURGE - 198))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 198))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 198))
                                | (1 << (SqlBaseParser.DATABASE - 198))
                                | (1 << (SqlBaseParser.DATABASES - 198))
                                | (1 << (SqlBaseParser.DFS - 198))
                                | (1 << (SqlBaseParser.TRUNCATE - 198))
                                | (1 << (SqlBaseParser.ANALYZE - 198))
                                | (1 << (SqlBaseParser.COMPUTE - 198))
                                | (1 << (SqlBaseParser.LIST - 198))
                                | (1 << (SqlBaseParser.STATISTICS - 198))
                                | (1 << (SqlBaseParser.PARTITIONED - 198))
                                | (1 << (SqlBaseParser.EXTERNAL - 198))
                                | (1 << (SqlBaseParser.DEFINED - 198))
                                | (1 << (SqlBaseParser.REVOKE - 198))
                                | (1 << (SqlBaseParser.GRANT - 198))
                                | (1 << (SqlBaseParser.LOCK - 198))
                                | (1 << (SqlBaseParser.UNLOCK - 198))
                                | (1 << (SqlBaseParser.MSCK - 198))
                                | (1 << (SqlBaseParser.REPAIR - 198))
                                | (1 << (SqlBaseParser.RECOVER - 198))
                                | (1 << (SqlBaseParser.EXPORT - 198))
                                | (1 << (SqlBaseParser.IMPORT - 198))
                                | (1 << (SqlBaseParser.LOAD - 198))
                                | (1 << (SqlBaseParser.ROLE - 198))
                                | (1 << (SqlBaseParser.ROLES - 198))
                                | (1 << (SqlBaseParser.COMPACTIONS - 198))
                                | (1 << (SqlBaseParser.PRINCIPALS - 198))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 198))
                                | (1 << (SqlBaseParser.INDEX - 198))
                                | (1 << (SqlBaseParser.INDEXES - 198))
                                | (1 << (SqlBaseParser.LOCKS - 198))
                                | (1 << (SqlBaseParser.OPTION - 198))
                                | (1 << (SqlBaseParser.ANTI - 198))
                                | (1 << (SqlBaseParser.LOCAL - 198))
                                | (1 << (SqlBaseParser.INPATH - 198))
                                | (1 << (SqlBaseParser.STRING - 198))
                                | (1 << (SqlBaseParser.BIGINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.SMALLINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.TINYINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.INTEGER_VALUE - 198))
                                | (1 << (SqlBaseParser.DECIMAL_VALUE - 198))
                                | (1 << (SqlBaseParser.DOUBLE_LITERAL - 198))
                                | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 198))
                                | (1 << (SqlBaseParser.IDENTIFIER - 198))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 1509
                    self.expression()
                    self.state = 1514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 1510
                        self.match(SqlBaseParser.T__2)
                        self.state = 1511
                        self.expression()
                        self.state = 1516
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1519
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1520
                self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LateralViewContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None  # IdentifierContext
            self._identifier = None  # IdentifierContext
            self.colName = list()  # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_lateralView

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLateralView"):
                listener.enterLateralView(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLateralView"):
                listener.exitLateralView(self)

    def lateralView(self):

        localctx = SqlBaseParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_lateralView)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.match(SqlBaseParser.LATERAL)
            self.state = 1524
            self.match(SqlBaseParser.VIEW)
            self.state = 1526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 194, self._ctx)
            if la_ == 1:
                self.state = 1525
                self.match(SqlBaseParser.OUTER)

            self.state = 1528
            self.qualifiedName()
            self.state = 1529
            self.match(SqlBaseParser.T__0)
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.T__0)
                            | (1 << SqlBaseParser.SELECT)
                            | (1 << SqlBaseParser.FROM)
                            | (1 << SqlBaseParser.ADD)
                            | (1 << SqlBaseParser.AS)
                            | (1 << SqlBaseParser.ALL)
                            | (1 << SqlBaseParser.DISTINCT)
                            | (1 << SqlBaseParser.WHERE)
                            | (1 << SqlBaseParser.GROUP)
                            | (1 << SqlBaseParser.BY)
                            | (1 << SqlBaseParser.GROUPING)
                            | (1 << SqlBaseParser.SETS)
                            | (1 << SqlBaseParser.CUBE)
                            | (1 << SqlBaseParser.ROLLUP)
                            | (1 << SqlBaseParser.ORDER)
                            | (1 << SqlBaseParser.HAVING)
                            | (1 << SqlBaseParser.LIMIT)
                            | (1 << SqlBaseParser.AT)
                            | (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                            | (1 << SqlBaseParser.NO)
                            | (1 << SqlBaseParser.EXISTS)
                            | (1 << SqlBaseParser.BETWEEN)
                            | (1 << SqlBaseParser.LIKE)
                            | (1 << SqlBaseParser.RLIKE)
                            | (1 << SqlBaseParser.IS)
                            | (1 << SqlBaseParser.NULL)
                            | (1 << SqlBaseParser.TRUE)
                            | (1 << SqlBaseParser.FALSE)
                            | (1 << SqlBaseParser.NULLS)
                            | (1 << SqlBaseParser.ASC)
                            | (1 << SqlBaseParser.DESC)
                            | (1 << SqlBaseParser.FOR)
                            | (1 << SqlBaseParser.INTERVAL)
                            | (1 << SqlBaseParser.CASE)
                            | (1 << SqlBaseParser.WHEN)
                            | (1 << SqlBaseParser.THEN)
                            | (1 << SqlBaseParser.ELSE)
                            | (1 << SqlBaseParser.END)
                            | (1 << SqlBaseParser.JOIN)
                            | (1 << SqlBaseParser.CROSS)
                            | (1 << SqlBaseParser.OUTER)
                            | (1 << SqlBaseParser.INNER)
                            | (1 << SqlBaseParser.LEFT)
                            | (1 << SqlBaseParser.SEMI)
                            | (1 << SqlBaseParser.RIGHT)
                            | (1 << SqlBaseParser.FULL)
                            | (1 << SqlBaseParser.NATURAL)
                            | (1 << SqlBaseParser.ON)
                            | (1 << SqlBaseParser.LATERAL)
                            | (1 << SqlBaseParser.WINDOW)
                            | (1 << SqlBaseParser.OVER)
                            | (1 << SqlBaseParser.PARTITION)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (SqlBaseParser.RANGE - 64))
                            | (1 << (SqlBaseParser.ROWS - 64))
                            | (1 << (SqlBaseParser.UNBOUNDED - 64))
                            | (1 << (SqlBaseParser.PRECEDING - 64))
                            | (1 << (SqlBaseParser.FOLLOWING - 64))
                            | (1 << (SqlBaseParser.CURRENT - 64))
                            | (1 << (SqlBaseParser.FIRST - 64))
                            | (1 << (SqlBaseParser.AFTER - 64))
                            | (1 << (SqlBaseParser.LAST - 64))
                            | (1 << (SqlBaseParser.ROW - 64))
                            | (1 << (SqlBaseParser.WITH - 64))
                            | (1 << (SqlBaseParser.VALUES - 64))
                            | (1 << (SqlBaseParser.CREATE - 64))
                            | (1 << (SqlBaseParser.TABLE - 64))
                            | (1 << (SqlBaseParser.DIRECTORY - 64))
                            | (1 << (SqlBaseParser.VIEW - 64))
                            | (1 << (SqlBaseParser.REPLACE - 64))
                            | (1 << (SqlBaseParser.INSERT - 64))
                            | (1 << (SqlBaseParser.DELETE - 64))
                            | (1 << (SqlBaseParser.INTO - 64))
                            | (1 << (SqlBaseParser.DESCRIBE - 64))
                            | (1 << (SqlBaseParser.EXPLAIN - 64))
                            | (1 << (SqlBaseParser.FORMAT - 64))
                            | (1 << (SqlBaseParser.LOGICAL - 64))
                            | (1 << (SqlBaseParser.CODEGEN - 64))
                            | (1 << (SqlBaseParser.COST - 64))
                            | (1 << (SqlBaseParser.CAST - 64))
                            | (1 << (SqlBaseParser.SHOW - 64))
                            | (1 << (SqlBaseParser.TABLES - 64))
                            | (1 << (SqlBaseParser.COLUMNS - 64))
                            | (1 << (SqlBaseParser.COLUMN - 64))
                            | (1 << (SqlBaseParser.USE - 64))
                            | (1 << (SqlBaseParser.PARTITIONS - 64))
                            | (1 << (SqlBaseParser.FUNCTIONS - 64))
                            | (1 << (SqlBaseParser.DROP - 64))
                            | (1 << (SqlBaseParser.UNION - 64))
                            | (1 << (SqlBaseParser.EXCEPT - 64))
                            | (1 << (SqlBaseParser.SETMINUS - 64))
                            | (1 << (SqlBaseParser.INTERSECT - 64))
                            | (1 << (SqlBaseParser.TO - 64))
                            | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                            | (1 << (SqlBaseParser.STRATIFY - 64))
                            | (1 << (SqlBaseParser.ALTER - 64))
                            | (1 << (SqlBaseParser.RENAME - 64))
                            | (1 << (SqlBaseParser.ARRAY - 64))
                            | (1 << (SqlBaseParser.MAP - 64))
                            | (1 << (SqlBaseParser.STRUCT - 64))
                            | (1 << (SqlBaseParser.COMMENT - 64))
                            | (1 << (SqlBaseParser.SET - 64))
                            | (1 << (SqlBaseParser.RESET - 64))
                            | (1 << (SqlBaseParser.DATA - 64))
                            | (1 << (SqlBaseParser.START - 64))
                            | (1 << (SqlBaseParser.TRANSACTION - 64))
                            | (1 << (SqlBaseParser.COMMIT - 64))
                            | (1 << (SqlBaseParser.ROLLBACK - 64))
                            | (1 << (SqlBaseParser.MACRO - 64))
                            | (1 << (SqlBaseParser.IGNORE - 64))
                            | (1 << (SqlBaseParser.BOTH - 64))
                            | (1 << (SqlBaseParser.LEADING - 64))
                            | (1 << (SqlBaseParser.TRAILING - 64))
                            | (1 << (SqlBaseParser.IF - 64))
                            | (1 << (SqlBaseParser.POSITION - 64))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 134)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 134))
                        & (
                            (1 << (SqlBaseParser.PLUS - 134))
                            | (1 << (SqlBaseParser.MINUS - 134))
                            | (1 << (SqlBaseParser.ASTERISK - 134))
                            | (1 << (SqlBaseParser.DIV - 134))
                            | (1 << (SqlBaseParser.TILDE - 134))
                            | (1 << (SqlBaseParser.PERCENTLIT - 134))
                            | (1 << (SqlBaseParser.BUCKET - 134))
                            | (1 << (SqlBaseParser.OUT - 134))
                            | (1 << (SqlBaseParser.OF - 134))
                            | (1 << (SqlBaseParser.SORT - 134))
                            | (1 << (SqlBaseParser.CLUSTER - 134))
                            | (1 << (SqlBaseParser.DISTRIBUTE - 134))
                            | (1 << (SqlBaseParser.OVERWRITE - 134))
                            | (1 << (SqlBaseParser.TRANSFORM - 134))
                            | (1 << (SqlBaseParser.REDUCE - 134))
                            | (1 << (SqlBaseParser.SERDE - 134))
                            | (1 << (SqlBaseParser.SERDEPROPERTIES - 134))
                            | (1 << (SqlBaseParser.RECORDREADER - 134))
                            | (1 << (SqlBaseParser.RECORDWRITER - 134))
                            | (1 << (SqlBaseParser.DELIMITED - 134))
                            | (1 << (SqlBaseParser.FIELDS - 134))
                            | (1 << (SqlBaseParser.TERMINATED - 134))
                            | (1 << (SqlBaseParser.COLLECTION - 134))
                            | (1 << (SqlBaseParser.ITEMS - 134))
                            | (1 << (SqlBaseParser.KEYS - 134))
                            | (1 << (SqlBaseParser.ESCAPED - 134))
                            | (1 << (SqlBaseParser.LINES - 134))
                            | (1 << (SqlBaseParser.SEPARATED - 134))
                            | (1 << (SqlBaseParser.FUNCTION - 134))
                            | (1 << (SqlBaseParser.EXTENDED - 134))
                            | (1 << (SqlBaseParser.REFRESH - 134))
                            | (1 << (SqlBaseParser.CLEAR - 134))
                            | (1 << (SqlBaseParser.CACHE - 134))
                            | (1 << (SqlBaseParser.UNCACHE - 134))
                            | (1 << (SqlBaseParser.LAZY - 134))
                            | (1 << (SqlBaseParser.FORMATTED - 134))
                            | (1 << (SqlBaseParser.GLOBAL - 134))
                            | (1 << (SqlBaseParser.TEMPORARY - 134))
                            | (1 << (SqlBaseParser.OPTIONS - 134))
                            | (1 << (SqlBaseParser.UNSET - 134))
                            | (1 << (SqlBaseParser.TBLPROPERTIES - 134))
                            | (1 << (SqlBaseParser.DBPROPERTIES - 134))
                            | (1 << (SqlBaseParser.BUCKETS - 134))
                            | (1 << (SqlBaseParser.SKEWED - 134))
                            | (1 << (SqlBaseParser.STORED - 134))
                            | (1 << (SqlBaseParser.DIRECTORIES - 134))
                            | (1 << (SqlBaseParser.LOCATION - 134))
                            | (1 << (SqlBaseParser.EXCHANGE - 134))
                            | (1 << (SqlBaseParser.ARCHIVE - 134))
                            | (1 << (SqlBaseParser.UNARCHIVE - 134))
                            | (1 << (SqlBaseParser.FILEFORMAT - 134))
                            | (1 << (SqlBaseParser.TOUCH - 134))
                            | (1 << (SqlBaseParser.COMPACT - 134))
                            | (1 << (SqlBaseParser.CONCATENATE - 134))
                            | (1 << (SqlBaseParser.CHANGE - 134))
                            | (1 << (SqlBaseParser.CASCADE - 134))
                            | (1 << (SqlBaseParser.RESTRICT - 134))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 198)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 198))
                        & (
                            (1 << (SqlBaseParser.CLUSTERED - 198))
                            | (1 << (SqlBaseParser.SORTED - 198))
                            | (1 << (SqlBaseParser.PURGE - 198))
                            | (1 << (SqlBaseParser.INPUTFORMAT - 198))
                            | (1 << (SqlBaseParser.OUTPUTFORMAT - 198))
                            | (1 << (SqlBaseParser.DATABASE - 198))
                            | (1 << (SqlBaseParser.DATABASES - 198))
                            | (1 << (SqlBaseParser.DFS - 198))
                            | (1 << (SqlBaseParser.TRUNCATE - 198))
                            | (1 << (SqlBaseParser.ANALYZE - 198))
                            | (1 << (SqlBaseParser.COMPUTE - 198))
                            | (1 << (SqlBaseParser.LIST - 198))
                            | (1 << (SqlBaseParser.STATISTICS - 198))
                            | (1 << (SqlBaseParser.PARTITIONED - 198))
                            | (1 << (SqlBaseParser.EXTERNAL - 198))
                            | (1 << (SqlBaseParser.DEFINED - 198))
                            | (1 << (SqlBaseParser.REVOKE - 198))
                            | (1 << (SqlBaseParser.GRANT - 198))
                            | (1 << (SqlBaseParser.LOCK - 198))
                            | (1 << (SqlBaseParser.UNLOCK - 198))
                            | (1 << (SqlBaseParser.MSCK - 198))
                            | (1 << (SqlBaseParser.REPAIR - 198))
                            | (1 << (SqlBaseParser.RECOVER - 198))
                            | (1 << (SqlBaseParser.EXPORT - 198))
                            | (1 << (SqlBaseParser.IMPORT - 198))
                            | (1 << (SqlBaseParser.LOAD - 198))
                            | (1 << (SqlBaseParser.ROLE - 198))
                            | (1 << (SqlBaseParser.ROLES - 198))
                            | (1 << (SqlBaseParser.COMPACTIONS - 198))
                            | (1 << (SqlBaseParser.PRINCIPALS - 198))
                            | (1 << (SqlBaseParser.TRANSACTIONS - 198))
                            | (1 << (SqlBaseParser.INDEX - 198))
                            | (1 << (SqlBaseParser.INDEXES - 198))
                            | (1 << (SqlBaseParser.LOCKS - 198))
                            | (1 << (SqlBaseParser.OPTION - 198))
                            | (1 << (SqlBaseParser.ANTI - 198))
                            | (1 << (SqlBaseParser.LOCAL - 198))
                            | (1 << (SqlBaseParser.INPATH - 198))
                            | (1 << (SqlBaseParser.STRING - 198))
                            | (1 << (SqlBaseParser.BIGINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.SMALLINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.TINYINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.INTEGER_VALUE - 198))
                            | (1 << (SqlBaseParser.DECIMAL_VALUE - 198))
                            | (1 << (SqlBaseParser.DOUBLE_LITERAL - 198))
                            | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 198))
                            | (1 << (SqlBaseParser.IDENTIFIER - 198))
                            | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198))
                        )
                    )
                    != 0
                )
            ):
                self.state = 1530
                self.expression()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1531
                    self.match(SqlBaseParser.T__2)
                    self.state = 1532
                    self.expression()
                    self.state = 1537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1540
            self.match(SqlBaseParser.T__1)
            self.state = 1541
            localctx.tblName = self.identifier()
            self.state = 1553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 199, self._ctx)
            if la_ == 1:
                self.state = 1543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 197, self._ctx)
                if la_ == 1:
                    self.state = 1542
                    self.match(SqlBaseParser.AS)

                self.state = 1545
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 1550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1546
                        self.match(SqlBaseParser.T__2)
                        self.state = 1547
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier)
                    self.state = 1552
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 198, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetQuantifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuantifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetQuantifier"):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetQuantifier"):
                listener.exitSetQuantifier(self)

    def setQuantifier(self):

        localctx = SqlBaseParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_setQuantifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            _la = self._input.LA(1)
            if not (_la == SqlBaseParser.ALL or _la == SqlBaseParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext, 0)

        def joinRelation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.JoinRelationContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelation"):
                listener.enterRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelation"):
                listener.exitRelation(self)

    def relation(self):

        localctx = SqlBaseParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1557
            self.relationPrimary()
            self.state = 1561
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 200, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1558
                    self.joinRelation()
                self.state = 1563
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 200, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinRelationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None  # RelationPrimaryContext

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext, 0)

        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext, 0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinRelation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinRelation"):
                listener.enterJoinRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinRelation"):
                listener.exitJoinRelation(self)

    def joinRelation(self):

        localctx = SqlBaseParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_joinRelation)
        try:
            self.state = 1575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.JOIN,
                SqlBaseParser.CROSS,
                SqlBaseParser.INNER,
                SqlBaseParser.LEFT,
                SqlBaseParser.RIGHT,
                SqlBaseParser.FULL,
                SqlBaseParser.ANTI,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1564
                self.joinType()
                self.state = 1565
                self.match(SqlBaseParser.JOIN)
                self.state = 1566
                localctx.right = self.relationPrimary()
                self.state = 1568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 201, self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.joinCriteria()

                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1570
                self.match(SqlBaseParser.NATURAL)
                self.state = 1571
                self.joinType()
                self.state = 1572
                self.match(SqlBaseParser.JOIN)
                self.state = 1573
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinType"):
                listener.enterJoinType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinType"):
                listener.exitJoinType(self)

    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_joinType)
        self._la = 0  # Token type
        try:
            self.state = 1599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 208, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.INNER:
                    self.state = 1577
                    self.match(SqlBaseParser.INNER)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1580
                self.match(SqlBaseParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1581
                self.match(SqlBaseParser.LEFT)
                self.state = 1583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OUTER:
                    self.state = 1582
                    self.match(SqlBaseParser.OUTER)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1585
                self.match(SqlBaseParser.LEFT)
                self.state = 1586
                self.match(SqlBaseParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1587
                self.match(SqlBaseParser.RIGHT)
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OUTER:
                    self.state = 1588
                    self.match(SqlBaseParser.OUTER)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1591
                self.match(SqlBaseParser.FULL)
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.OUTER:
                    self.state = 1592
                    self.match(SqlBaseParser.OUTER)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.LEFT:
                    self.state = 1595
                    self.match(SqlBaseParser.LEFT)

                self.state = 1598
                self.match(SqlBaseParser.ANTI)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext, 0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinCriteria"):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinCriteria"):
                listener.exitJoinCriteria(self)

    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_joinCriteria)
        self._la = 0  # Token type
        try:
            self.state = 1615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1601
                self.match(SqlBaseParser.ON)
                self.state = 1602
                self.booleanExpression(0)
                pass
            elif token in [SqlBaseParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1603
                self.match(SqlBaseParser.USING)
                self.state = 1604
                self.match(SqlBaseParser.T__0)
                self.state = 1605
                self.identifier()
                self.state = 1610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1606
                    self.match(SqlBaseParser.T__2)
                    self.state = 1607
                    self.identifier()
                    self.state = 1612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1613
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SampleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleMethodContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sample

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSample"):
                listener.enterSample(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSample"):
                listener.exitSample(self)

    def sample(self):

        localctx = SqlBaseParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_sample)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(SqlBaseParser.TABLESAMPLE)
            self.state = 1618
            self.match(SqlBaseParser.T__0)
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.T__0)
                            | (1 << SqlBaseParser.SELECT)
                            | (1 << SqlBaseParser.FROM)
                            | (1 << SqlBaseParser.ADD)
                            | (1 << SqlBaseParser.AS)
                            | (1 << SqlBaseParser.ALL)
                            | (1 << SqlBaseParser.DISTINCT)
                            | (1 << SqlBaseParser.WHERE)
                            | (1 << SqlBaseParser.GROUP)
                            | (1 << SqlBaseParser.BY)
                            | (1 << SqlBaseParser.GROUPING)
                            | (1 << SqlBaseParser.SETS)
                            | (1 << SqlBaseParser.CUBE)
                            | (1 << SqlBaseParser.ROLLUP)
                            | (1 << SqlBaseParser.ORDER)
                            | (1 << SqlBaseParser.HAVING)
                            | (1 << SqlBaseParser.LIMIT)
                            | (1 << SqlBaseParser.AT)
                            | (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                            | (1 << SqlBaseParser.NO)
                            | (1 << SqlBaseParser.EXISTS)
                            | (1 << SqlBaseParser.BETWEEN)
                            | (1 << SqlBaseParser.LIKE)
                            | (1 << SqlBaseParser.RLIKE)
                            | (1 << SqlBaseParser.IS)
                            | (1 << SqlBaseParser.NULL)
                            | (1 << SqlBaseParser.TRUE)
                            | (1 << SqlBaseParser.FALSE)
                            | (1 << SqlBaseParser.NULLS)
                            | (1 << SqlBaseParser.ASC)
                            | (1 << SqlBaseParser.DESC)
                            | (1 << SqlBaseParser.FOR)
                            | (1 << SqlBaseParser.INTERVAL)
                            | (1 << SqlBaseParser.CASE)
                            | (1 << SqlBaseParser.WHEN)
                            | (1 << SqlBaseParser.THEN)
                            | (1 << SqlBaseParser.ELSE)
                            | (1 << SqlBaseParser.END)
                            | (1 << SqlBaseParser.JOIN)
                            | (1 << SqlBaseParser.CROSS)
                            | (1 << SqlBaseParser.OUTER)
                            | (1 << SqlBaseParser.INNER)
                            | (1 << SqlBaseParser.LEFT)
                            | (1 << SqlBaseParser.SEMI)
                            | (1 << SqlBaseParser.RIGHT)
                            | (1 << SqlBaseParser.FULL)
                            | (1 << SqlBaseParser.NATURAL)
                            | (1 << SqlBaseParser.ON)
                            | (1 << SqlBaseParser.LATERAL)
                            | (1 << SqlBaseParser.WINDOW)
                            | (1 << SqlBaseParser.OVER)
                            | (1 << SqlBaseParser.PARTITION)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (SqlBaseParser.RANGE - 64))
                            | (1 << (SqlBaseParser.ROWS - 64))
                            | (1 << (SqlBaseParser.UNBOUNDED - 64))
                            | (1 << (SqlBaseParser.PRECEDING - 64))
                            | (1 << (SqlBaseParser.FOLLOWING - 64))
                            | (1 << (SqlBaseParser.CURRENT - 64))
                            | (1 << (SqlBaseParser.FIRST - 64))
                            | (1 << (SqlBaseParser.AFTER - 64))
                            | (1 << (SqlBaseParser.LAST - 64))
                            | (1 << (SqlBaseParser.ROW - 64))
                            | (1 << (SqlBaseParser.WITH - 64))
                            | (1 << (SqlBaseParser.VALUES - 64))
                            | (1 << (SqlBaseParser.CREATE - 64))
                            | (1 << (SqlBaseParser.TABLE - 64))
                            | (1 << (SqlBaseParser.DIRECTORY - 64))
                            | (1 << (SqlBaseParser.VIEW - 64))
                            | (1 << (SqlBaseParser.REPLACE - 64))
                            | (1 << (SqlBaseParser.INSERT - 64))
                            | (1 << (SqlBaseParser.DELETE - 64))
                            | (1 << (SqlBaseParser.INTO - 64))
                            | (1 << (SqlBaseParser.DESCRIBE - 64))
                            | (1 << (SqlBaseParser.EXPLAIN - 64))
                            | (1 << (SqlBaseParser.FORMAT - 64))
                            | (1 << (SqlBaseParser.LOGICAL - 64))
                            | (1 << (SqlBaseParser.CODEGEN - 64))
                            | (1 << (SqlBaseParser.COST - 64))
                            | (1 << (SqlBaseParser.CAST - 64))
                            | (1 << (SqlBaseParser.SHOW - 64))
                            | (1 << (SqlBaseParser.TABLES - 64))
                            | (1 << (SqlBaseParser.COLUMNS - 64))
                            | (1 << (SqlBaseParser.COLUMN - 64))
                            | (1 << (SqlBaseParser.USE - 64))
                            | (1 << (SqlBaseParser.PARTITIONS - 64))
                            | (1 << (SqlBaseParser.FUNCTIONS - 64))
                            | (1 << (SqlBaseParser.DROP - 64))
                            | (1 << (SqlBaseParser.UNION - 64))
                            | (1 << (SqlBaseParser.EXCEPT - 64))
                            | (1 << (SqlBaseParser.SETMINUS - 64))
                            | (1 << (SqlBaseParser.INTERSECT - 64))
                            | (1 << (SqlBaseParser.TO - 64))
                            | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                            | (1 << (SqlBaseParser.STRATIFY - 64))
                            | (1 << (SqlBaseParser.ALTER - 64))
                            | (1 << (SqlBaseParser.RENAME - 64))
                            | (1 << (SqlBaseParser.ARRAY - 64))
                            | (1 << (SqlBaseParser.MAP - 64))
                            | (1 << (SqlBaseParser.STRUCT - 64))
                            | (1 << (SqlBaseParser.COMMENT - 64))
                            | (1 << (SqlBaseParser.SET - 64))
                            | (1 << (SqlBaseParser.RESET - 64))
                            | (1 << (SqlBaseParser.DATA - 64))
                            | (1 << (SqlBaseParser.START - 64))
                            | (1 << (SqlBaseParser.TRANSACTION - 64))
                            | (1 << (SqlBaseParser.COMMIT - 64))
                            | (1 << (SqlBaseParser.ROLLBACK - 64))
                            | (1 << (SqlBaseParser.MACRO - 64))
                            | (1 << (SqlBaseParser.IGNORE - 64))
                            | (1 << (SqlBaseParser.BOTH - 64))
                            | (1 << (SqlBaseParser.LEADING - 64))
                            | (1 << (SqlBaseParser.TRAILING - 64))
                            | (1 << (SqlBaseParser.IF - 64))
                            | (1 << (SqlBaseParser.POSITION - 64))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 134)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 134))
                        & (
                            (1 << (SqlBaseParser.PLUS - 134))
                            | (1 << (SqlBaseParser.MINUS - 134))
                            | (1 << (SqlBaseParser.ASTERISK - 134))
                            | (1 << (SqlBaseParser.DIV - 134))
                            | (1 << (SqlBaseParser.TILDE - 134))
                            | (1 << (SqlBaseParser.PERCENTLIT - 134))
                            | (1 << (SqlBaseParser.BUCKET - 134))
                            | (1 << (SqlBaseParser.OUT - 134))
                            | (1 << (SqlBaseParser.OF - 134))
                            | (1 << (SqlBaseParser.SORT - 134))
                            | (1 << (SqlBaseParser.CLUSTER - 134))
                            | (1 << (SqlBaseParser.DISTRIBUTE - 134))
                            | (1 << (SqlBaseParser.OVERWRITE - 134))
                            | (1 << (SqlBaseParser.TRANSFORM - 134))
                            | (1 << (SqlBaseParser.REDUCE - 134))
                            | (1 << (SqlBaseParser.SERDE - 134))
                            | (1 << (SqlBaseParser.SERDEPROPERTIES - 134))
                            | (1 << (SqlBaseParser.RECORDREADER - 134))
                            | (1 << (SqlBaseParser.RECORDWRITER - 134))
                            | (1 << (SqlBaseParser.DELIMITED - 134))
                            | (1 << (SqlBaseParser.FIELDS - 134))
                            | (1 << (SqlBaseParser.TERMINATED - 134))
                            | (1 << (SqlBaseParser.COLLECTION - 134))
                            | (1 << (SqlBaseParser.ITEMS - 134))
                            | (1 << (SqlBaseParser.KEYS - 134))
                            | (1 << (SqlBaseParser.ESCAPED - 134))
                            | (1 << (SqlBaseParser.LINES - 134))
                            | (1 << (SqlBaseParser.SEPARATED - 134))
                            | (1 << (SqlBaseParser.FUNCTION - 134))
                            | (1 << (SqlBaseParser.EXTENDED - 134))
                            | (1 << (SqlBaseParser.REFRESH - 134))
                            | (1 << (SqlBaseParser.CLEAR - 134))
                            | (1 << (SqlBaseParser.CACHE - 134))
                            | (1 << (SqlBaseParser.UNCACHE - 134))
                            | (1 << (SqlBaseParser.LAZY - 134))
                            | (1 << (SqlBaseParser.FORMATTED - 134))
                            | (1 << (SqlBaseParser.GLOBAL - 134))
                            | (1 << (SqlBaseParser.TEMPORARY - 134))
                            | (1 << (SqlBaseParser.OPTIONS - 134))
                            | (1 << (SqlBaseParser.UNSET - 134))
                            | (1 << (SqlBaseParser.TBLPROPERTIES - 134))
                            | (1 << (SqlBaseParser.DBPROPERTIES - 134))
                            | (1 << (SqlBaseParser.BUCKETS - 134))
                            | (1 << (SqlBaseParser.SKEWED - 134))
                            | (1 << (SqlBaseParser.STORED - 134))
                            | (1 << (SqlBaseParser.DIRECTORIES - 134))
                            | (1 << (SqlBaseParser.LOCATION - 134))
                            | (1 << (SqlBaseParser.EXCHANGE - 134))
                            | (1 << (SqlBaseParser.ARCHIVE - 134))
                            | (1 << (SqlBaseParser.UNARCHIVE - 134))
                            | (1 << (SqlBaseParser.FILEFORMAT - 134))
                            | (1 << (SqlBaseParser.TOUCH - 134))
                            | (1 << (SqlBaseParser.COMPACT - 134))
                            | (1 << (SqlBaseParser.CONCATENATE - 134))
                            | (1 << (SqlBaseParser.CHANGE - 134))
                            | (1 << (SqlBaseParser.CASCADE - 134))
                            | (1 << (SqlBaseParser.RESTRICT - 134))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 198)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 198))
                        & (
                            (1 << (SqlBaseParser.CLUSTERED - 198))
                            | (1 << (SqlBaseParser.SORTED - 198))
                            | (1 << (SqlBaseParser.PURGE - 198))
                            | (1 << (SqlBaseParser.INPUTFORMAT - 198))
                            | (1 << (SqlBaseParser.OUTPUTFORMAT - 198))
                            | (1 << (SqlBaseParser.DATABASE - 198))
                            | (1 << (SqlBaseParser.DATABASES - 198))
                            | (1 << (SqlBaseParser.DFS - 198))
                            | (1 << (SqlBaseParser.TRUNCATE - 198))
                            | (1 << (SqlBaseParser.ANALYZE - 198))
                            | (1 << (SqlBaseParser.COMPUTE - 198))
                            | (1 << (SqlBaseParser.LIST - 198))
                            | (1 << (SqlBaseParser.STATISTICS - 198))
                            | (1 << (SqlBaseParser.PARTITIONED - 198))
                            | (1 << (SqlBaseParser.EXTERNAL - 198))
                            | (1 << (SqlBaseParser.DEFINED - 198))
                            | (1 << (SqlBaseParser.REVOKE - 198))
                            | (1 << (SqlBaseParser.GRANT - 198))
                            | (1 << (SqlBaseParser.LOCK - 198))
                            | (1 << (SqlBaseParser.UNLOCK - 198))
                            | (1 << (SqlBaseParser.MSCK - 198))
                            | (1 << (SqlBaseParser.REPAIR - 198))
                            | (1 << (SqlBaseParser.RECOVER - 198))
                            | (1 << (SqlBaseParser.EXPORT - 198))
                            | (1 << (SqlBaseParser.IMPORT - 198))
                            | (1 << (SqlBaseParser.LOAD - 198))
                            | (1 << (SqlBaseParser.ROLE - 198))
                            | (1 << (SqlBaseParser.ROLES - 198))
                            | (1 << (SqlBaseParser.COMPACTIONS - 198))
                            | (1 << (SqlBaseParser.PRINCIPALS - 198))
                            | (1 << (SqlBaseParser.TRANSACTIONS - 198))
                            | (1 << (SqlBaseParser.INDEX - 198))
                            | (1 << (SqlBaseParser.INDEXES - 198))
                            | (1 << (SqlBaseParser.LOCKS - 198))
                            | (1 << (SqlBaseParser.OPTION - 198))
                            | (1 << (SqlBaseParser.ANTI - 198))
                            | (1 << (SqlBaseParser.LOCAL - 198))
                            | (1 << (SqlBaseParser.INPATH - 198))
                            | (1 << (SqlBaseParser.STRING - 198))
                            | (1 << (SqlBaseParser.BIGINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.SMALLINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.TINYINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.INTEGER_VALUE - 198))
                            | (1 << (SqlBaseParser.DECIMAL_VALUE - 198))
                            | (1 << (SqlBaseParser.DOUBLE_LITERAL - 198))
                            | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 198))
                            | (1 << (SqlBaseParser.IDENTIFIER - 198))
                            | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198))
                        )
                    )
                    != 0
                )
            ):
                self.state = 1619
                self.sampleMethod()

            self.state = 1622
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SampleMethodContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sampleMethod

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class SampleByRowsContext(SampleMethodContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSampleByRows"):
                listener.enterSampleByRows(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSampleByRows"):
                listener.exitSampleByRows(self)

    class SampleByPercentileContext(SampleMethodContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None  # Token
            self.percentage = None  # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSampleByPercentile"):
                listener.enterSampleByPercentile(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSampleByPercentile"):
                listener.exitSampleByPercentile(self)

    class SampleByBucketContext(SampleMethodContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None  # Token
            self.numerator = None  # Token
            self.denominator = None  # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def INTEGER_VALUE(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSampleByBucket"):
                listener.enterSampleByBucket(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSampleByBucket"):
                listener.exitSampleByBucket(self)

    class SampleByBytesContext(SampleMethodContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None  # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSampleByBytes"):
                listener.enterSampleByBytes(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSampleByBytes"):
                listener.exitSampleByBytes(self)

    def sampleMethod(self):

        localctx = SqlBaseParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_sampleMethod)
        self._la = 0  # Token type
        try:
            self.state = 1648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 215, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 1624
                    localctx.negativeSign = self.match(SqlBaseParser.MINUS)

                self.state = 1627
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.INTEGER_VALUE
                    or _la == SqlBaseParser.DECIMAL_VALUE
                ):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1628
                self.match(SqlBaseParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1629
                self.expression()
                self.state = 1630
                self.match(SqlBaseParser.ROWS)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1632
                localctx.sampleType = self.match(SqlBaseParser.BUCKET)
                self.state = 1633
                localctx.numerator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1634
                self.match(SqlBaseParser.OUT)
                self.state = 1635
                self.match(SqlBaseParser.OF)
                self.state = 1636
                localctx.denominator = self.match(SqlBaseParser.INTEGER_VALUE)
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ON:
                    self.state = 1637
                    self.match(SqlBaseParser.ON)
                    self.state = 1643
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 213, self._ctx)
                    if la_ == 1:
                        self.state = 1638
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 1639
                        self.qualifiedName()
                        self.state = 1640
                        self.match(SqlBaseParser.T__0)
                        self.state = 1641
                        self.match(SqlBaseParser.T__1)
                        pass

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1647
                localctx.bytes = self.expression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierSeqContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierList"):
                listener.enterIdentifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierList"):
                listener.exitIdentifierList(self)

    def identifierList(self):

        localctx = SqlBaseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.match(SqlBaseParser.T__0)
            self.state = 1651
            self.identifierSeq()
            self.state = 1652
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierSeq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierSeq"):
                listener.enterIdentifierSeq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierSeq"):
                listener.exitIdentifierSeq(self)

    def identifierSeq(self):

        localctx = SqlBaseParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.identifier()
            self.state = 1659
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 216, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1655
                    self.match(SqlBaseParser.T__2)
                    self.state = 1656
                    self.identifier()
                self.state = 1661
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 216, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.OrderedIdentifierContext, i
                )

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderedIdentifierList"):
                listener.enterOrderedIdentifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderedIdentifierList"):
                listener.exitOrderedIdentifierList(self)

    def orderedIdentifierList(self):

        localctx = SqlBaseParser.OrderedIdentifierListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 108, self.RULE_orderedIdentifierList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self.match(SqlBaseParser.T__0)
            self.state = 1663
            self.orderedIdentifier()
            self.state = 1668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1664
                self.match(SqlBaseParser.T__2)
                self.state = 1665
                self.orderedIdentifier()
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1671
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None  # Token

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_orderedIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderedIdentifier"):
                listener.enterOrderedIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderedIdentifier"):
                listener.exitOrderedIdentifier(self)

    def orderedIdentifier(self):

        localctx = SqlBaseParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_orderedIdentifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.identifier()
            self.state = 1675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.ASC or _la == SqlBaseParser.DESC:
                self.state = 1674
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.ASC or _la == SqlBaseParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.IdentifierCommentContext, i
                )

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierCommentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierCommentList"):
                listener.enterIdentifierCommentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierCommentList"):
                listener.exitIdentifierCommentList(self)

    def identifierCommentList(self):

        localctx = SqlBaseParser.IdentifierCommentListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 112, self.RULE_identifierCommentList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.match(SqlBaseParser.T__0)
            self.state = 1678
            self.identifierComment()
            self.state = 1683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 1679
                self.match(SqlBaseParser.T__2)
                self.state = 1680
                self.identifierComment()
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1686
            self.match(SqlBaseParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifierComment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierComment"):
                listener.enterIdentifierComment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierComment"):
                listener.exitIdentifierComment(self)

    def identifierComment(self):

        localctx = SqlBaseParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_identifierComment)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.identifier()
            self.state = 1691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.COMMENT:
                self.state = 1689
                self.match(SqlBaseParser.COMMENT)
                self.state = 1690
                self.match(SqlBaseParser.STRING)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class TableValuedFunctionContext(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(SqlBaseParser.FunctionTableContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableValuedFunction"):
                listener.enterTableValuedFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableValuedFunction"):
                listener.exitTableValuedFunction(self)

    class InlineTableDefault2Context(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(SqlBaseParser.InlineTableContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineTableDefault2"):
                listener.enterInlineTableDefault2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineTableDefault2"):
                listener.exitInlineTableDefault2(self)

    class AliasedRelationContext(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext, 0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAliasedRelation"):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAliasedRelation"):
                listener.exitAliasedRelation(self)

    class AliasedQueryContext(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext, 0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAliasedQuery"):
                listener.enterAliasedQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAliasedQuery"):
                listener.exitAliasedQuery(self)

    class TableNameContext(RelationPrimaryContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.TableIdentifierContext, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext, 0)

        def sample(self):
            return self.getTypedRuleContext(SqlBaseParser.SampleContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableName"):
                listener.enterTableName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableName"):
                listener.exitTableName(self)

    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_relationPrimary)
        try:
            self.state = 1717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 224, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1693
                self.tableIdentifier()
                self.state = 1695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 221, self._ctx)
                if la_ == 1:
                    self.state = 1694
                    self.sample()

                self.state = 1697
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1699
                self.match(SqlBaseParser.T__0)
                self.state = 1700
                self.queryNoWith()
                self.state = 1701
                self.match(SqlBaseParser.T__1)
                self.state = 1703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 222, self._ctx)
                if la_ == 1:
                    self.state = 1702
                    self.sample()

                self.state = 1705
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1707
                self.match(SqlBaseParser.T__0)
                self.state = 1708
                self.relation()
                self.state = 1709
                self.match(SqlBaseParser.T__1)
                self.state = 1711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 223, self._ctx)
                if la_ == 1:
                    self.state = 1710
                    self.sample()

                self.state = 1713
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1715
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1716
                self.functionTable()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineTableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_inlineTable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineTable"):
                listener.enterInlineTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineTable"):
                listener.exitInlineTable(self)

    def inlineTable(self):

        localctx = SqlBaseParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.match(SqlBaseParser.VALUES)
            self.state = 1720
            self.expression()
            self.state = 1725
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 225, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1721
                    self.match(SqlBaseParser.T__2)
                    self.state = 1722
                    self.expression()
                self.state = 1727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 225, self._ctx)

            self.state = 1728
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def tableAlias(self):
            return self.getTypedRuleContext(SqlBaseParser.TableAliasContext, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionTable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionTable"):
                listener.enterFunctionTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionTable"):
                listener.exitFunctionTable(self)

    def functionTable(self):

        localctx = SqlBaseParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_functionTable)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.identifier()
            self.state = 1731
            self.match(SqlBaseParser.T__0)
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.T__0)
                            | (1 << SqlBaseParser.SELECT)
                            | (1 << SqlBaseParser.FROM)
                            | (1 << SqlBaseParser.ADD)
                            | (1 << SqlBaseParser.AS)
                            | (1 << SqlBaseParser.ALL)
                            | (1 << SqlBaseParser.DISTINCT)
                            | (1 << SqlBaseParser.WHERE)
                            | (1 << SqlBaseParser.GROUP)
                            | (1 << SqlBaseParser.BY)
                            | (1 << SqlBaseParser.GROUPING)
                            | (1 << SqlBaseParser.SETS)
                            | (1 << SqlBaseParser.CUBE)
                            | (1 << SqlBaseParser.ROLLUP)
                            | (1 << SqlBaseParser.ORDER)
                            | (1 << SqlBaseParser.HAVING)
                            | (1 << SqlBaseParser.LIMIT)
                            | (1 << SqlBaseParser.AT)
                            | (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                            | (1 << SqlBaseParser.NO)
                            | (1 << SqlBaseParser.EXISTS)
                            | (1 << SqlBaseParser.BETWEEN)
                            | (1 << SqlBaseParser.LIKE)
                            | (1 << SqlBaseParser.RLIKE)
                            | (1 << SqlBaseParser.IS)
                            | (1 << SqlBaseParser.NULL)
                            | (1 << SqlBaseParser.TRUE)
                            | (1 << SqlBaseParser.FALSE)
                            | (1 << SqlBaseParser.NULLS)
                            | (1 << SqlBaseParser.ASC)
                            | (1 << SqlBaseParser.DESC)
                            | (1 << SqlBaseParser.FOR)
                            | (1 << SqlBaseParser.INTERVAL)
                            | (1 << SqlBaseParser.CASE)
                            | (1 << SqlBaseParser.WHEN)
                            | (1 << SqlBaseParser.THEN)
                            | (1 << SqlBaseParser.ELSE)
                            | (1 << SqlBaseParser.END)
                            | (1 << SqlBaseParser.JOIN)
                            | (1 << SqlBaseParser.CROSS)
                            | (1 << SqlBaseParser.OUTER)
                            | (1 << SqlBaseParser.INNER)
                            | (1 << SqlBaseParser.LEFT)
                            | (1 << SqlBaseParser.SEMI)
                            | (1 << SqlBaseParser.RIGHT)
                            | (1 << SqlBaseParser.FULL)
                            | (1 << SqlBaseParser.NATURAL)
                            | (1 << SqlBaseParser.ON)
                            | (1 << SqlBaseParser.LATERAL)
                            | (1 << SqlBaseParser.WINDOW)
                            | (1 << SqlBaseParser.OVER)
                            | (1 << SqlBaseParser.PARTITION)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (SqlBaseParser.RANGE - 64))
                            | (1 << (SqlBaseParser.ROWS - 64))
                            | (1 << (SqlBaseParser.UNBOUNDED - 64))
                            | (1 << (SqlBaseParser.PRECEDING - 64))
                            | (1 << (SqlBaseParser.FOLLOWING - 64))
                            | (1 << (SqlBaseParser.CURRENT - 64))
                            | (1 << (SqlBaseParser.FIRST - 64))
                            | (1 << (SqlBaseParser.AFTER - 64))
                            | (1 << (SqlBaseParser.LAST - 64))
                            | (1 << (SqlBaseParser.ROW - 64))
                            | (1 << (SqlBaseParser.WITH - 64))
                            | (1 << (SqlBaseParser.VALUES - 64))
                            | (1 << (SqlBaseParser.CREATE - 64))
                            | (1 << (SqlBaseParser.TABLE - 64))
                            | (1 << (SqlBaseParser.DIRECTORY - 64))
                            | (1 << (SqlBaseParser.VIEW - 64))
                            | (1 << (SqlBaseParser.REPLACE - 64))
                            | (1 << (SqlBaseParser.INSERT - 64))
                            | (1 << (SqlBaseParser.DELETE - 64))
                            | (1 << (SqlBaseParser.INTO - 64))
                            | (1 << (SqlBaseParser.DESCRIBE - 64))
                            | (1 << (SqlBaseParser.EXPLAIN - 64))
                            | (1 << (SqlBaseParser.FORMAT - 64))
                            | (1 << (SqlBaseParser.LOGICAL - 64))
                            | (1 << (SqlBaseParser.CODEGEN - 64))
                            | (1 << (SqlBaseParser.COST - 64))
                            | (1 << (SqlBaseParser.CAST - 64))
                            | (1 << (SqlBaseParser.SHOW - 64))
                            | (1 << (SqlBaseParser.TABLES - 64))
                            | (1 << (SqlBaseParser.COLUMNS - 64))
                            | (1 << (SqlBaseParser.COLUMN - 64))
                            | (1 << (SqlBaseParser.USE - 64))
                            | (1 << (SqlBaseParser.PARTITIONS - 64))
                            | (1 << (SqlBaseParser.FUNCTIONS - 64))
                            | (1 << (SqlBaseParser.DROP - 64))
                            | (1 << (SqlBaseParser.UNION - 64))
                            | (1 << (SqlBaseParser.EXCEPT - 64))
                            | (1 << (SqlBaseParser.SETMINUS - 64))
                            | (1 << (SqlBaseParser.INTERSECT - 64))
                            | (1 << (SqlBaseParser.TO - 64))
                            | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                            | (1 << (SqlBaseParser.STRATIFY - 64))
                            | (1 << (SqlBaseParser.ALTER - 64))
                            | (1 << (SqlBaseParser.RENAME - 64))
                            | (1 << (SqlBaseParser.ARRAY - 64))
                            | (1 << (SqlBaseParser.MAP - 64))
                            | (1 << (SqlBaseParser.STRUCT - 64))
                            | (1 << (SqlBaseParser.COMMENT - 64))
                            | (1 << (SqlBaseParser.SET - 64))
                            | (1 << (SqlBaseParser.RESET - 64))
                            | (1 << (SqlBaseParser.DATA - 64))
                            | (1 << (SqlBaseParser.START - 64))
                            | (1 << (SqlBaseParser.TRANSACTION - 64))
                            | (1 << (SqlBaseParser.COMMIT - 64))
                            | (1 << (SqlBaseParser.ROLLBACK - 64))
                            | (1 << (SqlBaseParser.MACRO - 64))
                            | (1 << (SqlBaseParser.IGNORE - 64))
                            | (1 << (SqlBaseParser.BOTH - 64))
                            | (1 << (SqlBaseParser.LEADING - 64))
                            | (1 << (SqlBaseParser.TRAILING - 64))
                            | (1 << (SqlBaseParser.IF - 64))
                            | (1 << (SqlBaseParser.POSITION - 64))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 134)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 134))
                        & (
                            (1 << (SqlBaseParser.PLUS - 134))
                            | (1 << (SqlBaseParser.MINUS - 134))
                            | (1 << (SqlBaseParser.ASTERISK - 134))
                            | (1 << (SqlBaseParser.DIV - 134))
                            | (1 << (SqlBaseParser.TILDE - 134))
                            | (1 << (SqlBaseParser.PERCENTLIT - 134))
                            | (1 << (SqlBaseParser.BUCKET - 134))
                            | (1 << (SqlBaseParser.OUT - 134))
                            | (1 << (SqlBaseParser.OF - 134))
                            | (1 << (SqlBaseParser.SORT - 134))
                            | (1 << (SqlBaseParser.CLUSTER - 134))
                            | (1 << (SqlBaseParser.DISTRIBUTE - 134))
                            | (1 << (SqlBaseParser.OVERWRITE - 134))
                            | (1 << (SqlBaseParser.TRANSFORM - 134))
                            | (1 << (SqlBaseParser.REDUCE - 134))
                            | (1 << (SqlBaseParser.SERDE - 134))
                            | (1 << (SqlBaseParser.SERDEPROPERTIES - 134))
                            | (1 << (SqlBaseParser.RECORDREADER - 134))
                            | (1 << (SqlBaseParser.RECORDWRITER - 134))
                            | (1 << (SqlBaseParser.DELIMITED - 134))
                            | (1 << (SqlBaseParser.FIELDS - 134))
                            | (1 << (SqlBaseParser.TERMINATED - 134))
                            | (1 << (SqlBaseParser.COLLECTION - 134))
                            | (1 << (SqlBaseParser.ITEMS - 134))
                            | (1 << (SqlBaseParser.KEYS - 134))
                            | (1 << (SqlBaseParser.ESCAPED - 134))
                            | (1 << (SqlBaseParser.LINES - 134))
                            | (1 << (SqlBaseParser.SEPARATED - 134))
                            | (1 << (SqlBaseParser.FUNCTION - 134))
                            | (1 << (SqlBaseParser.EXTENDED - 134))
                            | (1 << (SqlBaseParser.REFRESH - 134))
                            | (1 << (SqlBaseParser.CLEAR - 134))
                            | (1 << (SqlBaseParser.CACHE - 134))
                            | (1 << (SqlBaseParser.UNCACHE - 134))
                            | (1 << (SqlBaseParser.LAZY - 134))
                            | (1 << (SqlBaseParser.FORMATTED - 134))
                            | (1 << (SqlBaseParser.GLOBAL - 134))
                            | (1 << (SqlBaseParser.TEMPORARY - 134))
                            | (1 << (SqlBaseParser.OPTIONS - 134))
                            | (1 << (SqlBaseParser.UNSET - 134))
                            | (1 << (SqlBaseParser.TBLPROPERTIES - 134))
                            | (1 << (SqlBaseParser.DBPROPERTIES - 134))
                            | (1 << (SqlBaseParser.BUCKETS - 134))
                            | (1 << (SqlBaseParser.SKEWED - 134))
                            | (1 << (SqlBaseParser.STORED - 134))
                            | (1 << (SqlBaseParser.DIRECTORIES - 134))
                            | (1 << (SqlBaseParser.LOCATION - 134))
                            | (1 << (SqlBaseParser.EXCHANGE - 134))
                            | (1 << (SqlBaseParser.ARCHIVE - 134))
                            | (1 << (SqlBaseParser.UNARCHIVE - 134))
                            | (1 << (SqlBaseParser.FILEFORMAT - 134))
                            | (1 << (SqlBaseParser.TOUCH - 134))
                            | (1 << (SqlBaseParser.COMPACT - 134))
                            | (1 << (SqlBaseParser.CONCATENATE - 134))
                            | (1 << (SqlBaseParser.CHANGE - 134))
                            | (1 << (SqlBaseParser.CASCADE - 134))
                            | (1 << (SqlBaseParser.RESTRICT - 134))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 198)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 198))
                        & (
                            (1 << (SqlBaseParser.CLUSTERED - 198))
                            | (1 << (SqlBaseParser.SORTED - 198))
                            | (1 << (SqlBaseParser.PURGE - 198))
                            | (1 << (SqlBaseParser.INPUTFORMAT - 198))
                            | (1 << (SqlBaseParser.OUTPUTFORMAT - 198))
                            | (1 << (SqlBaseParser.DATABASE - 198))
                            | (1 << (SqlBaseParser.DATABASES - 198))
                            | (1 << (SqlBaseParser.DFS - 198))
                            | (1 << (SqlBaseParser.TRUNCATE - 198))
                            | (1 << (SqlBaseParser.ANALYZE - 198))
                            | (1 << (SqlBaseParser.COMPUTE - 198))
                            | (1 << (SqlBaseParser.LIST - 198))
                            | (1 << (SqlBaseParser.STATISTICS - 198))
                            | (1 << (SqlBaseParser.PARTITIONED - 198))
                            | (1 << (SqlBaseParser.EXTERNAL - 198))
                            | (1 << (SqlBaseParser.DEFINED - 198))
                            | (1 << (SqlBaseParser.REVOKE - 198))
                            | (1 << (SqlBaseParser.GRANT - 198))
                            | (1 << (SqlBaseParser.LOCK - 198))
                            | (1 << (SqlBaseParser.UNLOCK - 198))
                            | (1 << (SqlBaseParser.MSCK - 198))
                            | (1 << (SqlBaseParser.REPAIR - 198))
                            | (1 << (SqlBaseParser.RECOVER - 198))
                            | (1 << (SqlBaseParser.EXPORT - 198))
                            | (1 << (SqlBaseParser.IMPORT - 198))
                            | (1 << (SqlBaseParser.LOAD - 198))
                            | (1 << (SqlBaseParser.ROLE - 198))
                            | (1 << (SqlBaseParser.ROLES - 198))
                            | (1 << (SqlBaseParser.COMPACTIONS - 198))
                            | (1 << (SqlBaseParser.PRINCIPALS - 198))
                            | (1 << (SqlBaseParser.TRANSACTIONS - 198))
                            | (1 << (SqlBaseParser.INDEX - 198))
                            | (1 << (SqlBaseParser.INDEXES - 198))
                            | (1 << (SqlBaseParser.LOCKS - 198))
                            | (1 << (SqlBaseParser.OPTION - 198))
                            | (1 << (SqlBaseParser.ANTI - 198))
                            | (1 << (SqlBaseParser.LOCAL - 198))
                            | (1 << (SqlBaseParser.INPATH - 198))
                            | (1 << (SqlBaseParser.STRING - 198))
                            | (1 << (SqlBaseParser.BIGINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.SMALLINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.TINYINT_LITERAL - 198))
                            | (1 << (SqlBaseParser.INTEGER_VALUE - 198))
                            | (1 << (SqlBaseParser.DECIMAL_VALUE - 198))
                            | (1 << (SqlBaseParser.DOUBLE_LITERAL - 198))
                            | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 198))
                            | (1 << (SqlBaseParser.IDENTIFIER - 198))
                            | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198))
                        )
                    )
                    != 0
                )
            ):
                self.state = 1732
                self.expression()
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1733
                    self.match(SqlBaseParser.T__2)
                    self.state = 1734
                    self.expression()
                    self.state = 1739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 1742
            self.match(SqlBaseParser.T__1)
            self.state = 1743
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableAlias"):
                listener.enterTableAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableAlias"):
                listener.exitTableAlias(self)

    def tableAlias(self):

        localctx = SqlBaseParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 230, self._ctx)
            if la_ == 1:
                self.state = 1746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 228, self._ctx)
                if la_ == 1:
                    self.state = 1745
                    self.match(SqlBaseParser.AS)

                self.state = 1748
                self.strictIdentifier()
                self.state = 1750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 229, self._ctx)
                if la_ == 1:
                    self.state = 1749
                    self.identifierList()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RowFormatContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_rowFormat

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class RowFormatSerdeContext(RowFormatContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.name = None  # Token
            self.props = None  # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(SqlBaseParser.TablePropertyListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRowFormatSerde"):
                listener.enterRowFormatSerde(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRowFormatSerde"):
                listener.exitRowFormatSerde(self)

    class RowFormatDelimitedContext(RowFormatContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None  # Token
            self.escapedBy = None  # Token
            self.collectionItemsTerminatedBy = None  # Token
            self.keysTerminatedBy = None  # Token
            self.linesSeparatedBy = None  # Token
            self.nullDefinedAs = None  # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def TERMINATED(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.TERMINATED)
            else:
                return self.getToken(SqlBaseParser.TERMINATED, i)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRowFormatDelimited"):
                listener.enterRowFormatDelimited(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRowFormatDelimited"):
                listener.exitRowFormatDelimited(self)

    def rowFormat(self):

        localctx = SqlBaseParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_rowFormat)
        try:
            self.state = 1803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 238, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1754
                self.match(SqlBaseParser.ROW)
                self.state = 1755
                self.match(SqlBaseParser.FORMAT)
                self.state = 1756
                self.match(SqlBaseParser.SERDE)
                self.state = 1757
                localctx.name = self.match(SqlBaseParser.STRING)
                self.state = 1761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 231, self._ctx)
                if la_ == 1:
                    self.state = 1758
                    self.match(SqlBaseParser.WITH)
                    self.state = 1759
                    self.match(SqlBaseParser.SERDEPROPERTIES)
                    self.state = 1760
                    localctx.props = self.tablePropertyList()

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1763
                self.match(SqlBaseParser.ROW)
                self.state = 1764
                self.match(SqlBaseParser.FORMAT)
                self.state = 1765
                self.match(SqlBaseParser.DELIMITED)
                self.state = 1775
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 233, self._ctx)
                if la_ == 1:
                    self.state = 1766
                    self.match(SqlBaseParser.FIELDS)
                    self.state = 1767
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1768
                    self.match(SqlBaseParser.BY)
                    self.state = 1769
                    localctx.fieldsTerminatedBy = self.match(SqlBaseParser.STRING)
                    self.state = 1773
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 232, self._ctx)
                    if la_ == 1:
                        self.state = 1770
                        self.match(SqlBaseParser.ESCAPED)
                        self.state = 1771
                        self.match(SqlBaseParser.BY)
                        self.state = 1772
                        localctx.escapedBy = self.match(SqlBaseParser.STRING)

                self.state = 1782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 234, self._ctx)
                if la_ == 1:
                    self.state = 1777
                    self.match(SqlBaseParser.COLLECTION)
                    self.state = 1778
                    self.match(SqlBaseParser.ITEMS)
                    self.state = 1779
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1780
                    self.match(SqlBaseParser.BY)
                    self.state = 1781
                    localctx.collectionItemsTerminatedBy = self.match(
                        SqlBaseParser.STRING
                    )

                self.state = 1789
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 235, self._ctx)
                if la_ == 1:
                    self.state = 1784
                    self.match(SqlBaseParser.MAP)
                    self.state = 1785
                    self.match(SqlBaseParser.KEYS)
                    self.state = 1786
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1787
                    self.match(SqlBaseParser.BY)
                    self.state = 1788
                    localctx.keysTerminatedBy = self.match(SqlBaseParser.STRING)

                self.state = 1795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 236, self._ctx)
                if la_ == 1:
                    self.state = 1791
                    self.match(SqlBaseParser.LINES)
                    self.state = 1792
                    self.match(SqlBaseParser.TERMINATED)
                    self.state = 1793
                    self.match(SqlBaseParser.BY)
                    self.state = 1794
                    localctx.linesSeparatedBy = self.match(SqlBaseParser.STRING)

                self.state = 1801
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 237, self._ctx)
                if la_ == 1:
                    self.state = 1797
                    self.match(SqlBaseParser.NULL)
                    self.state = 1798
                    self.match(SqlBaseParser.DEFINED)
                    self.state = 1799
                    self.match(SqlBaseParser.AS)
                    self.state = 1800
                    localctx.nullDefinedAs = self.match(SqlBaseParser.STRING)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None  # IdentifierContext
            self.table = None  # IdentifierContext

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableIdentifier"):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableIdentifier"):
                listener.exitTableIdentifier(self)

    def tableIdentifier(self):

        localctx = SqlBaseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 239, self._ctx)
            if la_ == 1:
                self.state = 1805
                localctx.db = self.identifier()
                self.state = 1806
                self.match(SqlBaseParser.T__3)

            self.state = 1810
            localctx.table = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None  # IdentifierContext
            self.function = None  # IdentifierContext

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionIdentifier"):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionIdentifier"):
                listener.exitFunctionIdentifier(self)

    def functionIdentifier(self):

        localctx = SqlBaseParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 240, self._ctx)
            if la_ == 1:
                self.state = 1812
                localctx.db = self.identifier()
                self.state = 1813
                self.match(SqlBaseParser.T__3)

            self.state = 1817
            localctx.function = self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def identifierList(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierListContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedExpression"):
                listener.enterNamedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedExpression"):
                listener.exitNamedExpression(self)

    def namedExpression(self):

        localctx = SqlBaseParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.expression()
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 243, self._ctx)
            if la_ == 1:
                self.state = 1821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 241, self._ctx)
                if la_ == 1:
                    self.state = 1820
                    self.match(SqlBaseParser.AS)

                self.state = 1825
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    SqlBaseParser.SELECT,
                    SqlBaseParser.FROM,
                    SqlBaseParser.ADD,
                    SqlBaseParser.AS,
                    SqlBaseParser.ALL,
                    SqlBaseParser.DISTINCT,
                    SqlBaseParser.WHERE,
                    SqlBaseParser.GROUP,
                    SqlBaseParser.BY,
                    SqlBaseParser.GROUPING,
                    SqlBaseParser.SETS,
                    SqlBaseParser.CUBE,
                    SqlBaseParser.ROLLUP,
                    SqlBaseParser.ORDER,
                    SqlBaseParser.HAVING,
                    SqlBaseParser.LIMIT,
                    SqlBaseParser.AT,
                    SqlBaseParser.OR,
                    SqlBaseParser.AND,
                    SqlBaseParser.IN,
                    SqlBaseParser.NOT,
                    SqlBaseParser.NO,
                    SqlBaseParser.EXISTS,
                    SqlBaseParser.BETWEEN,
                    SqlBaseParser.LIKE,
                    SqlBaseParser.RLIKE,
                    SqlBaseParser.IS,
                    SqlBaseParser.NULL,
                    SqlBaseParser.TRUE,
                    SqlBaseParser.FALSE,
                    SqlBaseParser.NULLS,
                    SqlBaseParser.ASC,
                    SqlBaseParser.DESC,
                    SqlBaseParser.FOR,
                    SqlBaseParser.INTERVAL,
                    SqlBaseParser.CASE,
                    SqlBaseParser.WHEN,
                    SqlBaseParser.THEN,
                    SqlBaseParser.ELSE,
                    SqlBaseParser.END,
                    SqlBaseParser.JOIN,
                    SqlBaseParser.CROSS,
                    SqlBaseParser.OUTER,
                    SqlBaseParser.INNER,
                    SqlBaseParser.LEFT,
                    SqlBaseParser.SEMI,
                    SqlBaseParser.RIGHT,
                    SqlBaseParser.FULL,
                    SqlBaseParser.NATURAL,
                    SqlBaseParser.ON,
                    SqlBaseParser.LATERAL,
                    SqlBaseParser.WINDOW,
                    SqlBaseParser.OVER,
                    SqlBaseParser.PARTITION,
                    SqlBaseParser.RANGE,
                    SqlBaseParser.ROWS,
                    SqlBaseParser.UNBOUNDED,
                    SqlBaseParser.PRECEDING,
                    SqlBaseParser.FOLLOWING,
                    SqlBaseParser.CURRENT,
                    SqlBaseParser.FIRST,
                    SqlBaseParser.AFTER,
                    SqlBaseParser.LAST,
                    SqlBaseParser.ROW,
                    SqlBaseParser.WITH,
                    SqlBaseParser.VALUES,
                    SqlBaseParser.CREATE,
                    SqlBaseParser.TABLE,
                    SqlBaseParser.DIRECTORY,
                    SqlBaseParser.VIEW,
                    SqlBaseParser.REPLACE,
                    SqlBaseParser.INSERT,
                    SqlBaseParser.DELETE,
                    SqlBaseParser.INTO,
                    SqlBaseParser.DESCRIBE,
                    SqlBaseParser.EXPLAIN,
                    SqlBaseParser.FORMAT,
                    SqlBaseParser.LOGICAL,
                    SqlBaseParser.CODEGEN,
                    SqlBaseParser.COST,
                    SqlBaseParser.CAST,
                    SqlBaseParser.SHOW,
                    SqlBaseParser.TABLES,
                    SqlBaseParser.COLUMNS,
                    SqlBaseParser.COLUMN,
                    SqlBaseParser.USE,
                    SqlBaseParser.PARTITIONS,
                    SqlBaseParser.FUNCTIONS,
                    SqlBaseParser.DROP,
                    SqlBaseParser.UNION,
                    SqlBaseParser.EXCEPT,
                    SqlBaseParser.SETMINUS,
                    SqlBaseParser.INTERSECT,
                    SqlBaseParser.TO,
                    SqlBaseParser.TABLESAMPLE,
                    SqlBaseParser.STRATIFY,
                    SqlBaseParser.ALTER,
                    SqlBaseParser.RENAME,
                    SqlBaseParser.ARRAY,
                    SqlBaseParser.MAP,
                    SqlBaseParser.STRUCT,
                    SqlBaseParser.COMMENT,
                    SqlBaseParser.SET,
                    SqlBaseParser.RESET,
                    SqlBaseParser.DATA,
                    SqlBaseParser.START,
                    SqlBaseParser.TRANSACTION,
                    SqlBaseParser.COMMIT,
                    SqlBaseParser.ROLLBACK,
                    SqlBaseParser.MACRO,
                    SqlBaseParser.IGNORE,
                    SqlBaseParser.BOTH,
                    SqlBaseParser.LEADING,
                    SqlBaseParser.TRAILING,
                    SqlBaseParser.IF,
                    SqlBaseParser.POSITION,
                    SqlBaseParser.DIV,
                    SqlBaseParser.PERCENTLIT,
                    SqlBaseParser.BUCKET,
                    SqlBaseParser.OUT,
                    SqlBaseParser.OF,
                    SqlBaseParser.SORT,
                    SqlBaseParser.CLUSTER,
                    SqlBaseParser.DISTRIBUTE,
                    SqlBaseParser.OVERWRITE,
                    SqlBaseParser.TRANSFORM,
                    SqlBaseParser.REDUCE,
                    SqlBaseParser.SERDE,
                    SqlBaseParser.SERDEPROPERTIES,
                    SqlBaseParser.RECORDREADER,
                    SqlBaseParser.RECORDWRITER,
                    SqlBaseParser.DELIMITED,
                    SqlBaseParser.FIELDS,
                    SqlBaseParser.TERMINATED,
                    SqlBaseParser.COLLECTION,
                    SqlBaseParser.ITEMS,
                    SqlBaseParser.KEYS,
                    SqlBaseParser.ESCAPED,
                    SqlBaseParser.LINES,
                    SqlBaseParser.SEPARATED,
                    SqlBaseParser.FUNCTION,
                    SqlBaseParser.EXTENDED,
                    SqlBaseParser.REFRESH,
                    SqlBaseParser.CLEAR,
                    SqlBaseParser.CACHE,
                    SqlBaseParser.UNCACHE,
                    SqlBaseParser.LAZY,
                    SqlBaseParser.FORMATTED,
                    SqlBaseParser.GLOBAL,
                    SqlBaseParser.TEMPORARY,
                    SqlBaseParser.OPTIONS,
                    SqlBaseParser.UNSET,
                    SqlBaseParser.TBLPROPERTIES,
                    SqlBaseParser.DBPROPERTIES,
                    SqlBaseParser.BUCKETS,
                    SqlBaseParser.SKEWED,
                    SqlBaseParser.STORED,
                    SqlBaseParser.DIRECTORIES,
                    SqlBaseParser.LOCATION,
                    SqlBaseParser.EXCHANGE,
                    SqlBaseParser.ARCHIVE,
                    SqlBaseParser.UNARCHIVE,
                    SqlBaseParser.FILEFORMAT,
                    SqlBaseParser.TOUCH,
                    SqlBaseParser.COMPACT,
                    SqlBaseParser.CONCATENATE,
                    SqlBaseParser.CHANGE,
                    SqlBaseParser.CASCADE,
                    SqlBaseParser.RESTRICT,
                    SqlBaseParser.CLUSTERED,
                    SqlBaseParser.SORTED,
                    SqlBaseParser.PURGE,
                    SqlBaseParser.INPUTFORMAT,
                    SqlBaseParser.OUTPUTFORMAT,
                    SqlBaseParser.DATABASE,
                    SqlBaseParser.DATABASES,
                    SqlBaseParser.DFS,
                    SqlBaseParser.TRUNCATE,
                    SqlBaseParser.ANALYZE,
                    SqlBaseParser.COMPUTE,
                    SqlBaseParser.LIST,
                    SqlBaseParser.STATISTICS,
                    SqlBaseParser.PARTITIONED,
                    SqlBaseParser.EXTERNAL,
                    SqlBaseParser.DEFINED,
                    SqlBaseParser.REVOKE,
                    SqlBaseParser.GRANT,
                    SqlBaseParser.LOCK,
                    SqlBaseParser.UNLOCK,
                    SqlBaseParser.MSCK,
                    SqlBaseParser.REPAIR,
                    SqlBaseParser.RECOVER,
                    SqlBaseParser.EXPORT,
                    SqlBaseParser.IMPORT,
                    SqlBaseParser.LOAD,
                    SqlBaseParser.ROLE,
                    SqlBaseParser.ROLES,
                    SqlBaseParser.COMPACTIONS,
                    SqlBaseParser.PRINCIPALS,
                    SqlBaseParser.TRANSACTIONS,
                    SqlBaseParser.INDEX,
                    SqlBaseParser.INDEXES,
                    SqlBaseParser.LOCKS,
                    SqlBaseParser.OPTION,
                    SqlBaseParser.ANTI,
                    SqlBaseParser.LOCAL,
                    SqlBaseParser.INPATH,
                    SqlBaseParser.IDENTIFIER,
                    SqlBaseParser.BACKQUOTED_IDENTIFIER,
                ]:
                    self.state = 1823
                    self.identifier()
                    pass
                elif token in [SqlBaseParser.T__0]:
                    self.state = 1824
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedExpressionSeq

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedExpressionSeq"):
                listener.enterNamedExpressionSeq(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedExpressionSeq"):
                listener.exitNamedExpressionSeq(self)

    def namedExpressionSeq(self):

        localctx = SqlBaseParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.namedExpression()
            self.state = 1834
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 244, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1830
                    self.match(SqlBaseParser.T__2)
                    self.state = 1831
                    self.namedExpression()
                self.state = 1836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 244, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self):

        localctx = SqlBaseParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1837
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class LogicalNotContext(BooleanExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalNot"):
                listener.enterLogicalNot(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalNot"):
                listener.exitLogicalNot(self)

    class BooleanDefaultContext(BooleanExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicated(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicatedContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanDefault"):
                listener.enterBooleanDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanDefault"):
                listener.exitBooleanDefault(self)

    class ExistsContext(BooleanExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExists"):
                listener.enterExists(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExists"):
                listener.exitExists(self)

    class LogicalBinaryContext(BooleanExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None  # BooleanExpressionContext
            self.operator = None  # Token
            self.right = None  # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(
                    SqlBaseParser.BooleanExpressionContext, i
                )

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalBinary"):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalBinary"):
                listener.exitLogicalBinary(self)

    def booleanExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 245, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1840
                self.match(SqlBaseParser.NOT)
                self.state = 1841
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1842
                self.match(SqlBaseParser.EXISTS)
                self.state = 1843
                self.match(SqlBaseParser.T__0)
                self.state = 1844
                self.query()
                self.state = 1845
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BooleanDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1847
                self.predicated()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 247, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1856
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 246, self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(
                            self,
                            SqlBaseParser.BooleanExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_booleanExpression
                        )
                        self.state = 1850
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 1851
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 1852
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(
                            self,
                            SqlBaseParser.BooleanExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_booleanExpression
                        )
                        self.state = 1853
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 1854
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 1855
                        localctx.right = self.booleanExpression(2)
                        pass

                self.state = 1860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 247, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PredicatedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, 0)

        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicated

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicated"):
                listener.enterPredicated(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicated"):
                listener.exitPredicated(self)

    def predicated(self):

        localctx = SqlBaseParser.PredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_predicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.valueExpression(0)
            self.state = 1863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 248, self._ctx)
            if la_ == 1:
                self.state = 1862
                self.predicate()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None  # Token
            self.lower = None  # ValueExpressionContext
            self.upper = None  # ValueExpressionContext
            self.pattern = None  # ValueExpressionContext
            self.right = None  # ValueExpressionContext

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicate"):
                listener.enterPredicate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicate"):
                listener.exitPredicate(self)

    def predicate(self):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_predicate)
        self._la = 0  # Token type
        try:
            self.state = 1913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 256, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1865
                    self.match(SqlBaseParser.NOT)

                self.state = 1868
                localctx.kind = self.match(SqlBaseParser.BETWEEN)
                self.state = 1869
                localctx.lower = self.valueExpression(0)
                self.state = 1870
                self.match(SqlBaseParser.AND)
                self.state = 1871
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1873
                    self.match(SqlBaseParser.NOT)

                self.state = 1876
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1877
                self.match(SqlBaseParser.T__0)
                self.state = 1878
                self.expression()
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SqlBaseParser.T__2:
                    self.state = 1879
                    self.match(SqlBaseParser.T__2)
                    self.state = 1880
                    self.expression()
                    self.state = 1885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1886
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1888
                    self.match(SqlBaseParser.NOT)

                self.state = 1891
                localctx.kind = self.match(SqlBaseParser.IN)
                self.state = 1892
                self.match(SqlBaseParser.T__0)
                self.state = 1893
                self.query()
                self.state = 1894
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1896
                    self.match(SqlBaseParser.NOT)

                self.state = 1899
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not (_la == SqlBaseParser.LIKE or _la == SqlBaseParser.RLIKE):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1900
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1901
                self.match(SqlBaseParser.IS)
                self.state = 1903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1902
                    self.match(SqlBaseParser.NOT)

                self.state = 1905
                localctx.kind = self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1906
                self.match(SqlBaseParser.IS)
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.NOT:
                    self.state = 1907
                    self.match(SqlBaseParser.NOT)

                self.state = 1910
                localctx.kind = self.match(SqlBaseParser.DISTINCT)
                self.state = 1911
                self.match(SqlBaseParser.FROM)
                self.state = 1912
                localctx.right = self.valueExpression(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ValueExpressionDefaultContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueExpressionDefault"):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueExpressionDefault"):
                listener.exitValueExpressionDefault(self)

    class ComparisonContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None  # ValueExpressionContext
            self.right = None  # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(SqlBaseParser.ComparisonOperatorContext, 0)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparison"):
                listener.enterComparison(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparison"):
                listener.exitComparison(self)

    class ArithmeticBinaryContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None  # ValueExpressionContext
            self.operator = None  # Token
            self.right = None  # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmeticBinary"):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmeticBinary"):
                listener.exitArithmeticBinary(self)

    class ArithmeticUnaryContext(ValueExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None  # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmeticUnary"):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmeticUnary"):
                listener.exitArithmeticUnary(self)

    def valueExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_valueExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 257, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1916
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1917
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 134)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 134))
                            & (
                                (1 << (SqlBaseParser.PLUS - 134))
                                | (1 << (SqlBaseParser.MINUS - 134))
                                | (1 << (SqlBaseParser.TILDE - 134))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1918
                self.valueExpression(7)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 1942
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 259, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1940
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 258, self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1921
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 1922
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (
                            (
                                (((_la - 136)) & ~0x3F) == 0
                                and (
                                    (1 << (_la - 136))
                                    & (
                                        (1 << (SqlBaseParser.ASTERISK - 136))
                                        | (1 << (SqlBaseParser.SLASH - 136))
                                        | (1 << (SqlBaseParser.PERCENT - 136))
                                        | (1 << (SqlBaseParser.DIV - 136))
                                    )
                                )
                                != 0
                            )
                        ):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1923
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1924
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 1925
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not (
                            (
                                (((_la - 134)) & ~0x3F) == 0
                                and (
                                    (1 << (_la - 134))
                                    & (
                                        (1 << (SqlBaseParser.PLUS - 134))
                                        | (1 << (SqlBaseParser.MINUS - 134))
                                        | (1 << (SqlBaseParser.CONCAT_PIPE - 134))
                                    )
                                )
                                != 0
                            )
                        ):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1926
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1927
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 1928
                        localctx.operator = self.match(SqlBaseParser.AMPERSAND)
                        self.state = 1929
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1930
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 1931
                        localctx.operator = self.match(SqlBaseParser.HAT)
                        self.state = 1932
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1933
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 1934
                        localctx.operator = self.match(SqlBaseParser.PIPE)
                        self.state = 1935
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = SqlBaseParser.ComparisonContext(
                            self,
                            SqlBaseParser.ValueExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_valueExpression
                        )
                        self.state = 1936
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 1)"
                            )
                        self.state = 1937
                        self.comparisonOperator()
                        self.state = 1938
                        localctx.right = self.valueExpression(2)
                        pass

                self.state = 1944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 259, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class StructContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None  # NamedExpressionContext
            self.argument = list()  # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def namedExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStruct"):
                listener.enterStruct(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStruct"):
                listener.exitStruct(self)

    class DereferenceContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None  # PrimaryExpressionContext
            self.fieldName = None  # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDereference"):
                listener.enterDereference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDereference"):
                listener.exitDereference(self)

    class SimpleCaseContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None  # ExpressionContext
            self.elseExpression = None  # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def whenClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext, i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleCase"):
                listener.enterSimpleCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleCase"):
                listener.exitSimpleCase(self)

    class ColumnReferenceContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnReference"):
                listener.enterColumnReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnReference"):
                listener.exitColumnReference(self)

    class RowConstructorContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRowConstructor"):
                listener.enterRowConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRowConstructor"):
                listener.exitRowConstructor(self)

    class LastContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLast"):
                listener.enterLast(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLast"):
                listener.exitLast(self)

    class StarContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStar"):
                listener.enterStar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStar"):
                listener.exitStar(self)

    class SubscriptContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None  # PrimaryExpressionContext
            self.index = None  # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext, 0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubscript"):
                listener.enterSubscript(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubscript"):
                listener.exitSubscript(self)

    class SubqueryExpressionContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubqueryExpression"):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubqueryExpression"):
                listener.exitSubqueryExpression(self)

    class CastContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCast"):
                listener.enterCast(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCast"):
                listener.exitCast(self)

    class ConstantDefaultContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(SqlBaseParser.ConstantContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantDefault"):
                listener.enterConstantDefault(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantDefault"):
                listener.exitConstantDefault(self)

    class ParenthesizedExpressionContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesizedExpression"):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesizedExpression"):
                listener.exitParenthesizedExpression(self)

    class FunctionCallContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None  # ExpressionContext
            self.argument = list()  # of ExpressionContexts
            self.trimOption = None  # Token
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(SqlBaseParser.QualifiedNameContext, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def setQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantifierContext, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionCall"):
                listener.enterFunctionCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionCall"):
                listener.exitFunctionCall(self)

    class SearchedCaseContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None  # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def whenClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext, i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSearchedCase"):
                listener.enterSearchedCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSearchedCase"):
                listener.exitSearchedCase(self)

    class PositionContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None  # ValueExpressionContext
            self.str_ = None  # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def valueExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPosition"):
                listener.enterPosition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPosition"):
                listener.exitPosition(self)

    class FirstContext(PrimaryExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFirst"):
                listener.enterFirst(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFirst"):
                listener.exitFirst(self)

    def primaryExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_primaryExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 273, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1946
                self.match(SqlBaseParser.CASE)
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1947
                    self.whenClause()
                    self.state = 1950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.WHEN):
                        break

                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ELSE:
                    self.state = 1952
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1953
                    localctx.elseExpression = self.expression()

                self.state = 1956
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1958
                self.match(SqlBaseParser.CASE)
                self.state = 1959
                localctx.value = self.expression()
                self.state = 1961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1960
                    self.whenClause()
                    self.state = 1963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.WHEN):
                        break

                self.state = 1967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.ELSE:
                    self.state = 1965
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1966
                    localctx.elseExpression = self.expression()

                self.state = 1969
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1971
                self.match(SqlBaseParser.CAST)
                self.state = 1972
                self.match(SqlBaseParser.T__0)
                self.state = 1973
                self.expression()
                self.state = 1974
                self.match(SqlBaseParser.AS)
                self.state = 1975
                self.dataType()
                self.state = 1976
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1978
                self.match(SqlBaseParser.STRUCT)
                self.state = 1979
                self.match(SqlBaseParser.T__0)
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.RANGE - 64))
                                | (1 << (SqlBaseParser.ROWS - 64))
                                | (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.FIRST - 64))
                                | (1 << (SqlBaseParser.AFTER - 64))
                                | (1 << (SqlBaseParser.LAST - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.DIRECTORY - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.COST - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.SETMINUS - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IGNORE - 64))
                                | (1 << (SqlBaseParser.BOTH - 64))
                                | (1 << (SqlBaseParser.LEADING - 64))
                                | (1 << (SqlBaseParser.TRAILING - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.POSITION - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 134)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 134))
                            & (
                                (1 << (SqlBaseParser.PLUS - 134))
                                | (1 << (SqlBaseParser.MINUS - 134))
                                | (1 << (SqlBaseParser.ASTERISK - 134))
                                | (1 << (SqlBaseParser.DIV - 134))
                                | (1 << (SqlBaseParser.TILDE - 134))
                                | (1 << (SqlBaseParser.PERCENTLIT - 134))
                                | (1 << (SqlBaseParser.BUCKET - 134))
                                | (1 << (SqlBaseParser.OUT - 134))
                                | (1 << (SqlBaseParser.OF - 134))
                                | (1 << (SqlBaseParser.SORT - 134))
                                | (1 << (SqlBaseParser.CLUSTER - 134))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 134))
                                | (1 << (SqlBaseParser.OVERWRITE - 134))
                                | (1 << (SqlBaseParser.TRANSFORM - 134))
                                | (1 << (SqlBaseParser.REDUCE - 134))
                                | (1 << (SqlBaseParser.SERDE - 134))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 134))
                                | (1 << (SqlBaseParser.RECORDREADER - 134))
                                | (1 << (SqlBaseParser.RECORDWRITER - 134))
                                | (1 << (SqlBaseParser.DELIMITED - 134))
                                | (1 << (SqlBaseParser.FIELDS - 134))
                                | (1 << (SqlBaseParser.TERMINATED - 134))
                                | (1 << (SqlBaseParser.COLLECTION - 134))
                                | (1 << (SqlBaseParser.ITEMS - 134))
                                | (1 << (SqlBaseParser.KEYS - 134))
                                | (1 << (SqlBaseParser.ESCAPED - 134))
                                | (1 << (SqlBaseParser.LINES - 134))
                                | (1 << (SqlBaseParser.SEPARATED - 134))
                                | (1 << (SqlBaseParser.FUNCTION - 134))
                                | (1 << (SqlBaseParser.EXTENDED - 134))
                                | (1 << (SqlBaseParser.REFRESH - 134))
                                | (1 << (SqlBaseParser.CLEAR - 134))
                                | (1 << (SqlBaseParser.CACHE - 134))
                                | (1 << (SqlBaseParser.UNCACHE - 134))
                                | (1 << (SqlBaseParser.LAZY - 134))
                                | (1 << (SqlBaseParser.FORMATTED - 134))
                                | (1 << (SqlBaseParser.GLOBAL - 134))
                                | (1 << (SqlBaseParser.TEMPORARY - 134))
                                | (1 << (SqlBaseParser.OPTIONS - 134))
                                | (1 << (SqlBaseParser.UNSET - 134))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 134))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 134))
                                | (1 << (SqlBaseParser.BUCKETS - 134))
                                | (1 << (SqlBaseParser.SKEWED - 134))
                                | (1 << (SqlBaseParser.STORED - 134))
                                | (1 << (SqlBaseParser.DIRECTORIES - 134))
                                | (1 << (SqlBaseParser.LOCATION - 134))
                                | (1 << (SqlBaseParser.EXCHANGE - 134))
                                | (1 << (SqlBaseParser.ARCHIVE - 134))
                                | (1 << (SqlBaseParser.UNARCHIVE - 134))
                                | (1 << (SqlBaseParser.FILEFORMAT - 134))
                                | (1 << (SqlBaseParser.TOUCH - 134))
                                | (1 << (SqlBaseParser.COMPACT - 134))
                                | (1 << (SqlBaseParser.CONCATENATE - 134))
                                | (1 << (SqlBaseParser.CHANGE - 134))
                                | (1 << (SqlBaseParser.CASCADE - 134))
                                | (1 << (SqlBaseParser.RESTRICT - 134))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 198)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 198))
                            & (
                                (1 << (SqlBaseParser.CLUSTERED - 198))
                                | (1 << (SqlBaseParser.SORTED - 198))
                                | (1 << (SqlBaseParser.PURGE - 198))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 198))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 198))
                                | (1 << (SqlBaseParser.DATABASE - 198))
                                | (1 << (SqlBaseParser.DATABASES - 198))
                                | (1 << (SqlBaseParser.DFS - 198))
                                | (1 << (SqlBaseParser.TRUNCATE - 198))
                                | (1 << (SqlBaseParser.ANALYZE - 198))
                                | (1 << (SqlBaseParser.COMPUTE - 198))
                                | (1 << (SqlBaseParser.LIST - 198))
                                | (1 << (SqlBaseParser.STATISTICS - 198))
                                | (1 << (SqlBaseParser.PARTITIONED - 198))
                                | (1 << (SqlBaseParser.EXTERNAL - 198))
                                | (1 << (SqlBaseParser.DEFINED - 198))
                                | (1 << (SqlBaseParser.REVOKE - 198))
                                | (1 << (SqlBaseParser.GRANT - 198))
                                | (1 << (SqlBaseParser.LOCK - 198))
                                | (1 << (SqlBaseParser.UNLOCK - 198))
                                | (1 << (SqlBaseParser.MSCK - 198))
                                | (1 << (SqlBaseParser.REPAIR - 198))
                                | (1 << (SqlBaseParser.RECOVER - 198))
                                | (1 << (SqlBaseParser.EXPORT - 198))
                                | (1 << (SqlBaseParser.IMPORT - 198))
                                | (1 << (SqlBaseParser.LOAD - 198))
                                | (1 << (SqlBaseParser.ROLE - 198))
                                | (1 << (SqlBaseParser.ROLES - 198))
                                | (1 << (SqlBaseParser.COMPACTIONS - 198))
                                | (1 << (SqlBaseParser.PRINCIPALS - 198))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 198))
                                | (1 << (SqlBaseParser.INDEX - 198))
                                | (1 << (SqlBaseParser.INDEXES - 198))
                                | (1 << (SqlBaseParser.LOCKS - 198))
                                | (1 << (SqlBaseParser.OPTION - 198))
                                | (1 << (SqlBaseParser.ANTI - 198))
                                | (1 << (SqlBaseParser.LOCAL - 198))
                                | (1 << (SqlBaseParser.INPATH - 198))
                                | (1 << (SqlBaseParser.STRING - 198))
                                | (1 << (SqlBaseParser.BIGINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.SMALLINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.TINYINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.INTEGER_VALUE - 198))
                                | (1 << (SqlBaseParser.DECIMAL_VALUE - 198))
                                | (1 << (SqlBaseParser.DOUBLE_LITERAL - 198))
                                | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 198))
                                | (1 << (SqlBaseParser.IDENTIFIER - 198))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 1980
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 1985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 1981
                        self.match(SqlBaseParser.T__2)
                        self.state = 1982
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 1987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1990
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1991
                self.match(SqlBaseParser.FIRST)
                self.state = 1992
                self.match(SqlBaseParser.T__0)
                self.state = 1993
                self.expression()
                self.state = 1996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IGNORE:
                    self.state = 1994
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 1995
                    self.match(SqlBaseParser.NULLS)

                self.state = 1998
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2000
                self.match(SqlBaseParser.LAST)
                self.state = 2001
                self.match(SqlBaseParser.T__0)
                self.state = 2002
                self.expression()
                self.state = 2005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.IGNORE:
                    self.state = 2003
                    self.match(SqlBaseParser.IGNORE)
                    self.state = 2004
                    self.match(SqlBaseParser.NULLS)

                self.state = 2007
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2009
                self.match(SqlBaseParser.POSITION)
                self.state = 2010
                self.match(SqlBaseParser.T__0)
                self.state = 2011
                localctx.substr = self.valueExpression(0)
                self.state = 2012
                self.match(SqlBaseParser.IN)
                self.state = 2013
                localctx.str_ = self.valueExpression(0)
                self.state = 2014
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2016
                self.constant()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2017
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2018
                self.qualifiedName()
                self.state = 2019
                self.match(SqlBaseParser.T__3)
                self.state = 2020
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2022
                self.match(SqlBaseParser.T__0)
                self.state = 2023
                self.namedExpression()
                self.state = 2026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2024
                    self.match(SqlBaseParser.T__2)
                    self.state = 2025
                    self.namedExpression()
                    self.state = 2028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.T__2):
                        break

                self.state = 2030
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2032
                self.match(SqlBaseParser.T__0)
                self.state = 2033
                self.query()
                self.state = 2034
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2036
                self.qualifiedName()
                self.state = 2037
                self.match(SqlBaseParser.T__0)
                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SqlBaseParser.T__0)
                                | (1 << SqlBaseParser.SELECT)
                                | (1 << SqlBaseParser.FROM)
                                | (1 << SqlBaseParser.ADD)
                                | (1 << SqlBaseParser.AS)
                                | (1 << SqlBaseParser.ALL)
                                | (1 << SqlBaseParser.DISTINCT)
                                | (1 << SqlBaseParser.WHERE)
                                | (1 << SqlBaseParser.GROUP)
                                | (1 << SqlBaseParser.BY)
                                | (1 << SqlBaseParser.GROUPING)
                                | (1 << SqlBaseParser.SETS)
                                | (1 << SqlBaseParser.CUBE)
                                | (1 << SqlBaseParser.ROLLUP)
                                | (1 << SqlBaseParser.ORDER)
                                | (1 << SqlBaseParser.HAVING)
                                | (1 << SqlBaseParser.LIMIT)
                                | (1 << SqlBaseParser.AT)
                                | (1 << SqlBaseParser.OR)
                                | (1 << SqlBaseParser.AND)
                                | (1 << SqlBaseParser.IN)
                                | (1 << SqlBaseParser.NOT)
                                | (1 << SqlBaseParser.NO)
                                | (1 << SqlBaseParser.EXISTS)
                                | (1 << SqlBaseParser.BETWEEN)
                                | (1 << SqlBaseParser.LIKE)
                                | (1 << SqlBaseParser.RLIKE)
                                | (1 << SqlBaseParser.IS)
                                | (1 << SqlBaseParser.NULL)
                                | (1 << SqlBaseParser.TRUE)
                                | (1 << SqlBaseParser.FALSE)
                                | (1 << SqlBaseParser.NULLS)
                                | (1 << SqlBaseParser.ASC)
                                | (1 << SqlBaseParser.DESC)
                                | (1 << SqlBaseParser.FOR)
                                | (1 << SqlBaseParser.INTERVAL)
                                | (1 << SqlBaseParser.CASE)
                                | (1 << SqlBaseParser.WHEN)
                                | (1 << SqlBaseParser.THEN)
                                | (1 << SqlBaseParser.ELSE)
                                | (1 << SqlBaseParser.END)
                                | (1 << SqlBaseParser.JOIN)
                                | (1 << SqlBaseParser.CROSS)
                                | (1 << SqlBaseParser.OUTER)
                                | (1 << SqlBaseParser.INNER)
                                | (1 << SqlBaseParser.LEFT)
                                | (1 << SqlBaseParser.SEMI)
                                | (1 << SqlBaseParser.RIGHT)
                                | (1 << SqlBaseParser.FULL)
                                | (1 << SqlBaseParser.NATURAL)
                                | (1 << SqlBaseParser.ON)
                                | (1 << SqlBaseParser.LATERAL)
                                | (1 << SqlBaseParser.WINDOW)
                                | (1 << SqlBaseParser.OVER)
                                | (1 << SqlBaseParser.PARTITION)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (SqlBaseParser.RANGE - 64))
                                | (1 << (SqlBaseParser.ROWS - 64))
                                | (1 << (SqlBaseParser.UNBOUNDED - 64))
                                | (1 << (SqlBaseParser.PRECEDING - 64))
                                | (1 << (SqlBaseParser.FOLLOWING - 64))
                                | (1 << (SqlBaseParser.CURRENT - 64))
                                | (1 << (SqlBaseParser.FIRST - 64))
                                | (1 << (SqlBaseParser.AFTER - 64))
                                | (1 << (SqlBaseParser.LAST - 64))
                                | (1 << (SqlBaseParser.ROW - 64))
                                | (1 << (SqlBaseParser.WITH - 64))
                                | (1 << (SqlBaseParser.VALUES - 64))
                                | (1 << (SqlBaseParser.CREATE - 64))
                                | (1 << (SqlBaseParser.TABLE - 64))
                                | (1 << (SqlBaseParser.DIRECTORY - 64))
                                | (1 << (SqlBaseParser.VIEW - 64))
                                | (1 << (SqlBaseParser.REPLACE - 64))
                                | (1 << (SqlBaseParser.INSERT - 64))
                                | (1 << (SqlBaseParser.DELETE - 64))
                                | (1 << (SqlBaseParser.INTO - 64))
                                | (1 << (SqlBaseParser.DESCRIBE - 64))
                                | (1 << (SqlBaseParser.EXPLAIN - 64))
                                | (1 << (SqlBaseParser.FORMAT - 64))
                                | (1 << (SqlBaseParser.LOGICAL - 64))
                                | (1 << (SqlBaseParser.CODEGEN - 64))
                                | (1 << (SqlBaseParser.COST - 64))
                                | (1 << (SqlBaseParser.CAST - 64))
                                | (1 << (SqlBaseParser.SHOW - 64))
                                | (1 << (SqlBaseParser.TABLES - 64))
                                | (1 << (SqlBaseParser.COLUMNS - 64))
                                | (1 << (SqlBaseParser.COLUMN - 64))
                                | (1 << (SqlBaseParser.USE - 64))
                                | (1 << (SqlBaseParser.PARTITIONS - 64))
                                | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                | (1 << (SqlBaseParser.DROP - 64))
                                | (1 << (SqlBaseParser.UNION - 64))
                                | (1 << (SqlBaseParser.EXCEPT - 64))
                                | (1 << (SqlBaseParser.SETMINUS - 64))
                                | (1 << (SqlBaseParser.INTERSECT - 64))
                                | (1 << (SqlBaseParser.TO - 64))
                                | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                | (1 << (SqlBaseParser.STRATIFY - 64))
                                | (1 << (SqlBaseParser.ALTER - 64))
                                | (1 << (SqlBaseParser.RENAME - 64))
                                | (1 << (SqlBaseParser.ARRAY - 64))
                                | (1 << (SqlBaseParser.MAP - 64))
                                | (1 << (SqlBaseParser.STRUCT - 64))
                                | (1 << (SqlBaseParser.COMMENT - 64))
                                | (1 << (SqlBaseParser.SET - 64))
                                | (1 << (SqlBaseParser.RESET - 64))
                                | (1 << (SqlBaseParser.DATA - 64))
                                | (1 << (SqlBaseParser.START - 64))
                                | (1 << (SqlBaseParser.TRANSACTION - 64))
                                | (1 << (SqlBaseParser.COMMIT - 64))
                                | (1 << (SqlBaseParser.ROLLBACK - 64))
                                | (1 << (SqlBaseParser.MACRO - 64))
                                | (1 << (SqlBaseParser.IGNORE - 64))
                                | (1 << (SqlBaseParser.BOTH - 64))
                                | (1 << (SqlBaseParser.LEADING - 64))
                                | (1 << (SqlBaseParser.TRAILING - 64))
                                | (1 << (SqlBaseParser.IF - 64))
                                | (1 << (SqlBaseParser.POSITION - 64))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 134)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 134))
                            & (
                                (1 << (SqlBaseParser.PLUS - 134))
                                | (1 << (SqlBaseParser.MINUS - 134))
                                | (1 << (SqlBaseParser.ASTERISK - 134))
                                | (1 << (SqlBaseParser.DIV - 134))
                                | (1 << (SqlBaseParser.TILDE - 134))
                                | (1 << (SqlBaseParser.PERCENTLIT - 134))
                                | (1 << (SqlBaseParser.BUCKET - 134))
                                | (1 << (SqlBaseParser.OUT - 134))
                                | (1 << (SqlBaseParser.OF - 134))
                                | (1 << (SqlBaseParser.SORT - 134))
                                | (1 << (SqlBaseParser.CLUSTER - 134))
                                | (1 << (SqlBaseParser.DISTRIBUTE - 134))
                                | (1 << (SqlBaseParser.OVERWRITE - 134))
                                | (1 << (SqlBaseParser.TRANSFORM - 134))
                                | (1 << (SqlBaseParser.REDUCE - 134))
                                | (1 << (SqlBaseParser.SERDE - 134))
                                | (1 << (SqlBaseParser.SERDEPROPERTIES - 134))
                                | (1 << (SqlBaseParser.RECORDREADER - 134))
                                | (1 << (SqlBaseParser.RECORDWRITER - 134))
                                | (1 << (SqlBaseParser.DELIMITED - 134))
                                | (1 << (SqlBaseParser.FIELDS - 134))
                                | (1 << (SqlBaseParser.TERMINATED - 134))
                                | (1 << (SqlBaseParser.COLLECTION - 134))
                                | (1 << (SqlBaseParser.ITEMS - 134))
                                | (1 << (SqlBaseParser.KEYS - 134))
                                | (1 << (SqlBaseParser.ESCAPED - 134))
                                | (1 << (SqlBaseParser.LINES - 134))
                                | (1 << (SqlBaseParser.SEPARATED - 134))
                                | (1 << (SqlBaseParser.FUNCTION - 134))
                                | (1 << (SqlBaseParser.EXTENDED - 134))
                                | (1 << (SqlBaseParser.REFRESH - 134))
                                | (1 << (SqlBaseParser.CLEAR - 134))
                                | (1 << (SqlBaseParser.CACHE - 134))
                                | (1 << (SqlBaseParser.UNCACHE - 134))
                                | (1 << (SqlBaseParser.LAZY - 134))
                                | (1 << (SqlBaseParser.FORMATTED - 134))
                                | (1 << (SqlBaseParser.GLOBAL - 134))
                                | (1 << (SqlBaseParser.TEMPORARY - 134))
                                | (1 << (SqlBaseParser.OPTIONS - 134))
                                | (1 << (SqlBaseParser.UNSET - 134))
                                | (1 << (SqlBaseParser.TBLPROPERTIES - 134))
                                | (1 << (SqlBaseParser.DBPROPERTIES - 134))
                                | (1 << (SqlBaseParser.BUCKETS - 134))
                                | (1 << (SqlBaseParser.SKEWED - 134))
                                | (1 << (SqlBaseParser.STORED - 134))
                                | (1 << (SqlBaseParser.DIRECTORIES - 134))
                                | (1 << (SqlBaseParser.LOCATION - 134))
                                | (1 << (SqlBaseParser.EXCHANGE - 134))
                                | (1 << (SqlBaseParser.ARCHIVE - 134))
                                | (1 << (SqlBaseParser.UNARCHIVE - 134))
                                | (1 << (SqlBaseParser.FILEFORMAT - 134))
                                | (1 << (SqlBaseParser.TOUCH - 134))
                                | (1 << (SqlBaseParser.COMPACT - 134))
                                | (1 << (SqlBaseParser.CONCATENATE - 134))
                                | (1 << (SqlBaseParser.CHANGE - 134))
                                | (1 << (SqlBaseParser.CASCADE - 134))
                                | (1 << (SqlBaseParser.RESTRICT - 134))
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 198)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 198))
                            & (
                                (1 << (SqlBaseParser.CLUSTERED - 198))
                                | (1 << (SqlBaseParser.SORTED - 198))
                                | (1 << (SqlBaseParser.PURGE - 198))
                                | (1 << (SqlBaseParser.INPUTFORMAT - 198))
                                | (1 << (SqlBaseParser.OUTPUTFORMAT - 198))
                                | (1 << (SqlBaseParser.DATABASE - 198))
                                | (1 << (SqlBaseParser.DATABASES - 198))
                                | (1 << (SqlBaseParser.DFS - 198))
                                | (1 << (SqlBaseParser.TRUNCATE - 198))
                                | (1 << (SqlBaseParser.ANALYZE - 198))
                                | (1 << (SqlBaseParser.COMPUTE - 198))
                                | (1 << (SqlBaseParser.LIST - 198))
                                | (1 << (SqlBaseParser.STATISTICS - 198))
                                | (1 << (SqlBaseParser.PARTITIONED - 198))
                                | (1 << (SqlBaseParser.EXTERNAL - 198))
                                | (1 << (SqlBaseParser.DEFINED - 198))
                                | (1 << (SqlBaseParser.REVOKE - 198))
                                | (1 << (SqlBaseParser.GRANT - 198))
                                | (1 << (SqlBaseParser.LOCK - 198))
                                | (1 << (SqlBaseParser.UNLOCK - 198))
                                | (1 << (SqlBaseParser.MSCK - 198))
                                | (1 << (SqlBaseParser.REPAIR - 198))
                                | (1 << (SqlBaseParser.RECOVER - 198))
                                | (1 << (SqlBaseParser.EXPORT - 198))
                                | (1 << (SqlBaseParser.IMPORT - 198))
                                | (1 << (SqlBaseParser.LOAD - 198))
                                | (1 << (SqlBaseParser.ROLE - 198))
                                | (1 << (SqlBaseParser.ROLES - 198))
                                | (1 << (SqlBaseParser.COMPACTIONS - 198))
                                | (1 << (SqlBaseParser.PRINCIPALS - 198))
                                | (1 << (SqlBaseParser.TRANSACTIONS - 198))
                                | (1 << (SqlBaseParser.INDEX - 198))
                                | (1 << (SqlBaseParser.INDEXES - 198))
                                | (1 << (SqlBaseParser.LOCKS - 198))
                                | (1 << (SqlBaseParser.OPTION - 198))
                                | (1 << (SqlBaseParser.ANTI - 198))
                                | (1 << (SqlBaseParser.LOCAL - 198))
                                | (1 << (SqlBaseParser.INPATH - 198))
                                | (1 << (SqlBaseParser.STRING - 198))
                                | (1 << (SqlBaseParser.BIGINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.SMALLINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.TINYINT_LITERAL - 198))
                                | (1 << (SqlBaseParser.INTEGER_VALUE - 198))
                                | (1 << (SqlBaseParser.DECIMAL_VALUE - 198))
                                | (1 << (SqlBaseParser.DOUBLE_LITERAL - 198))
                                | (1 << (SqlBaseParser.BIGDECIMAL_LITERAL - 198))
                                | (1 << (SqlBaseParser.IDENTIFIER - 198))
                                | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 198))
                            )
                        )
                        != 0
                    )
                ):
                    self.state = 2039
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 269, self._ctx)
                    if la_ == 1:
                        self.state = 2038
                        self.setQuantifier()

                    self.state = 2041
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 2046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 2042
                        self.match(SqlBaseParser.T__2)
                        self.state = 2043
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 2048
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 2051
                self.match(SqlBaseParser.T__1)
                self.state = 2054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 272, self._ctx)
                if la_ == 1:
                    self.state = 2052
                    self.match(SqlBaseParser.OVER)
                    self.state = 2053
                    self.windowSpec()

                pass

            elif la_ == 14:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2056
                self.qualifiedName()
                self.state = 2057
                self.match(SqlBaseParser.T__0)
                self.state = 2058
                localctx.trimOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 121)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 121))
                            & (
                                (1 << (SqlBaseParser.BOTH - 121))
                                | (1 << (SqlBaseParser.LEADING - 121))
                                | (1 << (SqlBaseParser.TRAILING - 121))
                            )
                        )
                        != 0
                    )
                ):
                    localctx.trimOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2059
                localctx._expression = self.expression()
                localctx.argument.append(localctx._expression)
                self.state = 2060
                self.match(SqlBaseParser.FROM)
                self.state = 2061
                localctx._expression = self.expression()
                localctx.argument.append(localctx._expression)
                self.state = 2062
                self.match(SqlBaseParser.T__1)
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2064
                self.identifier()
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2065
                self.match(SqlBaseParser.T__0)
                self.state = 2066
                self.expression()
                self.state = 2067
                self.match(SqlBaseParser.T__1)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 2081
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 275, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2079
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 274, self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.SubscriptContext(
                            self,
                            SqlBaseParser.PrimaryExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primaryExpression
                        )
                        self.state = 2071
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 2072
                        self.match(SqlBaseParser.T__6)
                        self.state = 2073
                        localctx.index = self.valueExpression(0)
                        self.state = 2074
                        self.match(SqlBaseParser.T__7)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.DereferenceContext(
                            self,
                            SqlBaseParser.PrimaryExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_primaryExpression
                        )
                        self.state = 2076
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 2077
                        self.match(SqlBaseParser.T__3)
                        self.state = 2078
                        localctx.fieldName = self.identifier()
                        pass

                self.state = 2083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 275, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConstantContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_constant

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class NullLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullLiteral"):
                listener.enterNullLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullLiteral"):
                listener.exitNullLiteral(self)

    class StringLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.STRING)
            else:
                return self.getToken(SqlBaseParser.STRING, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStringLiteral"):
                listener.enterStringLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStringLiteral"):
                listener.exitStringLiteral(self)

    class TypeConstructorContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeConstructor"):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeConstructor"):
                listener.exitTypeConstructor(self)

    class IntervalLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalLiteral"):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalLiteral"):
                listener.exitIntervalLiteral(self)

    class NumericLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(SqlBaseParser.NumberContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteral"):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteral"):
                listener.exitNumericLiteral(self)

    class BooleanLiteralContext(ConstantContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanValueContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanLiteral"):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanLiteral"):
                listener.exitBooleanLiteral(self)

    def constant(self):

        localctx = SqlBaseParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_constant)
        try:
            self.state = 2096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 277, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2084
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2085
                self.interval()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2086
                self.identifier()
                self.state = 2087
                self.match(SqlBaseParser.STRING)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2089
                self.number()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2090
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2092
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2091
                        self.match(SqlBaseParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2094
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 276, self._ctx)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(SqlBaseParser.NEQJ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(SqlBaseParser.NSEQ, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_comparisonOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparisonOperator"):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparisonOperator"):
                listener.exitComparisonOperator(self)

    def comparisonOperator(self):

        localctx = SqlBaseParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_comparisonOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2098
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 126)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 126))
                        & (
                            (1 << (SqlBaseParser.EQ - 126))
                            | (1 << (SqlBaseParser.NSEQ - 126))
                            | (1 << (SqlBaseParser.NEQ - 126))
                            | (1 << (SqlBaseParser.NEQJ - 126))
                            | (1 << (SqlBaseParser.LT - 126))
                            | (1 << (SqlBaseParser.LTE - 126))
                            | (1 << (SqlBaseParser.GT - 126))
                            | (1 << (SqlBaseParser.GTE - 126))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def TILDE(self):
            return self.getToken(SqlBaseParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(SqlBaseParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(SqlBaseParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(SqlBaseParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(SqlBaseParser.HAT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_arithmeticOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmeticOperator"):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmeticOperator"):
                listener.exitArithmeticOperator(self)

    def arithmeticOperator(self):

        localctx = SqlBaseParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_arithmeticOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2100
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 134)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 134))
                        & (
                            (1 << (SqlBaseParser.PLUS - 134))
                            | (1 << (SqlBaseParser.MINUS - 134))
                            | (1 << (SqlBaseParser.ASTERISK - 134))
                            | (1 << (SqlBaseParser.SLASH - 134))
                            | (1 << (SqlBaseParser.PERCENT - 134))
                            | (1 << (SqlBaseParser.DIV - 134))
                            | (1 << (SqlBaseParser.TILDE - 134))
                            | (1 << (SqlBaseParser.AMPERSAND - 134))
                            | (1 << (SqlBaseParser.PIPE - 134))
                            | (1 << (SqlBaseParser.CONCAT_PIPE - 134))
                            | (1 << (SqlBaseParser.HAT - 134))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicateOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPredicateOperator"):
                listener.enterPredicateOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPredicateOperator"):
                listener.exitPredicateOperator(self)

    def predicateOperator(self):

        localctx = SqlBaseParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_predicateOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2102
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanValue"):
                listener.enterBooleanValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanValue"):
                listener.exitBooleanValue(self)

    def booleanValue(self):

        localctx = SqlBaseParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_booleanValue)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2104
            _la = self._input.LA(1)
            if not (_la == SqlBaseParser.TRUE or _la == SqlBaseParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def intervalField(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_interval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterval"):
                listener.enterInterval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterval"):
                listener.exitInterval(self)

    def interval(self):

        localctx = SqlBaseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.match(SqlBaseParser.INTERVAL)
            self.state = 2110
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 278, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2107
                    self.intervalField()
                self.state = 2112
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 278, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalFieldContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None  # IntervalValueContext
            self.unit = None  # IdentifierContext
            self.to = None  # IdentifierContext

        def intervalValue(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalValueContext, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalField"):
                listener.enterIntervalField(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalField"):
                listener.exitIntervalField(self)

    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_intervalField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2113
            localctx.value = self.intervalValue()
            self.state = 2114
            localctx.unit = self.identifier()
            self.state = 2117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 279, self._ctx)
            if la_ == 1:
                self.state = 2115
                self.match(SqlBaseParser.TO)
                self.state = 2116
                localctx.to = self.identifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalValue"):
                listener.enterIntervalValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalValue"):
                listener.exitIntervalValue(self)

    def intervalValue(self):

        localctx = SqlBaseParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_intervalValue)
        self._la = 0  # Token type
        try:
            self.state = 2124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.PLUS,
                SqlBaseParser.MINUS,
                SqlBaseParser.INTEGER_VALUE,
                SqlBaseParser.DECIMAL_VALUE,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.PLUS or _la == SqlBaseParser.MINUS:
                    self.state = 2119
                    _la = self._input.LA(1)
                    if not (_la == SqlBaseParser.PLUS or _la == SqlBaseParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 2122
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.INTEGER_VALUE
                    or _la == SqlBaseParser.DECIMAL_VALUE
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [SqlBaseParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2123
                self.match(SqlBaseParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColPositionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colPosition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColPosition"):
                listener.enterColPosition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColPosition"):
                listener.exitColPosition(self)

    def colPosition(self):

        localctx = SqlBaseParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_colPosition)
        try:
            self.state = 2129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2126
                self.match(SqlBaseParser.FIRST)
                pass
            elif token in [SqlBaseParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2127
                self.match(SqlBaseParser.AFTER)
                self.state = 2128
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ComplexDataTypeContext(DataTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.complex_ = None  # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def dataType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, i)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def complexColTypeList(self):
            return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComplexDataType"):
                listener.enterComplexDataType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComplexDataType"):
                listener.exitComplexDataType(self)

    class PrimitiveDataTypeContext(DataTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def INTEGER_VALUE(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.INTEGER_VALUE)
            else:
                return self.getToken(SqlBaseParser.INTEGER_VALUE, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitiveDataType"):
                listener.enterPrimitiveDataType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitiveDataType"):
                listener.exitPrimitiveDataType(self)

    def dataType(self):

        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dataType)
        self._la = 0  # Token type
        try:
            self.state = 2165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 287, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2131
                localctx.complex_ = self.match(SqlBaseParser.ARRAY)
                self.state = 2132
                self.match(SqlBaseParser.LT)
                self.state = 2133
                self.dataType()
                self.state = 2134
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2136
                localctx.complex_ = self.match(SqlBaseParser.MAP)
                self.state = 2137
                self.match(SqlBaseParser.LT)
                self.state = 2138
                self.dataType()
                self.state = 2139
                self.match(SqlBaseParser.T__2)
                self.state = 2140
                self.dataType()
                self.state = 2141
                self.match(SqlBaseParser.GT)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2143
                localctx.complex_ = self.match(SqlBaseParser.STRUCT)
                self.state = 2150
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.LT]:
                    self.state = 2144
                    self.match(SqlBaseParser.LT)
                    self.state = 2146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        (
                            ((_la) & ~0x3F) == 0
                            and (
                                (1 << _la)
                                & (
                                    (1 << SqlBaseParser.SELECT)
                                    | (1 << SqlBaseParser.FROM)
                                    | (1 << SqlBaseParser.ADD)
                                    | (1 << SqlBaseParser.AS)
                                    | (1 << SqlBaseParser.ALL)
                                    | (1 << SqlBaseParser.DISTINCT)
                                    | (1 << SqlBaseParser.WHERE)
                                    | (1 << SqlBaseParser.GROUP)
                                    | (1 << SqlBaseParser.BY)
                                    | (1 << SqlBaseParser.GROUPING)
                                    | (1 << SqlBaseParser.SETS)
                                    | (1 << SqlBaseParser.CUBE)
                                    | (1 << SqlBaseParser.ROLLUP)
                                    | (1 << SqlBaseParser.ORDER)
                                    | (1 << SqlBaseParser.HAVING)
                                    | (1 << SqlBaseParser.LIMIT)
                                    | (1 << SqlBaseParser.AT)
                                    | (1 << SqlBaseParser.OR)
                                    | (1 << SqlBaseParser.AND)
                                    | (1 << SqlBaseParser.IN)
                                    | (1 << SqlBaseParser.NOT)
                                    | (1 << SqlBaseParser.NO)
                                    | (1 << SqlBaseParser.EXISTS)
                                    | (1 << SqlBaseParser.BETWEEN)
                                    | (1 << SqlBaseParser.LIKE)
                                    | (1 << SqlBaseParser.RLIKE)
                                    | (1 << SqlBaseParser.IS)
                                    | (1 << SqlBaseParser.NULL)
                                    | (1 << SqlBaseParser.TRUE)
                                    | (1 << SqlBaseParser.FALSE)
                                    | (1 << SqlBaseParser.NULLS)
                                    | (1 << SqlBaseParser.ASC)
                                    | (1 << SqlBaseParser.DESC)
                                    | (1 << SqlBaseParser.FOR)
                                    | (1 << SqlBaseParser.INTERVAL)
                                    | (1 << SqlBaseParser.CASE)
                                    | (1 << SqlBaseParser.WHEN)
                                    | (1 << SqlBaseParser.THEN)
                                    | (1 << SqlBaseParser.ELSE)
                                    | (1 << SqlBaseParser.END)
                                    | (1 << SqlBaseParser.JOIN)
                                    | (1 << SqlBaseParser.CROSS)
                                    | (1 << SqlBaseParser.OUTER)
                                    | (1 << SqlBaseParser.INNER)
                                    | (1 << SqlBaseParser.LEFT)
                                    | (1 << SqlBaseParser.SEMI)
                                    | (1 << SqlBaseParser.RIGHT)
                                    | (1 << SqlBaseParser.FULL)
                                    | (1 << SqlBaseParser.NATURAL)
                                    | (1 << SqlBaseParser.ON)
                                    | (1 << SqlBaseParser.LATERAL)
                                    | (1 << SqlBaseParser.WINDOW)
                                    | (1 << SqlBaseParser.OVER)
                                    | (1 << SqlBaseParser.PARTITION)
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 64)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 64))
                                & (
                                    (1 << (SqlBaseParser.RANGE - 64))
                                    | (1 << (SqlBaseParser.ROWS - 64))
                                    | (1 << (SqlBaseParser.UNBOUNDED - 64))
                                    | (1 << (SqlBaseParser.PRECEDING - 64))
                                    | (1 << (SqlBaseParser.FOLLOWING - 64))
                                    | (1 << (SqlBaseParser.CURRENT - 64))
                                    | (1 << (SqlBaseParser.FIRST - 64))
                                    | (1 << (SqlBaseParser.AFTER - 64))
                                    | (1 << (SqlBaseParser.LAST - 64))
                                    | (1 << (SqlBaseParser.ROW - 64))
                                    | (1 << (SqlBaseParser.WITH - 64))
                                    | (1 << (SqlBaseParser.VALUES - 64))
                                    | (1 << (SqlBaseParser.CREATE - 64))
                                    | (1 << (SqlBaseParser.TABLE - 64))
                                    | (1 << (SqlBaseParser.DIRECTORY - 64))
                                    | (1 << (SqlBaseParser.VIEW - 64))
                                    | (1 << (SqlBaseParser.REPLACE - 64))
                                    | (1 << (SqlBaseParser.INSERT - 64))
                                    | (1 << (SqlBaseParser.DELETE - 64))
                                    | (1 << (SqlBaseParser.INTO - 64))
                                    | (1 << (SqlBaseParser.DESCRIBE - 64))
                                    | (1 << (SqlBaseParser.EXPLAIN - 64))
                                    | (1 << (SqlBaseParser.FORMAT - 64))
                                    | (1 << (SqlBaseParser.LOGICAL - 64))
                                    | (1 << (SqlBaseParser.CODEGEN - 64))
                                    | (1 << (SqlBaseParser.COST - 64))
                                    | (1 << (SqlBaseParser.CAST - 64))
                                    | (1 << (SqlBaseParser.SHOW - 64))
                                    | (1 << (SqlBaseParser.TABLES - 64))
                                    | (1 << (SqlBaseParser.COLUMNS - 64))
                                    | (1 << (SqlBaseParser.COLUMN - 64))
                                    | (1 << (SqlBaseParser.USE - 64))
                                    | (1 << (SqlBaseParser.PARTITIONS - 64))
                                    | (1 << (SqlBaseParser.FUNCTIONS - 64))
                                    | (1 << (SqlBaseParser.DROP - 64))
                                    | (1 << (SqlBaseParser.UNION - 64))
                                    | (1 << (SqlBaseParser.EXCEPT - 64))
                                    | (1 << (SqlBaseParser.SETMINUS - 64))
                                    | (1 << (SqlBaseParser.INTERSECT - 64))
                                    | (1 << (SqlBaseParser.TO - 64))
                                    | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                                    | (1 << (SqlBaseParser.STRATIFY - 64))
                                    | (1 << (SqlBaseParser.ALTER - 64))
                                    | (1 << (SqlBaseParser.RENAME - 64))
                                    | (1 << (SqlBaseParser.ARRAY - 64))
                                    | (1 << (SqlBaseParser.MAP - 64))
                                    | (1 << (SqlBaseParser.STRUCT - 64))
                                    | (1 << (SqlBaseParser.COMMENT - 64))
                                    | (1 << (SqlBaseParser.SET - 64))
                                    | (1 << (SqlBaseParser.RESET - 64))
                                    | (1 << (SqlBaseParser.DATA - 64))
                                    | (1 << (SqlBaseParser.START - 64))
                                    | (1 << (SqlBaseParser.TRANSACTION - 64))
                                    | (1 << (SqlBaseParser.COMMIT - 64))
                                    | (1 << (SqlBaseParser.ROLLBACK - 64))
                                    | (1 << (SqlBaseParser.MACRO - 64))
                                    | (1 << (SqlBaseParser.IGNORE - 64))
                                    | (1 << (SqlBaseParser.BOTH - 64))
                                    | (1 << (SqlBaseParser.LEADING - 64))
                                    | (1 << (SqlBaseParser.TRAILING - 64))
                                    | (1 << (SqlBaseParser.IF - 64))
                                    | (1 << (SqlBaseParser.POSITION - 64))
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 139)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 139))
                                & (
                                    (1 << (SqlBaseParser.DIV - 139))
                                    | (1 << (SqlBaseParser.PERCENTLIT - 139))
                                    | (1 << (SqlBaseParser.BUCKET - 139))
                                    | (1 << (SqlBaseParser.OUT - 139))
                                    | (1 << (SqlBaseParser.OF - 139))
                                    | (1 << (SqlBaseParser.SORT - 139))
                                    | (1 << (SqlBaseParser.CLUSTER - 139))
                                    | (1 << (SqlBaseParser.DISTRIBUTE - 139))
                                    | (1 << (SqlBaseParser.OVERWRITE - 139))
                                    | (1 << (SqlBaseParser.TRANSFORM - 139))
                                    | (1 << (SqlBaseParser.REDUCE - 139))
                                    | (1 << (SqlBaseParser.SERDE - 139))
                                    | (1 << (SqlBaseParser.SERDEPROPERTIES - 139))
                                    | (1 << (SqlBaseParser.RECORDREADER - 139))
                                    | (1 << (SqlBaseParser.RECORDWRITER - 139))
                                    | (1 << (SqlBaseParser.DELIMITED - 139))
                                    | (1 << (SqlBaseParser.FIELDS - 139))
                                    | (1 << (SqlBaseParser.TERMINATED - 139))
                                    | (1 << (SqlBaseParser.COLLECTION - 139))
                                    | (1 << (SqlBaseParser.ITEMS - 139))
                                    | (1 << (SqlBaseParser.KEYS - 139))
                                    | (1 << (SqlBaseParser.ESCAPED - 139))
                                    | (1 << (SqlBaseParser.LINES - 139))
                                    | (1 << (SqlBaseParser.SEPARATED - 139))
                                    | (1 << (SqlBaseParser.FUNCTION - 139))
                                    | (1 << (SqlBaseParser.EXTENDED - 139))
                                    | (1 << (SqlBaseParser.REFRESH - 139))
                                    | (1 << (SqlBaseParser.CLEAR - 139))
                                    | (1 << (SqlBaseParser.CACHE - 139))
                                    | (1 << (SqlBaseParser.UNCACHE - 139))
                                    | (1 << (SqlBaseParser.LAZY - 139))
                                    | (1 << (SqlBaseParser.FORMATTED - 139))
                                    | (1 << (SqlBaseParser.GLOBAL - 139))
                                    | (1 << (SqlBaseParser.TEMPORARY - 139))
                                    | (1 << (SqlBaseParser.OPTIONS - 139))
                                    | (1 << (SqlBaseParser.UNSET - 139))
                                    | (1 << (SqlBaseParser.TBLPROPERTIES - 139))
                                    | (1 << (SqlBaseParser.DBPROPERTIES - 139))
                                    | (1 << (SqlBaseParser.BUCKETS - 139))
                                    | (1 << (SqlBaseParser.SKEWED - 139))
                                    | (1 << (SqlBaseParser.STORED - 139))
                                    | (1 << (SqlBaseParser.DIRECTORIES - 139))
                                    | (1 << (SqlBaseParser.LOCATION - 139))
                                    | (1 << (SqlBaseParser.EXCHANGE - 139))
                                    | (1 << (SqlBaseParser.ARCHIVE - 139))
                                    | (1 << (SqlBaseParser.UNARCHIVE - 139))
                                    | (1 << (SqlBaseParser.FILEFORMAT - 139))
                                    | (1 << (SqlBaseParser.TOUCH - 139))
                                    | (1 << (SqlBaseParser.COMPACT - 139))
                                    | (1 << (SqlBaseParser.CONCATENATE - 139))
                                    | (1 << (SqlBaseParser.CHANGE - 139))
                                    | (1 << (SqlBaseParser.CASCADE - 139))
                                    | (1 << (SqlBaseParser.RESTRICT - 139))
                                    | (1 << (SqlBaseParser.CLUSTERED - 139))
                                    | (1 << (SqlBaseParser.SORTED - 139))
                                    | (1 << (SqlBaseParser.PURGE - 139))
                                    | (1 << (SqlBaseParser.INPUTFORMAT - 139))
                                    | (1 << (SqlBaseParser.OUTPUTFORMAT - 139))
                                )
                            )
                            != 0
                        )
                        or (
                            (((_la - 203)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 203))
                                & (
                                    (1 << (SqlBaseParser.DATABASE - 203))
                                    | (1 << (SqlBaseParser.DATABASES - 203))
                                    | (1 << (SqlBaseParser.DFS - 203))
                                    | (1 << (SqlBaseParser.TRUNCATE - 203))
                                    | (1 << (SqlBaseParser.ANALYZE - 203))
                                    | (1 << (SqlBaseParser.COMPUTE - 203))
                                    | (1 << (SqlBaseParser.LIST - 203))
                                    | (1 << (SqlBaseParser.STATISTICS - 203))
                                    | (1 << (SqlBaseParser.PARTITIONED - 203))
                                    | (1 << (SqlBaseParser.EXTERNAL - 203))
                                    | (1 << (SqlBaseParser.DEFINED - 203))
                                    | (1 << (SqlBaseParser.REVOKE - 203))
                                    | (1 << (SqlBaseParser.GRANT - 203))
                                    | (1 << (SqlBaseParser.LOCK - 203))
                                    | (1 << (SqlBaseParser.UNLOCK - 203))
                                    | (1 << (SqlBaseParser.MSCK - 203))
                                    | (1 << (SqlBaseParser.REPAIR - 203))
                                    | (1 << (SqlBaseParser.RECOVER - 203))
                                    | (1 << (SqlBaseParser.EXPORT - 203))
                                    | (1 << (SqlBaseParser.IMPORT - 203))
                                    | (1 << (SqlBaseParser.LOAD - 203))
                                    | (1 << (SqlBaseParser.ROLE - 203))
                                    | (1 << (SqlBaseParser.ROLES - 203))
                                    | (1 << (SqlBaseParser.COMPACTIONS - 203))
                                    | (1 << (SqlBaseParser.PRINCIPALS - 203))
                                    | (1 << (SqlBaseParser.TRANSACTIONS - 203))
                                    | (1 << (SqlBaseParser.INDEX - 203))
                                    | (1 << (SqlBaseParser.INDEXES - 203))
                                    | (1 << (SqlBaseParser.LOCKS - 203))
                                    | (1 << (SqlBaseParser.OPTION - 203))
                                    | (1 << (SqlBaseParser.ANTI - 203))
                                    | (1 << (SqlBaseParser.LOCAL - 203))
                                    | (1 << (SqlBaseParser.INPATH - 203))
                                    | (1 << (SqlBaseParser.IDENTIFIER - 203))
                                    | (1 << (SqlBaseParser.BACKQUOTED_IDENTIFIER - 203))
                                )
                            )
                            != 0
                        )
                    ):
                        self.state = 2145
                        self.complexColTypeList()

                    self.state = 2148
                    self.match(SqlBaseParser.GT)
                    pass
                elif token in [SqlBaseParser.NEQ]:
                    self.state = 2149
                    self.match(SqlBaseParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = SqlBaseParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2152
                self.identifier()
                self.state = 2163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 286, self._ctx)
                if la_ == 1:
                    self.state = 2153
                    self.match(SqlBaseParser.T__0)
                    self.state = 2154
                    self.match(SqlBaseParser.INTEGER_VALUE)
                    self.state = 2159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 2155
                        self.match(SqlBaseParser.T__2)
                        self.state = 2156
                        self.match(SqlBaseParser.INTEGER_VALUE)
                        self.state = 2161
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2162
                    self.match(SqlBaseParser.T__1)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColTypeListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColTypeContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colTypeList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColTypeList"):
                listener.enterColTypeList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColTypeList"):
                listener.exitColTypeList(self)

    def colTypeList(self):

        localctx = SqlBaseParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.colType()
            self.state = 2172
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 288, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2168
                    self.match(SqlBaseParser.T__2)
                    self.state = 2169
                    self.colType()
                self.state = 2174
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 288, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_colType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColType"):
                listener.enterColType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColType"):
                listener.exitColType(self)

    def colType(self):

        localctx = SqlBaseParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.identifier()
            self.state = 2176
            self.dataType()
            self.state = 2179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 289, self._ctx)
            if la_ == 1:
                self.state = 2177
                self.match(SqlBaseParser.COMMENT)
                self.state = 2178
                self.match(SqlBaseParser.STRING)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ComplexColTypeContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColTypeList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComplexColTypeList"):
                listener.enterComplexColTypeList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComplexColTypeList"):
                listener.exitComplexColTypeList(self)

    def complexColTypeList(self):

        localctx = SqlBaseParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_complexColTypeList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.complexColType()
            self.state = 2186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SqlBaseParser.T__2:
                self.state = 2182
                self.match(SqlBaseParser.T__2)
                self.state = 2183
                self.complexColType()
                self.state = 2188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_complexColType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComplexColType"):
                listener.enterComplexColType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComplexColType"):
                listener.exitComplexColType(self)

    def complexColType(self):

        localctx = SqlBaseParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_complexColType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2189
            self.identifier()
            self.state = 2190
            self.match(SqlBaseParser.T__8)
            self.state = 2191
            self.dataType()
            self.state = 2194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SqlBaseParser.COMMENT:
                self.state = 2192
                self.match(SqlBaseParser.COMMENT)
                self.state = 2193
                self.match(SqlBaseParser.STRING)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None  # ExpressionContext
            self.result = None  # ExpressionContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhenClause"):
                listener.enterWhenClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhenClause"):
                listener.exitWhenClause(self)

    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2196
            self.match(SqlBaseParser.WHEN)
            self.state = 2197
            localctx.condition = self.expression()
            self.state = 2198
            self.match(SqlBaseParser.THEN)
            self.state = 2199
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def namedWindow(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windows

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindows"):
                listener.enterWindows(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindows"):
                listener.exitWindows(self)

    def windows(self):

        localctx = SqlBaseParser.WindowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_windows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            self.match(SqlBaseParser.WINDOW)
            self.state = 2202
            self.namedWindow()
            self.state = 2207
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 292, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2203
                    self.match(SqlBaseParser.T__2)
                    self.state = 2204
                    self.namedWindow()
                self.state = 2209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 292, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedWindowContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowSpecContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedWindow"):
                listener.enterNamedWindow(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedWindow"):
                listener.exitNamedWindow(self)

    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self.identifier()
            self.state = 2211
            self.match(SqlBaseParser.AS)
            self.state = 2212
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowSpecContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowSpec

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class WindowRefContext(WindowSpecContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self.name = None  # IdentifierContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindowRef"):
                listener.enterWindowRef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindowRef"):
                listener.exitWindowRef(self)

    class WindowDefContext(WindowSpecContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None  # ExpressionContext
            self.partition = list()  # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def BY(self, i: int = None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, i)

        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext, 0)

        def sortItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext, i)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindowDef"):
                listener.enterWindowDef(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindowDef"):
                listener.exitWindowDef(self)

    def windowSpec(self):

        localctx = SqlBaseParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_windowSpec)
        self._la = 0  # Token type
        try:
            self.state = 2256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.ADD,
                SqlBaseParser.AS,
                SqlBaseParser.ALL,
                SqlBaseParser.DISTINCT,
                SqlBaseParser.WHERE,
                SqlBaseParser.GROUP,
                SqlBaseParser.BY,
                SqlBaseParser.GROUPING,
                SqlBaseParser.SETS,
                SqlBaseParser.CUBE,
                SqlBaseParser.ROLLUP,
                SqlBaseParser.ORDER,
                SqlBaseParser.HAVING,
                SqlBaseParser.LIMIT,
                SqlBaseParser.AT,
                SqlBaseParser.OR,
                SqlBaseParser.AND,
                SqlBaseParser.IN,
                SqlBaseParser.NOT,
                SqlBaseParser.NO,
                SqlBaseParser.EXISTS,
                SqlBaseParser.BETWEEN,
                SqlBaseParser.LIKE,
                SqlBaseParser.RLIKE,
                SqlBaseParser.IS,
                SqlBaseParser.NULL,
                SqlBaseParser.TRUE,
                SqlBaseParser.FALSE,
                SqlBaseParser.NULLS,
                SqlBaseParser.ASC,
                SqlBaseParser.DESC,
                SqlBaseParser.FOR,
                SqlBaseParser.INTERVAL,
                SqlBaseParser.CASE,
                SqlBaseParser.WHEN,
                SqlBaseParser.THEN,
                SqlBaseParser.ELSE,
                SqlBaseParser.END,
                SqlBaseParser.JOIN,
                SqlBaseParser.CROSS,
                SqlBaseParser.OUTER,
                SqlBaseParser.INNER,
                SqlBaseParser.LEFT,
                SqlBaseParser.SEMI,
                SqlBaseParser.RIGHT,
                SqlBaseParser.FULL,
                SqlBaseParser.NATURAL,
                SqlBaseParser.ON,
                SqlBaseParser.LATERAL,
                SqlBaseParser.WINDOW,
                SqlBaseParser.OVER,
                SqlBaseParser.PARTITION,
                SqlBaseParser.RANGE,
                SqlBaseParser.ROWS,
                SqlBaseParser.UNBOUNDED,
                SqlBaseParser.PRECEDING,
                SqlBaseParser.FOLLOWING,
                SqlBaseParser.CURRENT,
                SqlBaseParser.FIRST,
                SqlBaseParser.AFTER,
                SqlBaseParser.LAST,
                SqlBaseParser.ROW,
                SqlBaseParser.WITH,
                SqlBaseParser.VALUES,
                SqlBaseParser.CREATE,
                SqlBaseParser.TABLE,
                SqlBaseParser.DIRECTORY,
                SqlBaseParser.VIEW,
                SqlBaseParser.REPLACE,
                SqlBaseParser.INSERT,
                SqlBaseParser.DELETE,
                SqlBaseParser.INTO,
                SqlBaseParser.DESCRIBE,
                SqlBaseParser.EXPLAIN,
                SqlBaseParser.FORMAT,
                SqlBaseParser.LOGICAL,
                SqlBaseParser.CODEGEN,
                SqlBaseParser.COST,
                SqlBaseParser.CAST,
                SqlBaseParser.SHOW,
                SqlBaseParser.TABLES,
                SqlBaseParser.COLUMNS,
                SqlBaseParser.COLUMN,
                SqlBaseParser.USE,
                SqlBaseParser.PARTITIONS,
                SqlBaseParser.FUNCTIONS,
                SqlBaseParser.DROP,
                SqlBaseParser.UNION,
                SqlBaseParser.EXCEPT,
                SqlBaseParser.SETMINUS,
                SqlBaseParser.INTERSECT,
                SqlBaseParser.TO,
                SqlBaseParser.TABLESAMPLE,
                SqlBaseParser.STRATIFY,
                SqlBaseParser.ALTER,
                SqlBaseParser.RENAME,
                SqlBaseParser.ARRAY,
                SqlBaseParser.MAP,
                SqlBaseParser.STRUCT,
                SqlBaseParser.COMMENT,
                SqlBaseParser.SET,
                SqlBaseParser.RESET,
                SqlBaseParser.DATA,
                SqlBaseParser.START,
                SqlBaseParser.TRANSACTION,
                SqlBaseParser.COMMIT,
                SqlBaseParser.ROLLBACK,
                SqlBaseParser.MACRO,
                SqlBaseParser.IGNORE,
                SqlBaseParser.BOTH,
                SqlBaseParser.LEADING,
                SqlBaseParser.TRAILING,
                SqlBaseParser.IF,
                SqlBaseParser.POSITION,
                SqlBaseParser.DIV,
                SqlBaseParser.PERCENTLIT,
                SqlBaseParser.BUCKET,
                SqlBaseParser.OUT,
                SqlBaseParser.OF,
                SqlBaseParser.SORT,
                SqlBaseParser.CLUSTER,
                SqlBaseParser.DISTRIBUTE,
                SqlBaseParser.OVERWRITE,
                SqlBaseParser.TRANSFORM,
                SqlBaseParser.REDUCE,
                SqlBaseParser.SERDE,
                SqlBaseParser.SERDEPROPERTIES,
                SqlBaseParser.RECORDREADER,
                SqlBaseParser.RECORDWRITER,
                SqlBaseParser.DELIMITED,
                SqlBaseParser.FIELDS,
                SqlBaseParser.TERMINATED,
                SqlBaseParser.COLLECTION,
                SqlBaseParser.ITEMS,
                SqlBaseParser.KEYS,
                SqlBaseParser.ESCAPED,
                SqlBaseParser.LINES,
                SqlBaseParser.SEPARATED,
                SqlBaseParser.FUNCTION,
                SqlBaseParser.EXTENDED,
                SqlBaseParser.REFRESH,
                SqlBaseParser.CLEAR,
                SqlBaseParser.CACHE,
                SqlBaseParser.UNCACHE,
                SqlBaseParser.LAZY,
                SqlBaseParser.FORMATTED,
                SqlBaseParser.GLOBAL,
                SqlBaseParser.TEMPORARY,
                SqlBaseParser.OPTIONS,
                SqlBaseParser.UNSET,
                SqlBaseParser.TBLPROPERTIES,
                SqlBaseParser.DBPROPERTIES,
                SqlBaseParser.BUCKETS,
                SqlBaseParser.SKEWED,
                SqlBaseParser.STORED,
                SqlBaseParser.DIRECTORIES,
                SqlBaseParser.LOCATION,
                SqlBaseParser.EXCHANGE,
                SqlBaseParser.ARCHIVE,
                SqlBaseParser.UNARCHIVE,
                SqlBaseParser.FILEFORMAT,
                SqlBaseParser.TOUCH,
                SqlBaseParser.COMPACT,
                SqlBaseParser.CONCATENATE,
                SqlBaseParser.CHANGE,
                SqlBaseParser.CASCADE,
                SqlBaseParser.RESTRICT,
                SqlBaseParser.CLUSTERED,
                SqlBaseParser.SORTED,
                SqlBaseParser.PURGE,
                SqlBaseParser.INPUTFORMAT,
                SqlBaseParser.OUTPUTFORMAT,
                SqlBaseParser.DATABASE,
                SqlBaseParser.DATABASES,
                SqlBaseParser.DFS,
                SqlBaseParser.TRUNCATE,
                SqlBaseParser.ANALYZE,
                SqlBaseParser.COMPUTE,
                SqlBaseParser.LIST,
                SqlBaseParser.STATISTICS,
                SqlBaseParser.PARTITIONED,
                SqlBaseParser.EXTERNAL,
                SqlBaseParser.DEFINED,
                SqlBaseParser.REVOKE,
                SqlBaseParser.GRANT,
                SqlBaseParser.LOCK,
                SqlBaseParser.UNLOCK,
                SqlBaseParser.MSCK,
                SqlBaseParser.REPAIR,
                SqlBaseParser.RECOVER,
                SqlBaseParser.EXPORT,
                SqlBaseParser.IMPORT,
                SqlBaseParser.LOAD,
                SqlBaseParser.ROLE,
                SqlBaseParser.ROLES,
                SqlBaseParser.COMPACTIONS,
                SqlBaseParser.PRINCIPALS,
                SqlBaseParser.TRANSACTIONS,
                SqlBaseParser.INDEX,
                SqlBaseParser.INDEXES,
                SqlBaseParser.LOCKS,
                SqlBaseParser.OPTION,
                SqlBaseParser.ANTI,
                SqlBaseParser.LOCAL,
                SqlBaseParser.INPATH,
                SqlBaseParser.IDENTIFIER,
                SqlBaseParser.BACKQUOTED_IDENTIFIER,
            ]:
                localctx = SqlBaseParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2214
                localctx.name = self.identifier()
                pass
            elif token in [SqlBaseParser.T__0]:
                localctx = SqlBaseParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2215
                self.match(SqlBaseParser.T__0)
                self.state = 2250
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SqlBaseParser.CLUSTER]:
                    self.state = 2216
                    self.match(SqlBaseParser.CLUSTER)
                    self.state = 2217
                    self.match(SqlBaseParser.BY)
                    self.state = 2218
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 2223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SqlBaseParser.T__2:
                        self.state = 2219
                        self.match(SqlBaseParser.T__2)
                        self.state = 2220
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2225
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [
                    SqlBaseParser.T__1,
                    SqlBaseParser.ORDER,
                    SqlBaseParser.PARTITION,
                    SqlBaseParser.RANGE,
                    SqlBaseParser.ROWS,
                    SqlBaseParser.SORT,
                    SqlBaseParser.DISTRIBUTE,
                ]:
                    self.state = 2236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        _la == SqlBaseParser.PARTITION
                        or _la == SqlBaseParser.DISTRIBUTE
                    ):
                        self.state = 2226
                        _la = self._input.LA(1)
                        if not (
                            _la == SqlBaseParser.PARTITION
                            or _la == SqlBaseParser.DISTRIBUTE
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2227
                        self.match(SqlBaseParser.BY)
                        self.state = 2228
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 2233
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == SqlBaseParser.T__2:
                            self.state = 2229
                            self.match(SqlBaseParser.T__2)
                            self.state = 2230
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 2235
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    self.state = 2248
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == SqlBaseParser.ORDER or _la == SqlBaseParser.SORT:
                        self.state = 2238
                        _la = self._input.LA(1)
                        if not (
                            _la == SqlBaseParser.ORDER or _la == SqlBaseParser.SORT
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2239
                        self.match(SqlBaseParser.BY)
                        self.state = 2240
                        self.sortItem()
                        self.state = 2245
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == SqlBaseParser.T__2:
                            self.state = 2241
                            self.match(SqlBaseParser.T__2)
                            self.state = 2242
                            self.sortItem()
                            self.state = 2247
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.RANGE or _la == SqlBaseParser.ROWS:
                    self.state = 2252
                    self.windowFrame()

                self.state = 2255
                self.match(SqlBaseParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowFrameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None  # Token
            self.start = None  # FrameBoundContext
            self.end = None  # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext, i)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindowFrame"):
                listener.enterWindowFrame(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindowFrame"):
                listener.exitWindowFrame(self)

    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_windowFrame)
        try:
            self.state = 2274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 301, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2258
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2259
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2260
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2261
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2262
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 2263
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2264
                localctx.start = self.frameBound()
                self.state = 2265
                self.match(SqlBaseParser.AND)
                self.state = 2266
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2268
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 2269
                self.match(SqlBaseParser.BETWEEN)
                self.state = 2270
                localctx.start = self.frameBound()
                self.state = 2271
                self.match(SqlBaseParser.AND)
                self.state = 2272
                localctx.end = self.frameBound()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FrameBoundContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None  # Token

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(SqlBaseParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFrameBound"):
                listener.enterFrameBound(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFrameBound"):
                listener.exitFrameBound(self)

    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_frameBound)
        self._la = 0  # Token type
        try:
            self.state = 2283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 302, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2276
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 2277
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.PRECEDING or _la == SqlBaseParser.FOLLOWING
                ):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2278
                localctx.boundType = self.match(SqlBaseParser.CURRENT)
                self.state = 2279
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2280
                self.expression()
                self.state = 2281
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not (
                    _la == SqlBaseParser.PRECEDING or _la == SqlBaseParser.FOLLOWING
                ):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qualifiedName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiedName"):
                listener.enterQualifiedName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiedName"):
                listener.exitQualifiedName(self)

    def qualifiedName(self):

        localctx = SqlBaseParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self.identifier()
            self.state = 2290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 303, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2286
                    self.match(SqlBaseParser.T__3)
                    self.state = 2287
                    self.identifier()
                self.state = 2292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 303, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StrictIdentifierContext, 0)

        def ANTI(self):
            return self.getToken(SqlBaseParser.ANTI, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def SEMI(self):
            return self.getToken(SqlBaseParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)

        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)

        def SETMINUS(self):
            return self.getToken(SqlBaseParser.SETMINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_identifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)

    def identifier(self):

        localctx = SqlBaseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_identifier)
        try:
            self.state = 2308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.ADD,
                SqlBaseParser.AS,
                SqlBaseParser.ALL,
                SqlBaseParser.DISTINCT,
                SqlBaseParser.WHERE,
                SqlBaseParser.GROUP,
                SqlBaseParser.BY,
                SqlBaseParser.GROUPING,
                SqlBaseParser.SETS,
                SqlBaseParser.CUBE,
                SqlBaseParser.ROLLUP,
                SqlBaseParser.ORDER,
                SqlBaseParser.HAVING,
                SqlBaseParser.LIMIT,
                SqlBaseParser.AT,
                SqlBaseParser.OR,
                SqlBaseParser.AND,
                SqlBaseParser.IN,
                SqlBaseParser.NOT,
                SqlBaseParser.NO,
                SqlBaseParser.EXISTS,
                SqlBaseParser.BETWEEN,
                SqlBaseParser.LIKE,
                SqlBaseParser.RLIKE,
                SqlBaseParser.IS,
                SqlBaseParser.NULL,
                SqlBaseParser.TRUE,
                SqlBaseParser.FALSE,
                SqlBaseParser.NULLS,
                SqlBaseParser.ASC,
                SqlBaseParser.DESC,
                SqlBaseParser.FOR,
                SqlBaseParser.INTERVAL,
                SqlBaseParser.CASE,
                SqlBaseParser.WHEN,
                SqlBaseParser.THEN,
                SqlBaseParser.ELSE,
                SqlBaseParser.END,
                SqlBaseParser.OUTER,
                SqlBaseParser.LATERAL,
                SqlBaseParser.WINDOW,
                SqlBaseParser.OVER,
                SqlBaseParser.PARTITION,
                SqlBaseParser.RANGE,
                SqlBaseParser.ROWS,
                SqlBaseParser.UNBOUNDED,
                SqlBaseParser.PRECEDING,
                SqlBaseParser.FOLLOWING,
                SqlBaseParser.CURRENT,
                SqlBaseParser.FIRST,
                SqlBaseParser.AFTER,
                SqlBaseParser.LAST,
                SqlBaseParser.ROW,
                SqlBaseParser.WITH,
                SqlBaseParser.VALUES,
                SqlBaseParser.CREATE,
                SqlBaseParser.TABLE,
                SqlBaseParser.DIRECTORY,
                SqlBaseParser.VIEW,
                SqlBaseParser.REPLACE,
                SqlBaseParser.INSERT,
                SqlBaseParser.DELETE,
                SqlBaseParser.INTO,
                SqlBaseParser.DESCRIBE,
                SqlBaseParser.EXPLAIN,
                SqlBaseParser.FORMAT,
                SqlBaseParser.LOGICAL,
                SqlBaseParser.CODEGEN,
                SqlBaseParser.COST,
                SqlBaseParser.CAST,
                SqlBaseParser.SHOW,
                SqlBaseParser.TABLES,
                SqlBaseParser.COLUMNS,
                SqlBaseParser.COLUMN,
                SqlBaseParser.USE,
                SqlBaseParser.PARTITIONS,
                SqlBaseParser.FUNCTIONS,
                SqlBaseParser.DROP,
                SqlBaseParser.TO,
                SqlBaseParser.TABLESAMPLE,
                SqlBaseParser.STRATIFY,
                SqlBaseParser.ALTER,
                SqlBaseParser.RENAME,
                SqlBaseParser.ARRAY,
                SqlBaseParser.MAP,
                SqlBaseParser.STRUCT,
                SqlBaseParser.COMMENT,
                SqlBaseParser.SET,
                SqlBaseParser.RESET,
                SqlBaseParser.DATA,
                SqlBaseParser.START,
                SqlBaseParser.TRANSACTION,
                SqlBaseParser.COMMIT,
                SqlBaseParser.ROLLBACK,
                SqlBaseParser.MACRO,
                SqlBaseParser.IGNORE,
                SqlBaseParser.BOTH,
                SqlBaseParser.LEADING,
                SqlBaseParser.TRAILING,
                SqlBaseParser.IF,
                SqlBaseParser.POSITION,
                SqlBaseParser.DIV,
                SqlBaseParser.PERCENTLIT,
                SqlBaseParser.BUCKET,
                SqlBaseParser.OUT,
                SqlBaseParser.OF,
                SqlBaseParser.SORT,
                SqlBaseParser.CLUSTER,
                SqlBaseParser.DISTRIBUTE,
                SqlBaseParser.OVERWRITE,
                SqlBaseParser.TRANSFORM,
                SqlBaseParser.REDUCE,
                SqlBaseParser.SERDE,
                SqlBaseParser.SERDEPROPERTIES,
                SqlBaseParser.RECORDREADER,
                SqlBaseParser.RECORDWRITER,
                SqlBaseParser.DELIMITED,
                SqlBaseParser.FIELDS,
                SqlBaseParser.TERMINATED,
                SqlBaseParser.COLLECTION,
                SqlBaseParser.ITEMS,
                SqlBaseParser.KEYS,
                SqlBaseParser.ESCAPED,
                SqlBaseParser.LINES,
                SqlBaseParser.SEPARATED,
                SqlBaseParser.FUNCTION,
                SqlBaseParser.EXTENDED,
                SqlBaseParser.REFRESH,
                SqlBaseParser.CLEAR,
                SqlBaseParser.CACHE,
                SqlBaseParser.UNCACHE,
                SqlBaseParser.LAZY,
                SqlBaseParser.FORMATTED,
                SqlBaseParser.GLOBAL,
                SqlBaseParser.TEMPORARY,
                SqlBaseParser.OPTIONS,
                SqlBaseParser.UNSET,
                SqlBaseParser.TBLPROPERTIES,
                SqlBaseParser.DBPROPERTIES,
                SqlBaseParser.BUCKETS,
                SqlBaseParser.SKEWED,
                SqlBaseParser.STORED,
                SqlBaseParser.DIRECTORIES,
                SqlBaseParser.LOCATION,
                SqlBaseParser.EXCHANGE,
                SqlBaseParser.ARCHIVE,
                SqlBaseParser.UNARCHIVE,
                SqlBaseParser.FILEFORMAT,
                SqlBaseParser.TOUCH,
                SqlBaseParser.COMPACT,
                SqlBaseParser.CONCATENATE,
                SqlBaseParser.CHANGE,
                SqlBaseParser.CASCADE,
                SqlBaseParser.RESTRICT,
                SqlBaseParser.CLUSTERED,
                SqlBaseParser.SORTED,
                SqlBaseParser.PURGE,
                SqlBaseParser.INPUTFORMAT,
                SqlBaseParser.OUTPUTFORMAT,
                SqlBaseParser.DATABASE,
                SqlBaseParser.DATABASES,
                SqlBaseParser.DFS,
                SqlBaseParser.TRUNCATE,
                SqlBaseParser.ANALYZE,
                SqlBaseParser.COMPUTE,
                SqlBaseParser.LIST,
                SqlBaseParser.STATISTICS,
                SqlBaseParser.PARTITIONED,
                SqlBaseParser.EXTERNAL,
                SqlBaseParser.DEFINED,
                SqlBaseParser.REVOKE,
                SqlBaseParser.GRANT,
                SqlBaseParser.LOCK,
                SqlBaseParser.UNLOCK,
                SqlBaseParser.MSCK,
                SqlBaseParser.REPAIR,
                SqlBaseParser.RECOVER,
                SqlBaseParser.EXPORT,
                SqlBaseParser.IMPORT,
                SqlBaseParser.LOAD,
                SqlBaseParser.ROLE,
                SqlBaseParser.ROLES,
                SqlBaseParser.COMPACTIONS,
                SqlBaseParser.PRINCIPALS,
                SqlBaseParser.TRANSACTIONS,
                SqlBaseParser.INDEX,
                SqlBaseParser.INDEXES,
                SqlBaseParser.LOCKS,
                SqlBaseParser.OPTION,
                SqlBaseParser.LOCAL,
                SqlBaseParser.INPATH,
                SqlBaseParser.IDENTIFIER,
                SqlBaseParser.BACKQUOTED_IDENTIFIER,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2293
                self.strictIdentifier()
                pass
            elif token in [SqlBaseParser.ANTI]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2294
                self.match(SqlBaseParser.ANTI)
                pass
            elif token in [SqlBaseParser.FULL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2295
                self.match(SqlBaseParser.FULL)
                pass
            elif token in [SqlBaseParser.INNER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2296
                self.match(SqlBaseParser.INNER)
                pass
            elif token in [SqlBaseParser.LEFT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2297
                self.match(SqlBaseParser.LEFT)
                pass
            elif token in [SqlBaseParser.SEMI]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2298
                self.match(SqlBaseParser.SEMI)
                pass
            elif token in [SqlBaseParser.RIGHT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2299
                self.match(SqlBaseParser.RIGHT)
                pass
            elif token in [SqlBaseParser.NATURAL]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2300
                self.match(SqlBaseParser.NATURAL)
                pass
            elif token in [SqlBaseParser.JOIN]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2301
                self.match(SqlBaseParser.JOIN)
                pass
            elif token in [SqlBaseParser.CROSS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2302
                self.match(SqlBaseParser.CROSS)
                pass
            elif token in [SqlBaseParser.ON]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2303
                self.match(SqlBaseParser.ON)
                pass
            elif token in [SqlBaseParser.UNION]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2304
                self.match(SqlBaseParser.UNION)
                pass
            elif token in [SqlBaseParser.INTERSECT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2305
                self.match(SqlBaseParser.INTERSECT)
                pass
            elif token in [SqlBaseParser.EXCEPT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2306
                self.match(SqlBaseParser.EXCEPT)
                pass
            elif token in [SqlBaseParser.SETMINUS]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2307
                self.match(SqlBaseParser.SETMINUS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_strictIdentifier

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuotedIdentifierAlternative"):
                listener.enterQuotedIdentifierAlternative(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuotedIdentifierAlternative"):
                listener.exitQuotedIdentifierAlternative(self)

    class UnquotedIdentifierContext(StrictIdentifierContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)

        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnquotedIdentifier"):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnquotedIdentifier"):
                listener.exitUnquotedIdentifier(self)

    def strictIdentifier(self):

        localctx = SqlBaseParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_strictIdentifier)
        try:
            self.state = 2313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SqlBaseParser.IDENTIFIER]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2310
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [SqlBaseParser.BACKQUOTED_IDENTIFIER]:
                localctx = SqlBaseParser.QuotedIdentifierAlternativeContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 2)
                self.state = 2311
                self.quotedIdentifier()
                pass
            elif token in [
                SqlBaseParser.SELECT,
                SqlBaseParser.FROM,
                SqlBaseParser.ADD,
                SqlBaseParser.AS,
                SqlBaseParser.ALL,
                SqlBaseParser.DISTINCT,
                SqlBaseParser.WHERE,
                SqlBaseParser.GROUP,
                SqlBaseParser.BY,
                SqlBaseParser.GROUPING,
                SqlBaseParser.SETS,
                SqlBaseParser.CUBE,
                SqlBaseParser.ROLLUP,
                SqlBaseParser.ORDER,
                SqlBaseParser.HAVING,
                SqlBaseParser.LIMIT,
                SqlBaseParser.AT,
                SqlBaseParser.OR,
                SqlBaseParser.AND,
                SqlBaseParser.IN,
                SqlBaseParser.NOT,
                SqlBaseParser.NO,
                SqlBaseParser.EXISTS,
                SqlBaseParser.BETWEEN,
                SqlBaseParser.LIKE,
                SqlBaseParser.RLIKE,
                SqlBaseParser.IS,
                SqlBaseParser.NULL,
                SqlBaseParser.TRUE,
                SqlBaseParser.FALSE,
                SqlBaseParser.NULLS,
                SqlBaseParser.ASC,
                SqlBaseParser.DESC,
                SqlBaseParser.FOR,
                SqlBaseParser.INTERVAL,
                SqlBaseParser.CASE,
                SqlBaseParser.WHEN,
                SqlBaseParser.THEN,
                SqlBaseParser.ELSE,
                SqlBaseParser.END,
                SqlBaseParser.OUTER,
                SqlBaseParser.LATERAL,
                SqlBaseParser.WINDOW,
                SqlBaseParser.OVER,
                SqlBaseParser.PARTITION,
                SqlBaseParser.RANGE,
                SqlBaseParser.ROWS,
                SqlBaseParser.UNBOUNDED,
                SqlBaseParser.PRECEDING,
                SqlBaseParser.FOLLOWING,
                SqlBaseParser.CURRENT,
                SqlBaseParser.FIRST,
                SqlBaseParser.AFTER,
                SqlBaseParser.LAST,
                SqlBaseParser.ROW,
                SqlBaseParser.WITH,
                SqlBaseParser.VALUES,
                SqlBaseParser.CREATE,
                SqlBaseParser.TABLE,
                SqlBaseParser.DIRECTORY,
                SqlBaseParser.VIEW,
                SqlBaseParser.REPLACE,
                SqlBaseParser.INSERT,
                SqlBaseParser.DELETE,
                SqlBaseParser.INTO,
                SqlBaseParser.DESCRIBE,
                SqlBaseParser.EXPLAIN,
                SqlBaseParser.FORMAT,
                SqlBaseParser.LOGICAL,
                SqlBaseParser.CODEGEN,
                SqlBaseParser.COST,
                SqlBaseParser.CAST,
                SqlBaseParser.SHOW,
                SqlBaseParser.TABLES,
                SqlBaseParser.COLUMNS,
                SqlBaseParser.COLUMN,
                SqlBaseParser.USE,
                SqlBaseParser.PARTITIONS,
                SqlBaseParser.FUNCTIONS,
                SqlBaseParser.DROP,
                SqlBaseParser.TO,
                SqlBaseParser.TABLESAMPLE,
                SqlBaseParser.STRATIFY,
                SqlBaseParser.ALTER,
                SqlBaseParser.RENAME,
                SqlBaseParser.ARRAY,
                SqlBaseParser.MAP,
                SqlBaseParser.STRUCT,
                SqlBaseParser.COMMENT,
                SqlBaseParser.SET,
                SqlBaseParser.RESET,
                SqlBaseParser.DATA,
                SqlBaseParser.START,
                SqlBaseParser.TRANSACTION,
                SqlBaseParser.COMMIT,
                SqlBaseParser.ROLLBACK,
                SqlBaseParser.MACRO,
                SqlBaseParser.IGNORE,
                SqlBaseParser.BOTH,
                SqlBaseParser.LEADING,
                SqlBaseParser.TRAILING,
                SqlBaseParser.IF,
                SqlBaseParser.POSITION,
                SqlBaseParser.DIV,
                SqlBaseParser.PERCENTLIT,
                SqlBaseParser.BUCKET,
                SqlBaseParser.OUT,
                SqlBaseParser.OF,
                SqlBaseParser.SORT,
                SqlBaseParser.CLUSTER,
                SqlBaseParser.DISTRIBUTE,
                SqlBaseParser.OVERWRITE,
                SqlBaseParser.TRANSFORM,
                SqlBaseParser.REDUCE,
                SqlBaseParser.SERDE,
                SqlBaseParser.SERDEPROPERTIES,
                SqlBaseParser.RECORDREADER,
                SqlBaseParser.RECORDWRITER,
                SqlBaseParser.DELIMITED,
                SqlBaseParser.FIELDS,
                SqlBaseParser.TERMINATED,
                SqlBaseParser.COLLECTION,
                SqlBaseParser.ITEMS,
                SqlBaseParser.KEYS,
                SqlBaseParser.ESCAPED,
                SqlBaseParser.LINES,
                SqlBaseParser.SEPARATED,
                SqlBaseParser.FUNCTION,
                SqlBaseParser.EXTENDED,
                SqlBaseParser.REFRESH,
                SqlBaseParser.CLEAR,
                SqlBaseParser.CACHE,
                SqlBaseParser.UNCACHE,
                SqlBaseParser.LAZY,
                SqlBaseParser.FORMATTED,
                SqlBaseParser.GLOBAL,
                SqlBaseParser.TEMPORARY,
                SqlBaseParser.OPTIONS,
                SqlBaseParser.UNSET,
                SqlBaseParser.TBLPROPERTIES,
                SqlBaseParser.DBPROPERTIES,
                SqlBaseParser.BUCKETS,
                SqlBaseParser.SKEWED,
                SqlBaseParser.STORED,
                SqlBaseParser.DIRECTORIES,
                SqlBaseParser.LOCATION,
                SqlBaseParser.EXCHANGE,
                SqlBaseParser.ARCHIVE,
                SqlBaseParser.UNARCHIVE,
                SqlBaseParser.FILEFORMAT,
                SqlBaseParser.TOUCH,
                SqlBaseParser.COMPACT,
                SqlBaseParser.CONCATENATE,
                SqlBaseParser.CHANGE,
                SqlBaseParser.CASCADE,
                SqlBaseParser.RESTRICT,
                SqlBaseParser.CLUSTERED,
                SqlBaseParser.SORTED,
                SqlBaseParser.PURGE,
                SqlBaseParser.INPUTFORMAT,
                SqlBaseParser.OUTPUTFORMAT,
                SqlBaseParser.DATABASE,
                SqlBaseParser.DATABASES,
                SqlBaseParser.DFS,
                SqlBaseParser.TRUNCATE,
                SqlBaseParser.ANALYZE,
                SqlBaseParser.COMPUTE,
                SqlBaseParser.LIST,
                SqlBaseParser.STATISTICS,
                SqlBaseParser.PARTITIONED,
                SqlBaseParser.EXTERNAL,
                SqlBaseParser.DEFINED,
                SqlBaseParser.REVOKE,
                SqlBaseParser.GRANT,
                SqlBaseParser.LOCK,
                SqlBaseParser.UNLOCK,
                SqlBaseParser.MSCK,
                SqlBaseParser.REPAIR,
                SqlBaseParser.RECOVER,
                SqlBaseParser.EXPORT,
                SqlBaseParser.IMPORT,
                SqlBaseParser.LOAD,
                SqlBaseParser.ROLE,
                SqlBaseParser.ROLES,
                SqlBaseParser.COMPACTIONS,
                SqlBaseParser.PRINCIPALS,
                SqlBaseParser.TRANSACTIONS,
                SqlBaseParser.INDEX,
                SqlBaseParser.INDEXES,
                SqlBaseParser.LOCKS,
                SqlBaseParser.OPTION,
                SqlBaseParser.LOCAL,
                SqlBaseParser.INPATH,
            ]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2312
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuotedIdentifier"):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuotedIdentifier"):
                listener.exitQuotedIdentifier(self)

    def quotedIdentifier(self):

        localctx = SqlBaseParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SqlBaseParser.RULE_number

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DecimalLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecimalLiteral"):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecimalLiteral"):
                listener.exitDecimalLiteral(self)

    class BigIntLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGINT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBigIntLiteral"):
                listener.enterBigIntLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBigIntLiteral"):
                listener.exitBigIntLiteral(self)

    class TinyIntLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(SqlBaseParser.TINYINT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTinyIntLiteral"):
                listener.enterTinyIntLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTinyIntLiteral"):
                listener.exitTinyIntLiteral(self)

    class BigDecimalLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBigDecimalLiteral"):
                listener.enterBigDecimalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBigDecimalLiteral"):
                listener.exitBigDecimalLiteral(self)

    class DoubleLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(SqlBaseParser.DOUBLE_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoubleLiteral"):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoubleLiteral"):
                listener.exitDoubleLiteral(self)

    class IntegerLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntegerLiteral"):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntegerLiteral"):
                listener.exitIntegerLiteral(self)

    class SmallIntLiteralContext(NumberContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a SqlBaseParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(SqlBaseParser.SMALLINT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSmallIntLiteral"):
                listener.enterSmallIntLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSmallIntLiteral"):
                listener.exitSmallIntLiteral(self)

    def number(self):

        localctx = SqlBaseParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_number)
        self._la = 0  # Token type
        try:
            self.state = 2345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 313, self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2317
                    self.match(SqlBaseParser.MINUS)

                self.state = 2320
                self.match(SqlBaseParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2321
                    self.match(SqlBaseParser.MINUS)

                self.state = 2324
                self.match(SqlBaseParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2325
                    self.match(SqlBaseParser.MINUS)

                self.state = 2328
                self.match(SqlBaseParser.BIGINT_LITERAL)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2329
                    self.match(SqlBaseParser.MINUS)

                self.state = 2332
                self.match(SqlBaseParser.SMALLINT_LITERAL)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2333
                    self.match(SqlBaseParser.MINUS)

                self.state = 2336
                self.match(SqlBaseParser.TINYINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2337
                    self.match(SqlBaseParser.MINUS)

                self.state = 2340
                self.match(SqlBaseParser.DOUBLE_LITERAL)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SqlBaseParser.MINUS:
                    self.state = 2341
                    self.match(SqlBaseParser.MINUS)

                self.state = 2344
                self.match(SqlBaseParser.BIGDECIMAL_LITERAL)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonReservedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def DATABASES(self):
            return self.getToken(SqlBaseParser.DATABASES, 0)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(SqlBaseParser.AFTER, 0)

        def MAP(self):
            return self.getToken(SqlBaseParser.MAP, 0)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def STRUCT(self):
            return self.getToken(SqlBaseParser.STRUCT, 0)

        def LATERAL(self):
            return self.getToken(SqlBaseParser.LATERAL, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def REDUCE(self):
            return self.getToken(SqlBaseParser.REDUCE, 0)

        def TRANSFORM(self):
            return self.getToken(SqlBaseParser.TRANSFORM, 0)

        def SERDE(self):
            return self.getToken(SqlBaseParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(SqlBaseParser.SERDEPROPERTIES, 0)

        def RECORDREADER(self):
            return self.getToken(SqlBaseParser.RECORDREADER, 0)

        def DELIMITED(self):
            return self.getToken(SqlBaseParser.DELIMITED, 0)

        def FIELDS(self):
            return self.getToken(SqlBaseParser.FIELDS, 0)

        def TERMINATED(self):
            return self.getToken(SqlBaseParser.TERMINATED, 0)

        def COLLECTION(self):
            return self.getToken(SqlBaseParser.COLLECTION, 0)

        def ITEMS(self):
            return self.getToken(SqlBaseParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(SqlBaseParser.KEYS, 0)

        def ESCAPED(self):
            return self.getToken(SqlBaseParser.ESCAPED, 0)

        def LINES(self):
            return self.getToken(SqlBaseParser.LINES, 0)

        def SEPARATED(self):
            return self.getToken(SqlBaseParser.SEPARATED, 0)

        def EXTENDED(self):
            return self.getToken(SqlBaseParser.EXTENDED, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def CLEAR(self):
            return self.getToken(SqlBaseParser.CLEAR, 0)

        def CACHE(self):
            return self.getToken(SqlBaseParser.CACHE, 0)

        def UNCACHE(self):
            return self.getToken(SqlBaseParser.UNCACHE, 0)

        def LAZY(self):
            return self.getToken(SqlBaseParser.LAZY, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def OPTIONS(self):
            return self.getToken(SqlBaseParser.OPTIONS, 0)

        def GROUPING(self):
            return self.getToken(SqlBaseParser.GROUPING, 0)

        def CUBE(self):
            return self.getToken(SqlBaseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(SqlBaseParser.ROLLUP, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def FORMATTED(self):
            return self.getToken(SqlBaseParser.FORMATTED, 0)

        def CODEGEN(self):
            return self.getToken(SqlBaseParser.CODEGEN, 0)

        def COST(self):
            return self.getToken(SqlBaseParser.COST, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def USE(self):
            return self.getToken(SqlBaseParser.USE, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def BUCKET(self):
            return self.getToken(SqlBaseParser.BUCKET, 0)

        def PERCENTLIT(self):
            return self.getToken(SqlBaseParser.PERCENTLIT, 0)

        def OUT(self):
            return self.getToken(SqlBaseParser.OUT, 0)

        def OF(self):
            return self.getToken(SqlBaseParser.OF, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def POSITION(self):
            return self.getToken(SqlBaseParser.POSITION, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def DATA(self):
            return self.getToken(SqlBaseParser.DATA, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(SqlBaseParser.ROLLBACK, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def SORT(self):
            return self.getToken(SqlBaseParser.SORT, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(SqlBaseParser.DISTRIBUTE, 0)

        def UNSET(self):
            return self.getToken(SqlBaseParser.UNSET, 0)

        def TBLPROPERTIES(self):
            return self.getToken(SqlBaseParser.TBLPROPERTIES, 0)

        def SKEWED(self):
            return self.getToken(SqlBaseParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(SqlBaseParser.STORED, 0)

        def DIRECTORIES(self):
            return self.getToken(SqlBaseParser.DIRECTORIES, 0)

        def LOCATION(self):
            return self.getToken(SqlBaseParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(SqlBaseParser.EXCHANGE, 0)

        def ARCHIVE(self):
            return self.getToken(SqlBaseParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(SqlBaseParser.UNARCHIVE, 0)

        def FILEFORMAT(self):
            return self.getToken(SqlBaseParser.FILEFORMAT, 0)

        def TOUCH(self):
            return self.getToken(SqlBaseParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(SqlBaseParser.COMPACT, 0)

        def CONCATENATE(self):
            return self.getToken(SqlBaseParser.CONCATENATE, 0)

        def CHANGE(self):
            return self.getToken(SqlBaseParser.CHANGE, 0)

        def CASCADE(self):
            return self.getToken(SqlBaseParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(SqlBaseParser.RESTRICT, 0)

        def BUCKETS(self):
            return self.getToken(SqlBaseParser.BUCKETS, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def SORTED(self):
            return self.getToken(SqlBaseParser.SORTED, 0)

        def PURGE(self):
            return self.getToken(SqlBaseParser.PURGE, 0)

        def INPUTFORMAT(self):
            return self.getToken(SqlBaseParser.INPUTFORMAT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(SqlBaseParser.OUTPUTFORMAT, 0)

        def DBPROPERTIES(self):
            return self.getToken(SqlBaseParser.DBPROPERTIES, 0)

        def DFS(self):
            return self.getToken(SqlBaseParser.DFS, 0)

        def TRUNCATE(self):
            return self.getToken(SqlBaseParser.TRUNCATE, 0)

        def COMPUTE(self):
            return self.getToken(SqlBaseParser.COMPUTE, 0)

        def LIST(self):
            return self.getToken(SqlBaseParser.LIST, 0)

        def STATISTICS(self):
            return self.getToken(SqlBaseParser.STATISTICS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def EXTERNAL(self):
            return self.getToken(SqlBaseParser.EXTERNAL, 0)

        def DEFINED(self):
            return self.getToken(SqlBaseParser.DEFINED, 0)

        def RECORDWRITER(self):
            return self.getToken(SqlBaseParser.RECORDWRITER, 0)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)

        def LOCK(self):
            return self.getToken(SqlBaseParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(SqlBaseParser.UNLOCK, 0)

        def MSCK(self):
            return self.getToken(SqlBaseParser.MSCK, 0)

        def REPAIR(self):
            return self.getToken(SqlBaseParser.REPAIR, 0)

        def RECOVER(self):
            return self.getToken(SqlBaseParser.RECOVER, 0)

        def EXPORT(self):
            return self.getToken(SqlBaseParser.EXPORT, 0)

        def IMPORT(self):
            return self.getToken(SqlBaseParser.IMPORT, 0)

        def LOAD(self):
            return self.getToken(SqlBaseParser.LOAD, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def COMMENT(self):
            return self.getToken(SqlBaseParser.COMMENT, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(SqlBaseParser.ROLES, 0)

        def COMPACTIONS(self):
            return self.getToken(SqlBaseParser.COMPACTIONS, 0)

        def PRINCIPALS(self):
            return self.getToken(SqlBaseParser.PRINCIPALS, 0)

        def TRANSACTIONS(self):
            return self.getToken(SqlBaseParser.TRANSACTIONS, 0)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(SqlBaseParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(SqlBaseParser.LOCKS, 0)

        def OPTION(self):
            return self.getToken(SqlBaseParser.OPTION, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def INPATH(self):
            return self.getToken(SqlBaseParser.INPATH, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def SETS(self):
            return self.getToken(SqlBaseParser.SETS, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def OVERWRITE(self):
            return self.getToken(SqlBaseParser.OVERWRITE, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(SqlBaseParser.DESCRIBE, 0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def RLIKE(self):
            return self.getToken(SqlBaseParser.RLIKE, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def DIV(self):
            return self.getToken(SqlBaseParser.DIV, 0)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def MACRO(self):
            return self.getToken(SqlBaseParser.MACRO, 0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def STRATIFY(self):
            return self.getToken(SqlBaseParser.STRATIFY, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def DATABASE(self):
            return self.getToken(SqlBaseParser.DATABASE, 0)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonReserved"):
                listener.enterNonReserved(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonReserved"):
                listener.exitNonReserved(self)

    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_nonReserved)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SqlBaseParser.SELECT)
                            | (1 << SqlBaseParser.FROM)
                            | (1 << SqlBaseParser.ADD)
                            | (1 << SqlBaseParser.AS)
                            | (1 << SqlBaseParser.ALL)
                            | (1 << SqlBaseParser.DISTINCT)
                            | (1 << SqlBaseParser.WHERE)
                            | (1 << SqlBaseParser.GROUP)
                            | (1 << SqlBaseParser.BY)
                            | (1 << SqlBaseParser.GROUPING)
                            | (1 << SqlBaseParser.SETS)
                            | (1 << SqlBaseParser.CUBE)
                            | (1 << SqlBaseParser.ROLLUP)
                            | (1 << SqlBaseParser.ORDER)
                            | (1 << SqlBaseParser.HAVING)
                            | (1 << SqlBaseParser.LIMIT)
                            | (1 << SqlBaseParser.AT)
                            | (1 << SqlBaseParser.OR)
                            | (1 << SqlBaseParser.AND)
                            | (1 << SqlBaseParser.IN)
                            | (1 << SqlBaseParser.NOT)
                            | (1 << SqlBaseParser.NO)
                            | (1 << SqlBaseParser.EXISTS)
                            | (1 << SqlBaseParser.BETWEEN)
                            | (1 << SqlBaseParser.LIKE)
                            | (1 << SqlBaseParser.RLIKE)
                            | (1 << SqlBaseParser.IS)
                            | (1 << SqlBaseParser.NULL)
                            | (1 << SqlBaseParser.TRUE)
                            | (1 << SqlBaseParser.FALSE)
                            | (1 << SqlBaseParser.NULLS)
                            | (1 << SqlBaseParser.ASC)
                            | (1 << SqlBaseParser.DESC)
                            | (1 << SqlBaseParser.FOR)
                            | (1 << SqlBaseParser.INTERVAL)
                            | (1 << SqlBaseParser.CASE)
                            | (1 << SqlBaseParser.WHEN)
                            | (1 << SqlBaseParser.THEN)
                            | (1 << SqlBaseParser.ELSE)
                            | (1 << SqlBaseParser.END)
                            | (1 << SqlBaseParser.OUTER)
                            | (1 << SqlBaseParser.LATERAL)
                            | (1 << SqlBaseParser.WINDOW)
                            | (1 << SqlBaseParser.OVER)
                            | (1 << SqlBaseParser.PARTITION)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 64)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 64))
                        & (
                            (1 << (SqlBaseParser.RANGE - 64))
                            | (1 << (SqlBaseParser.ROWS - 64))
                            | (1 << (SqlBaseParser.UNBOUNDED - 64))
                            | (1 << (SqlBaseParser.PRECEDING - 64))
                            | (1 << (SqlBaseParser.FOLLOWING - 64))
                            | (1 << (SqlBaseParser.CURRENT - 64))
                            | (1 << (SqlBaseParser.FIRST - 64))
                            | (1 << (SqlBaseParser.AFTER - 64))
                            | (1 << (SqlBaseParser.LAST - 64))
                            | (1 << (SqlBaseParser.ROW - 64))
                            | (1 << (SqlBaseParser.WITH - 64))
                            | (1 << (SqlBaseParser.VALUES - 64))
                            | (1 << (SqlBaseParser.CREATE - 64))
                            | (1 << (SqlBaseParser.TABLE - 64))
                            | (1 << (SqlBaseParser.DIRECTORY - 64))
                            | (1 << (SqlBaseParser.VIEW - 64))
                            | (1 << (SqlBaseParser.REPLACE - 64))
                            | (1 << (SqlBaseParser.INSERT - 64))
                            | (1 << (SqlBaseParser.DELETE - 64))
                            | (1 << (SqlBaseParser.INTO - 64))
                            | (1 << (SqlBaseParser.DESCRIBE - 64))
                            | (1 << (SqlBaseParser.EXPLAIN - 64))
                            | (1 << (SqlBaseParser.FORMAT - 64))
                            | (1 << (SqlBaseParser.LOGICAL - 64))
                            | (1 << (SqlBaseParser.CODEGEN - 64))
                            | (1 << (SqlBaseParser.COST - 64))
                            | (1 << (SqlBaseParser.CAST - 64))
                            | (1 << (SqlBaseParser.SHOW - 64))
                            | (1 << (SqlBaseParser.TABLES - 64))
                            | (1 << (SqlBaseParser.COLUMNS - 64))
                            | (1 << (SqlBaseParser.COLUMN - 64))
                            | (1 << (SqlBaseParser.USE - 64))
                            | (1 << (SqlBaseParser.PARTITIONS - 64))
                            | (1 << (SqlBaseParser.FUNCTIONS - 64))
                            | (1 << (SqlBaseParser.DROP - 64))
                            | (1 << (SqlBaseParser.TO - 64))
                            | (1 << (SqlBaseParser.TABLESAMPLE - 64))
                            | (1 << (SqlBaseParser.STRATIFY - 64))
                            | (1 << (SqlBaseParser.ALTER - 64))
                            | (1 << (SqlBaseParser.RENAME - 64))
                            | (1 << (SqlBaseParser.ARRAY - 64))
                            | (1 << (SqlBaseParser.MAP - 64))
                            | (1 << (SqlBaseParser.STRUCT - 64))
                            | (1 << (SqlBaseParser.COMMENT - 64))
                            | (1 << (SqlBaseParser.SET - 64))
                            | (1 << (SqlBaseParser.RESET - 64))
                            | (1 << (SqlBaseParser.DATA - 64))
                            | (1 << (SqlBaseParser.START - 64))
                            | (1 << (SqlBaseParser.TRANSACTION - 64))
                            | (1 << (SqlBaseParser.COMMIT - 64))
                            | (1 << (SqlBaseParser.ROLLBACK - 64))
                            | (1 << (SqlBaseParser.MACRO - 64))
                            | (1 << (SqlBaseParser.IGNORE - 64))
                            | (1 << (SqlBaseParser.BOTH - 64))
                            | (1 << (SqlBaseParser.LEADING - 64))
                            | (1 << (SqlBaseParser.TRAILING - 64))
                            | (1 << (SqlBaseParser.IF - 64))
                            | (1 << (SqlBaseParser.POSITION - 64))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 139)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 139))
                        & (
                            (1 << (SqlBaseParser.DIV - 139))
                            | (1 << (SqlBaseParser.PERCENTLIT - 139))
                            | (1 << (SqlBaseParser.BUCKET - 139))
                            | (1 << (SqlBaseParser.OUT - 139))
                            | (1 << (SqlBaseParser.OF - 139))
                            | (1 << (SqlBaseParser.SORT - 139))
                            | (1 << (SqlBaseParser.CLUSTER - 139))
                            | (1 << (SqlBaseParser.DISTRIBUTE - 139))
                            | (1 << (SqlBaseParser.OVERWRITE - 139))
                            | (1 << (SqlBaseParser.TRANSFORM - 139))
                            | (1 << (SqlBaseParser.REDUCE - 139))
                            | (1 << (SqlBaseParser.SERDE - 139))
                            | (1 << (SqlBaseParser.SERDEPROPERTIES - 139))
                            | (1 << (SqlBaseParser.RECORDREADER - 139))
                            | (1 << (SqlBaseParser.RECORDWRITER - 139))
                            | (1 << (SqlBaseParser.DELIMITED - 139))
                            | (1 << (SqlBaseParser.FIELDS - 139))
                            | (1 << (SqlBaseParser.TERMINATED - 139))
                            | (1 << (SqlBaseParser.COLLECTION - 139))
                            | (1 << (SqlBaseParser.ITEMS - 139))
                            | (1 << (SqlBaseParser.KEYS - 139))
                            | (1 << (SqlBaseParser.ESCAPED - 139))
                            | (1 << (SqlBaseParser.LINES - 139))
                            | (1 << (SqlBaseParser.SEPARATED - 139))
                            | (1 << (SqlBaseParser.FUNCTION - 139))
                            | (1 << (SqlBaseParser.EXTENDED - 139))
                            | (1 << (SqlBaseParser.REFRESH - 139))
                            | (1 << (SqlBaseParser.CLEAR - 139))
                            | (1 << (SqlBaseParser.CACHE - 139))
                            | (1 << (SqlBaseParser.UNCACHE - 139))
                            | (1 << (SqlBaseParser.LAZY - 139))
                            | (1 << (SqlBaseParser.FORMATTED - 139))
                            | (1 << (SqlBaseParser.GLOBAL - 139))
                            | (1 << (SqlBaseParser.TEMPORARY - 139))
                            | (1 << (SqlBaseParser.OPTIONS - 139))
                            | (1 << (SqlBaseParser.UNSET - 139))
                            | (1 << (SqlBaseParser.TBLPROPERTIES - 139))
                            | (1 << (SqlBaseParser.DBPROPERTIES - 139))
                            | (1 << (SqlBaseParser.BUCKETS - 139))
                            | (1 << (SqlBaseParser.SKEWED - 139))
                            | (1 << (SqlBaseParser.STORED - 139))
                            | (1 << (SqlBaseParser.DIRECTORIES - 139))
                            | (1 << (SqlBaseParser.LOCATION - 139))
                            | (1 << (SqlBaseParser.EXCHANGE - 139))
                            | (1 << (SqlBaseParser.ARCHIVE - 139))
                            | (1 << (SqlBaseParser.UNARCHIVE - 139))
                            | (1 << (SqlBaseParser.FILEFORMAT - 139))
                            | (1 << (SqlBaseParser.TOUCH - 139))
                            | (1 << (SqlBaseParser.COMPACT - 139))
                            | (1 << (SqlBaseParser.CONCATENATE - 139))
                            | (1 << (SqlBaseParser.CHANGE - 139))
                            | (1 << (SqlBaseParser.CASCADE - 139))
                            | (1 << (SqlBaseParser.RESTRICT - 139))
                            | (1 << (SqlBaseParser.CLUSTERED - 139))
                            | (1 << (SqlBaseParser.SORTED - 139))
                            | (1 << (SqlBaseParser.PURGE - 139))
                            | (1 << (SqlBaseParser.INPUTFORMAT - 139))
                            | (1 << (SqlBaseParser.OUTPUTFORMAT - 139))
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 203)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 203))
                        & (
                            (1 << (SqlBaseParser.DATABASE - 203))
                            | (1 << (SqlBaseParser.DATABASES - 203))
                            | (1 << (SqlBaseParser.DFS - 203))
                            | (1 << (SqlBaseParser.TRUNCATE - 203))
                            | (1 << (SqlBaseParser.ANALYZE - 203))
                            | (1 << (SqlBaseParser.COMPUTE - 203))
                            | (1 << (SqlBaseParser.LIST - 203))
                            | (1 << (SqlBaseParser.STATISTICS - 203))
                            | (1 << (SqlBaseParser.PARTITIONED - 203))
                            | (1 << (SqlBaseParser.EXTERNAL - 203))
                            | (1 << (SqlBaseParser.DEFINED - 203))
                            | (1 << (SqlBaseParser.REVOKE - 203))
                            | (1 << (SqlBaseParser.GRANT - 203))
                            | (1 << (SqlBaseParser.LOCK - 203))
                            | (1 << (SqlBaseParser.UNLOCK - 203))
                            | (1 << (SqlBaseParser.MSCK - 203))
                            | (1 << (SqlBaseParser.REPAIR - 203))
                            | (1 << (SqlBaseParser.RECOVER - 203))
                            | (1 << (SqlBaseParser.EXPORT - 203))
                            | (1 << (SqlBaseParser.IMPORT - 203))
                            | (1 << (SqlBaseParser.LOAD - 203))
                            | (1 << (SqlBaseParser.ROLE - 203))
                            | (1 << (SqlBaseParser.ROLES - 203))
                            | (1 << (SqlBaseParser.COMPACTIONS - 203))
                            | (1 << (SqlBaseParser.PRINCIPALS - 203))
                            | (1 << (SqlBaseParser.TRANSACTIONS - 203))
                            | (1 << (SqlBaseParser.INDEX - 203))
                            | (1 << (SqlBaseParser.INDEXES - 203))
                            | (1 << (SqlBaseParser.LOCKS - 203))
                            | (1 << (SqlBaseParser.OPTION - 203))
                            | (1 << (SqlBaseParser.LOCAL - 203))
                            | (1 << (SqlBaseParser.INPATH - 203))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[35] = self.queryTerm_sempred
        self._predicates[68] = self.booleanExpression_sempred
        self._predicates[71] = self.valueExpression_sempred
        self._predicates[72] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx: QueryTermContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def booleanExpression_sempred(
        self, localctx: BooleanExpressionContext, predIndex: int
    ):
        if predIndex == 1:
            return self.precpred(self._ctx, 2)

        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def valueExpression_sempred(self, localctx: ValueExpressionContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 6)

        if predIndex == 4:
            return self.precpred(self._ctx, 5)

        if predIndex == 5:
            return self.precpred(self._ctx, 4)

        if predIndex == 6:
            return self.precpred(self._ctx, 3)

        if predIndex == 7:
            return self.precpred(self._ctx, 2)

        if predIndex == 8:
            return self.precpred(self._ctx, 1)

    def primaryExpression_sempred(
        self, localctx: PrimaryExpressionContext, predIndex: int
    ):
        if predIndex == 9:
            return self.precpred(self._ctx, 4)

        if predIndex == 10:
            return self.precpred(self._ctx, 2)
