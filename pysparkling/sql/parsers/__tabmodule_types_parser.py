
# __tabmodule_types_parser.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "expressionArrayType BinaryType BooleanType ByteType COMMENT CharType DateType DecimalType DoubleType FloatType ID IntegerType LongType MapType NUMBER NullType ShortType StringType StructType TEXT TimestampType VarcharType\n    expression : expression_with_colon\n               | expression_without_colon\n               | datatype\n    \n    component_without_colon : ID datatype\n\n    component_with_colon : ID ':' datatype\n    \n    expression_with_colon : expression_with_colon ',' component_with_colon\n                          | component_with_colon\n\n    expression_without_colon : expression_without_colon ',' component_without_colon\n                             | component_without_colon\n\n    structfields : structfields ',' structfield\n                 | structfield\n    \n    decimal : DecimalType '(' NUMBER ',' NUMBER ')'\n            | DecimalType '(' NUMBER ')'\n            | DecimalType\n    \n    primitive_datatype : BooleanType\n                       | ByteType\n                       | ShortType\n                       | IntegerType\n                       | LongType\n                       | FloatType\n                       | DoubleType\n                       | DateType\n                       | TimestampType\n                       | StringType\n                       | BinaryType\n                       | NullType\n    \n    datatype_name : BooleanType\n                  | ByteType\n                  | ShortType\n                  | IntegerType\n                  | LongType\n                  | FloatType\n                  | DoubleType\n                  | DateType\n                  | TimestampType\n                  | StringType\n                  | BinaryType\n                  | NullType\n                  | DecimalType\n                  | ArrayType\n                  | MapType\n                  | StructType\n                  | CharType\n                  | VarcharType\n    \n    datatype : primitive_datatype\n             | decimal\n             | array\n             | map\n             | struct\n             | empty_struct\n             | varchar\n    \n    varchar : CharType '(' NUMBER ')'\n            | VarcharType '(' NUMBER ')'\n    \n    array : ArrayType '<' datatype '>'\n    \n    map : MapType '<' datatype ',' datatype '>'\n    \n    structfield : ID ':' datatype\n                | ID ':' datatype COMMENT TEXT\n                | datatype_name ':' datatype\n                | datatype_name ':' datatype COMMENT TEXT\n    \n    struct : StructType '<' structfields '>'\n    \n    empty_struct : StructType '<' '>'\n    "
    
_lr_action_items = {'ID':([0,33,34,40,81,],[14,44,46,55,55,]),'BooleanType':([0,14,35,38,39,40,46,79,81,82,83,],[15,15,15,15,15,57,15,15,57,15,15,]),'ByteType':([0,14,35,38,39,40,46,79,81,82,83,],[16,16,16,16,16,58,16,16,58,16,16,]),'ShortType':([0,14,35,38,39,40,46,79,81,82,83,],[17,17,17,17,17,59,17,17,59,17,17,]),'IntegerType':([0,14,35,38,39,40,46,79,81,82,83,],[18,18,18,18,18,60,18,18,60,18,18,]),'LongType':([0,14,35,38,39,40,46,79,81,82,83,],[19,19,19,19,19,61,19,19,61,19,19,]),'FloatType':([0,14,35,38,39,40,46,79,81,82,83,],[20,20,20,20,20,62,20,20,62,20,20,]),'DoubleType':([0,14,35,38,39,40,46,79,81,82,83,],[21,21,21,21,21,63,21,21,63,21,21,]),'DateType':([0,14,35,38,39,40,46,79,81,82,83,],[22,22,22,22,22,64,22,22,64,22,22,]),'TimestampType':([0,14,35,38,39,40,46,79,81,82,83,],[23,23,23,23,23,65,23,23,65,23,23,]),'StringType':([0,14,35,38,39,40,46,79,81,82,83,],[24,24,24,24,24,66,24,24,66,24,24,]),'BinaryType':([0,14,35,38,39,40,46,79,81,82,83,],[25,25,25,25,25,67,25,25,67,25,25,]),'NullType':([0,14,35,38,39,40,46,79,81,82,83,],[26,26,26,26,26,68,26,26,68,26,26,]),'DecimalType':([0,14,35,38,39,40,46,79,81,82,83,],[27,27,27,27,27,69,27,27,69,27,27,]),'ArrayType':([0,14,35,38,39,40,46,79,81,82,83,],[28,28,28,28,28,70,28,28,70,28,28,]),'MapType':([0,14,35,38,39,40,46,79,81,82,83,],[29,29,29,29,29,71,29,29,71,29,29,]),'StructType':([0,14,35,38,39,40,46,79,81,82,83,],[30,30,30,30,30,51,30,30,51,30,30,]),'CharType':([0,14,35,38,39,40,46,79,81,82,83,],[31,31,31,31,31,72,31,31,72,31,31,]),'VarcharType':([0,14,35,38,39,40,46,79,81,82,83,],[32,32,32,32,32,73,32,32,73,32,32,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,36,43,45,47,53,77,78,80,84,85,91,92,],[0,-1,-2,-3,-7,-9,-45,-46,-47,-48,-49,-50,-51,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-14,-4,-6,-8,-5,-61,-13,-54,-60,-52,-53,-12,-55,]),',':([2,3,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,36,43,45,47,48,50,52,53,54,77,78,80,84,85,88,89,90,91,92,95,96,],[33,34,-7,-9,-45,-46,-47,-48,-49,-50,-51,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-14,-4,-6,-8,-5,76,79,81,-61,-11,-13,-54,-60,-52,-53,-10,-56,-58,-12,-55,-57,-59,]),'>':([7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,40,49,52,53,54,77,78,80,84,85,87,88,89,90,91,92,95,96,],[-45,-46,-47,-48,-49,-50,-51,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-14,53,78,80,-61,-11,-13,-54,-60,-52,-53,92,-10,-56,-58,-12,-55,-57,-59,]),'COMMENT':([7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,53,77,78,80,84,85,89,90,91,92,],[-45,-46,-47,-48,-49,-50,-51,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-14,-61,-13,-54,-60,-52,-53,93,94,-12,-55,]),':':([14,44,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[35,35,-42,82,83,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-43,-44,]),'(':([27,31,32,],[37,41,42,]),'<':([28,29,30,],[38,39,40,]),'NUMBER':([37,41,42,76,],[48,74,75,86,]),')':([48,74,75,86,],[77,84,85,91,]),'TEXT':([93,94,],[95,96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),'expression_with_colon':([0,],[2,]),'expression_without_colon':([0,],[3,]),'datatype':([0,14,35,38,39,46,79,82,83,],[4,36,47,49,50,36,87,89,90,]),'component_with_colon':([0,33,],[5,43,]),'component_without_colon':([0,34,],[6,45,]),'primitive_datatype':([0,14,35,38,39,46,79,82,83,],[7,7,7,7,7,7,7,7,7,]),'decimal':([0,14,35,38,39,46,79,82,83,],[8,8,8,8,8,8,8,8,8,]),'array':([0,14,35,38,39,46,79,82,83,],[9,9,9,9,9,9,9,9,9,]),'map':([0,14,35,38,39,46,79,82,83,],[10,10,10,10,10,10,10,10,10,]),'struct':([0,14,35,38,39,46,79,82,83,],[11,11,11,11,11,11,11,11,11,]),'empty_struct':([0,14,35,38,39,46,79,82,83,],[12,12,12,12,12,12,12,12,12,]),'varchar':([0,14,35,38,39,46,79,82,83,],[13,13,13,13,13,13,13,13,13,]),'structfields':([40,],[52,]),'structfield':([40,81,],[54,88,]),'datatype_name':([40,81,],[56,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression_with_colon','expression',1,'p_expression','types_parser.py',102),
  ('expression -> expression_without_colon','expression',1,'p_expression','types_parser.py',103),
  ('expression -> datatype','expression',1,'p_expression','types_parser.py',104),
  ('component_without_colon -> ID datatype','component_without_colon',2,'p_component_without_colon','types_parser.py',114),
  ('component_with_colon -> ID : datatype','component_with_colon',3,'p_component_without_colon','types_parser.py',116),
  ('expression_with_colon -> expression_with_colon , component_with_colon','expression_with_colon',3,'p_expression_handling','types_parser.py',126),
  ('expression_with_colon -> component_with_colon','expression_with_colon',1,'p_expression_handling','types_parser.py',127),
  ('expression_without_colon -> expression_without_colon , component_without_colon','expression_without_colon',3,'p_expression_handling','types_parser.py',129),
  ('expression_without_colon -> component_without_colon','expression_without_colon',1,'p_expression_handling','types_parser.py',130),
  ('structfields -> structfields , structfield','structfields',3,'p_expression_handling','types_parser.py',132),
  ('structfields -> structfield','structfields',1,'p_expression_handling','types_parser.py',133),
  ('decimal -> DecimalType ( NUMBER , NUMBER )','decimal',6,'p_decimal','types_parser.py',143),
  ('decimal -> DecimalType ( NUMBER )','decimal',4,'p_decimal','types_parser.py',144),
  ('decimal -> DecimalType','decimal',1,'p_decimal','types_parser.py',145),
  ('primitive_datatype -> BooleanType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',157),
  ('primitive_datatype -> ByteType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',158),
  ('primitive_datatype -> ShortType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',159),
  ('primitive_datatype -> IntegerType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',160),
  ('primitive_datatype -> LongType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',161),
  ('primitive_datatype -> FloatType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',162),
  ('primitive_datatype -> DoubleType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',163),
  ('primitive_datatype -> DateType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',164),
  ('primitive_datatype -> TimestampType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',165),
  ('primitive_datatype -> StringType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',166),
  ('primitive_datatype -> BinaryType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',167),
  ('primitive_datatype -> NullType','primitive_datatype',1,'p_primitive_datatype','types_parser.py',168),
  ('datatype_name -> BooleanType','datatype_name',1,'p_datatype_name','types_parser.py',183),
  ('datatype_name -> ByteType','datatype_name',1,'p_datatype_name','types_parser.py',184),
  ('datatype_name -> ShortType','datatype_name',1,'p_datatype_name','types_parser.py',185),
  ('datatype_name -> IntegerType','datatype_name',1,'p_datatype_name','types_parser.py',186),
  ('datatype_name -> LongType','datatype_name',1,'p_datatype_name','types_parser.py',187),
  ('datatype_name -> FloatType','datatype_name',1,'p_datatype_name','types_parser.py',188),
  ('datatype_name -> DoubleType','datatype_name',1,'p_datatype_name','types_parser.py',189),
  ('datatype_name -> DateType','datatype_name',1,'p_datatype_name','types_parser.py',190),
  ('datatype_name -> TimestampType','datatype_name',1,'p_datatype_name','types_parser.py',191),
  ('datatype_name -> StringType','datatype_name',1,'p_datatype_name','types_parser.py',192),
  ('datatype_name -> BinaryType','datatype_name',1,'p_datatype_name','types_parser.py',193),
  ('datatype_name -> NullType','datatype_name',1,'p_datatype_name','types_parser.py',194),
  ('datatype_name -> DecimalType','datatype_name',1,'p_datatype_name','types_parser.py',195),
  ('datatype_name -> ArrayType','datatype_name',1,'p_datatype_name','types_parser.py',196),
  ('datatype_name -> MapType','datatype_name',1,'p_datatype_name','types_parser.py',197),
  ('datatype_name -> StructType','datatype_name',1,'p_datatype_name','types_parser.py',198),
  ('datatype_name -> CharType','datatype_name',1,'p_datatype_name','types_parser.py',199),
  ('datatype_name -> VarcharType','datatype_name',1,'p_datatype_name','types_parser.py',200),
  ('datatype -> primitive_datatype','datatype',1,'p_datatype','types_parser.py',207),
  ('datatype -> decimal','datatype',1,'p_datatype','types_parser.py',208),
  ('datatype -> array','datatype',1,'p_datatype','types_parser.py',209),
  ('datatype -> map','datatype',1,'p_datatype','types_parser.py',210),
  ('datatype -> struct','datatype',1,'p_datatype','types_parser.py',211),
  ('datatype -> empty_struct','datatype',1,'p_datatype','types_parser.py',212),
  ('datatype -> varchar','datatype',1,'p_datatype','types_parser.py',213),
  ('varchar -> CharType ( NUMBER )','varchar',4,'p_varchar','types_parser.py',220),
  ('varchar -> VarcharType ( NUMBER )','varchar',4,'p_varchar','types_parser.py',221),
  ('array -> ArrayType < datatype >','array',4,'p_array','types_parser.py',228),
  ('map -> MapType < datatype , datatype >','map',6,'p_map','types_parser.py',235),
  ('structfield -> ID : datatype','structfield',3,'p_structfield','types_parser.py',242),
  ('structfield -> ID : datatype COMMENT TEXT','structfield',5,'p_structfield','types_parser.py',243),
  ('structfield -> datatype_name : datatype','structfield',3,'p_structfield','types_parser.py',244),
  ('structfield -> datatype_name : datatype COMMENT TEXT','structfield',5,'p_structfield','types_parser.py',245),
  ('struct -> StructType < structfields >','struct',4,'p_struct','types_parser.py',256),
  ('empty_struct -> StructType < >','empty_struct',3,'p_empty_struct','types_parser.py',263),
]
